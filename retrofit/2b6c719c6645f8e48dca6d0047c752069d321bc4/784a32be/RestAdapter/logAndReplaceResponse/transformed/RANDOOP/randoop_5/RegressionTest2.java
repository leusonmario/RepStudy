import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder0.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        java.lang.Class<?> wildcardClass30 = builder26.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.Profiler profiler38 = builder35.profiler;
        retrofit.ErrorHandler errorHandler39 = builder35.errorHandler;
        retrofit.RestAdapter.Log log40 = builder35.log;
        restAdapter0.log = log40;
        retrofit.converter.Converter converter42 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.Server server57 = restAdapter56.server;
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter56.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter56.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.logLevel;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider76 = null;
        builder68.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        builder78.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder78.setServer("hi!");
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log85 = restAdapter82.log;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter82.logLevel = logLevel86;
        retrofit.RestAdapter.Builder builder88 = builder81.setLogLevel(logLevel86);
        retrofit.client.Client.Provider provider89 = null;
        builder81.clientProvider = provider89;
        retrofit.ErrorHandler errorHandler91 = builder81.errorHandler;
        retrofit.RestAdapter.Builder builder92 = builder68.setErrorHandler(errorHandler91);
        restAdapter63.errorHandler = errorHandler91;
        retrofit.RestAdapter.Builder builder94 = builder61.setErrorHandler(errorHandler91);
        restAdapter0.errorHandler = errorHandler91;
        retrofit.Server server96 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(server96);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter22.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder21.setLogLevel(logLevel29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter31.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.client.Client.Provider provider46 = null;
        builder38.clientProvider = provider46;
        retrofit.ErrorHandler errorHandler48 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.Server server60 = builder52.server;
        retrofit.RestAdapter.Builder builder61 = builder38.setServer(server60);
        retrofit.converter.Converter converter62 = builder61.converter;
        restAdapter31.converter = converter62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = builder64.setServer("hi!");
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log71 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = builder67.setLogLevel(logLevel72);
        retrofit.client.Client.Provider provider75 = null;
        builder67.clientProvider = provider75;
        retrofit.RequestInterceptor requestInterceptor77 = builder67.requestInterceptor;
        retrofit.RestAdapter restAdapter78 = builder67.build();
        java.util.concurrent.Executor executor79 = restAdapter78.callbackExecutor;
        retrofit.converter.Converter converter80 = restAdapter78.converter;
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        restAdapter31.log = log81;
        retrofit.RestAdapter.Builder builder83 = builder30.setLog(log81);
        retrofit.RestAdapter.Log log84 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder85 = builder30.setLog(log84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(converter80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder12 = builder7.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        restAdapter0.setLogLevel(logLevel17);
        retrofit.Server server21 = restAdapter0.server;
        retrofit.client.Response response23 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response25 = restAdapter0.logAndReplaceResponse("hi!", response23, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(server21);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        retrofit.Server server50 = builder3.server;
        retrofit.RestAdapter restAdapter51 = builder3.build();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = builder55.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = builder55.build();
        retrofit.ErrorHandler errorHandler67 = builder55.errorHandler;
        retrofit.converter.Converter converter68 = builder55.converter;
        retrofit.RestAdapter.Builder builder69 = builder3.setConverter(converter68);
        retrofit.RequestInterceptor requestInterceptor70 = builder69.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("", response9, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        java.util.concurrent.Executor executor50 = builder3.callbackExecutor;
        retrofit.ErrorHandler errorHandler51 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder53 = builder3.setServer("Retrofit-Idle");
        retrofit.client.Client client54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder53.setClient(client54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder9 = builder4.setLogLevel(logLevel8);
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        java.util.concurrent.Executor executor12 = builder4.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder18 = builder13.setLogLevel(logLevel17);
        retrofit.converter.Converter converter19 = null;
        builder13.converter = converter19;
        java.util.concurrent.Executor executor21 = builder13.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = builder3.setExecutors(executor12, executor21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder28 = builder23.setLogLevel(logLevel27);
        builder3.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        restAdapter35.log = log49;
        builder34.log = log49;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        retrofit.Server server68 = builder60.server;
        builder34.server = server68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder80 = builder73.setLogLevel(logLevel78);
        retrofit.client.Client.Provider provider81 = null;
        builder73.clientProvider = provider81;
        retrofit.RequestInterceptor requestInterceptor83 = builder73.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = builder34.setRequestInterceptor(requestInterceptor83);
        retrofit.RestAdapter.Builder builder85 = builder30.setRequestInterceptor(requestInterceptor83);
        java.util.concurrent.Executor executor86 = builder30.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel87 = builder30.logLevel;
        builder3.logLevel = logLevel87;
        retrofit.Profiler profiler89 = builder3.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler89);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder9 = builder4.setLogLevel(logLevel8);
        retrofit.converter.Converter converter10 = null;
        builder4.converter = converter10;
        java.util.concurrent.Executor executor12 = builder4.callbackExecutor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder18 = builder13.setLogLevel(logLevel17);
        retrofit.converter.Converter converter19 = null;
        builder13.converter = converter19;
        java.util.concurrent.Executor executor21 = builder13.callbackExecutor;
        retrofit.RestAdapter.Builder builder22 = builder3.setExecutors(executor12, executor21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder28 = builder23.setLogLevel(logLevel27);
        builder3.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        restAdapter35.log = log49;
        builder34.log = log49;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        retrofit.Server server68 = builder60.server;
        builder34.server = server68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder80 = builder73.setLogLevel(logLevel78);
        retrofit.client.Client.Provider provider81 = null;
        builder73.clientProvider = provider81;
        retrofit.RequestInterceptor requestInterceptor83 = builder73.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = builder34.setRequestInterceptor(requestInterceptor83);
        retrofit.RestAdapter.Builder builder85 = builder30.setRequestInterceptor(requestInterceptor83);
        java.util.concurrent.Executor executor86 = builder30.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel87 = builder30.logLevel;
        builder3.logLevel = logLevel87;
        builder3.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder25 = builder20.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = builder26.callbackExecutor;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.RestAdapter.Log log30 = builder26.log;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        java.util.concurrent.Executor executor42 = builder34.callbackExecutor;
        builder26.httpExecutor = executor42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider55 = null;
        builder47.clientProvider = provider55;
        retrofit.RequestInterceptor requestInterceptor57 = builder47.requestInterceptor;
        retrofit.RestAdapter restAdapter58 = builder47.build();
        java.util.concurrent.Executor executor59 = restAdapter58.callbackExecutor;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.Log log62 = restAdapter60.log;
        retrofit.ErrorHandler errorHandler63 = restAdapter60.errorHandler;
        retrofit.RequestInterceptor requestInterceptor64 = restAdapter60.requestInterceptor;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider76 = null;
        builder68.clientProvider = provider76;
        retrofit.ErrorHandler errorHandler78 = builder68.errorHandler;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        retrofit.Server server90 = builder82.server;
        retrofit.RestAdapter.Builder builder91 = builder68.setServer(server90);
        java.util.concurrent.Executor executor92 = builder91.httpExecutor;
        restAdapter60.httpExecutor = executor92;
        retrofit.RestAdapter.Builder builder94 = builder26.setExecutors(executor59, executor92);
        builder20.httpExecutor = executor92;
        restAdapter0.httpExecutor = executor92;
        retrofit.RestAdapter.Log log97 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel98 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(log97);
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.Server server4 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder10 = builder5.setLogLevel(logLevel9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.Log log23 = restAdapter20.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter20.logLevel = logLevel24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel37);
        restAdapter20.log = log34;
        builder19.log = log34;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log34, logLevel53);
        retrofit.RestAdapter.Builder builder57 = builder5.setLog(log34);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel66);
        retrofit.RestAdapter restAdapter69 = builder61.build();
        retrofit.converter.Converter converter70 = builder61.converter;
        retrofit.RestAdapter.Builder builder71 = builder5.setConverter(converter70);
        restAdapter0.converter = converter70;
        java.util.concurrent.Executor executor73 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(converter70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor73);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.Server server32 = builder24.server;
        retrofit.RestAdapter.Builder builder33 = builder10.setServer(server32);
        retrofit.converter.Converter converter34 = builder33.converter;
        java.util.concurrent.Executor executor35 = builder33.callbackExecutor;
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        retrofit.RestAdapter.Log log37 = builder33.log;
        retrofit.RestAdapter.Builder builder38 = builder3.setLog(log37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.client.Client.Provider provider56 = null;
        builder48.clientProvider = provider56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider69 = null;
        builder61.clientProvider = provider69;
        retrofit.ErrorHandler errorHandler71 = builder61.errorHandler;
        retrofit.RestAdapter.Builder builder72 = builder48.setErrorHandler(errorHandler71);
        restAdapter39.errorHandler = errorHandler71;
        builder3.errorHandler = errorHandler71;
        builder3.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor76 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(requestInterceptor76);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log35, logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder10.setLog(log35);
        retrofit.RestAdapter restAdapter59 = builder10.build();
        retrofit.RestAdapter.LogLevel logLevel60 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("hi!");
        retrofit.Profiler profiler74 = builder71.profiler;
        retrofit.ErrorHandler errorHandler75 = builder71.errorHandler;
        retrofit.Server server76 = builder71.server;
        retrofit.RestAdapter.Log log77 = builder71.log;
        retrofit.RestAdapter.LogLevel logLevel78 = builder71.logLevel;
        java.util.concurrent.Executor executor79 = builder71.callbackExecutor;
        builder10.httpExecutor = executor79;
        java.lang.Class<?> wildcardClass81 = executor79.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.converter.Converter converter7 = builder4.converter;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder13 = builder8.setLogLevel(logLevel12);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.client.Client.Provider provider32 = null;
        builder24.clientProvider = provider32;
        retrofit.ErrorHandler errorHandler34 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.Server server46 = builder38.server;
        retrofit.RestAdapter.Builder builder47 = builder24.setServer(server46);
        retrofit.RestAdapter.Log log48 = builder47.log;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.Server server50 = restAdapter49.server;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        restAdapter49.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder67 = builder47.setClient(provider65);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Builder builder73 = builder47.setServer(server72);
        builder20.server = server72;
        builder4.server = server72;
        java.util.concurrent.Executor executor76 = builder4.callbackExecutor;
        retrofit.ErrorHandler errorHandler77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder4.setErrorHandler(errorHandler77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(executor76);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.client.Response response9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response9, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        restAdapter16.log = log30;
        builder15.log = log30;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log30, logLevel49);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.Server server55 = restAdapter52.server;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter52.logLevel;
        restAdapter0.setLogLevel(logLevel56);
        java.lang.Throwable throwable58 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable58, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.converter.Converter converter53 = null;
        builder0.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder60 = builder55.setLogLevel(logLevel59);
        retrofit.Server server61 = null;
        builder55.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.RequestInterceptor requestInterceptor76 = builder66.requestInterceptor;
        retrofit.RestAdapter restAdapter77 = builder66.build();
        retrofit.ErrorHandler errorHandler78 = builder66.errorHandler;
        retrofit.converter.Converter converter79 = builder66.converter;
        retrofit.RestAdapter.Builder builder80 = builder55.setConverter(converter79);
        builder0.converter = converter79;
        builder0.ensureSaneDefaults();
        retrofit.Server server83 = builder0.server;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server83);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter9.logLevel = logLevel11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        retrofit.converter.Converter converter15 = restAdapter13.converter;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = builder27.clientProvider;
        restAdapter13.clientProvider = provider28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter13.logLevel;
        java.util.concurrent.Executor executor31 = restAdapter13.callbackExecutor;
        retrofit.Profiler profiler32 = restAdapter13.profiler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter33.errorHandler = errorHandler37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.Server server40 = restAdapter39.server;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter39.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        restAdapter39.clientProvider = provider55;
        restAdapter33.clientProvider = provider55;
        retrofit.RestAdapter.Log log58 = restAdapter33.log;
        java.util.concurrent.Executor executor59 = restAdapter33.httpExecutor;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.converter.Converter converter66 = restAdapter60.converter;
        java.util.concurrent.Executor executor67 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider79 = null;
        builder71.clientProvider = provider79;
        retrofit.RequestInterceptor requestInterceptor81 = builder71.requestInterceptor;
        retrofit.RestAdapter restAdapter82 = builder71.build();
        retrofit.ErrorHandler errorHandler83 = builder71.errorHandler;
        retrofit.converter.Converter converter84 = builder71.converter;
        restAdapter60.converter = converter84;
        restAdapter33.converter = converter84;
        restAdapter13.converter = converter84;
        retrofit.client.Request request88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request89 = restAdapter13.logAndReplaceRequest(request88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(converter84);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = null;
        builder15.clientProvider = provider23;
        retrofit.ErrorHandler errorHandler25 = builder15.errorHandler;
        retrofit.Server server26 = builder15.server;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.Server server38 = builder30.server;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.Log log41 = restAdapter39.log;
        java.util.concurrent.Executor executor42 = restAdapter39.httpExecutor;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        restAdapter39.log = log51;
        builder30.log = log51;
        retrofit.RestAdapter.Builder builder59 = builder15.setLog(log51);
        retrofit.RestAdapter.Builder builder60 = builder10.setLog(log51);
        log51.log("Retrofit-Idle");
        java.lang.Class<?> wildcardClass63 = log51.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.ErrorHandler errorHandler10 = null;
        restAdapter8.errorHandler = errorHandler10;
        retrofit.Profiler profiler12 = restAdapter8.profiler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter8.new RestHandler();
        retrofit.Profiler profiler14 = null;
        restAdapter8.profiler = profiler14;
        retrofit.converter.Converter converter16 = restAdapter8.converter;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter8.new RestHandler();
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        restAdapter25.log = log39;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.ErrorHandler errorHandler50 = null;
        restAdapter46.errorHandler = errorHandler50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.Server server53 = restAdapter52.server;
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter52.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("hi!");
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        restAdapter52.clientProvider = provider68;
        restAdapter46.clientProvider = provider68;
        restAdapter25.clientProvider = provider68;
        restAdapter18.clientProvider = provider68;
        restAdapter8.clientProvider = provider68;
        restAdapter0.clientProvider = provider68;
        java.lang.Throwable throwable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable75, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(provider68);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel25);
        restAdapter8.log = log22;
        builder7.log = log22;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.Server server41 = builder33.server;
        builder7.server = server41;
        retrofit.Server server43 = builder7.server;
        restAdapter0.server = server43;
        retrofit.RestAdapter.Log log45 = restAdapter0.log;
        retrofit.Profiler profiler46 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNull(requestInterceptor47);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        retrofit.RestAdapter restAdapter28 = builder27.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.Server server43 = restAdapter42.server;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter42.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter42.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel45);
        boolean boolean48 = logLevel45.log();
        restAdapter28.logLevel = logLevel45;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter28.logLevel;
        java.lang.Throwable throwable51 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter28.logException(throwable51, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.converter.Converter converter20 = null;
        builder14.converter = converter20;
        java.util.concurrent.Executor executor22 = builder14.callbackExecutor;
        retrofit.RestAdapter restAdapter23 = builder14.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider35 = builder34.clientProvider;
        retrofit.ErrorHandler errorHandler36 = builder34.errorHandler;
        retrofit.RestAdapter.Builder builder37 = builder14.setErrorHandler(errorHandler36);
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.Profiler profiler39 = restAdapter38.profiler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.converter.Converter converter41 = restAdapter38.converter;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel42;
        retrofit.Profiler profiler44 = restAdapter38.profiler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        builder55.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor57 = builder55.requestInterceptor;
        retrofit.client.Client.Provider provider58 = builder55.clientProvider;
        restAdapter38.clientProvider = provider58;
        retrofit.RestAdapter.Builder builder60 = builder37.setClient(provider58);
        retrofit.RestAdapter.Builder builder61 = builder3.setClient(provider58);
        builder61.ensureSaneDefaults();
        retrofit.Profiler profiler63 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder64 = builder61.setProfiler(profiler63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(provider35);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(provider58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.ErrorHandler errorHandler18 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.Profiler profiler34 = null;
        builder32.profiler = profiler34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.Server server47 = builder39.server;
        builder32.server = server47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log53 = restAdapter50.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.logLevel = logLevel54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        restAdapter50.log = log64;
        builder49.log = log64;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.Server server83 = builder75.server;
        builder49.server = server83;
        builder32.server = server83;
        retrofit.RestAdapter.Builder builder86 = builder29.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder8.setServer(server83);
        builder87.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter89 = builder87.build();
        retrofit.RestAdapter.LogLevel logLevel90 = builder87.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Server server7 = restAdapter6.server;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter6.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        restAdapter6.clientProvider = provider22;
        restAdapter0.clientProvider = provider22;
        retrofit.RestAdapter.Log log25 = restAdapter0.log;
        java.util.concurrent.Executor executor26 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler27 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(profiler27);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) 'a', "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.ErrorHandler errorHandler14 = builder10.errorHandler;
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Log log16 = builder10.log;
        retrofit.RestAdapter.LogLevel logLevel17 = builder10.logLevel;
        retrofit.converter.Converter converter18 = builder10.converter;
        retrofit.RestAdapter.Builder builder20 = builder10.setServer("hi!");
        retrofit.Profiler profiler21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder20.setProfiler(profiler21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter45.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log28, logLevel47);
        restAdapter0.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Log log54 = restAdapter52.log;
        java.util.concurrent.Executor executor55 = restAdapter52.httpExecutor;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        restAdapter52.log = log64;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter52.callbackExecutor = executor82;
        restAdapter0.callbackExecutor = executor82;
        retrofit.Profiler profiler85 = null;
        restAdapter0.profiler = profiler85;
        retrofit.RestAdapter.Log log87 = restAdapter0.log;
        retrofit.client.Request request88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request89 = restAdapter0.logAndReplaceRequest(request88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNull(log87);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.converter.Converter converter38 = builder25.converter;
        builder21.converter = converter38;
        retrofit.RequestInterceptor requestInterceptor40 = builder21.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        java.util.concurrent.Executor executor47 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider59 = null;
        builder51.clientProvider = provider59;
        retrofit.ErrorHandler errorHandler61 = builder51.errorHandler;
        retrofit.Server server62 = builder51.server;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.Server server74 = builder66.server;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.Log log77 = restAdapter75.log;
        java.util.concurrent.Executor executor78 = restAdapter75.httpExecutor;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter88.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel90);
        restAdapter75.log = log87;
        builder66.log = log87;
        retrofit.RestAdapter.Builder builder95 = builder51.setLog(log87);
        retrofit.converter.Converter converter96 = builder51.converter;
        restAdapter41.converter = converter96;
        retrofit.RestAdapter.Builder builder98 = builder21.setConverter(converter96);
        java.util.concurrent.Executor executor99 = builder21.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(converter96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(executor99);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        builder10.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        builder10.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider18 = null;
        builder17.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder17.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.RequestInterceptor requestInterceptor52 = builder42.requestInterceptor;
        retrofit.RestAdapter restAdapter53 = builder42.build();
        retrofit.ErrorHandler errorHandler54 = builder42.errorHandler;
        retrofit.converter.Converter converter55 = builder42.converter;
        builder38.converter = converter55;
        retrofit.RequestInterceptor requestInterceptor57 = builder38.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder63 = builder58.setLogLevel(logLevel62);
        retrofit.Server server64 = null;
        builder58.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.client.Client.Provider provider77 = null;
        builder69.clientProvider = provider77;
        retrofit.RequestInterceptor requestInterceptor79 = builder69.requestInterceptor;
        retrofit.RestAdapter restAdapter80 = builder69.build();
        retrofit.ErrorHandler errorHandler81 = builder69.errorHandler;
        retrofit.converter.Converter converter82 = builder69.converter;
        retrofit.RestAdapter.Builder builder83 = builder58.setConverter(converter82);
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder83.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor86;
        builder10.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter restAdapter89 = builder10.build();
        retrofit.ErrorHandler errorHandler90 = restAdapter89.errorHandler;
        retrofit.client.Response response92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response94 = restAdapter89.logAndReplaceResponse("", response92, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.client.Client.Provider provider13 = builder3.clientProvider;
        retrofit.RestAdapter.Log log14 = builder3.log;
        retrofit.converter.Converter converter15 = builder3.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = null;
        builder20.clientProvider = provider28;
        retrofit.RequestInterceptor requestInterceptor30 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.client.Client.Provider provider42 = null;
        builder34.clientProvider = provider42;
        retrofit.RequestInterceptor requestInterceptor44 = builder34.requestInterceptor;
        retrofit.RestAdapter.Builder builder45 = builder20.setRequestInterceptor(requestInterceptor44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = builder46.callbackExecutor;
        retrofit.Profiler profiler48 = null;
        builder46.profiler = profiler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.Server server61 = builder53.server;
        builder46.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter65.getLogLevel();
        java.util.concurrent.Executor executor69 = restAdapter65.callbackExecutor;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder80 = builder73.setLogLevel(logLevel78);
        retrofit.client.Client.Provider provider81 = null;
        builder73.clientProvider = provider81;
        retrofit.RequestInterceptor requestInterceptor83 = builder73.requestInterceptor;
        retrofit.RestAdapter restAdapter84 = builder73.build();
        retrofit.ErrorHandler errorHandler85 = builder73.errorHandler;
        retrofit.converter.Converter converter86 = builder73.converter;
        restAdapter65.converter = converter86;
        builder63.converter = converter86;
        retrofit.RestAdapter.Builder builder89 = builder46.setConverter(converter86);
        builder45.converter = converter86;
        retrofit.RestAdapter.Builder builder91 = builder3.setConverter(converter86);
        retrofit.Profiler profiler92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder91.setProfiler(profiler92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNotNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        builder4.ensureSaneDefaults();
        retrofit.Profiler profiler7 = builder4.profiler;
        retrofit.RestAdapter restAdapter8 = builder4.build();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.client.Client.Provider provider20 = null;
        builder12.clientProvider = provider20;
        retrofit.ErrorHandler errorHandler22 = builder12.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        retrofit.RestAdapter.Builder builder35 = builder12.setServer(server34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider60 = null;
        builder52.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder52.errorHandler;
        retrofit.RestAdapter.Builder builder63 = builder39.setErrorHandler(errorHandler62);
        java.util.concurrent.Executor executor64 = builder63.httpExecutor;
        builder35.httpExecutor = executor64;
        java.util.concurrent.Executor executor66 = builder35.callbackExecutor;
        builder4.httpExecutor = executor66;
        retrofit.Profiler profiler68 = builder4.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNull(profiler68);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor25 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor26 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter2.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter2.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter2.getLogLevel();
        java.util.concurrent.Executor executor6 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.RequestInterceptor requestInterceptor20 = builder10.requestInterceptor;
        retrofit.RestAdapter restAdapter21 = builder10.build();
        retrofit.ErrorHandler errorHandler22 = builder10.errorHandler;
        retrofit.converter.Converter converter23 = builder10.converter;
        restAdapter2.converter = converter23;
        builder0.converter = converter23;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel64);
        restAdapter47.log = log61;
        builder46.log = log61;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter78.logLevel = logLevel80;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log61, logLevel80);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log61);
        retrofit.Profiler profiler85 = builder36.profiler;
        retrofit.RestAdapter.LogLevel logLevel86 = builder36.logLevel;
        builder0.logLevel = logLevel86;
        java.util.concurrent.Executor executor88 = builder0.httpExecutor;
        retrofit.ErrorHandler errorHandler89 = builder0.errorHandler;
        retrofit.Profiler profiler90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder0.setProfiler(profiler90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(errorHandler89);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler5 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        restAdapter27.log = log41;
        builder26.log = log41;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel60;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel60);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log41, logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder16.setLog(log41);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = null;
        builder65.clientProvider = provider66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("Retrofit-Idle");
        retrofit.Server server70 = builder65.server;
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider83 = null;
        builder75.clientProvider = provider83;
        retrofit.RequestInterceptor requestInterceptor85 = builder75.requestInterceptor;
        retrofit.RestAdapter restAdapter86 = builder75.build();
        java.util.concurrent.Executor executor87 = restAdapter86.callbackExecutor;
        retrofit.converter.Converter converter88 = restAdapter86.converter;
        retrofit.RestAdapter.Log log89 = restAdapter86.log;
        builder64.log = log89;
        retrofit.RestAdapter restAdapter91 = builder64.build();
        retrofit.client.Client.Provider provider92 = restAdapter91.clientProvider;
        retrofit.ErrorHandler errorHandler93 = restAdapter91.errorHandler;
        builder0.errorHandler = errorHandler93;
        java.util.concurrent.Executor executor95 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(executor4);
        org.junit.Assert.assertNotNull(errorHandler5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.Server server38 = builder30.server;
        retrofit.RestAdapter.Builder builder39 = builder16.setServer(server38);
        retrofit.RestAdapter.Log log40 = builder39.log;
        builder10.log = log40;
        retrofit.RequestInterceptor requestInterceptor42 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        java.util.concurrent.Executor executor54 = builder46.callbackExecutor;
        retrofit.Profiler profiler55 = null;
        builder46.profiler = profiler55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        java.util.concurrent.Executor executor72 = builder64.callbackExecutor;
        restAdapter57.callbackExecutor = executor72;
        builder46.callbackExecutor = executor72;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        java.util.concurrent.Executor executor90 = builder82.callbackExecutor;
        restAdapter75.callbackExecutor = executor90;
        builder46.httpExecutor = executor90;
        retrofit.Server server93 = builder46.server;
        retrofit.RestAdapter restAdapter94 = builder46.build();
        retrofit.converter.Converter converter95 = restAdapter94.converter;
        builder10.converter = converter95;
        retrofit.Profiler profiler97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder10.setProfiler(profiler97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertNotNull(restAdapter94);
        org.junit.Assert.assertNotNull(converter95);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter45.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log28, logLevel47);
        restAdapter0.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Log log54 = restAdapter52.log;
        java.util.concurrent.Executor executor55 = restAdapter52.httpExecutor;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        restAdapter52.log = log64;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter52.callbackExecutor = executor82;
        restAdapter0.callbackExecutor = executor82;
        retrofit.Profiler profiler85 = null;
        restAdapter0.profiler = profiler85;
        java.lang.Throwable throwable87 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable87, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        java.util.concurrent.Executor executor35 = builder27.callbackExecutor;
        restAdapter20.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        java.util.concurrent.Executor executor52 = builder44.callbackExecutor;
        restAdapter37.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = builder19.setExecutors(executor35, executor52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter restAdapter66 = builder58.build();
        retrofit.converter.Converter converter67 = builder58.converter;
        builder54.converter = converter67;
        builder4.converter = converter67;
        retrofit.client.Client.Provider provider70 = builder4.clientProvider;
        retrofit.converter.Converter converter71 = builder4.converter;
        retrofit.RestAdapter.Log log72 = builder4.log;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(converter67);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNotNull(converter71);
        org.junit.Assert.assertNull(log72);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        java.util.concurrent.Executor executor41 = builder33.callbackExecutor;
        restAdapter26.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        restAdapter43.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = builder25.setExecutors(executor41, executor58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider72 = null;
        builder64.clientProvider = provider72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.ErrorHandler errorHandler87 = builder77.errorHandler;
        retrofit.RestAdapter.Builder builder88 = builder64.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder25.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder90 = builder10.setErrorHandler(errorHandler87);
        retrofit.Profiler profiler91 = builder90.profiler;
        retrofit.Profiler profiler92 = builder90.profiler;
        retrofit.Profiler profiler93 = null;
        builder90.profiler = profiler93;
        retrofit.Server server95 = null;
        builder90.server = server95;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNull(profiler92);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.ErrorHandler errorHandler27 = builder17.errorHandler;
        retrofit.Server server28 = builder17.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder17.setClient(provider40);
        builder3.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder44 = builder3.setServer("Retrofit-Idle");
        retrofit.Profiler profiler45 = builder3.profiler;
        retrofit.ErrorHandler errorHandler46 = builder3.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder3.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNotNull(errorHandler46);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder0.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.logLevel;
        retrofit.Profiler profiler35 = null;
        restAdapter28.profiler = profiler35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.Log log39 = restAdapter37.log;
        java.util.concurrent.Executor executor40 = restAdapter37.httpExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        restAdapter42.log = log56;
        builder41.log = log56;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = builder64.setServer("hi!");
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log71 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = builder67.setLogLevel(logLevel72);
        retrofit.Server server75 = builder67.server;
        builder41.server = server75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        builder77.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder80 = builder77.setServer("hi!");
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log84 = restAdapter81.log;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter81.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder87 = builder80.setLogLevel(logLevel85);
        retrofit.client.Client.Provider provider88 = null;
        builder80.clientProvider = provider88;
        retrofit.RequestInterceptor requestInterceptor90 = builder80.requestInterceptor;
        retrofit.RestAdapter.Builder builder91 = builder41.setRequestInterceptor(requestInterceptor90);
        restAdapter37.requestInterceptor = requestInterceptor90;
        restAdapter28.requestInterceptor = requestInterceptor90;
        retrofit.RestAdapter.Builder builder94 = builder26.setRequestInterceptor(requestInterceptor90);
        retrofit.client.Client client95 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder96 = builder26.setClient(client95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter12.errorHandler = errorHandler16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.Server server19 = restAdapter18.server;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        restAdapter18.clientProvider = provider34;
        restAdapter12.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder37 = builder3.setClient(provider34);
        retrofit.Profiler profiler38 = builder37.profiler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.Profiler profiler52 = builder49.profiler;
        retrofit.ErrorHandler errorHandler53 = builder49.errorHandler;
        retrofit.Server server54 = builder49.server;
        retrofit.RestAdapter.Builder builder55 = builder37.setServer(server54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        builder66.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor68 = builder66.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = builder55.setRequestInterceptor(requestInterceptor68);
        java.util.concurrent.Executor executor70 = builder55.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(provider34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(executor70);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter45.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log28, logLevel47);
        restAdapter0.setLogLevel(logLevel47);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Log log54 = restAdapter52.log;
        java.util.concurrent.Executor executor55 = restAdapter52.httpExecutor;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        restAdapter52.log = log64;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter52.callbackExecutor = executor82;
        restAdapter0.callbackExecutor = executor82;
        retrofit.Profiler profiler85 = null;
        restAdapter0.profiler = profiler85;
        retrofit.client.Response response88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response90 = restAdapter0.logAndReplaceResponse("hi!", response88, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.Profiler profiler53 = null;
        builder0.profiler = profiler53;
        retrofit.RestAdapter.LogLevel logLevel55 = builder0.logLevel;
        retrofit.client.Client client56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder57 = builder0.setClient(client56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.Server server20 = builder12.server;
        builder5.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.Server server56 = builder48.server;
        builder22.server = server56;
        builder5.server = server56;
        retrofit.RestAdapter.Builder builder59 = builder4.setServer(server56);
        retrofit.RestAdapter restAdapter60 = builder4.build();
        retrofit.RestAdapter restAdapter61 = builder4.build();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter61.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        java.util.concurrent.Executor executor64 = restAdapter61.httpExecutor;
        retrofit.converter.Converter converter65 = restAdapter61.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(converter65);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor7 = builder3.httpExecutor;
        java.util.concurrent.Executor executor8 = builder3.callbackExecutor;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder3.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(executor8);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        retrofit.RestAdapter restAdapter28 = builder27.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.Server server43 = restAdapter42.server;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter42.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter42.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel45);
        boolean boolean48 = logLevel45.log();
        restAdapter28.logLevel = logLevel45;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter28.logLevel;
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter28.logLevel;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder15 = builder10.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.client.Client.Provider provider34 = null;
        builder26.clientProvider = provider34;
        retrofit.ErrorHandler errorHandler36 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.Server server48 = builder40.server;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server48);
        retrofit.RestAdapter.Log log50 = builder49.log;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.Server server52 = restAdapter51.server;
        retrofit.RequestInterceptor requestInterceptor53 = restAdapter51.requestInterceptor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("hi!");
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        restAdapter51.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder69 = builder49.setClient(provider67);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.Server server74 = builder73.server;
        retrofit.RestAdapter.Builder builder75 = builder49.setServer(server74);
        builder22.server = server74;
        restAdapter0.server = server74;
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor22 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler23 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.Profiler profiler38 = builder35.profiler;
        retrofit.ErrorHandler errorHandler39 = builder35.errorHandler;
        retrofit.RestAdapter.Log log40 = builder35.log;
        restAdapter0.log = log40;
        retrofit.converter.Converter converter42 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.Server server57 = restAdapter56.server;
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter56.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter56.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder55.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.logLevel;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider76 = null;
        builder68.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        builder78.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder78.setServer("hi!");
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log85 = restAdapter82.log;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter82.logLevel = logLevel86;
        retrofit.RestAdapter.Builder builder88 = builder81.setLogLevel(logLevel86);
        retrofit.client.Client.Provider provider89 = null;
        builder81.clientProvider = provider89;
        retrofit.ErrorHandler errorHandler91 = builder81.errorHandler;
        retrofit.RestAdapter.Builder builder92 = builder68.setErrorHandler(errorHandler91);
        restAdapter63.errorHandler = errorHandler91;
        retrofit.RestAdapter.Builder builder94 = builder61.setErrorHandler(errorHandler91);
        restAdapter0.errorHandler = errorHandler91;
        java.lang.Throwable throwable96 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable96, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(server57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.Server server38 = builder30.server;
        retrofit.RestAdapter.Builder builder39 = builder16.setServer(server38);
        retrofit.RestAdapter.Log log40 = builder39.log;
        builder10.log = log40;
        retrofit.RequestInterceptor requestInterceptor42 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        builder46.clientProvider = provider54;
        retrofit.ErrorHandler errorHandler56 = builder46.errorHandler;
        retrofit.Server server57 = builder46.server;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        retrofit.RestAdapter.Builder builder70 = builder46.setClient(provider69);
        retrofit.RestAdapter.LogLevel logLevel71 = null;
        builder46.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        builder73.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder73.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Log log80 = restAdapter77.log;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.logLevel = logLevel81;
        retrofit.RestAdapter.Builder builder83 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider84 = null;
        builder76.clientProvider = provider84;
        retrofit.Server server86 = null;
        builder76.server = server86;
        retrofit.RequestInterceptor requestInterceptor88 = builder76.requestInterceptor;
        builder46.requestInterceptor = requestInterceptor88;
        retrofit.RestAdapter.Builder builder90 = builder10.setRequestInterceptor(requestInterceptor88);
        retrofit.client.Client.Provider provider91 = null;
        builder90.clientProvider = provider91;
        retrofit.client.Client client93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder90.setClient(client93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(provider69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        builder27.server = server42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        restAdapter45.log = log59;
        builder44.log = log59;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        builder44.server = server78;
        builder27.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder24.setServer(server78);
        retrofit.RestAdapter.Builder builder82 = builder3.setServer(server78);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder84 = builder3.setLogLevel(logLevel83);
        java.util.concurrent.Executor executor85 = builder3.callbackExecutor;
        retrofit.Profiler profiler86 = null;
        builder3.profiler = profiler86;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        restAdapter53.log = log67;
        builder52.log = log67;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.Server server86 = builder78.server;
        builder52.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder50.setServer(server86);
        java.util.concurrent.Executor executor89 = builder50.httpExecutor;
        retrofit.Profiler profiler90 = builder50.profiler;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(executor89);
        org.junit.Assert.assertNull(profiler90);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder27 = builder3.setClient(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        builder3.logLevel = logLevel36;
        retrofit.client.Client client40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder3.setClient(client40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.ErrorHandler errorHandler6 = null;
        restAdapter4.errorHandler = errorHandler6;
        retrofit.Profiler profiler8 = restAdapter4.profiler;
        retrofit.Profiler profiler9 = null;
        restAdapter4.profiler = profiler9;
        java.util.concurrent.Executor executor11 = restAdapter4.callbackExecutor;
        retrofit.RestAdapter.Log log12 = restAdapter4.log;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter27 = builder16.build();
        java.util.concurrent.Executor executor28 = restAdapter27.callbackExecutor;
        retrofit.converter.Converter converter29 = restAdapter27.converter;
        restAdapter4.converter = converter29;
        restAdapter0.converter = converter29;
        retrofit.client.Response response33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response35 = restAdapter0.logAndReplaceResponse("hi!", response33, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(converter29);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder12.clientProvider;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter14.logLevel = logLevel16;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        restAdapter14.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.Server server54 = builder46.server;
        builder20.server = server54;
        restAdapter14.server = server54;
        retrofit.RestAdapter.Builder builder57 = builder12.setServer(server54);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.Profiler profiler59 = restAdapter58.profiler;
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.converter.Converter converter61 = restAdapter58.converter;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.Server server70 = restAdapter69.server;
        retrofit.RequestInterceptor requestInterceptor71 = restAdapter69.requestInterceptor;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.client.Client.Provider provider85 = builder84.clientProvider;
        restAdapter69.clientProvider = provider85;
        restAdapter65.clientProvider = provider85;
        builder64.clientProvider = provider85;
        retrofit.RestAdapter.LogLevel logLevel89 = builder64.logLevel;
        java.util.concurrent.Executor executor90 = builder64.httpExecutor;
        retrofit.client.Client client91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder64.setClient(client91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(profiler59);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setClient(provider1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider62 = null;
        builder54.clientProvider = provider62;
        retrofit.RequestInterceptor requestInterceptor64 = builder54.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor64;
        java.util.concurrent.Executor executor66 = builder50.httpExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNull(executor66);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        java.util.concurrent.Executor executor28 = builder3.callbackExecutor;
        retrofit.client.Client.Provider provider29 = builder3.clientProvider;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(provider29);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        java.util.concurrent.Executor executor14 = builder6.callbackExecutor;
        retrofit.Profiler profiler15 = null;
        builder6.profiler = profiler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        java.util.concurrent.Executor executor32 = builder24.callbackExecutor;
        restAdapter17.callbackExecutor = executor32;
        builder6.callbackExecutor = executor32;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        java.util.concurrent.Executor executor50 = builder42.callbackExecutor;
        restAdapter35.callbackExecutor = executor50;
        builder6.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider64 = null;
        builder56.clientProvider = provider64;
        retrofit.ErrorHandler errorHandler66 = builder56.errorHandler;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        retrofit.RestAdapter.Builder builder79 = builder56.setServer(server78);
        java.util.concurrent.Executor executor80 = builder79.httpExecutor;
        retrofit.RestAdapter.Builder builder81 = builder0.setExecutors(executor50, executor80);
        java.util.concurrent.Executor executor82 = builder0.callbackExecutor;
        retrofit.converter.Converter converter83 = builder0.converter;
        retrofit.converter.Converter converter84 = builder0.converter;
        retrofit.Profiler profiler85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder0.setProfiler(profiler85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(converter84);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        builder10.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        retrofit.Server server13 = builder10.server;
        java.util.concurrent.Executor executor14 = null;
        builder10.callbackExecutor = executor14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel27);
        retrofit.Profiler profiler30 = restAdapter29.profiler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider43 = null;
        builder35.clientProvider = provider43;
        retrofit.RequestInterceptor requestInterceptor45 = builder35.requestInterceptor;
        retrofit.RestAdapter restAdapter46 = builder35.build();
        retrofit.Profiler profiler47 = builder35.profiler;
        retrofit.ErrorHandler errorHandler48 = builder35.errorHandler;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        restAdapter49.log = log63;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.ErrorHandler errorHandler74 = null;
        restAdapter70.errorHandler = errorHandler74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.Server server77 = restAdapter76.server;
        retrofit.RequestInterceptor requestInterceptor78 = restAdapter76.requestInterceptor;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        retrofit.RestAdapter.Builder builder91 = builder89.setServer("hi!");
        retrofit.client.Client.Provider provider92 = builder91.clientProvider;
        restAdapter76.clientProvider = provider92;
        restAdapter70.clientProvider = provider92;
        restAdapter49.clientProvider = provider92;
        retrofit.RestAdapter.Builder builder96 = builder35.setClient(provider92);
        retrofit.converter.Converter converter97 = builder96.converter;
        restAdapter29.converter = converter97;
        builder10.converter = converter97;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server77);
        org.junit.Assert.assertNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(provider92);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(converter97);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.ErrorHandler errorHandler27 = builder17.errorHandler;
        retrofit.Server server28 = builder17.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder17.setClient(provider40);
        builder3.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder44 = builder3.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("Retrofit-Idle");
        retrofit.Profiler profiler48 = builder44.profiler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder54 = builder49.setLogLevel(logLevel53);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.logLevel;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        retrofit.client.Client.Provider provider68 = null;
        builder60.clientProvider = provider68;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder80 = builder73.setLogLevel(logLevel78);
        retrofit.client.Client.Provider provider81 = null;
        builder73.clientProvider = provider81;
        retrofit.ErrorHandler errorHandler83 = builder73.errorHandler;
        retrofit.RestAdapter.Builder builder84 = builder60.setErrorHandler(errorHandler83);
        restAdapter55.errorHandler = errorHandler83;
        builder49.errorHandler = errorHandler83;
        builder44.errorHandler = errorHandler83;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor52 = builder50.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel71);
        restAdapter54.log = log68;
        builder53.log = log68;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.Server server87 = builder79.server;
        builder53.server = server87;
        retrofit.RestAdapter.Builder builder89 = builder50.setServer(server87);
        retrofit.RestAdapter restAdapter90 = builder50.build();
        java.util.concurrent.Executor executor91 = null;
        java.util.concurrent.Executor executor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder50.setExecutors(executor91, executor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(restAdapter90);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder27 = builder3.setClient(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider29 = null;
        builder28.clientProvider = provider29;
        retrofit.RestAdapter.Builder builder32 = builder28.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = null;
        builder33.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.Server server48 = builder40.server;
        builder33.server = server48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter66.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        restAdapter51.log = log65;
        builder50.log = log65;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        builder73.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder73.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Log log80 = restAdapter77.log;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.logLevel = logLevel81;
        retrofit.RestAdapter.Builder builder83 = builder76.setLogLevel(logLevel81);
        retrofit.Server server84 = builder76.server;
        builder50.server = server84;
        builder33.server = server84;
        retrofit.RestAdapter.Builder builder87 = builder32.setServer(server84);
        retrofit.RestAdapter.Builder builder88 = builder3.setServer(server84);
        retrofit.client.Client.Provider provider89 = builder3.clientProvider;
        retrofit.client.Client client90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder3.setClient(client90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(provider89);
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler8 = builder6.errorHandler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        java.util.concurrent.Executor executor20 = builder12.callbackExecutor;
        retrofit.Profiler profiler21 = null;
        builder12.profiler = profiler21;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        java.util.concurrent.Executor executor38 = builder30.callbackExecutor;
        restAdapter23.callbackExecutor = executor38;
        builder12.callbackExecutor = executor38;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        java.util.concurrent.Executor executor56 = builder48.callbackExecutor;
        restAdapter41.callbackExecutor = executor56;
        builder12.httpExecutor = executor56;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder62 = builder59.setServer("hi!");
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Log log66 = restAdapter63.log;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter63.logLevel = logLevel67;
        retrofit.RestAdapter.Builder builder69 = builder62.setLogLevel(logLevel67);
        retrofit.client.Client.Provider provider70 = null;
        builder62.clientProvider = provider70;
        retrofit.ErrorHandler errorHandler72 = builder62.errorHandler;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        builder73.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder73.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Log log80 = restAdapter77.log;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.logLevel = logLevel81;
        retrofit.RestAdapter.Builder builder83 = builder76.setLogLevel(logLevel81);
        retrofit.Server server84 = builder76.server;
        retrofit.RestAdapter.Builder builder85 = builder62.setServer(server84);
        java.util.concurrent.Executor executor86 = builder85.httpExecutor;
        retrofit.RestAdapter.Builder builder87 = builder6.setExecutors(executor56, executor86);
        java.util.concurrent.Executor executor88 = builder6.callbackExecutor;
        retrofit.converter.Converter converter89 = builder6.converter;
        restAdapter0.converter = converter89;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(converter89);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter14.converter;
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel35);
        restAdapter18.log = log32;
        log32.log("Retrofit-Idle");
        restAdapter14.log = log32;
        log32.log("Retrofit-Idle");
        log32.log("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = null;
        builder13.profiler = profiler15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.Server server28 = builder20.server;
        builder13.server = server28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        restAdapter31.log = log45;
        builder30.log = log45;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.Server server64 = builder56.server;
        builder30.server = server64;
        builder13.server = server64;
        retrofit.RestAdapter.Builder builder67 = builder10.setServer(server64);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter68.errorHandler = errorHandler70;
        retrofit.client.Client.Provider provider72 = restAdapter68.clientProvider;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.Profiler profiler74 = restAdapter73.profiler;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.ErrorHandler errorHandler88 = builder78.errorHandler;
        restAdapter73.errorHandler = errorHandler88;
        restAdapter68.errorHandler = errorHandler88;
        builder10.errorHandler = errorHandler88;
        retrofit.Server server92 = builder10.server;
        retrofit.client.Client client93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder10.setClient(client93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNull(profiler74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.ErrorHandler errorHandler27 = builder17.errorHandler;
        retrofit.Server server28 = builder17.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder17.setClient(provider40);
        builder3.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder44 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.Server server50 = restAdapter49.server;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        restAdapter49.clientProvider = provider65;
        restAdapter45.clientProvider = provider65;
        builder44.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        builder82.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder85 = builder82.setServer("hi!");
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter86.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter86.new RestHandler();
        retrofit.RestAdapter.Log log89 = restAdapter86.log;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter86.logLevel = logLevel90;
        retrofit.RestAdapter.Builder builder92 = builder85.setLogLevel(logLevel90);
        retrofit.client.Client.Provider provider93 = null;
        builder85.clientProvider = provider93;
        retrofit.ErrorHandler errorHandler95 = builder85.errorHandler;
        retrofit.RestAdapter.Builder builder96 = builder72.setErrorHandler(errorHandler95);
        java.util.concurrent.Executor executor97 = builder96.httpExecutor;
        builder44.httpExecutor = executor97;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(logLevel87);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(errorHandler95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(executor97);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder46 = builder41.setLogLevel(logLevel45);
        retrofit.converter.Converter converter47 = null;
        builder41.converter = converter47;
        java.util.concurrent.Executor executor49 = builder41.callbackExecutor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder55 = builder50.setLogLevel(logLevel54);
        retrofit.converter.Converter converter56 = null;
        builder50.converter = converter56;
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        retrofit.RestAdapter.Builder builder59 = builder40.setExecutors(executor49, executor58);
        retrofit.RestAdapter.Log log60 = builder59.log;
        retrofit.RestAdapter.Builder builder61 = builder0.setLog(log60);
        log60.log("Retrofit-Idle");
        log60.log("hi!");
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.Server server18 = builder10.server;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.Log log21 = restAdapter19.log;
        java.util.concurrent.Executor executor22 = restAdapter19.httpExecutor;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter19.log = log31;
        builder10.log = log31;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.ErrorHandler errorHandler65 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder66 = builder42.setErrorHandler(errorHandler65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.ErrorHandler errorHandler71 = null;
        restAdapter67.errorHandler = errorHandler71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.Server server74 = restAdapter73.server;
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter73.requestInterceptor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder88 = builder86.setServer("hi!");
        retrofit.client.Client.Provider provider89 = builder88.clientProvider;
        restAdapter73.clientProvider = provider89;
        restAdapter67.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder92 = builder66.setClient(provider89);
        builder10.clientProvider = provider89;
        restAdapter4.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder95 = builder3.setClient(provider89);
        retrofit.client.Client client96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder3.setClient(client96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        java.util.concurrent.Executor executor41 = builder33.callbackExecutor;
        restAdapter26.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        restAdapter43.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = builder25.setExecutors(executor41, executor58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider72 = null;
        builder64.clientProvider = provider72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.ErrorHandler errorHandler87 = builder77.errorHandler;
        retrofit.RestAdapter.Builder builder88 = builder64.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder25.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder90 = builder10.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder92 = builder10.setServer("hi!");
        retrofit.ErrorHandler errorHandler93 = builder10.errorHandler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(errorHandler93);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        builder27.server = server42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        restAdapter45.log = log59;
        builder44.log = log59;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        builder44.server = server78;
        builder27.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder24.setServer(server78);
        retrofit.RestAdapter.Builder builder82 = builder3.setServer(server78);
        builder82.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor84 = builder82.requestInterceptor;
        retrofit.RestAdapter.Log log85 = builder82.log;
        log85.log("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(log85);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.Profiler profiler15 = builder3.profiler;
        builder3.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.Server server23 = builder15.server;
        restAdapter8.server = server23;
        restAdapter0.server = server23;
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter27 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        java.util.concurrent.Executor executor30 = builder28.httpExecutor;
        restAdapter0.httpExecutor = executor30;
        retrofit.client.Client.Provider provider32 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(provider32);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.ErrorHandler errorHandler14 = builder10.errorHandler;
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Log log16 = builder10.log;
        log16.log("");
        log16.log("hi!");
        log16.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(log16);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Server server7 = restAdapter6.server;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter6.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        restAdapter6.clientProvider = provider22;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter6.new RestHandler();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.ErrorHandler errorHandler27 = null;
        restAdapter25.errorHandler = errorHandler27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.Server server30 = restAdapter29.server;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        restAdapter40.log = log54;
        builder39.log = log54;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log54, logLevel73);
        restAdapter29.log = log54;
        restAdapter25.log = log54;
        restAdapter6.log = log54;
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        builder81.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder84 = builder81.setServer("hi!");
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter85.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log88 = restAdapter85.log;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter85.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder91 = builder84.setLogLevel(logLevel89);
        retrofit.client.Client.Provider provider92 = null;
        builder84.clientProvider = provider92;
        retrofit.RequestInterceptor requestInterceptor94 = builder84.requestInterceptor;
        retrofit.RestAdapter restAdapter95 = builder84.build();
        retrofit.ErrorHandler errorHandler96 = builder84.errorHandler;
        retrofit.converter.Converter converter97 = builder84.converter;
        restAdapter6.converter = converter97;
        builder0.converter = converter97;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(logLevel86);
        org.junit.Assert.assertNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(restAdapter95);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(converter97);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.Server server4 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.ErrorHandler errorHandler31 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder8.setErrorHandler(errorHandler31);
        retrofit.RestAdapter restAdapter33 = builder32.build();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.converter.Converter converter35 = restAdapter33.converter;
        restAdapter0.converter = converter35;
        java.lang.Throwable throwable37 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable37, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter35);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = null;
        builder15.clientProvider = provider23;
        retrofit.RequestInterceptor requestInterceptor25 = builder15.requestInterceptor;
        retrofit.RestAdapter restAdapter26 = builder15.build();
        retrofit.Profiler profiler27 = builder15.profiler;
        retrofit.ErrorHandler errorHandler28 = builder15.errorHandler;
        builder3.errorHandler = errorHandler28;
        retrofit.RestAdapter restAdapter30 = builder3.build();
        retrofit.client.Response response32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response34 = restAdapter30.logAndReplaceResponse("", response32, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(restAdapter30);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter14.converter;
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.ErrorHandler errorHandler31 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.Server server43 = builder35.server;
        retrofit.RestAdapter.Builder builder44 = builder21.setServer(server43);
        java.util.concurrent.Executor executor45 = builder44.httpExecutor;
        restAdapter14.callbackExecutor = executor45;
        retrofit.Profiler profiler47 = null;
        restAdapter14.profiler = profiler47;
        retrofit.client.Response response50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response52 = restAdapter14.logAndReplaceResponse("", response50, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        builder16.log = log31;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log31, logLevel39);
        retrofit.RestAdapter.Log log41 = restAdapter40.log;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder47 = builder42.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.logLevel;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.ErrorHandler errorHandler76 = builder66.errorHandler;
        retrofit.RestAdapter.Builder builder77 = builder53.setErrorHandler(errorHandler76);
        restAdapter48.errorHandler = errorHandler76;
        builder42.errorHandler = errorHandler76;
        restAdapter40.errorHandler = errorHandler76;
        restAdapter0.errorHandler = errorHandler76;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        builder82.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler84 = builder82.errorHandler;
        restAdapter0.errorHandler = errorHandler84;
        retrofit.client.Client.Provider provider86 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNull(provider86);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        retrofit.RestAdapter.Builder builder38 = builder7.setLog(log31);
        log31.log("hi!");
        retrofit.RestAdapter.Builder builder41 = builder3.setLog(log31);
        retrofit.RestAdapter.Log log42 = builder3.log;
        java.util.concurrent.Executor executor43 = builder3.callbackExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel3 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter0.logLevel = logLevel3;
        retrofit.client.Request request5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request6 = restAdapter0.logAndReplaceRequest(request5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.Server server26 = builder18.server;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.Log log29 = restAdapter27.log;
        java.util.concurrent.Executor executor30 = restAdapter27.httpExecutor;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        restAdapter27.log = log39;
        builder18.log = log39;
        retrofit.RestAdapter.Builder builder47 = builder3.setLog(log39);
        retrofit.RestAdapter.LogLevel logLevel48 = builder47.logLevel;
        retrofit.Server server49 = builder47.server;
        retrofit.client.Client client50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder47.setClient(client50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server49);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.ErrorHandler errorHandler6 = null;
        builder0.errorHandler = errorHandler6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor19 = builder11.callbackExecutor;
        builder0.httpExecutor = executor19;
        retrofit.RestAdapter.LogLevel logLevel21 = builder0.logLevel;
        retrofit.converter.Converter converter22 = builder0.converter;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(converter22);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Log log16 = restAdapter14.log;
        java.util.concurrent.Executor executor17 = restAdapter14.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        restAdapter19.log = log33;
        builder18.log = log33;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.Server server52 = builder44.server;
        builder18.server = server52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider65 = null;
        builder57.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder18.setRequestInterceptor(requestInterceptor67);
        restAdapter14.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder70 = builder3.setRequestInterceptor(requestInterceptor67);
        retrofit.Server server71 = builder3.server;
        retrofit.ErrorHandler errorHandler72 = builder3.errorHandler;
        retrofit.Profiler profiler73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder3.setProfiler(profiler73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(errorHandler72);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        builder10.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = builder10.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean14 = logLevel13.log();
        boolean boolean15 = logLevel13.log();
        builder10.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider18 = null;
        builder17.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder17.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.RequestInterceptor requestInterceptor52 = builder42.requestInterceptor;
        retrofit.RestAdapter restAdapter53 = builder42.build();
        retrofit.ErrorHandler errorHandler54 = builder42.errorHandler;
        retrofit.converter.Converter converter55 = builder42.converter;
        builder38.converter = converter55;
        retrofit.RequestInterceptor requestInterceptor57 = builder38.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder63 = builder58.setLogLevel(logLevel62);
        retrofit.Server server64 = null;
        builder58.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.client.Client.Provider provider77 = null;
        builder69.clientProvider = provider77;
        retrofit.RequestInterceptor requestInterceptor79 = builder69.requestInterceptor;
        retrofit.RestAdapter restAdapter80 = builder69.build();
        retrofit.ErrorHandler errorHandler81 = builder69.errorHandler;
        retrofit.converter.Converter converter82 = builder69.converter;
        retrofit.RestAdapter.Builder builder83 = builder58.setConverter(converter82);
        retrofit.Profiler profiler84 = null;
        builder83.profiler = profiler84;
        retrofit.RequestInterceptor requestInterceptor86 = builder83.requestInterceptor;
        builder38.requestInterceptor = requestInterceptor86;
        builder10.requestInterceptor = requestInterceptor86;
        retrofit.RestAdapter.LogLevel logLevel89 = builder10.logLevel;
        retrofit.RestAdapter.LogLevel logLevel90 = builder10.logLevel;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) '#', "", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.ErrorHandler errorHandler17 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.Server server29 = builder21.server;
        retrofit.RestAdapter.Builder builder30 = builder7.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.client.Client.Provider provider42 = null;
        builder34.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider55 = null;
        builder47.clientProvider = provider55;
        retrofit.ErrorHandler errorHandler57 = builder47.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder34.setErrorHandler(errorHandler57);
        java.util.concurrent.Executor executor59 = builder58.httpExecutor;
        builder30.httpExecutor = executor59;
        java.util.concurrent.Executor executor61 = builder30.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel62 = builder30.logLevel;
        restAdapter0.logLevel = logLevel62;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter0.requestInterceptor = requestInterceptor64;
        retrofit.Profiler profiler66 = null;
        restAdapter0.profiler = profiler66;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) (short) 0, "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder30.setErrorHandler(errorHandler53);
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        builder26.httpExecutor = executor55;
        java.util.concurrent.Executor executor57 = builder26.callbackExecutor;
        retrofit.client.Client.Provider provider58 = builder26.clientProvider;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log71 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.logLevel = logLevel72;
        retrofit.Server server74 = null;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter83.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel85);
        restAdapter68.log = log82;
        builder67.log = log82;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log82, logLevel90);
        log82.log("hi!");
        log82.log("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder96 = builder26.setLog(log82);
        retrofit.client.Client client97 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder98 = builder26.setClient(client97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.client.Response response11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response13 = restAdapter0.logAndReplaceResponse("hi!", response11, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(converter9);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder23 = builder18.setLogLevel(logLevel22);
        retrofit.converter.Converter converter24 = null;
        builder18.converter = converter24;
        java.util.concurrent.Executor executor26 = builder18.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder32 = builder27.setLogLevel(logLevel31);
        retrofit.converter.Converter converter33 = null;
        builder27.converter = converter33;
        java.util.concurrent.Executor executor35 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = builder17.setExecutors(executor26, executor35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor65 = builder57.callbackExecutor;
        restAdapter50.callbackExecutor = executor65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter67.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = builder49.setExecutors(executor65, executor82);
        java.util.concurrent.Executor executor85 = builder84.callbackExecutor;
        retrofit.RestAdapter.Builder builder86 = builder3.setExecutors(executor26, executor85);
        retrofit.client.Client.Provider provider87 = builder86.clientProvider;
        retrofit.client.Client client88 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder86.setClient(client88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(provider87);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Profiler profiler7 = restAdapter6.profiler;
        retrofit.Profiler profiler8 = restAdapter6.profiler;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = null;
        builder9.clientProvider = provider10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("Retrofit-Idle");
        retrofit.Server server14 = builder9.server;
        restAdapter6.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder19 = builder16.setServer("hi!");
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.Log log23 = restAdapter20.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter20.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = builder19.setLogLevel(logLevel24);
        retrofit.client.Client.Provider provider27 = null;
        builder19.clientProvider = provider27;
        retrofit.ErrorHandler errorHandler29 = builder19.errorHandler;
        retrofit.Server server30 = builder19.server;
        restAdapter6.server = server30;
        restAdapter0.server = server30;
        retrofit.Profiler profiler33 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = builder34.httpExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler39 = builder37.errorHandler;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        java.util.concurrent.Executor executor42 = builder40.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor43 = builder40.requestInterceptor;
        retrofit.RestAdapter.Builder builder44 = builder37.setRequestInterceptor(requestInterceptor43);
        retrofit.converter.Converter converter45 = builder37.converter;
        retrofit.RestAdapter.Builder builder47 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor76 = builder68.callbackExecutor;
        restAdapter61.callbackExecutor = executor76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        builder82.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder85 = builder82.setServer("hi!");
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter86.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter86.new RestHandler();
        retrofit.RestAdapter.Log log89 = restAdapter86.log;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter86.logLevel = logLevel90;
        retrofit.RestAdapter.Builder builder92 = builder85.setLogLevel(logLevel90);
        java.util.concurrent.Executor executor93 = builder85.callbackExecutor;
        restAdapter78.callbackExecutor = executor93;
        retrofit.RestAdapter.Builder builder95 = builder60.setExecutors(executor76, executor93);
        java.util.concurrent.Executor executor96 = builder95.httpExecutor;
        builder47.httpExecutor = executor96;
        builder34.callbackExecutor = executor96;
        restAdapter0.httpExecutor = executor96;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(logLevel87);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.httpExecutor = executor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler22 = restAdapter0.errorHandler;
        retrofit.Profiler profiler23 = null;
        restAdapter0.profiler = profiler23;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(errorHandler22);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder24 = builder19.setLogLevel(logLevel23);
        restAdapter0.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler28 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = builder29.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor32 = builder29.requestInterceptor;
        retrofit.RestAdapter.Builder builder33 = builder26.setRequestInterceptor(requestInterceptor32);
        retrofit.converter.Converter converter34 = builder26.converter;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider36 = null;
        builder35.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder39 = builder35.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log40 = builder39.log;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.Profiler profiler42 = restAdapter41.profiler;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        builder46.clientProvider = provider54;
        retrofit.ErrorHandler errorHandler56 = builder46.errorHandler;
        restAdapter41.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = builder39.setErrorHandler(errorHandler56);
        builder26.errorHandler = errorHandler56;
        restAdapter0.errorHandler = errorHandler56;
        java.lang.Throwable throwable61 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable61, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter2.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter2.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter2.getLogLevel();
        java.util.concurrent.Executor executor6 = restAdapter2.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.RequestInterceptor requestInterceptor20 = builder10.requestInterceptor;
        retrofit.RestAdapter restAdapter21 = builder10.build();
        retrofit.ErrorHandler errorHandler22 = builder10.errorHandler;
        retrofit.converter.Converter converter23 = builder10.converter;
        restAdapter2.converter = converter23;
        builder0.converter = converter23;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel64);
        restAdapter47.log = log61;
        builder46.log = log61;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter78.logLevel = logLevel80;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log61, logLevel80);
        retrofit.RestAdapter.Builder builder84 = builder36.setLog(log61);
        retrofit.Profiler profiler85 = builder36.profiler;
        retrofit.RestAdapter.LogLevel logLevel86 = builder36.logLevel;
        builder0.logLevel = logLevel86;
        java.util.concurrent.Executor executor88 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log89 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel90 = builder0.logLevel;
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.Profiler profiler12 = builder3.profiler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        restAdapter22.log = log36;
        builder21.log = log36;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log36, logLevel55);
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter58.new RestHandler();
        retrofit.Server server60 = restAdapter58.server;
        retrofit.client.Client.Provider provider61 = restAdapter58.clientProvider;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider73 = null;
        builder65.clientProvider = provider73;
        retrofit.RequestInterceptor requestInterceptor75 = builder65.requestInterceptor;
        retrofit.RestAdapter restAdapter76 = builder65.build();
        retrofit.ErrorHandler errorHandler77 = builder65.errorHandler;
        retrofit.ErrorHandler errorHandler78 = builder65.errorHandler;
        restAdapter58.errorHandler = errorHandler78;
        builder3.errorHandler = errorHandler78;
        retrofit.converter.Converter converter81 = builder3.converter;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(errorHandler77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(converter81);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Profiler profiler7 = restAdapter6.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider19 = null;
        builder11.clientProvider = provider19;
        retrofit.ErrorHandler errorHandler21 = builder11.errorHandler;
        restAdapter6.errorHandler = errorHandler21;
        retrofit.RestAdapter.Builder builder23 = builder4.setErrorHandler(errorHandler21);
        retrofit.RestAdapter restAdapter24 = builder4.build();
        retrofit.converter.Converter converter25 = restAdapter24.converter;
        retrofit.RestAdapter.Log log26 = restAdapter24.log;
        java.lang.Class<?> wildcardClass27 = restAdapter24.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(converter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter3 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Profiler profiler7 = restAdapter6.profiler;
        retrofit.Profiler profiler8 = restAdapter6.profiler;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter6.requestInterceptor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider21 = builder20.clientProvider;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        restAdapter31.log = log45;
        builder30.log = log45;
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter62.logLevel = logLevel64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel64);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log45, logLevel64);
        retrofit.RestAdapter.Builder builder68 = builder20.setLog(log45);
        retrofit.RestAdapter restAdapter69 = builder20.build();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder80 = builder73.setLogLevel(logLevel78);
        retrofit.client.Client.Provider provider81 = null;
        builder73.clientProvider = provider81;
        retrofit.RequestInterceptor requestInterceptor83 = builder73.requestInterceptor;
        retrofit.RestAdapter.Builder builder84 = builder20.setRequestInterceptor(requestInterceptor83);
        restAdapter6.requestInterceptor = requestInterceptor83;
        restAdapter0.requestInterceptor = requestInterceptor83;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter88 = restAdapter0.converter;
        retrofit.client.Response response90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response92 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response90, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(provider21);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNull(converter88);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.ErrorHandler errorHandler18 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.Server server30 = builder22.server;
        retrofit.RestAdapter.Builder builder31 = builder8.setServer(server30);
        retrofit.converter.Converter converter32 = builder31.converter;
        java.util.concurrent.Executor executor33 = builder31.callbackExecutor;
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder36 = builder31.setLog(log35);
        restAdapter0.log = log35;
        retrofit.Profiler profiler38 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(converter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(profiler38);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.httpExecutor = executor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log23 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder43 = builder38.setLogLevel(logLevel42);
        retrofit.Server server44 = null;
        builder38.server = server44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder49 = builder46.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log53 = restAdapter50.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.logLevel = logLevel54;
        retrofit.RestAdapter.Builder builder56 = builder49.setLogLevel(logLevel54);
        retrofit.client.Client.Provider provider57 = null;
        builder49.clientProvider = provider57;
        retrofit.RequestInterceptor requestInterceptor59 = builder49.requestInterceptor;
        retrofit.RestAdapter restAdapter60 = builder49.build();
        retrofit.ErrorHandler errorHandler61 = builder49.errorHandler;
        retrofit.converter.Converter converter62 = builder49.converter;
        retrofit.RestAdapter.Builder builder63 = builder38.setConverter(converter62);
        retrofit.RestAdapter.Log log64 = builder38.log;
        retrofit.RestAdapter.Builder builder65 = builder36.setLog(log64);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder71 = builder66.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        restAdapter0.logLevel = logLevel70;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = builder19.callbackExecutor;
        retrofit.Profiler profiler21 = null;
        builder19.profiler = profiler21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder19.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter38.getLogLevel();
        java.util.concurrent.Executor executor42 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        builder46.clientProvider = provider54;
        retrofit.RequestInterceptor requestInterceptor56 = builder46.requestInterceptor;
        retrofit.RestAdapter restAdapter57 = builder46.build();
        retrofit.ErrorHandler errorHandler58 = builder46.errorHandler;
        retrofit.converter.Converter converter59 = builder46.converter;
        restAdapter38.converter = converter59;
        builder36.converter = converter59;
        retrofit.RestAdapter.Builder builder62 = builder19.setConverter(converter59);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider79 = null;
        builder71.clientProvider = provider79;
        retrofit.ErrorHandler errorHandler81 = builder71.errorHandler;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        builder82.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder85 = builder82.setServer("hi!");
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter86.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler88 = restAdapter86.new RestHandler();
        retrofit.RestAdapter.Log log89 = restAdapter86.log;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter86.logLevel = logLevel90;
        retrofit.RestAdapter.Builder builder92 = builder85.setLogLevel(logLevel90);
        retrofit.Server server93 = builder85.server;
        retrofit.RestAdapter.Builder builder94 = builder71.setServer(server93);
        java.util.concurrent.Executor executor95 = builder94.httpExecutor;
        restAdapter63.callbackExecutor = executor95;
        builder19.callbackExecutor = executor95;
        builder0.httpExecutor = executor95;
        retrofit.RestAdapter.LogLevel logLevel99 = builder0.logLevel;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNotNull(converter59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNull(logLevel87);
        org.junit.Assert.assertNull(log89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertTrue("'" + logLevel99 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel99.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.converter.Converter converter7 = builder4.converter;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.callbackExecutor;
        retrofit.Profiler profiler23 = null;
        builder21.profiler = profiler23;
        retrofit.RestAdapter.Log log25 = builder21.log;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        java.util.concurrent.Executor executor37 = builder29.callbackExecutor;
        builder21.httpExecutor = executor37;
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel40 = builder21.logLevel;
        builder20.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder4.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder44 = builder4.setServer("Retrofit-Idle");
        retrofit.Profiler profiler45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder4.setProfiler(profiler45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.Server server31 = null;
        builder21.server = server31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        restAdapter42.log = log56;
        builder41.log = log56;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log56, logLevel64);
        retrofit.RestAdapter.Builder builder66 = builder21.setLogLevel(logLevel64);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.ErrorHandler errorHandler71 = null;
        restAdapter67.errorHandler = errorHandler71;
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter67.logLevel;
        retrofit.converter.Converter converter74 = null;
        restAdapter67.converter = converter74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder88 = builder86.setServer("hi!");
        retrofit.client.Client.Provider provider89 = builder88.clientProvider;
        restAdapter67.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder91 = builder21.setClient(provider89);
        retrofit.RestAdapter.Builder builder92 = builder0.setClient(provider89);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder92.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        java.util.concurrent.Executor executor12 = builder3.httpExecutor;
        retrofit.converter.Converter converter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder3.setConverter(converter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor12);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        retrofit.RestAdapter.Log log0 = retrofit.RestAdapter.Log.NONE;
        log0.log("");
        log0.log("");
        org.junit.Assert.assertNotNull(log0);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.Server server32 = builder24.server;
        retrofit.RestAdapter.Builder builder33 = builder10.setServer(server32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider45 = null;
        builder37.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider58 = null;
        builder50.clientProvider = provider58;
        retrofit.ErrorHandler errorHandler60 = builder50.errorHandler;
        retrofit.RestAdapter.Builder builder61 = builder37.setErrorHandler(errorHandler60);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        builder33.httpExecutor = executor62;
        java.util.concurrent.Executor executor64 = builder33.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel65 = builder33.logLevel;
        retrofit.client.Client.Provider provider66 = builder33.clientProvider;
        retrofit.RestAdapter restAdapter67 = builder33.build();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider79 = null;
        builder71.clientProvider = provider79;
        retrofit.ErrorHandler errorHandler81 = builder71.errorHandler;
        retrofit.Server server82 = null;
        retrofit.client.Client.Provider provider83 = null;
        java.util.concurrent.Executor executor84 = null;
        java.util.concurrent.Executor executor85 = null;
        retrofit.RequestInterceptor requestInterceptor86 = null;
        retrofit.converter.Converter converter87 = null;
        retrofit.Profiler profiler88 = null;
        retrofit.ErrorHandler errorHandler89 = null;
        retrofit.RestAdapter.Log log90 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter91 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter91.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter91.logLevel = logLevel93;
        retrofit.RestAdapter restAdapter95 = new retrofit.RestAdapter(server82, provider83, executor84, executor85, requestInterceptor86, converter87, profiler88, errorHandler89, log90, logLevel93);
        builder71.logLevel = logLevel93;
        retrofit.ErrorHandler errorHandler97 = builder71.errorHandler;
        retrofit.RestAdapter.Builder builder98 = builder33.setErrorHandler(errorHandler97);
        retrofit.RestAdapter.Builder builder99 = builder0.setErrorHandler(errorHandler97);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(restAdapter67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNull(logLevel92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(errorHandler97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel35);
        restAdapter18.log = log32;
        retrofit.RestAdapter.Builder builder39 = builder0.setLog(log32);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.Server server65 = builder57.server;
        retrofit.RestAdapter.Builder builder66 = builder43.setServer(server65);
        retrofit.RestAdapter.Log log67 = builder66.log;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.Server server69 = restAdapter68.server;
        retrofit.RequestInterceptor requestInterceptor70 = restAdapter68.requestInterceptor;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.RestAdapter.Builder builder83 = builder81.setServer("hi!");
        retrofit.client.Client.Provider provider84 = builder83.clientProvider;
        restAdapter68.clientProvider = provider84;
        retrofit.RestAdapter.Builder builder86 = builder66.setClient(provider84);
        retrofit.RestAdapter.LogLevel logLevel87 = null;
        builder66.logLevel = logLevel87;
        java.util.concurrent.Executor executor89 = builder66.callbackExecutor;
        java.util.concurrent.Executor executor90 = builder66.httpExecutor;
        builder0.callbackExecutor = executor90;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(provider84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider19 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder21 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.converter.Converter converter28 = restAdapter22.converter;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider40 = null;
        builder32.clientProvider = provider40;
        retrofit.ErrorHandler errorHandler42 = builder32.errorHandler;
        retrofit.Server server43 = builder32.server;
        restAdapter22.server = server43;
        retrofit.RestAdapter.Builder builder45 = builder0.setServer(server43);
        java.util.concurrent.Executor executor46 = builder45.httpExecutor;
        retrofit.Profiler profiler47 = null;
        builder45.profiler = profiler47;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(executor46);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter restAdapter17 = builder0.build();
        retrofit.client.Request request18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = restAdapter17.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(restAdapter17);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.Profiler profiler29 = builder26.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(profiler29);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.client.Client.Provider provider14 = builder3.clientProvider;
        retrofit.Profiler profiler15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder3.setProfiler(profiler15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(provider14);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.Server server20 = builder12.server;
        builder5.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.Server server56 = builder48.server;
        builder22.server = server56;
        builder5.server = server56;
        retrofit.RestAdapter.Builder builder59 = builder4.setServer(server56);
        retrofit.RestAdapter.LogLevel logLevel60 = builder4.logLevel;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder4.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.client.Client.Provider provider77 = null;
        builder69.clientProvider = provider77;
        retrofit.RequestInterceptor requestInterceptor79 = builder69.requestInterceptor;
        retrofit.RestAdapter restAdapter80 = builder69.build();
        retrofit.ErrorHandler errorHandler81 = builder69.errorHandler;
        retrofit.converter.Converter converter82 = builder69.converter;
        java.util.concurrent.Executor executor83 = builder69.callbackExecutor;
        builder65.httpExecutor = executor83;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        builder85.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder88 = builder85.setServer("hi!");
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter89.new RestHandler();
        retrofit.RestAdapter.Log log92 = restAdapter89.log;
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter89.logLevel = logLevel93;
        retrofit.RestAdapter.Builder builder95 = builder88.setLogLevel(logLevel93);
        builder95.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor97 = builder95.requestInterceptor;
        retrofit.Server server98 = builder95.server;
        retrofit.RestAdapter.Builder builder99 = builder65.setServer(server98);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(logLevel90);
        org.junit.Assert.assertNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(requestInterceptor97);
        org.junit.Assert.assertNotNull(server98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter24.errorHandler = errorHandler28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter24.logLevel;
        restAdapter20.logLevel = logLevel30;
        java.util.concurrent.Executor executor32 = restAdapter20.httpExecutor;
        retrofit.converter.Converter converter33 = null;
        restAdapter20.converter = converter33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.client.Client.Provider provider46 = null;
        builder38.clientProvider = provider46;
        retrofit.ErrorHandler errorHandler48 = builder38.errorHandler;
        retrofit.Server server49 = builder38.server;
        java.util.concurrent.Executor executor50 = builder38.httpExecutor;
        restAdapter20.callbackExecutor = executor50;
        restAdapter0.callbackExecutor = executor50;
        retrofit.Profiler profiler53 = null;
        restAdapter0.profiler = profiler53;
        java.util.concurrent.Executor executor55 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter60.errorHandler = errorHandler64;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter60.logLevel;
        restAdapter56.logLevel = logLevel66;
        java.util.concurrent.Executor executor68 = restAdapter56.httpExecutor;
        retrofit.converter.Converter converter69 = null;
        restAdapter56.converter = converter69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.ErrorHandler errorHandler84 = builder74.errorHandler;
        retrofit.Server server85 = builder74.server;
        java.util.concurrent.Executor executor86 = builder74.httpExecutor;
        restAdapter56.callbackExecutor = executor86;
        restAdapter0.callbackExecutor = executor86;
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable89, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(executor86);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        restAdapter0.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable20, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        builder0.server = server6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider19 = null;
        builder11.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = builder11.requestInterceptor;
        retrofit.RestAdapter restAdapter22 = builder11.build();
        retrofit.ErrorHandler errorHandler23 = builder11.errorHandler;
        retrofit.converter.Converter converter24 = builder11.converter;
        retrofit.RestAdapter.Builder builder25 = builder0.setConverter(converter24);
        retrofit.RestAdapter.Log log26 = builder0.log;
        retrofit.RequestInterceptor requestInterceptor27 = builder0.requestInterceptor;
        retrofit.client.Client client28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder0.setClient(client28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(converter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Log log16 = restAdapter14.log;
        java.util.concurrent.Executor executor17 = restAdapter14.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        restAdapter19.log = log33;
        builder18.log = log33;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.Server server52 = builder44.server;
        builder18.server = server52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider65 = null;
        builder57.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder18.setRequestInterceptor(requestInterceptor67);
        restAdapter14.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder70 = builder3.setRequestInterceptor(requestInterceptor67);
        retrofit.Profiler profiler71 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder72 = builder3.setProfiler(profiler71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter0.requestInterceptor;
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable9, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor8);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        restAdapter7.log = log21;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        restAdapter34.clientProvider = provider50;
        restAdapter28.clientProvider = provider50;
        restAdapter7.clientProvider = provider50;
        restAdapter0.clientProvider = provider50;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor56 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor59 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(executor59);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter14.converter;
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = builder28.clientProvider;
        restAdapter14.clientProvider = provider29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter14.getLogLevel();
        retrofit.Server server32 = restAdapter14.server;
        retrofit.ErrorHandler errorHandler33 = restAdapter14.errorHandler;
        retrofit.client.Request request34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = restAdapter14.logAndReplaceRequest(request34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(converter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(provider29);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(errorHandler33);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor5 = builder3.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = builder0.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.Server server23 = builder15.server;
        builder8.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        java.util.concurrent.Executor executor31 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider43 = null;
        builder35.clientProvider = provider43;
        retrofit.RequestInterceptor requestInterceptor45 = builder35.requestInterceptor;
        retrofit.RestAdapter restAdapter46 = builder35.build();
        retrofit.ErrorHandler errorHandler47 = builder35.errorHandler;
        retrofit.converter.Converter converter48 = builder35.converter;
        restAdapter27.converter = converter48;
        builder25.converter = converter48;
        retrofit.RestAdapter.Builder builder51 = builder8.setConverter(converter48);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        retrofit.client.Client.Provider provider68 = null;
        builder60.clientProvider = provider68;
        retrofit.ErrorHandler errorHandler70 = builder60.errorHandler;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.Server server82 = builder74.server;
        retrofit.RestAdapter.Builder builder83 = builder60.setServer(server82);
        java.util.concurrent.Executor executor84 = builder83.httpExecutor;
        restAdapter52.callbackExecutor = executor84;
        builder8.callbackExecutor = executor84;
        builder7.callbackExecutor = executor84;
        builder7.ensureSaneDefaults();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter89 = builder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Profiler profiler7 = restAdapter6.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider19 = null;
        builder11.clientProvider = provider19;
        retrofit.ErrorHandler errorHandler21 = builder11.errorHandler;
        restAdapter6.errorHandler = errorHandler21;
        retrofit.RestAdapter.Builder builder23 = builder4.setErrorHandler(errorHandler21);
        retrofit.RestAdapter restAdapter24 = builder4.build();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        restAdapter46.log = log60;
        builder45.log = log60;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter77.logLevel = logLevel79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel79);
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log60, logLevel79);
        retrofit.RestAdapter.Builder builder83 = builder35.setLog(log60);
        retrofit.RestAdapter restAdapter84 = builder35.build();
        retrofit.RestAdapter.LogLevel logLevel85 = builder35.logLevel;
        retrofit.RestAdapter.Builder builder86 = builder4.setLogLevel(logLevel85);
        boolean boolean87 = logLevel85.log();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(provider36);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.ErrorHandler errorHandler9 = null;
        restAdapter7.errorHandler = errorHandler9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.Server server12 = restAdapter11.server;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        restAdapter22.log = log36;
        builder21.log = log36;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log36, logLevel55);
        restAdapter11.log = log36;
        restAdapter7.log = log36;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.Server server73 = builder65.server;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = builder84.clientProvider;
        builder65.clientProvider = provider85;
        restAdapter7.clientProvider = provider85;
        restAdapter0.clientProvider = provider85;
        retrofit.Profiler profiler89 = restAdapter0.profiler;
        java.util.concurrent.Executor executor90 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler91 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNull(profiler89);
        org.junit.Assert.assertNull(executor90);
        org.junit.Assert.assertNull(profiler91);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = null;
        builder15.clientProvider = provider23;
        retrofit.RequestInterceptor requestInterceptor25 = builder15.requestInterceptor;
        retrofit.RestAdapter restAdapter26 = builder15.build();
        retrofit.Profiler profiler27 = builder15.profiler;
        retrofit.ErrorHandler errorHandler28 = builder15.errorHandler;
        builder3.errorHandler = errorHandler28;
        retrofit.RestAdapter restAdapter30 = builder3.build();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.Profiler profiler33 = null;
        builder31.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder31.log;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        builder31.httpExecutor = executor47;
        builder31.ensureSaneDefaults();
        retrofit.client.Client.Provider provider50 = builder31.clientProvider;
        builder3.clientProvider = provider50;
        retrofit.Profiler profiler52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder53 = builder3.setProfiler(profiler52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(provider50);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.callbackExecutor;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.client.Client.Provider provider48 = null;
        builder40.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.ErrorHandler errorHandler63 = builder53.errorHandler;
        retrofit.RestAdapter.Builder builder64 = builder40.setErrorHandler(errorHandler63);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.ErrorHandler errorHandler69 = null;
        restAdapter65.errorHandler = errorHandler69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.Server server72 = restAdapter71.server;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter71.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.RestAdapter.Builder builder86 = builder84.setServer("hi!");
        retrofit.client.Client.Provider provider87 = builder86.clientProvider;
        restAdapter71.clientProvider = provider87;
        restAdapter65.clientProvider = provider87;
        retrofit.RestAdapter.Builder builder90 = builder64.setClient(provider87);
        retrofit.RestAdapter restAdapter91 = builder90.build();
        retrofit.RestAdapter.Builder builder92 = new retrofit.RestAdapter.Builder();
        builder92.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder95 = builder92.setServer("hi!");
        retrofit.Server server96 = builder95.server;
        retrofit.RestAdapter.Builder builder97 = builder90.setServer(server96);
        retrofit.ErrorHandler errorHandler98 = builder90.errorHandler;
        retrofit.RestAdapter.Builder builder99 = builder0.setErrorHandler(errorHandler98);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(errorHandler63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(server96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(errorHandler98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        java.util.concurrent.Executor executor41 = builder33.callbackExecutor;
        restAdapter26.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        restAdapter43.callbackExecutor = executor58;
        retrofit.RestAdapter.Builder builder60 = builder25.setExecutors(executor41, executor58);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider72 = null;
        builder64.clientProvider = provider72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.ErrorHandler errorHandler87 = builder77.errorHandler;
        retrofit.RestAdapter.Builder builder88 = builder64.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder89 = builder25.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder90 = builder10.setErrorHandler(errorHandler87);
        retrofit.Profiler profiler91 = builder90.profiler;
        retrofit.Profiler profiler92 = builder90.profiler;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel94 = restAdapter93.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler95 = restAdapter93.new RestHandler();
        retrofit.RestAdapter.Log log96 = restAdapter93.log;
        retrofit.RestAdapter.LogLevel logLevel97 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter93.logLevel = logLevel97;
        retrofit.RestAdapter.Builder builder99 = builder90.setLogLevel(logLevel97);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNull(profiler92);
        org.junit.Assert.assertNull(logLevel94);
        org.junit.Assert.assertNull(log96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.ErrorHandler errorHandler17 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.Server server29 = builder21.server;
        retrofit.RestAdapter.Builder builder30 = builder7.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.client.Client.Provider provider42 = null;
        builder34.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider55 = null;
        builder47.clientProvider = provider55;
        retrofit.ErrorHandler errorHandler57 = builder47.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder34.setErrorHandler(errorHandler57);
        java.util.concurrent.Executor executor59 = builder58.httpExecutor;
        builder30.httpExecutor = executor59;
        java.util.concurrent.Executor executor61 = builder30.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel62 = builder30.logLevel;
        restAdapter0.logLevel = logLevel62;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        restAdapter0.requestInterceptor = requestInterceptor64;
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor66);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.Server server13 = null;
        builder3.server = server13;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.Log log17 = restAdapter15.log;
        java.util.concurrent.Executor executor18 = restAdapter15.httpExecutor;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        restAdapter15.log = log27;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor45 = builder37.callbackExecutor;
        restAdapter15.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        retrofit.Profiler profiler59 = null;
        builder50.profiler = profiler59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor76 = builder68.callbackExecutor;
        restAdapter61.callbackExecutor = executor76;
        builder50.callbackExecutor = executor76;
        retrofit.RestAdapter.Builder builder79 = builder3.setExecutors(executor45, executor76);
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Log log81 = builder79.log;
        retrofit.Profiler profiler82 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder83 = builder79.setProfiler(profiler82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(log81);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.Profiler profiler5 = builder0.profiler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = null;
        builder8.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter27 = builder16.build();
        retrofit.ErrorHandler errorHandler28 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder29 = builder8.setErrorHandler(errorHandler28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider41 = null;
        builder33.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = builder33.requestInterceptor;
        retrofit.RestAdapter restAdapter44 = builder33.build();
        retrofit.ErrorHandler errorHandler45 = builder33.errorHandler;
        retrofit.converter.Converter converter46 = builder33.converter;
        builder29.converter = converter46;
        restAdapter0.converter = converter46;
        retrofit.RestAdapter.Log log49 = restAdapter0.log;
        retrofit.RestAdapter.Log log50 = restAdapter0.log;
        java.util.concurrent.Executor executor51 = restAdapter0.callbackExecutor;
        java.lang.Class<?> wildcardClass52 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.Log log14 = restAdapter12.log;
        java.util.concurrent.Executor executor15 = restAdapter12.httpExecutor;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel27);
        restAdapter12.log = log24;
        builder3.log = log24;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider43 = null;
        builder35.clientProvider = provider43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.client.Client.Provider provider56 = null;
        builder48.clientProvider = provider56;
        retrofit.ErrorHandler errorHandler58 = builder48.errorHandler;
        retrofit.RestAdapter.Builder builder59 = builder35.setErrorHandler(errorHandler58);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter60.errorHandler = errorHandler64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.Server server67 = restAdapter66.server;
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter66.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        retrofit.client.Client.Provider provider82 = builder81.clientProvider;
        restAdapter66.clientProvider = provider82;
        restAdapter60.clientProvider = provider82;
        retrofit.RestAdapter.Builder builder85 = builder59.setClient(provider82);
        builder3.clientProvider = provider82;
        retrofit.RestAdapter restAdapter87 = builder3.build();
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter87.getLogLevel();
        retrofit.client.Response response90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response92 = restAdapter87.logAndReplaceResponse("hi!", response90, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.client.Response response7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response9 = restAdapter0.logAndReplaceResponse("", response7, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        java.util.concurrent.Executor executor23 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider35 = null;
        builder27.clientProvider = provider35;
        retrofit.RequestInterceptor requestInterceptor37 = builder27.requestInterceptor;
        retrofit.RestAdapter restAdapter38 = builder27.build();
        retrofit.ErrorHandler errorHandler39 = builder27.errorHandler;
        retrofit.converter.Converter converter40 = builder27.converter;
        restAdapter19.converter = converter40;
        builder17.converter = converter40;
        retrofit.RestAdapter.Builder builder43 = builder0.setConverter(converter40);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider55 = null;
        builder47.clientProvider = provider55;
        retrofit.RequestInterceptor requestInterceptor57 = builder47.requestInterceptor;
        retrofit.RestAdapter restAdapter58 = builder47.build();
        retrofit.ErrorHandler errorHandler59 = builder47.errorHandler;
        java.util.concurrent.Executor executor60 = builder47.callbackExecutor;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider72 = null;
        builder64.clientProvider = provider72;
        retrofit.Server server74 = null;
        builder64.server = server74;
        retrofit.RequestInterceptor requestInterceptor76 = builder64.requestInterceptor;
        builder47.requestInterceptor = requestInterceptor76;
        retrofit.RestAdapter.Builder builder78 = builder43.setRequestInterceptor(requestInterceptor76);
        retrofit.Profiler profiler79 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder80 = builder78.setProfiler(profiler79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(converter40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(converter4);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter16.requestInterceptor;
        retrofit.converter.Converter converter21 = null;
        restAdapter16.converter = converter21;
        retrofit.converter.Converter converter23 = restAdapter16.converter;
        retrofit.converter.Converter converter24 = null;
        restAdapter16.converter = converter24;
        java.util.concurrent.Executor executor26 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.Log log27 = restAdapter16.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.logLevel;
        restAdapter16.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder3.setLogLevel(logLevel34);
        java.util.concurrent.Executor executor37 = builder36.httpExecutor;
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.client.Client.Provider provider43 = restAdapter39.clientProvider;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor55 = builder47.callbackExecutor;
        retrofit.Profiler profiler56 = null;
        builder47.profiler = profiler56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        java.util.concurrent.Executor executor73 = builder65.callbackExecutor;
        restAdapter58.callbackExecutor = executor73;
        builder47.callbackExecutor = executor73;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        builder80.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder83 = builder80.setServer("hi!");
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log87 = restAdapter84.log;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter84.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder90 = builder83.setLogLevel(logLevel88);
        java.util.concurrent.Executor executor91 = builder83.callbackExecutor;
        restAdapter76.callbackExecutor = executor91;
        builder47.httpExecutor = executor91;
        java.util.concurrent.Executor executor94 = builder47.callbackExecutor;
        restAdapter39.callbackExecutor = executor94;
        builder36.httpExecutor = executor94;
        java.util.concurrent.Executor executor97 = builder36.httpExecutor;
        retrofit.RestAdapter restAdapter98 = builder36.build();
        retrofit.RestAdapter.LogLevel logLevel99 = restAdapter98.logLevel;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(logLevel85);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(executor97);
        org.junit.Assert.assertNotNull(restAdapter98);
        org.junit.Assert.assertTrue("'" + logLevel99 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel99.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.client.Client.Provider provider17 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter18.errorHandler = errorHandler20;
        retrofit.Profiler profiler22 = restAdapter18.profiler;
        retrofit.Profiler profiler23 = null;
        restAdapter18.profiler = profiler23;
        java.util.concurrent.Executor executor25 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.Log log26 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = builder30.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = builder30.build();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        retrofit.converter.Converter converter43 = restAdapter41.converter;
        restAdapter18.converter = converter43;
        builder0.converter = converter43;
        retrofit.RestAdapter restAdapter46 = builder0.build();
        retrofit.Profiler profiler47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder48 = builder0.setProfiler(profiler47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        restAdapter34.clientProvider = provider50;
        restAdapter28.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder53 = builder27.setClient(provider50);
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.Profiler profiler56 = restAdapter55.profiler;
        retrofit.Profiler profiler57 = restAdapter55.profiler;
        retrofit.RequestInterceptor requestInterceptor58 = restAdapter55.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean60 = logLevel59.log();
        restAdapter55.logLevel = logLevel59;
        boolean boolean62 = logLevel59.log();
        builder53.logLevel = logLevel59;
        boolean boolean64 = logLevel59.log();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        java.util.concurrent.Executor executor50 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        java.util.concurrent.Executor executor53 = builder51.httpExecutor;
        builder3.httpExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder67 = builder65.setServer("hi!");
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder69.setLogLevel(logLevel73);
        retrofit.Server server75 = null;
        builder69.server = server75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        builder77.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder80 = builder77.setServer("hi!");
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log84 = restAdapter81.log;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter81.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder87 = builder80.setLogLevel(logLevel85);
        retrofit.client.Client.Provider provider88 = null;
        builder80.clientProvider = provider88;
        retrofit.RequestInterceptor requestInterceptor90 = builder80.requestInterceptor;
        retrofit.RestAdapter restAdapter91 = builder80.build();
        retrofit.ErrorHandler errorHandler92 = builder80.errorHandler;
        retrofit.converter.Converter converter93 = builder80.converter;
        retrofit.RestAdapter.Builder builder94 = builder69.setConverter(converter93);
        retrofit.RestAdapter.Log log95 = builder69.log;
        retrofit.RestAdapter.Builder builder96 = builder67.setLog(log95);
        log95.log("hi!");
        retrofit.RestAdapter.Builder builder99 = builder3.setLog(log95);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(converter93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(log95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        restAdapter28.log = log42;
        builder27.log = log42;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.Server server61 = builder53.server;
        builder27.server = server61;
        restAdapter21.server = server61;
        retrofit.RestAdapter.Builder builder64 = builder19.setServer(server61);
        retrofit.converter.Converter converter65 = builder19.converter;
        builder0.converter = converter65;
        java.util.concurrent.Executor executor67 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder70 = builder0.setProfiler(profiler69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(executor67);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider19 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder21 = builder0.setServer("Retrofit-Idle");
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.Profiler profiler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder26 = builder21.setProfiler(profiler25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.ErrorHandler errorHandler17 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = builder31.callbackExecutor;
        retrofit.Profiler profiler33 = null;
        builder31.profiler = profiler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.Server server46 = builder38.server;
        builder31.server = server46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        restAdapter49.log = log63;
        builder48.log = log63;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.Server server82 = builder74.server;
        builder48.server = server82;
        builder31.server = server82;
        retrofit.RestAdapter.Builder builder85 = builder28.setServer(server82);
        retrofit.RestAdapter.Builder builder86 = builder7.setServer(server82);
        builder86.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter88 = builder86.build();
        retrofit.RestAdapter.LogLevel logLevel89 = builder86.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        retrofit.RestAdapter.Builder builder38 = builder7.setLog(log31);
        log31.log("hi!");
        retrofit.RestAdapter.Builder builder41 = builder3.setLog(log31);
        retrofit.RestAdapter.Log log42 = builder3.log;
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel44 = null;
        builder3.logLevel = logLevel44;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        builder27.server = server42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        restAdapter45.log = log59;
        builder44.log = log59;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        builder44.server = server78;
        builder27.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder24.setServer(server78);
        retrofit.RestAdapter.Builder builder82 = builder3.setServer(server78);
        builder82.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter84 = builder82.build();
        retrofit.client.Client.Provider provider85 = restAdapter84.clientProvider;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(provider85);
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Log log16 = restAdapter14.log;
        java.util.concurrent.Executor executor17 = restAdapter14.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        restAdapter19.log = log33;
        builder18.log = log33;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.Server server52 = builder44.server;
        builder18.server = server52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider65 = null;
        builder57.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder18.setRequestInterceptor(requestInterceptor67);
        restAdapter14.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder70 = builder3.setRequestInterceptor(requestInterceptor67);
        retrofit.Server server71 = builder3.server;
        retrofit.RestAdapter.Log log72 = null;
        builder3.log = log72;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log5;
        retrofit.client.Client client7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setClient(client7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(log5);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        java.util.concurrent.Executor executor14 = builder3.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor15 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNotNull(requestInterceptor15);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder21 = builder14.setLogLevel(logLevel19);
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.client.Client.Provider provider34 = null;
        builder26.clientProvider = provider34;
        retrofit.ErrorHandler errorHandler36 = builder26.errorHandler;
        retrofit.Server server37 = builder26.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.Server server49 = builder41.server;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.Log log52 = restAdapter50.log;
        java.util.concurrent.Executor executor53 = restAdapter50.httpExecutor;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        restAdapter50.log = log62;
        builder41.log = log62;
        retrofit.RestAdapter.Builder builder70 = builder26.setLog(log62);
        retrofit.RestAdapter.Builder builder71 = builder21.setLog(log62);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.Profiler profiler85 = builder82.profiler;
        retrofit.ErrorHandler errorHandler86 = builder82.errorHandler;
        builder82.ensureSaneDefaults();
        retrofit.Server server88 = builder82.server;
        builder71.server = server88;
        builder10.server = server88;
        retrofit.RestAdapter restAdapter91 = builder10.build();
        retrofit.client.Request request92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request93 = restAdapter91.logAndReplaceRequest(request92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(restAdapter91);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider62 = null;
        builder54.clientProvider = provider62;
        retrofit.RequestInterceptor requestInterceptor64 = builder54.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor64;
        retrofit.Server server66 = builder50.server;
        retrofit.client.Client client67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder50.setClient(client67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(server66);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.Log log6 = restAdapter0.log;
        java.util.concurrent.Executor executor7 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = null;
        builder15.clientProvider = provider23;
        retrofit.RequestInterceptor requestInterceptor25 = builder15.requestInterceptor;
        retrofit.RestAdapter restAdapter26 = builder15.build();
        retrofit.Profiler profiler27 = builder15.profiler;
        retrofit.ErrorHandler errorHandler28 = builder15.errorHandler;
        builder3.errorHandler = errorHandler28;
        retrofit.RestAdapter restAdapter30 = builder3.build();
        retrofit.client.Request request31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request32 = restAdapter30.logAndReplaceRequest(request31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(restAdapter30);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        retrofit.Server server50 = builder3.server;
        retrofit.RestAdapter restAdapter51 = builder3.build();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = builder55.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = builder55.build();
        retrofit.ErrorHandler errorHandler67 = builder55.errorHandler;
        retrofit.converter.Converter converter68 = builder55.converter;
        retrofit.RestAdapter.Builder builder69 = builder3.setConverter(converter68);
        retrofit.RequestInterceptor requestInterceptor70 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(requestInterceptor70);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder3.requestInterceptor = requestInterceptor5;
        retrofit.RestAdapter.LogLevel logLevel7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder3.setLogLevel(logLevel7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.Server server20 = builder12.server;
        builder5.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.Server server56 = builder48.server;
        builder22.server = server56;
        builder5.server = server56;
        retrofit.RestAdapter.Builder builder59 = builder4.setServer(server56);
        java.util.concurrent.Executor executor60 = builder59.callbackExecutor;
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel62 = null;
        builder59.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = builder64.setServer("hi!");
        retrofit.converter.Converter converter68 = builder64.converter;
        builder59.converter = converter68;
        retrofit.Profiler profiler70 = null;
        builder59.profiler = profiler70;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(converter68);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.converter.Converter converter7 = null;
        restAdapter0.converter = converter7;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        restAdapter26.requestInterceptor = requestInterceptor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        restAdapter33.log = log47;
        builder32.log = log47;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.Server server66 = builder58.server;
        builder32.server = server66;
        restAdapter26.server = server66;
        retrofit.RestAdapter.Builder builder69 = builder24.setServer(server66);
        restAdapter0.server = server66;
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor73 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.RequestInterceptor requestInterceptor87 = builder77.requestInterceptor;
        retrofit.RestAdapter restAdapter88 = builder77.build();
        retrofit.ErrorHandler errorHandler89 = builder77.errorHandler;
        retrofit.ErrorHandler errorHandler90 = builder77.errorHandler;
        java.util.concurrent.Executor executor91 = builder77.callbackExecutor;
        retrofit.converter.Converter converter92 = builder77.converter;
        restAdapter0.converter = converter92;
        retrofit.Server server94 = restAdapter0.server;
        retrofit.client.Request request95 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request96 = restAdapter0.logAndReplaceRequest(request95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(converter92);
        org.junit.Assert.assertNotNull(server94);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.converter.Converter converter7 = null;
        restAdapter0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel27);
        restAdapter10.log = log24;
        builder9.log = log24;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.Server server43 = builder35.server;
        builder9.server = server43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.client.Client.Provider provider56 = null;
        builder48.clientProvider = provider56;
        retrofit.RequestInterceptor requestInterceptor58 = builder48.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = builder9.setRequestInterceptor(requestInterceptor58);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider71 = null;
        builder63.clientProvider = provider71;
        retrofit.RequestInterceptor requestInterceptor73 = builder63.requestInterceptor;
        builder59.requestInterceptor = requestInterceptor73;
        retrofit.Server server75 = builder59.server;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler78 = builder76.errorHandler;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        java.util.concurrent.Executor executor81 = builder79.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor82 = builder79.requestInterceptor;
        retrofit.RestAdapter.Builder builder83 = builder76.setRequestInterceptor(requestInterceptor82);
        builder59.requestInterceptor = requestInterceptor82;
        restAdapter0.requestInterceptor = requestInterceptor82;
        java.lang.Throwable throwable86 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable86, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        java.lang.Throwable throwable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable8, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(profiler7);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.Server server20 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        java.util.concurrent.Executor executor32 = builder24.callbackExecutor;
        retrofit.Profiler profiler33 = null;
        builder24.profiler = profiler33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        java.util.concurrent.Executor executor50 = builder42.callbackExecutor;
        restAdapter35.callbackExecutor = executor50;
        builder24.callbackExecutor = executor50;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        java.util.concurrent.Executor executor68 = builder60.callbackExecutor;
        restAdapter53.callbackExecutor = executor68;
        builder24.httpExecutor = executor68;
        retrofit.Server server71 = builder24.server;
        restAdapter0.server = server71;
        retrofit.Server server73 = restAdapter0.server;
        retrofit.Profiler profiler74 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNull(profiler74);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel7);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = null;
        builder8.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter27 = builder16.build();
        retrofit.ErrorHandler errorHandler28 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder29 = builder8.setErrorHandler(errorHandler28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider41 = null;
        builder33.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = builder33.requestInterceptor;
        retrofit.RestAdapter restAdapter44 = builder33.build();
        retrofit.ErrorHandler errorHandler45 = builder33.errorHandler;
        retrofit.converter.Converter converter46 = builder33.converter;
        builder29.converter = converter46;
        restAdapter0.converter = converter46;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider64 = null;
        builder56.clientProvider = provider64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter81.logLevel = logLevel83;
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel83);
        restAdapter66.log = log80;
        retrofit.RestAdapter.Builder builder87 = builder56.setLog(log80);
        log80.log("hi!");
        retrofit.RestAdapter.Builder builder90 = builder52.setLog(log80);
        retrofit.RestAdapter.Log log91 = builder52.log;
        restAdapter0.log = log91;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log80);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(log91);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter5.logLevel = logLevel7;
        retrofit.ErrorHandler errorHandler9 = null;
        restAdapter5.errorHandler = errorHandler9;
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter5.requestInterceptor;
        retrofit.Profiler profiler12 = restAdapter5.profiler;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.Server server28 = builder20.server;
        restAdapter13.server = server28;
        restAdapter5.server = server28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        java.util.concurrent.Executor executor42 = builder34.callbackExecutor;
        retrofit.Profiler profiler43 = null;
        builder34.profiler = profiler43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        java.util.concurrent.Executor executor60 = builder52.callbackExecutor;
        restAdapter45.callbackExecutor = executor60;
        builder34.callbackExecutor = executor60;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        java.util.concurrent.Executor executor78 = builder70.callbackExecutor;
        restAdapter63.callbackExecutor = executor78;
        builder34.httpExecutor = executor78;
        java.util.concurrent.Executor executor81 = builder34.callbackExecutor;
        restAdapter5.callbackExecutor = executor81;
        restAdapter0.callbackExecutor = executor81;
        retrofit.Profiler profiler84 = null;
        restAdapter0.profiler = profiler84;
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter0.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass87 = logLevel86.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNull(logLevel86);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Log log16 = restAdapter14.log;
        java.util.concurrent.Executor executor17 = restAdapter14.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        restAdapter19.log = log33;
        builder18.log = log33;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.Server server52 = builder44.server;
        builder18.server = server52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider65 = null;
        builder57.clientProvider = provider65;
        retrofit.RequestInterceptor requestInterceptor67 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = builder18.setRequestInterceptor(requestInterceptor67);
        restAdapter14.requestInterceptor = requestInterceptor67;
        retrofit.RestAdapter.Builder builder70 = builder3.setRequestInterceptor(requestInterceptor67);
        retrofit.Server server71 = builder3.server;
        retrofit.ErrorHandler errorHandler72 = builder3.errorHandler;
        retrofit.RestAdapter restAdapter73 = builder3.build();
        retrofit.RequestInterceptor requestInterceptor74 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(requestInterceptor74);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Log log27 = builder26.log;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        restAdapter49.log = log63;
        builder48.log = log63;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter80.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log63, logLevel82);
        retrofit.RestAdapter.Builder builder86 = builder38.setLog(log63);
        retrofit.RestAdapter restAdapter87 = builder38.build();
        builder38.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler89 = builder38.errorHandler;
        builder26.errorHandler = errorHandler89;
        retrofit.converter.Converter converter91 = builder26.converter;
        retrofit.Profiler profiler92 = builder26.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNull(profiler92);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.client.Response response21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response23 = restAdapter0.logAndReplaceResponse("", response21, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        restAdapter39.log = log53;
        builder38.log = log53;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.Server server72 = builder64.server;
        builder38.server = server72;
        retrofit.RestAdapter.LogLevel logLevel74 = builder38.logLevel;
        builder36.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder0.setLogLevel(logLevel74);
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        retrofit.Profiler profiler78 = null;
        builder76.profiler = profiler78;
        java.lang.Class<?> wildcardClass80 = builder76.getClass();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.converter.Converter converter53 = null;
        builder0.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder60 = builder55.setLogLevel(logLevel59);
        retrofit.Server server61 = null;
        builder55.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.RequestInterceptor requestInterceptor76 = builder66.requestInterceptor;
        retrofit.RestAdapter restAdapter77 = builder66.build();
        retrofit.ErrorHandler errorHandler78 = builder66.errorHandler;
        retrofit.converter.Converter converter79 = builder66.converter;
        retrofit.RestAdapter.Builder builder80 = builder55.setConverter(converter79);
        builder0.converter = converter79;
        retrofit.RequestInterceptor requestInterceptor82 = builder0.requestInterceptor;
        retrofit.client.Client client83 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder84 = builder0.setClient(client83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor82);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        builder2.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = builder2.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter6.log;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter6.logLevel = logLevel10;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        java.util.concurrent.Executor executor43 = builder35.callbackExecutor;
        restAdapter28.callbackExecutor = executor43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        java.util.concurrent.Executor executor60 = builder52.callbackExecutor;
        restAdapter45.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = builder27.setExecutors(executor43, executor60);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider87 = null;
        builder79.clientProvider = provider87;
        retrofit.ErrorHandler errorHandler89 = builder79.errorHandler;
        retrofit.RestAdapter.Builder builder90 = builder66.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder91 = builder27.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder92 = builder12.setErrorHandler(errorHandler89);
        restAdapter0.errorHandler = errorHandler89;
        retrofit.ErrorHandler errorHandler94 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider95 = restAdapter0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor96 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNull(provider95);
        org.junit.Assert.assertNull(requestInterceptor96);
        org.junit.Assert.assertNull(logLevel97);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter16.requestInterceptor;
        retrofit.converter.Converter converter21 = null;
        restAdapter16.converter = converter21;
        retrofit.converter.Converter converter23 = restAdapter16.converter;
        retrofit.converter.Converter converter24 = null;
        restAdapter16.converter = converter24;
        java.util.concurrent.Executor executor26 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.Log log27 = restAdapter16.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.logLevel;
        restAdapter16.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder3.setLogLevel(logLevel34);
        java.util.concurrent.Executor executor37 = builder36.httpExecutor;
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.client.Client.Provider provider43 = restAdapter39.clientProvider;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor55 = builder47.callbackExecutor;
        retrofit.Profiler profiler56 = null;
        builder47.profiler = profiler56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        java.util.concurrent.Executor executor73 = builder65.callbackExecutor;
        restAdapter58.callbackExecutor = executor73;
        builder47.callbackExecutor = executor73;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        builder80.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder83 = builder80.setServer("hi!");
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log87 = restAdapter84.log;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter84.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder90 = builder83.setLogLevel(logLevel88);
        java.util.concurrent.Executor executor91 = builder83.callbackExecutor;
        restAdapter76.callbackExecutor = executor91;
        builder47.httpExecutor = executor91;
        java.util.concurrent.Executor executor94 = builder47.callbackExecutor;
        restAdapter39.callbackExecutor = executor94;
        builder36.httpExecutor = executor94;
        java.util.concurrent.Executor executor97 = builder36.httpExecutor;
        retrofit.RestAdapter.Builder builder99 = builder36.setServer("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(logLevel85);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(executor97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Server server13 = builder12.server;
        retrofit.RestAdapter restAdapter14 = builder12.build();
        java.util.concurrent.Executor executor15 = restAdapter14.httpExecutor;
        retrofit.client.Request request16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request17 = restAdapter14.logAndReplaceRequest(request16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.ErrorHandler errorHandler18 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.callbackExecutor;
        retrofit.Profiler profiler34 = null;
        builder32.profiler = profiler34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.Server server47 = builder39.server;
        builder32.server = server47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log53 = restAdapter50.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.logLevel = logLevel54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        restAdapter50.log = log64;
        builder49.log = log64;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.Server server83 = builder75.server;
        builder49.server = server83;
        builder32.server = server83;
        retrofit.RestAdapter.Builder builder86 = builder29.setServer(server83);
        retrofit.RestAdapter.Builder builder87 = builder8.setServer(server83);
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder89 = builder8.setLogLevel(logLevel88);
        java.util.concurrent.Executor executor90 = builder8.callbackExecutor;
        restAdapter0.httpExecutor = executor90;
        retrofit.Profiler profiler92 = null;
        restAdapter0.profiler = profiler92;
        retrofit.converter.Converter converter94 = restAdapter0.converter;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNull(converter94);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder21 = builder14.setLogLevel(logLevel19);
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.client.Client.Provider provider34 = null;
        builder26.clientProvider = provider34;
        retrofit.ErrorHandler errorHandler36 = builder26.errorHandler;
        retrofit.Server server37 = builder26.server;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.Server server49 = builder41.server;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.Log log52 = restAdapter50.log;
        java.util.concurrent.Executor executor53 = restAdapter50.httpExecutor;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        restAdapter50.log = log62;
        builder41.log = log62;
        retrofit.RestAdapter.Builder builder70 = builder26.setLog(log62);
        retrofit.RestAdapter.Builder builder71 = builder21.setLog(log62);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        retrofit.Profiler profiler85 = builder82.profiler;
        retrofit.ErrorHandler errorHandler86 = builder82.errorHandler;
        builder82.ensureSaneDefaults();
        retrofit.Server server88 = builder82.server;
        builder71.server = server88;
        builder10.server = server88;
        builder10.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder10.setErrorHandler(errorHandler92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(profiler85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(server88);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.client.Client.Provider provider17 = null;
        builder9.clientProvider = provider17;
        retrofit.ErrorHandler errorHandler19 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder23.setLogLevel(logLevel28);
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        retrofit.Profiler profiler35 = null;
        builder33.profiler = profiler35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.Server server48 = builder40.server;
        builder33.server = server48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter66.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        restAdapter51.log = log65;
        builder50.log = log65;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        builder73.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder73.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Log log80 = restAdapter77.log;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.logLevel = logLevel81;
        retrofit.RestAdapter.Builder builder83 = builder76.setLogLevel(logLevel81);
        retrofit.Server server84 = builder76.server;
        builder50.server = server84;
        builder33.server = server84;
        retrofit.RestAdapter.Builder builder87 = builder30.setServer(server84);
        retrofit.RestAdapter.Builder builder88 = builder9.setServer(server84);
        retrofit.ErrorHandler errorHandler89 = null;
        builder9.errorHandler = errorHandler89;
        retrofit.Profiler profiler91 = builder9.profiler;
        retrofit.Server server92 = builder9.server;
        restAdapter0.server = server92;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler91);
        org.junit.Assert.assertNotNull(server92);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.Server server47 = builder39.server;
        builder13.server = server47;
        builder10.server = server47;
        retrofit.RestAdapter.LogLevel logLevel50 = builder10.logLevel;
        retrofit.Server server51 = builder10.server;
        retrofit.client.Client client52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder53 = builder10.setClient(client52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server51);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        java.util.concurrent.Executor executor36 = builder28.callbackExecutor;
        restAdapter21.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        java.util.concurrent.Executor executor53 = builder45.callbackExecutor;
        restAdapter38.callbackExecutor = executor53;
        retrofit.RestAdapter.Builder builder55 = builder20.setExecutors(executor36, executor53);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = null;
        builder59.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.ErrorHandler errorHandler82 = builder72.errorHandler;
        retrofit.RestAdapter.Builder builder83 = builder59.setErrorHandler(errorHandler82);
        retrofit.RestAdapter.Builder builder84 = builder20.setErrorHandler(errorHandler82);
        java.util.concurrent.Executor executor85 = builder20.httpExecutor;
        restAdapter0.callbackExecutor = executor85;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log88 = restAdapter0.log;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertNull(log88);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        restAdapter34.clientProvider = provider50;
        restAdapter28.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder53 = builder27.setClient(provider50);
        java.util.concurrent.Executor executor54 = builder53.callbackExecutor;
        retrofit.RestAdapter.Log log55 = builder53.log;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(log55);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.logLevel;
        retrofit.Profiler profiler9 = null;
        restAdapter7.profiler = profiler9;
        java.util.concurrent.Executor executor11 = restAdapter7.httpExecutor;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel30);
        restAdapter13.log = log27;
        builder12.log = log27;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.Server server46 = builder38.server;
        builder12.server = server46;
        retrofit.RestAdapter.LogLevel logLevel48 = builder12.logLevel;
        restAdapter7.logLevel = logLevel48;
        retrofit.Profiler profiler50 = restAdapter7.profiler;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        restAdapter52.log = log66;
        builder51.log = log66;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.Server server85 = builder77.server;
        builder51.server = server85;
        retrofit.Server server87 = builder51.server;
        retrofit.RestAdapter.LogLevel logLevel88 = builder51.logLevel;
        restAdapter7.setLogLevel(logLevel88);
        boolean boolean90 = logLevel88.log();
        restAdapter0.logLevel = logLevel88;
        boolean boolean92 = logLevel88.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler50);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.Server server20 = restAdapter0.server;
        java.lang.Throwable throwable21 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable21, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server20);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        java.util.concurrent.Executor executor34 = builder26.callbackExecutor;
        restAdapter19.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        java.util.concurrent.Executor executor51 = builder43.callbackExecutor;
        restAdapter36.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = builder18.setExecutors(executor34, executor51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.client.Client.Provider provider65 = null;
        builder57.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider78 = null;
        builder70.clientProvider = provider78;
        retrofit.ErrorHandler errorHandler80 = builder70.errorHandler;
        retrofit.RestAdapter.Builder builder81 = builder57.setErrorHandler(errorHandler80);
        retrofit.RestAdapter.Builder builder82 = builder18.setErrorHandler(errorHandler80);
        java.util.concurrent.Executor executor83 = builder18.httpExecutor;
        restAdapter0.httpExecutor = executor83;
        retrofit.converter.Converter converter85 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNull(converter85);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.client.Client.Provider provider17 = null;
        builder9.clientProvider = provider17;
        retrofit.RequestInterceptor requestInterceptor19 = builder9.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = builder9.build();
        retrofit.Profiler profiler21 = builder9.profiler;
        retrofit.ErrorHandler errorHandler22 = builder9.errorHandler;
        restAdapter0.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter0.httpExecutor;
        retrofit.client.Response response26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response28 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response26, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(executor24);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler4 = null;
        restAdapter0.profiler = profiler4;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter7.new RestHandler();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log37, logLevel56);
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.Server server62 = restAdapter59.server;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter59.logLevel;
        restAdapter7.setLogLevel(logLevel63);
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        restAdapter18.requestInterceptor = requestInterceptor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        restAdapter25.log = log39;
        builder24.log = log39;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.Server server58 = builder50.server;
        builder24.server = server58;
        restAdapter18.server = server58;
        retrofit.RestAdapter.Builder builder61 = builder16.setServer(server58);
        java.util.concurrent.Executor executor62 = builder16.callbackExecutor;
        restAdapter0.httpExecutor = executor62;
        java.util.concurrent.Executor executor64 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter65.new RestHandler();
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.Log log74 = restAdapter72.log;
        retrofit.ErrorHandler errorHandler75 = restAdapter72.errorHandler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider87 = null;
        builder79.clientProvider = provider87;
        retrofit.RequestInterceptor requestInterceptor89 = builder79.requestInterceptor;
        restAdapter72.requestInterceptor = requestInterceptor89;
        restAdapter65.requestInterceptor = requestInterceptor89;
        restAdapter0.requestInterceptor = requestInterceptor89;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(requestInterceptor93);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor4 = builder3.httpExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter5.logLevel = logLevel7;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter9.logLevel = logLevel11;
        retrofit.ErrorHandler errorHandler13 = null;
        restAdapter9.errorHandler = errorHandler13;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter9.logLevel;
        restAdapter5.logLevel = logLevel15;
        java.util.concurrent.Executor executor17 = restAdapter5.httpExecutor;
        retrofit.converter.Converter converter18 = null;
        restAdapter5.converter = converter18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider31 = null;
        builder23.clientProvider = provider31;
        retrofit.ErrorHandler errorHandler33 = builder23.errorHandler;
        retrofit.Server server34 = builder23.server;
        java.util.concurrent.Executor executor35 = builder23.httpExecutor;
        restAdapter5.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.converter.Converter converter43 = restAdapter37.converter;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider55 = null;
        builder47.clientProvider = provider55;
        retrofit.ErrorHandler errorHandler57 = builder47.errorHandler;
        retrofit.Server server58 = builder47.server;
        restAdapter37.server = server58;
        retrofit.Server server60 = restAdapter37.server;
        restAdapter5.server = server60;
        builder3.server = server60;
        retrofit.RequestInterceptor requestInterceptor63 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(executor4);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(requestInterceptor63);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter24.errorHandler = errorHandler28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter24.logLevel;
        restAdapter20.logLevel = logLevel30;
        java.util.concurrent.Executor executor32 = restAdapter20.httpExecutor;
        retrofit.converter.Converter converter33 = null;
        restAdapter20.converter = converter33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.client.Client.Provider provider46 = null;
        builder38.clientProvider = provider46;
        retrofit.ErrorHandler errorHandler48 = builder38.errorHandler;
        retrofit.Server server49 = builder38.server;
        java.util.concurrent.Executor executor50 = builder38.httpExecutor;
        restAdapter20.callbackExecutor = executor50;
        restAdapter0.callbackExecutor = executor50;
        retrofit.Profiler profiler53 = null;
        restAdapter0.profiler = profiler53;
        java.util.concurrent.Executor executor55 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter60.errorHandler = errorHandler64;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter60.logLevel;
        restAdapter56.logLevel = logLevel66;
        java.util.concurrent.Executor executor68 = restAdapter56.httpExecutor;
        retrofit.converter.Converter converter69 = null;
        restAdapter56.converter = converter69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.ErrorHandler errorHandler84 = builder74.errorHandler;
        retrofit.Server server85 = builder74.server;
        java.util.concurrent.Executor executor86 = builder74.httpExecutor;
        restAdapter56.callbackExecutor = executor86;
        restAdapter0.callbackExecutor = executor86;
        java.util.concurrent.Executor executor89 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNull(executor89);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        builder52.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = builder52.build();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler58 = builder56.errorHandler;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        java.util.concurrent.Executor executor61 = builder59.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder59.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = builder56.setRequestInterceptor(requestInterceptor62);
        builder52.requestInterceptor = requestInterceptor62;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.Profiler profiler66 = restAdapter65.profiler;
        retrofit.Profiler profiler67 = restAdapter65.profiler;
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter65.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean70 = logLevel69.log();
        restAdapter65.logLevel = logLevel69;
        builder52.logLevel = logLevel69;
        retrofit.client.Client.Provider provider73 = builder52.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel74 = builder52.logLevel;
        retrofit.Profiler profiler75 = builder52.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNull(profiler67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler75);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Log log3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setLog(log3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter4.logLevel;
        restAdapter0.logLevel = logLevel10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Profiler profiler14 = restAdapter13.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = builder18.errorHandler;
        restAdapter13.errorHandler = errorHandler28;
        restAdapter0.errorHandler = errorHandler28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        restAdapter32.log = log46;
        builder31.log = log46;
        restAdapter0.log = log46;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        restAdapter57.log = log71;
        builder56.log = log71;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        retrofit.Server server90 = builder82.server;
        builder56.server = server90;
        retrofit.RestAdapter.LogLevel logLevel92 = builder56.logLevel;
        boolean boolean93 = logLevel92.log();
        boolean boolean94 = logLevel92.log();
        restAdapter0.logLevel = logLevel92;
        boolean boolean96 = logLevel92.log();
        java.lang.Class<?> wildcardClass97 = logLevel92.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        retrofit.RestAdapter restAdapter28 = builder27.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.Server server43 = restAdapter42.server;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter42.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter42.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder41.setLogLevel(logLevel45);
        boolean boolean48 = logLevel45.log();
        retrofit.RestAdapter.Builder builder49 = builder27.setLogLevel(logLevel45);
        retrofit.Profiler profiler50 = builder27.profiler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder27.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(profiler50);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder24 = builder19.setLogLevel(logLevel23);
        restAdapter0.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor27 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        restAdapter49.log = log63;
        builder48.log = log63;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter80.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log63, logLevel82);
        retrofit.RestAdapter.Builder builder86 = builder38.setLog(log63);
        retrofit.RestAdapter restAdapter87 = builder38.build();
        retrofit.RestAdapter.LogLevel logLevel88 = builder38.logLevel;
        retrofit.RestAdapter.Builder builder90 = builder38.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter91 = builder90.converter;
        restAdapter0.converter = converter91;
        java.lang.Throwable throwable93 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable93, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(converter91);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.ErrorHandler errorHandler9 = null;
        restAdapter7.errorHandler = errorHandler9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.Server server12 = restAdapter11.server;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        restAdapter22.log = log36;
        builder21.log = log36;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log36, logLevel55);
        restAdapter11.log = log36;
        restAdapter7.log = log36;
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.Server server73 = builder65.server;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = builder84.clientProvider;
        builder65.clientProvider = provider85;
        restAdapter7.clientProvider = provider85;
        restAdapter0.clientProvider = provider85;
        retrofit.converter.Converter converter89 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNull(converter89);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = null;
        builder20.clientProvider = provider28;
        retrofit.ErrorHandler errorHandler30 = builder20.errorHandler;
        retrofit.RestAdapter.Builder builder31 = builder7.setErrorHandler(errorHandler30);
        retrofit.RestAdapter restAdapter32 = builder31.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.Server server47 = restAdapter46.server;
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter46.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter46.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder45.setLogLevel(logLevel49);
        boolean boolean52 = logLevel49.log();
        restAdapter32.logLevel = logLevel49;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter21.errorHandler = errorHandler25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.Server server28 = restAdapter27.server;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter27.requestInterceptor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        restAdapter27.clientProvider = provider43;
        restAdapter21.clientProvider = provider43;
        restAdapter0.clientProvider = provider43;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel47;
        retrofit.RestAdapter.Log log49 = restAdapter0.log;
        retrofit.RestAdapter.Log log50 = restAdapter0.log;
        retrofit.client.Request request51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request52 = restAdapter0.logAndReplaceRequest(request51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(log50);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.ErrorHandler errorHandler6 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder12 = builder7.setLogLevel(logLevel11);
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        restAdapter22.log = log36;
        builder21.log = log36;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log36, logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder7.setLog(log36);
        retrofit.ErrorHandler errorHandler60 = builder7.errorHandler;
        builder5.errorHandler = errorHandler60;
        retrofit.RestAdapter restAdapter62 = builder5.build();
        retrofit.Profiler profiler63 = restAdapter62.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNull(profiler63);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.httpExecutor = executor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider22 = null;
        restAdapter0.clientProvider = provider22;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        restAdapter33.log = log47;
        builder32.log = log47;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log47, logLevel55);
        retrofit.RestAdapter.Log log57 = restAdapter56.log;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter58.getLogLevel();
        retrofit.Profiler profiler62 = null;
        restAdapter58.profiler = profiler62;
        retrofit.Server server64 = restAdapter58.server;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean66 = logLevel65.log();
        restAdapter58.logLevel = logLevel65;
        restAdapter56.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.Profiler profiler70 = restAdapter69.profiler;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.ErrorHandler errorHandler84 = builder74.errorHandler;
        restAdapter69.errorHandler = errorHandler84;
        restAdapter56.errorHandler = errorHandler84;
        restAdapter0.errorHandler = errorHandler84;
        retrofit.RequestInterceptor requestInterceptor88 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(profiler70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNull(requestInterceptor88);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter34.getLogLevel();
        retrofit.Profiler profiler38 = null;
        restAdapter34.profiler = profiler38;
        retrofit.Server server40 = restAdapter34.server;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean42 = logLevel41.log();
        restAdapter34.logLevel = logLevel41;
        restAdapter32.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.Profiler profiler46 = restAdapter45.profiler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider58 = null;
        builder50.clientProvider = provider58;
        retrofit.ErrorHandler errorHandler60 = builder50.errorHandler;
        restAdapter45.errorHandler = errorHandler60;
        restAdapter32.errorHandler = errorHandler60;
        retrofit.converter.Converter converter63 = restAdapter32.converter;
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter32.getLogLevel();
        java.util.concurrent.Executor executor65 = restAdapter32.httpExecutor;
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor65);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor5 = builder3.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = builder0.setRequestInterceptor(requestInterceptor6);
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setErrorHandler(errorHandler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(converter8);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel37);
        log29.log("hi!");
        builder5.log = log29;
        log29.log("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        java.util.concurrent.Executor executor10 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter12.errorHandler = errorHandler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.logLevel;
        restAdapter0.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log21 = restAdapter0.log;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter22.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = restAdapter22.profiler;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter22.new RestHandler();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        restAdapter37.log = log51;
        builder36.log = log51;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log51, logLevel59);
        restAdapter22.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider73 = null;
        builder65.clientProvider = provider73;
        retrofit.ErrorHandler errorHandler75 = builder65.errorHandler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.Server server87 = builder79.server;
        retrofit.RestAdapter.Builder builder88 = builder65.setServer(server87);
        retrofit.RestAdapter.Log log89 = builder88.log;
        log89.log("hi!");
        log89.log("hi!");
        restAdapter22.log = log89;
        restAdapter0.log = log89;
        retrofit.Server server96 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler97 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNull(server96);
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        builder16.log = log31;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.Server server50 = builder42.server;
        builder16.server = server50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder66 = builder16.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder67 = builder3.setRequestInterceptor(requestInterceptor65);
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        builder67.ensureSaneDefaults();
        retrofit.client.Client.Provider provider70 = builder67.clientProvider;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.RequestInterceptor requestInterceptor84 = builder74.requestInterceptor;
        retrofit.RestAdapter.Builder builder85 = new retrofit.RestAdapter.Builder();
        builder85.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder88 = builder85.setServer("hi!");
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter89.new RestHandler();
        retrofit.RestAdapter.Log log92 = restAdapter89.log;
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter89.logLevel = logLevel93;
        retrofit.RestAdapter.Builder builder95 = builder88.setLogLevel(logLevel93);
        retrofit.RestAdapter restAdapter96 = builder88.build();
        retrofit.converter.Converter converter97 = builder88.converter;
        retrofit.RestAdapter.Builder builder98 = builder74.setConverter(converter97);
        retrofit.RestAdapter.Builder builder99 = builder67.setConverter(converter97);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNotNull(provider70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(logLevel90);
        org.junit.Assert.assertNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(restAdapter96);
        org.junit.Assert.assertNotNull(converter97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = builder14.clientProvider;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        restAdapter25.log = log39;
        builder24.log = log39;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log39, logLevel58);
        retrofit.RestAdapter.Builder builder62 = builder14.setLog(log39);
        retrofit.RestAdapter restAdapter63 = builder14.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = builder64.setServer("hi!");
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log71 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = builder67.setLogLevel(logLevel72);
        retrofit.client.Client.Provider provider75 = null;
        builder67.clientProvider = provider75;
        retrofit.RequestInterceptor requestInterceptor77 = builder67.requestInterceptor;
        retrofit.RestAdapter.Builder builder78 = builder14.setRequestInterceptor(requestInterceptor77);
        restAdapter0.requestInterceptor = requestInterceptor77;
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor81 = restAdapter0.callbackExecutor;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass82 = executor81.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(provider15);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(executor81);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler10 = null;
        restAdapter0.profiler = profiler10;
        retrofit.client.Response response13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response15 = restAdapter0.logAndReplaceResponse("hi!", response13, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RestAdapter.Log log30 = builder26.log;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.Profiler profiler44 = builder41.profiler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.Profiler profiler47 = null;
        builder45.profiler = profiler47;
        retrofit.RestAdapter.Log log49 = builder45.log;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        java.util.concurrent.Executor executor61 = builder53.callbackExecutor;
        builder45.httpExecutor = executor61;
        builder45.ensureSaneDefaults();
        retrofit.client.Client.Provider provider64 = builder45.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder45.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.converter.Converter converter73 = restAdapter67.converter;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.ErrorHandler errorHandler87 = builder77.errorHandler;
        retrofit.Server server88 = builder77.server;
        restAdapter67.server = server88;
        retrofit.RestAdapter.Builder builder90 = builder45.setServer(server88);
        builder41.server = server88;
        retrofit.RestAdapter.Builder builder92 = builder26.setServer(server88);
        retrofit.Profiler profiler93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder94 = builder26.setProfiler(profiler93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        builder0.server = server6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider19 = null;
        builder11.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = builder11.requestInterceptor;
        retrofit.RestAdapter restAdapter22 = builder11.build();
        retrofit.ErrorHandler errorHandler23 = builder11.errorHandler;
        retrofit.converter.Converter converter24 = builder11.converter;
        retrofit.RestAdapter.Builder builder25 = builder0.setConverter(converter24);
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        retrofit.Profiler profiler28 = null;
        builder25.profiler = profiler28;
        java.util.concurrent.Executor executor30 = builder25.httpExecutor;
        java.util.concurrent.Executor executor31 = builder25.callbackExecutor;
        retrofit.Profiler profiler32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder33 = builder25.setProfiler(profiler32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(converter24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(executor31);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider19 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder21 = builder0.setServer("Retrofit-Idle");
        retrofit.Profiler profiler22 = null;
        builder21.profiler = profiler22;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        restAdapter7.log = log21;
        builder6.log = log21;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.Server server40 = builder32.server;
        builder6.server = server40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider53 = null;
        builder45.clientProvider = provider53;
        retrofit.RequestInterceptor requestInterceptor55 = builder45.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = builder6.setRequestInterceptor(requestInterceptor55);
        retrofit.RequestInterceptor requestInterceptor57 = builder56.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor57;
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter60 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNull(converter60);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        builder3.clientProvider = provider23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter25.errorHandler = errorHandler29;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter25.logLevel;
        builder3.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder38 = builder33.setLogLevel(logLevel37);
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        restAdapter48.log = log62;
        builder47.log = log62;
        retrofit.Server server70 = null;
        retrofit.client.Client.Provider provider71 = null;
        java.util.concurrent.Executor executor72 = null;
        java.util.concurrent.Executor executor73 = null;
        retrofit.RequestInterceptor requestInterceptor74 = null;
        retrofit.converter.Converter converter75 = null;
        retrofit.Profiler profiler76 = null;
        retrofit.ErrorHandler errorHandler77 = null;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter79.logLevel = logLevel81;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter(server70, provider71, executor72, executor73, requestInterceptor74, converter75, profiler76, errorHandler77, log78, logLevel81);
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log62, logLevel81);
        retrofit.RestAdapter.Builder builder85 = builder33.setLog(log62);
        retrofit.ErrorHandler errorHandler86 = builder33.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder3.setErrorHandler(errorHandler86);
        retrofit.ErrorHandler errorHandler88 = builder3.errorHandler;
        retrofit.client.Client.Provider provider89 = builder3.clientProvider;
        builder3.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(provider89);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        restAdapter26.log = log40;
        builder25.log = log40;
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel59);
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log40, logLevel59);
        retrofit.RestAdapter.Builder builder63 = builder15.setLog(log40);
        retrofit.RestAdapter restAdapter64 = builder15.build();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider76 = null;
        builder68.clientProvider = provider76;
        retrofit.RequestInterceptor requestInterceptor78 = builder68.requestInterceptor;
        retrofit.RestAdapter.Builder builder79 = builder15.setRequestInterceptor(requestInterceptor78);
        retrofit.ErrorHandler errorHandler80 = builder15.errorHandler;
        restAdapter0.errorHandler = errorHandler80;
        java.util.concurrent.Executor executor82 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(provider16);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNull(executor82);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = null;
        builder13.profiler = profiler15;
        retrofit.RestAdapter.Log log17 = builder13.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        builder13.httpExecutor = executor29;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel32 = builder13.logLevel;
        builder12.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.client.Client.Provider provider52 = null;
        builder44.clientProvider = provider52;
        retrofit.ErrorHandler errorHandler54 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.Server server66 = builder58.server;
        retrofit.RestAdapter.Builder builder67 = builder44.setServer(server66);
        retrofit.RestAdapter.Log log68 = builder67.log;
        log68.log("hi!");
        builder40.log = log68;
        retrofit.RestAdapter.Builder builder72 = builder12.setLog(log68);
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("");
        retrofit.RestAdapter.Builder builder76 = builder12.setLog(log73);
        retrofit.Profiler profiler77 = null;
        builder12.profiler = profiler77;
        retrofit.Server server79 = builder12.server;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server79);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.Server server23 = builder15.server;
        builder8.server = server23;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        restAdapter26.log = log40;
        log40.log("Retrofit-Idle");
        builder8.log = log40;
        restAdapter0.log = log40;
        retrofit.converter.Converter converter51 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter51);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        java.util.concurrent.Executor executor19 = builder17.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder23.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider31 = null;
        builder23.clientProvider = provider31;
        retrofit.ErrorHandler errorHandler33 = builder23.errorHandler;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        retrofit.Server server45 = builder37.server;
        retrofit.RestAdapter.Builder builder46 = builder23.setServer(server45);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider58 = null;
        builder50.clientProvider = provider58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider71 = null;
        builder63.clientProvider = provider71;
        retrofit.ErrorHandler errorHandler73 = builder63.errorHandler;
        retrofit.RestAdapter.Builder builder74 = builder50.setErrorHandler(errorHandler73);
        java.util.concurrent.Executor executor75 = builder74.httpExecutor;
        builder46.httpExecutor = executor75;
        java.util.concurrent.Executor executor77 = builder46.callbackExecutor;
        retrofit.RestAdapter.Builder builder78 = builder3.setExecutors(executor19, executor77);
        java.util.concurrent.Executor executor79 = builder3.httpExecutor;
        java.util.concurrent.Executor executor80 = builder3.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor81 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(provider18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        java.util.concurrent.Executor executor42 = builder34.callbackExecutor;
        restAdapter27.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        java.util.concurrent.Executor executor59 = builder51.callbackExecutor;
        restAdapter44.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = builder26.setExecutors(executor42, executor59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider73 = null;
        builder65.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.ErrorHandler errorHandler88 = builder78.errorHandler;
        retrofit.RestAdapter.Builder builder89 = builder65.setErrorHandler(errorHandler88);
        retrofit.RestAdapter.Builder builder90 = builder26.setErrorHandler(errorHandler88);
        java.util.concurrent.Executor executor91 = builder26.httpExecutor;
        builder3.callbackExecutor = executor91;
        retrofit.RestAdapter restAdapter93 = builder3.build();
        retrofit.RequestInterceptor requestInterceptor94 = builder3.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(restAdapter93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Log log1 = builder0.log;
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.Profiler profiler4 = builder0.profiler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder19 = builder16.setServer("hi!");
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler22 = restAdapter20.new RestHandler();
        retrofit.RestAdapter.Log log23 = restAdapter20.log;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter20.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = builder19.setLogLevel(logLevel24);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RequestInterceptor requestInterceptor31 = restAdapter29.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder28.setLogLevel(logLevel32);
        java.util.concurrent.Executor executor35 = builder34.httpExecutor;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.logLevel;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider49 = null;
        builder41.clientProvider = provider49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider62 = null;
        builder54.clientProvider = provider62;
        retrofit.ErrorHandler errorHandler64 = builder54.errorHandler;
        retrofit.RestAdapter.Builder builder65 = builder41.setErrorHandler(errorHandler64);
        restAdapter36.errorHandler = errorHandler64;
        retrofit.RestAdapter.Builder builder67 = builder34.setErrorHandler(errorHandler64);
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.client.Client.Provider provider72 = restAdapter68.clientProvider;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider74 = null;
        builder73.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder77 = builder73.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        builder78.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder78.setServer("hi!");
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log85 = restAdapter82.log;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter82.logLevel = logLevel86;
        retrofit.RestAdapter.Builder builder88 = builder81.setLogLevel(logLevel86);
        retrofit.client.Client.Provider provider89 = null;
        builder81.clientProvider = provider89;
        retrofit.RequestInterceptor requestInterceptor91 = builder81.requestInterceptor;
        retrofit.RestAdapter restAdapter92 = builder81.build();
        retrofit.ErrorHandler errorHandler93 = builder81.errorHandler;
        retrofit.RestAdapter.Builder builder94 = builder73.setErrorHandler(errorHandler93);
        restAdapter68.errorHandler = errorHandler93;
        builder67.errorHandler = errorHandler93;
        builder15.errorHandler = errorHandler93;
        retrofit.RestAdapter.Builder builder98 = builder0.setErrorHandler(errorHandler93);
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(requestInterceptor91);
        org.junit.Assert.assertNotNull(restAdapter92);
        org.junit.Assert.assertNotNull(errorHandler93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.Profiler profiler12 = builder3.profiler;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter13.errorHandler = errorHandler17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter13.logLevel;
        retrofit.converter.Converter converter20 = null;
        restAdapter13.converter = converter20;
        retrofit.converter.Converter converter22 = restAdapter13.converter;
        retrofit.Profiler profiler23 = null;
        restAdapter13.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter39.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        restAdapter46.log = log60;
        builder45.log = log60;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.Server server79 = builder71.server;
        builder45.server = server79;
        restAdapter39.server = server79;
        retrofit.RestAdapter.Builder builder82 = builder37.setServer(server79);
        restAdapter13.server = server79;
        retrofit.Server server84 = restAdapter13.server;
        builder3.server = server84;
        retrofit.RequestInterceptor requestInterceptor86 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder88 = builder3.setServer("hi!");
        retrofit.Server server89 = builder88.server;
        retrofit.Profiler profiler90 = builder88.profiler;
        retrofit.RestAdapter.LogLevel logLevel91 = builder88.logLevel;
        boolean boolean92 = logLevel91.log();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertTrue("'" + logLevel91 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel91.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor4 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider6 = null;
        builder5.clientProvider = provider6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log10 = builder9.log;
        builder9.ensureSaneDefaults();
        retrofit.Profiler profiler12 = builder9.profiler;
        retrofit.RestAdapter restAdapter13 = builder9.build();
        retrofit.converter.Converter converter14 = restAdapter13.converter;
        restAdapter0.converter = converter14;
        java.lang.Class<?> wildcardClass16 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(converter14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.Log log10 = restAdapter8.log;
        java.util.concurrent.Executor executor11 = restAdapter8.httpExecutor;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        restAdapter8.log = log20;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        java.util.concurrent.Executor executor38 = builder30.callbackExecutor;
        restAdapter8.callbackExecutor = executor38;
        retrofit.ErrorHandler errorHandler40 = restAdapter8.errorHandler;
        java.util.concurrent.Executor executor41 = restAdapter8.httpExecutor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder47 = builder42.setLogLevel(logLevel46);
        retrofit.Server server48 = null;
        builder42.server = server48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.RequestInterceptor requestInterceptor63 = builder53.requestInterceptor;
        retrofit.RestAdapter restAdapter64 = builder53.build();
        retrofit.ErrorHandler errorHandler65 = builder53.errorHandler;
        retrofit.converter.Converter converter66 = builder53.converter;
        retrofit.RestAdapter.Builder builder67 = builder42.setConverter(converter66);
        restAdapter8.converter = converter66;
        restAdapter0.converter = converter66;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(errorHandler40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(converter66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder30.setErrorHandler(errorHandler53);
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        builder26.httpExecutor = executor55;
        java.util.concurrent.Executor executor57 = builder26.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = builder26.logLevel;
        retrofit.client.Client.Provider provider59 = builder26.clientProvider;
        retrofit.client.Client client60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder26.setClient(client60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider59);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.ErrorHandler errorHandler17 = builder7.errorHandler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.Server server29 = builder21.server;
        retrofit.RestAdapter.Builder builder30 = builder7.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.client.Client.Provider provider42 = null;
        builder34.clientProvider = provider42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        retrofit.client.Client.Provider provider55 = null;
        builder47.clientProvider = provider55;
        retrofit.ErrorHandler errorHandler57 = builder47.errorHandler;
        retrofit.RestAdapter.Builder builder58 = builder34.setErrorHandler(errorHandler57);
        java.util.concurrent.Executor executor59 = builder58.httpExecutor;
        builder30.httpExecutor = executor59;
        java.util.concurrent.Executor executor61 = builder30.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel62 = builder30.logLevel;
        restAdapter0.logLevel = logLevel62;
        boolean boolean64 = logLevel62.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        java.util.concurrent.Executor executor10 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter12.errorHandler = errorHandler16;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter12.logLevel;
        restAdapter0.logLevel = logLevel18;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log21 = restAdapter0.log;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.ErrorHandler errorHandler24 = null;
        restAdapter22.errorHandler = errorHandler24;
        retrofit.Profiler profiler26 = restAdapter22.profiler;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter22.new RestHandler();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        restAdapter37.log = log51;
        builder36.log = log51;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log51, logLevel59);
        restAdapter22.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider73 = null;
        builder65.clientProvider = provider73;
        retrofit.ErrorHandler errorHandler75 = builder65.errorHandler;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.Server server87 = builder79.server;
        retrofit.RestAdapter.Builder builder88 = builder65.setServer(server87);
        retrofit.RestAdapter.Log log89 = builder88.log;
        log89.log("hi!");
        log89.log("hi!");
        restAdapter22.log = log89;
        restAdapter0.log = log89;
        java.lang.Throwable throwable96 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable96, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(log89);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        java.util.concurrent.Executor executor53 = builder52.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(executor53);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = builder5.callbackExecutor;
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.Server server20 = builder12.server;
        builder5.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.Server server56 = builder48.server;
        builder22.server = server56;
        builder5.server = server56;
        retrofit.RestAdapter.Builder builder59 = builder4.setServer(server56);
        retrofit.client.Client client60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder59.setClient(client60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        restAdapter53.log = log67;
        builder52.log = log67;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.Server server86 = builder78.server;
        builder52.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder50.setServer(server86);
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter89.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler91 = restAdapter89.new RestHandler();
        retrofit.RestAdapter.Log log92 = restAdapter89.log;
        retrofit.RestAdapter.LogLevel logLevel93 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter89.logLevel = logLevel93;
        retrofit.RestAdapter.Builder builder95 = builder50.setLogLevel(logLevel93);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder50.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(logLevel90);
        org.junit.Assert.assertNull(log92);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = null;
        builder9.clientProvider = provider10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.Server server29 = builder21.server;
        builder14.server = server29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        restAdapter32.log = log46;
        builder31.log = log46;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.Server server65 = builder57.server;
        builder31.server = server65;
        builder14.server = server65;
        retrofit.RestAdapter.Builder builder68 = builder13.setServer(server65);
        retrofit.RestAdapter.LogLevel logLevel69 = builder13.logLevel;
        restAdapter0.logLevel = logLevel69;
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter0.logLevel;
        retrofit.RestAdapter.Log log73 = restAdapter0.log;
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log73);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        restAdapter7.log = log21;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        restAdapter34.clientProvider = provider50;
        restAdapter28.clientProvider = provider50;
        restAdapter7.clientProvider = provider50;
        restAdapter0.clientProvider = provider50;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor56 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.Server server71 = restAdapter70.server;
        retrofit.RequestInterceptor requestInterceptor72 = restAdapter70.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter70.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder69.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor76 = builder75.httpExecutor;
        retrofit.RestAdapter.Log log77 = builder75.log;
        retrofit.RestAdapter restAdapter78 = builder75.build();
        retrofit.converter.Converter converter79 = builder75.converter;
        restAdapter0.converter = converter79;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(converter79);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        java.util.concurrent.Executor executor42 = builder34.callbackExecutor;
        restAdapter27.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        java.util.concurrent.Executor executor59 = builder51.callbackExecutor;
        restAdapter44.callbackExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = builder26.setExecutors(executor42, executor59);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider73 = null;
        builder65.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.ErrorHandler errorHandler88 = builder78.errorHandler;
        retrofit.RestAdapter.Builder builder89 = builder65.setErrorHandler(errorHandler88);
        retrofit.RestAdapter.Builder builder90 = builder26.setErrorHandler(errorHandler88);
        java.util.concurrent.Executor executor91 = builder26.httpExecutor;
        builder3.callbackExecutor = executor91;
        retrofit.RestAdapter.Log log93 = builder3.log;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(log93);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.ErrorHandler errorHandler18 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.Server server30 = builder22.server;
        retrofit.RestAdapter.Builder builder31 = builder8.setServer(server30);
        java.util.concurrent.Executor executor32 = builder31.httpExecutor;
        restAdapter0.callbackExecutor = executor32;
        retrofit.ErrorHandler errorHandler34 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(errorHandler34);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.ErrorHandler errorHandler6 = builder4.errorHandler;
        retrofit.Profiler profiler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder4.setProfiler(profiler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.Server server32 = builder24.server;
        retrofit.RestAdapter.Builder builder33 = builder10.setServer(server32);
        retrofit.RestAdapter.Log log34 = builder33.log;
        log34.log("hi!");
        builder6.log = log34;
        retrofit.RestAdapter restAdapter38 = builder6.build();
        retrofit.converter.Converter converter39 = builder6.converter;
        retrofit.Profiler profiler40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder6.setProfiler(profiler40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(converter39);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter22.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder21.setLogLevel(logLevel29);
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.ErrorHandler errorHandler33 = null;
        restAdapter31.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.client.Client.Provider provider46 = null;
        builder38.clientProvider = provider46;
        retrofit.ErrorHandler errorHandler48 = builder38.errorHandler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.Server server60 = builder52.server;
        retrofit.RestAdapter.Builder builder61 = builder38.setServer(server60);
        retrofit.converter.Converter converter62 = builder61.converter;
        restAdapter31.converter = converter62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = builder64.setServer("hi!");
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.Log log71 = restAdapter68.log;
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter68.logLevel = logLevel72;
        retrofit.RestAdapter.Builder builder74 = builder67.setLogLevel(logLevel72);
        retrofit.client.Client.Provider provider75 = null;
        builder67.clientProvider = provider75;
        retrofit.RequestInterceptor requestInterceptor77 = builder67.requestInterceptor;
        retrofit.RestAdapter restAdapter78 = builder67.build();
        java.util.concurrent.Executor executor79 = restAdapter78.callbackExecutor;
        retrofit.converter.Converter converter80 = restAdapter78.converter;
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        restAdapter31.log = log81;
        retrofit.RestAdapter.Builder builder83 = builder30.setLog(log81);
        log81.log("hi!");
        log81.log("");
        log81.log("Retrofit-Idle");
        java.lang.Class<?> wildcardClass90 = log81.getClass();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(converter62);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(log71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(converter80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder30.setErrorHandler(errorHandler53);
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        builder26.httpExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter57.errorHandler = errorHandler61;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter57.logLevel;
        retrofit.converter.Converter converter64 = null;
        restAdapter57.converter = converter64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("hi!");
        retrofit.client.Client.Provider provider79 = builder78.clientProvider;
        restAdapter57.clientProvider = provider79;
        retrofit.RestAdapter.Builder builder81 = builder26.setClient(provider79);
        retrofit.RequestInterceptor requestInterceptor82 = builder81.requestInterceptor;
        retrofit.client.Client.Provider provider83 = builder81.clientProvider;
        java.util.concurrent.Executor executor84 = builder81.callbackExecutor;
        retrofit.ErrorHandler errorHandler85 = builder81.errorHandler;
        retrofit.Profiler profiler86 = null;
        builder81.profiler = profiler86;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNotNull(executor84);
        org.junit.Assert.assertNotNull(errorHandler85);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider10 = null;
        builder9.clientProvider = provider10;
        retrofit.RestAdapter.Builder builder13 = builder9.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.Server server29 = builder21.server;
        builder14.server = server29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        restAdapter32.log = log46;
        builder31.log = log46;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.Server server65 = builder57.server;
        builder31.server = server65;
        builder14.server = server65;
        retrofit.RestAdapter.Builder builder68 = builder13.setServer(server65);
        retrofit.RestAdapter.LogLevel logLevel69 = builder13.logLevel;
        restAdapter0.logLevel = logLevel69;
        retrofit.client.Client.Provider provider71 = restAdapter0.clientProvider;
        retrofit.Server server72 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNull(server72);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.client.Client.Provider provider14 = builder3.clientProvider;
        retrofit.ErrorHandler errorHandler15 = null;
        builder3.errorHandler = errorHandler15;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(provider14);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor52 = builder50.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel71);
        restAdapter54.log = log68;
        builder53.log = log68;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.Server server87 = builder79.server;
        builder53.server = server87;
        retrofit.RestAdapter.Builder builder89 = builder50.setServer(server87);
        retrofit.client.Client.Provider provider90 = builder50.clientProvider;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(provider90);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter13.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor19 = builder18.httpExecutor;
        retrofit.RestAdapter.Log log20 = builder18.log;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = builder22.callbackExecutor;
        retrofit.Profiler profiler24 = null;
        builder22.profiler = profiler24;
        retrofit.RestAdapter.Log log26 = builder22.log;
        retrofit.converter.Converter converter27 = builder22.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = builder22.logLevel;
        boolean boolean29 = logLevel28.log();
        restAdapter21.setLogLevel(logLevel28);
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter21.logLevel;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider43 = null;
        builder35.clientProvider = provider43;
        retrofit.ErrorHandler errorHandler45 = builder35.errorHandler;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        builder35.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.Log log63 = restAdapter61.log;
        java.util.concurrent.Executor executor64 = restAdapter61.httpExecutor;
        retrofit.Server server65 = null;
        retrofit.client.Client.Provider provider66 = null;
        java.util.concurrent.Executor executor67 = null;
        java.util.concurrent.Executor executor68 = null;
        retrofit.RequestInterceptor requestInterceptor69 = null;
        retrofit.converter.Converter converter70 = null;
        retrofit.Profiler profiler71 = null;
        retrofit.ErrorHandler errorHandler72 = null;
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter74.logLevel = logLevel76;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server65, provider66, executor67, executor68, requestInterceptor69, converter70, profiler71, errorHandler72, log73, logLevel76);
        restAdapter61.log = log73;
        retrofit.RestAdapter.Builder builder80 = builder35.setLog(log73);
        retrofit.RequestInterceptor requestInterceptor81 = builder80.requestInterceptor;
        restAdapter21.requestInterceptor = requestInterceptor81;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter3.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter3.log;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter3.logLevel = logLevel7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        restAdapter3.log = log17;
        builder2.log = log17;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.Server server36 = builder28.server;
        builder2.server = server36;
        retrofit.RestAdapter.LogLevel logLevel38 = builder2.logLevel;
        builder0.logLevel = logLevel38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder0.setLog(log48);
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.Server server56 = restAdapter55.server;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter55.requestInterceptor;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        java.util.concurrent.Executor executor73 = builder65.callbackExecutor;
        restAdapter58.callbackExecutor = executor73;
        restAdapter55.httpExecutor = executor73;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider87 = builder86.clientProvider;
        java.util.concurrent.Executor executor88 = builder86.callbackExecutor;
        retrofit.RestAdapter.Builder builder89 = builder0.setExecutors(executor73, executor88);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        retrofit.RestAdapter.Log log18 = builder0.log;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter19.errorHandler = errorHandler23;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter19.logLevel;
        retrofit.converter.Converter converter26 = null;
        restAdapter19.converter = converter26;
        retrofit.converter.Converter converter28 = restAdapter19.converter;
        retrofit.Profiler profiler29 = null;
        restAdapter19.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        java.util.concurrent.Executor executor42 = builder34.callbackExecutor;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter43.errorHandler = errorHandler47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.Server server50 = restAdapter49.server;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        restAdapter49.clientProvider = provider65;
        restAdapter43.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder68 = builder34.setClient(provider65);
        restAdapter19.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder70 = builder0.setClient(provider65);
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder72.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.ErrorHandler errorHandler16 = builder3.errorHandler;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter38.errorHandler = errorHandler42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.Server server45 = restAdapter44.server;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter44.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        restAdapter44.clientProvider = provider60;
        restAdapter38.clientProvider = provider60;
        restAdapter17.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder64 = builder3.setClient(provider60);
        retrofit.converter.Converter converter65 = builder64.converter;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider67 = null;
        builder66.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder70 = builder66.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.RequestInterceptor requestInterceptor84 = builder74.requestInterceptor;
        retrofit.RestAdapter restAdapter85 = builder74.build();
        retrofit.ErrorHandler errorHandler86 = builder74.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder66.setErrorHandler(errorHandler86);
        retrofit.RestAdapter.Builder builder88 = builder64.setErrorHandler(errorHandler86);
        retrofit.ErrorHandler errorHandler89 = builder88.errorHandler;
        java.util.concurrent.Executor executor90 = builder88.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) '4', "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.ErrorHandler errorHandler14 = builder10.errorHandler;
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Log log16 = builder10.log;
        log16.log("");
        log16.log("");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(log16);
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter12.errorHandler = errorHandler16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.Server server19 = restAdapter18.server;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        restAdapter18.clientProvider = provider34;
        restAdapter12.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder37 = builder3.setClient(provider34);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider49 = null;
        builder41.clientProvider = provider49;
        retrofit.RequestInterceptor requestInterceptor51 = builder41.requestInterceptor;
        retrofit.RestAdapter restAdapter52 = builder41.build();
        java.util.concurrent.Executor executor53 = restAdapter52.callbackExecutor;
        retrofit.converter.Converter converter54 = restAdapter52.converter;
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = builder66.clientProvider;
        restAdapter52.clientProvider = provider67;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter52.getLogLevel();
        retrofit.Server server70 = restAdapter52.server;
        java.util.concurrent.Executor executor71 = restAdapter52.callbackExecutor;
        builder3.callbackExecutor = executor71;
        retrofit.client.Client.Provider provider73 = builder3.clientProvider;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(provider34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(restAdapter52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(converter54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(executor71);
        org.junit.Assert.assertNotNull(provider73);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.RequestInterceptor requestInterceptor28 = builder18.requestInterceptor;
        retrofit.RestAdapter restAdapter29 = builder18.build();
        java.util.concurrent.Executor executor30 = restAdapter29.callbackExecutor;
        retrofit.converter.Converter converter31 = restAdapter29.converter;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.Log log35 = restAdapter33.log;
        java.util.concurrent.Executor executor36 = restAdapter33.httpExecutor;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        restAdapter33.log = log45;
        java.util.concurrent.Executor executor52 = restAdapter33.httpExecutor;
        retrofit.Profiler profiler53 = restAdapter33.profiler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        restAdapter55.log = log69;
        builder54.log = log69;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        builder77.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder80 = builder77.setServer("hi!");
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log84 = restAdapter81.log;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter81.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder87 = builder80.setLogLevel(logLevel85);
        retrofit.Server server88 = builder80.server;
        builder54.server = server88;
        retrofit.RestAdapter.LogLevel logLevel90 = builder54.logLevel;
        restAdapter33.logLevel = logLevel90;
        restAdapter29.setLogLevel(logLevel90);
        retrofit.RestAdapter.Builder builder93 = builder3.setLogLevel(logLevel90);
        retrofit.Profiler profiler94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder95 = builder3.setProfiler(profiler94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(converter31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder12.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.Server server20 = null;
        builder14.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.converter.Converter converter38 = builder25.converter;
        retrofit.RestAdapter.Builder builder39 = builder14.setConverter(converter38);
        retrofit.RestAdapter.Log log40 = builder14.log;
        retrofit.RestAdapter.Builder builder41 = builder12.setLog(log40);
        retrofit.Profiler profiler42 = builder12.profiler;
        retrofit.converter.Converter converter43 = null;
        builder12.converter = converter43;
        retrofit.RequestInterceptor requestInterceptor45 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider59 = builder58.clientProvider;
        retrofit.ErrorHandler errorHandler60 = builder58.errorHandler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter77.logLevel = logLevel79;
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel79);
        restAdapter62.log = log76;
        builder61.log = log76;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        builder84.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder87 = builder84.setServer("hi!");
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter88.new RestHandler();
        retrofit.RestAdapter.Log log91 = restAdapter88.log;
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter88.logLevel = logLevel92;
        retrofit.RestAdapter.Builder builder94 = builder87.setLogLevel(logLevel92);
        retrofit.Server server95 = builder87.server;
        builder61.server = server95;
        builder58.server = server95;
        retrofit.RestAdapter.Builder builder98 = builder47.setServer(server95);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(provider59);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder13 = builder8.setLogLevel(logLevel12);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log37, logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder8.setLog(log37);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder66 = builder61.setLogLevel(logLevel65);
        retrofit.Server server67 = null;
        builder61.server = server67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.RequestInterceptor requestInterceptor82 = builder72.requestInterceptor;
        retrofit.RestAdapter restAdapter83 = builder72.build();
        retrofit.ErrorHandler errorHandler84 = builder72.errorHandler;
        retrofit.converter.Converter converter85 = builder72.converter;
        retrofit.RestAdapter.Builder builder86 = builder61.setConverter(converter85);
        retrofit.RestAdapter.Log log87 = builder61.log;
        retrofit.RestAdapter.Builder builder88 = builder8.setLog(log87);
        restAdapter0.log = log87;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter90.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter90.logLevel = logLevel92;
        retrofit.RequestInterceptor requestInterceptor94 = null;
        restAdapter90.requestInterceptor = requestInterceptor94;
        retrofit.RequestInterceptor requestInterceptor96 = restAdapter90.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter90.getLogLevel();
        restAdapter0.logLevel = logLevel97;
        retrofit.Profiler profiler99 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(logLevel91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler99);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel42);
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter45.new RestHandler();
        retrofit.Server server47 = restAdapter45.server;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        restAdapter49.log = log63;
        builder48.log = log63;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.Server server82 = builder74.server;
        builder48.server = server82;
        retrofit.Server server84 = builder48.server;
        retrofit.RestAdapter.LogLevel logLevel85 = builder48.logLevel;
        restAdapter45.logLevel = logLevel85;
        retrofit.ErrorHandler errorHandler87 = null;
        restAdapter45.errorHandler = errorHandler87;
        retrofit.client.Response response90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response92 = restAdapter45.logAndReplaceResponse("", response90, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.logLevel = logLevel29;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel29);
        restAdapter12.log = log26;
        builder11.log = log26;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        retrofit.Server server45 = builder37.server;
        builder11.server = server45;
        retrofit.RestAdapter.LogLevel logLevel47 = builder11.logLevel;
        builder9.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider60 = null;
        builder52.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder52.errorHandler;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        builder52.logLevel = logLevel74;
        retrofit.ErrorHandler errorHandler78 = builder52.errorHandler;
        builder9.errorHandler = errorHandler78;
        restAdapter0.errorHandler = errorHandler78;
        retrofit.client.Response response82 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response84 = restAdapter0.logAndReplaceResponse("", response82, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(errorHandler78);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        builder16.log = log31;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.Server server50 = builder42.server;
        builder16.server = server50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = builder55.requestInterceptor;
        retrofit.RestAdapter.Builder builder66 = builder16.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder67 = builder3.setRequestInterceptor(requestInterceptor65);
        retrofit.client.Client.Provider provider68 = builder67.clientProvider;
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.Profiler profiler71 = restAdapter70.profiler;
        retrofit.Profiler profiler72 = restAdapter70.profiler;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter70.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean75 = logLevel74.log();
        restAdapter70.logLevel = logLevel74;
        boolean boolean77 = logLevel74.log();
        retrofit.RestAdapter.Builder builder78 = builder67.setLogLevel(logLevel74);
        builder67.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(provider68);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(profiler72);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        retrofit.Server server50 = builder3.server;
        retrofit.RestAdapter restAdapter51 = builder3.build();
        builder3.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor53 = builder3.requestInterceptor;
        retrofit.converter.Converter converter54 = builder3.converter;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(converter54);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.RequestInterceptor requestInterceptor20 = builder10.requestInterceptor;
        retrofit.RestAdapter restAdapter21 = builder10.build();
        retrofit.ErrorHandler errorHandler22 = builder10.errorHandler;
        retrofit.converter.Converter converter23 = builder10.converter;
        java.util.concurrent.Executor executor24 = builder10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor25 = builder10.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = builder31.requestInterceptor;
        retrofit.RestAdapter restAdapter42 = builder31.build();
        retrofit.ErrorHandler errorHandler43 = builder31.errorHandler;
        retrofit.converter.Converter converter44 = builder31.converter;
        java.util.concurrent.Executor executor45 = builder31.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor46 = builder31.requestInterceptor;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter47.getLogLevel();
        builder31.logLevel = logLevel52;
        java.util.concurrent.Executor executor54 = builder31.callbackExecutor;
        restAdapter0.callbackExecutor = executor54;
        retrofit.converter.Converter converter56 = restAdapter0.converter;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(converter23);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNull(converter56);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor30 = builder22.callbackExecutor;
        restAdapter0.callbackExecutor = executor30;
        retrofit.ErrorHandler errorHandler32 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor33 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor34 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor35 = restAdapter0.callbackExecutor;
        retrofit.client.Response response37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response39 = restAdapter0.logAndReplaceResponse("", response37, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(executor35);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter22.log;
        java.util.concurrent.Executor executor25 = restAdapter22.httpExecutor;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel37);
        restAdapter22.log = log34;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder46 = builder41.setLogLevel(logLevel45);
        restAdapter22.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder48 = builder21.setLogLevel(logLevel45);
        retrofit.RequestInterceptor requestInterceptor49 = builder48.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.Server server63 = null;
        builder53.server = server63;
        retrofit.RequestInterceptor requestInterceptor65 = builder53.requestInterceptor;
        builder48.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider78 = null;
        builder70.clientProvider = provider78;
        retrofit.RequestInterceptor requestInterceptor80 = builder70.requestInterceptor;
        retrofit.RestAdapter restAdapter81 = builder70.build();
        java.util.concurrent.Executor executor82 = restAdapter81.callbackExecutor;
        retrofit.converter.Converter converter83 = restAdapter81.converter;
        retrofit.RestAdapter.Builder builder84 = builder48.setConverter(converter83);
        builder48.ensureSaneDefaults();
        retrofit.converter.Converter converter86 = builder48.converter;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter87.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter87.logLevel = logLevel89;
        retrofit.RequestInterceptor requestInterceptor91 = null;
        restAdapter87.requestInterceptor = requestInterceptor91;
        retrofit.RequestInterceptor requestInterceptor93 = restAdapter87.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler94 = restAdapter87.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter87.getLogLevel();
        boolean boolean96 = logLevel95.log();
        builder48.logLevel = logLevel95;
        retrofit.RestAdapter.Builder builder99 = builder48.setServer("hi!");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNull(logLevel88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor93);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        java.util.concurrent.Executor executor28 = builder3.callbackExecutor;
        retrofit.Profiler profiler29 = builder3.profiler;
        retrofit.ErrorHandler errorHandler30 = builder3.errorHandler;
        java.lang.Class<?> wildcardClass31 = builder3.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        java.util.concurrent.Executor executor10 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor11 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder30.setErrorHandler(errorHandler53);
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        builder26.httpExecutor = executor55;
        java.util.concurrent.Executor executor57 = builder26.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = builder26.logLevel;
        retrofit.client.Client.Provider provider59 = builder26.clientProvider;
        retrofit.RestAdapter restAdapter60 = builder26.build();
        java.util.concurrent.Executor executor61 = builder26.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(executor61);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = converter6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(converter6);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        restAdapter7.log = log21;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        restAdapter34.clientProvider = provider50;
        restAdapter28.clientProvider = provider50;
        restAdapter7.clientProvider = provider50;
        restAdapter0.clientProvider = provider50;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor56 = restAdapter0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel66);
        retrofit.client.Client.Provider provider69 = null;
        builder61.clientProvider = provider69;
        retrofit.ErrorHandler errorHandler71 = builder61.errorHandler;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.Server server83 = builder75.server;
        retrofit.RestAdapter.Builder builder84 = builder61.setServer(server83);
        retrofit.converter.Converter converter85 = builder84.converter;
        java.util.concurrent.Executor executor86 = builder84.callbackExecutor;
        retrofit.converter.Converter converter87 = builder84.converter;
        retrofit.RestAdapter.LogLevel logLevel88 = builder84.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor4 = builder0.callbackExecutor;
        retrofit.Profiler profiler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setProfiler(profiler5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(executor4);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedInput typedInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response4 = new retrofit.client.Response(10, "hi!", headerList2, typedInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder15.clientProvider;
        restAdapter0.clientProvider = provider16;
        java.util.concurrent.Executor executor18 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider30 = null;
        builder22.clientProvider = provider30;
        retrofit.RequestInterceptor requestInterceptor32 = builder22.requestInterceptor;
        retrofit.RestAdapter restAdapter33 = builder22.build();
        retrofit.ErrorHandler errorHandler34 = builder22.errorHandler;
        retrofit.ErrorHandler errorHandler35 = builder22.errorHandler;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.Log log38 = restAdapter36.log;
        java.util.concurrent.Executor executor39 = restAdapter36.httpExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        restAdapter41.log = log55;
        builder40.log = log55;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.Server server74 = builder66.server;
        builder40.server = server74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider87 = null;
        builder79.clientProvider = provider87;
        retrofit.RequestInterceptor requestInterceptor89 = builder79.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder40.setRequestInterceptor(requestInterceptor89);
        restAdapter36.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter.Builder builder92 = builder22.setRequestInterceptor(requestInterceptor89);
        retrofit.Profiler profiler93 = builder22.profiler;
        retrofit.RequestInterceptor requestInterceptor94 = builder22.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor94;
        retrofit.client.Client.Provider provider96 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(provider16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(profiler93);
        org.junit.Assert.assertNotNull(requestInterceptor94);
        org.junit.Assert.assertNotNull(provider96);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider21 = null;
        builder13.clientProvider = provider21;
        retrofit.ErrorHandler errorHandler23 = builder13.errorHandler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.Server server35 = builder27.server;
        retrofit.RestAdapter.Builder builder36 = builder13.setServer(server35);
        retrofit.converter.Converter converter37 = builder36.converter;
        java.util.concurrent.Executor executor38 = builder36.callbackExecutor;
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder36.logLevel;
        boolean boolean41 = logLevel40.log();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(converter37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(converter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        builder2.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = builder2.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter6.log;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter6.logLevel = logLevel10;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel10);
        java.util.concurrent.Executor executor13 = builder5.callbackExecutor;
        retrofit.Profiler profiler14 = null;
        builder5.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder23.setLogLevel(logLevel28);
        java.util.concurrent.Executor executor31 = builder23.callbackExecutor;
        restAdapter16.callbackExecutor = executor31;
        builder5.callbackExecutor = executor31;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        java.util.concurrent.Executor executor49 = builder41.callbackExecutor;
        restAdapter34.callbackExecutor = executor49;
        builder5.httpExecutor = executor49;
        restAdapter0.callbackExecutor = executor49;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor54 = null;
        restAdapter0.httpExecutor = executor54;
        java.util.concurrent.Executor executor56 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor57 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(executor57);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel24);
        restAdapter7.log = log21;
        builder6.log = log21;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.Server server40 = builder32.server;
        builder6.server = server40;
        restAdapter0.server = server40;
        retrofit.ErrorHandler errorHandler43 = restAdapter0.errorHandler;
        retrofit.client.Client.Provider provider44 = restAdapter0.clientProvider;
        retrofit.client.Response response46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response48 = restAdapter0.logAndReplaceResponse("hi!", response46, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(provider44);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter4.logLevel;
        restAdapter0.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter0.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = builder18.errorHandler;
        retrofit.Server server29 = builder18.server;
        java.util.concurrent.Executor executor30 = builder18.httpExecutor;
        restAdapter0.callbackExecutor = executor30;
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter0.new RestHandler();
        retrofit.client.Request request33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request34 = restAdapter0.logAndReplaceRequest(request33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(executor30);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        java.util.concurrent.Executor executor1 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter3.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter3.log;
        retrofit.ErrorHandler errorHandler7 = null;
        restAdapter3.errorHandler = errorHandler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder14 = builder9.setLogLevel(logLevel13);
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        restAdapter24.log = log38;
        builder23.log = log38;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log38, logLevel57);
        retrofit.RestAdapter.Builder builder61 = builder9.setLog(log38);
        retrofit.ErrorHandler errorHandler62 = builder9.errorHandler;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.logLevel;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider76 = null;
        builder68.clientProvider = provider76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        builder78.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder78.setServer("hi!");
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log85 = restAdapter82.log;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter82.logLevel = logLevel86;
        retrofit.RestAdapter.Builder builder88 = builder81.setLogLevel(logLevel86);
        retrofit.client.Client.Provider provider89 = null;
        builder81.clientProvider = provider89;
        retrofit.ErrorHandler errorHandler91 = builder81.errorHandler;
        retrofit.RestAdapter.Builder builder92 = builder68.setErrorHandler(errorHandler91);
        restAdapter63.errorHandler = errorHandler91;
        builder9.errorHandler = errorHandler91;
        restAdapter3.errorHandler = errorHandler91;
        restAdapter0.errorHandler = errorHandler91;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.converter.Converter converter23 = restAdapter17.converter;
        java.util.concurrent.Executor executor24 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider36 = null;
        builder28.clientProvider = provider36;
        retrofit.RequestInterceptor requestInterceptor38 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter39 = builder28.build();
        retrofit.ErrorHandler errorHandler40 = builder28.errorHandler;
        retrofit.converter.Converter converter41 = builder28.converter;
        restAdapter17.converter = converter41;
        builder13.converter = converter41;
        builder4.converter = converter41;
        retrofit.converter.Converter converter45 = builder4.converter;
        retrofit.ErrorHandler errorHandler46 = builder4.errorHandler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNull(errorHandler46);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.logLevel;
        retrofit.Profiler profiler15 = null;
        restAdapter13.profiler = profiler15;
        java.util.concurrent.Executor executor17 = restAdapter13.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel36);
        restAdapter19.log = log33;
        builder18.log = log33;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.Server server52 = builder44.server;
        builder18.server = server52;
        retrofit.RestAdapter.LogLevel logLevel54 = builder18.logLevel;
        restAdapter13.logLevel = logLevel54;
        retrofit.Profiler profiler56 = restAdapter13.profiler;
        java.util.concurrent.Executor executor57 = restAdapter13.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter13.logLevel;
        builder10.logLevel = logLevel58;
        retrofit.RestAdapter.LogLevel logLevel60 = builder10.logLevel;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder66 = builder61.setLogLevel(logLevel65);
        retrofit.converter.Converter converter67 = null;
        builder61.converter = converter67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.ErrorHandler errorHandler73 = null;
        restAdapter69.errorHandler = errorHandler73;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter69.logLevel;
        retrofit.converter.Converter converter76 = null;
        restAdapter69.converter = converter76;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        builder78.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder78.setServer("hi!");
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log85 = restAdapter82.log;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter82.logLevel = logLevel86;
        retrofit.RestAdapter.Builder builder88 = builder81.setLogLevel(logLevel86);
        retrofit.RestAdapter.Builder builder90 = builder88.setServer("hi!");
        retrofit.client.Client.Provider provider91 = builder90.clientProvider;
        restAdapter69.clientProvider = provider91;
        retrofit.RestAdapter.Builder builder93 = builder61.setClient(provider91);
        retrofit.Server server94 = builder93.server;
        retrofit.RestAdapter.Builder builder95 = builder10.setServer(server94);
        retrofit.Profiler profiler96 = builder10.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(provider91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(server94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNull(profiler96);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.Profiler profiler9 = null;
        restAdapter0.profiler = profiler9;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter11.new RestHandler();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        restAdapter25.log = log39;
        builder24.log = log39;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log39, logLevel58);
        restAdapter11.setLogLevel(logLevel58);
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter11.getLogLevel();
        restAdapter0.logLevel = logLevel63;
        retrofit.Server server65 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor66 = restAdapter0.requestInterceptor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNull(requestInterceptor66);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter4.logLevel;
        restAdapter0.logLevel = logLevel10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Profiler profiler14 = restAdapter13.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = builder18.errorHandler;
        restAdapter13.errorHandler = errorHandler28;
        restAdapter0.errorHandler = errorHandler28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        restAdapter32.log = log46;
        builder31.log = log46;
        restAdapter0.log = log46;
        retrofit.client.Client.Provider provider55 = restAdapter0.clientProvider;
        java.lang.Throwable throwable56 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable56, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider55);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.Server server4 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.ErrorHandler errorHandler18 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider30 = null;
        builder22.clientProvider = provider30;
        retrofit.ErrorHandler errorHandler32 = builder22.errorHandler;
        retrofit.Server server33 = builder22.server;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        retrofit.client.Client.Provider provider45 = builder44.clientProvider;
        retrofit.RestAdapter.Builder builder46 = builder22.setClient(provider45);
        builder8.clientProvider = provider45;
        retrofit.RestAdapter.Builder builder49 = builder8.setServer("Retrofit-Idle");
        retrofit.converter.Converter converter50 = builder8.converter;
        retrofit.RestAdapter.LogLevel logLevel51 = builder8.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(provider45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(converter50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.ErrorHandler errorHandler15 = builder3.errorHandler;
        java.util.concurrent.Executor executor16 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = null;
        builder20.clientProvider = provider28;
        retrofit.Server server30 = null;
        builder20.server = server30;
        retrofit.RequestInterceptor requestInterceptor32 = builder20.requestInterceptor;
        builder3.requestInterceptor = requestInterceptor32;
        retrofit.Profiler profiler34 = null;
        builder3.profiler = profiler34;
        retrofit.RequestInterceptor requestInterceptor36 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter37 = builder3.build();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.ErrorHandler errorHandler42 = null;
        restAdapter38.errorHandler = errorHandler42;
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter38.requestInterceptor;
        retrofit.Profiler profiler45 = restAdapter38.profiler;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.Server server61 = builder53.server;
        restAdapter46.server = server61;
        restAdapter38.server = server61;
        java.util.concurrent.Executor executor64 = restAdapter38.callbackExecutor;
        retrofit.converter.Converter converter65 = restAdapter38.converter;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        java.util.concurrent.Executor executor68 = builder66.httpExecutor;
        restAdapter38.httpExecutor = executor68;
        builder3.httpExecutor = executor68;
        java.util.concurrent.Executor executor71 = builder3.callbackExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(executor71);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        java.util.concurrent.Executor executor14 = builder6.callbackExecutor;
        retrofit.Profiler profiler15 = null;
        builder6.profiler = profiler15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        java.util.concurrent.Executor executor32 = builder24.callbackExecutor;
        restAdapter17.callbackExecutor = executor32;
        builder6.callbackExecutor = executor32;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        java.util.concurrent.Executor executor50 = builder42.callbackExecutor;
        restAdapter35.callbackExecutor = executor50;
        builder6.httpExecutor = executor50;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider64 = null;
        builder56.clientProvider = provider64;
        retrofit.ErrorHandler errorHandler66 = builder56.errorHandler;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        retrofit.RestAdapter.Builder builder79 = builder56.setServer(server78);
        java.util.concurrent.Executor executor80 = builder79.httpExecutor;
        retrofit.RestAdapter.Builder builder81 = builder0.setExecutors(executor50, executor80);
        java.util.concurrent.Executor executor82 = builder0.callbackExecutor;
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel84 = builder0.logLevel;
        retrofit.client.Client client85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder0.setClient(client85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        restAdapter0.server = server15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        restAdapter26.log = log40;
        builder25.log = log40;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log40, logLevel48);
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter51.new RestHandler();
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.Log log58 = restAdapter56.log;
        java.util.concurrent.Executor executor59 = restAdapter56.httpExecutor;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel71);
        restAdapter56.log = log68;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder80 = builder75.setLogLevel(logLevel79);
        restAdapter56.logLevel = logLevel79;
        restAdapter51.setLogLevel(logLevel79);
        restAdapter49.logLevel = logLevel79;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("Retrofit-Idle");
        retrofit.Server server8 = builder3.server;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider21 = null;
        builder13.clientProvider = provider21;
        retrofit.ErrorHandler errorHandler23 = builder13.errorHandler;
        retrofit.Server server24 = builder13.server;
        restAdapter0.server = server24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        restAdapter40.log = log54;
        builder39.log = log54;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.Server server73 = builder65.server;
        builder39.server = server73;
        builder36.server = server73;
        restAdapter0.server = server73;
        retrofit.Profiler profiler77 = null;
        restAdapter0.profiler = profiler77;
        retrofit.client.Response response80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response82 = restAdapter0.logAndReplaceResponse("hi!", response80, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter21.errorHandler = errorHandler25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.Server server28 = restAdapter27.server;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter27.requestInterceptor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        restAdapter27.clientProvider = provider43;
        restAdapter21.clientProvider = provider43;
        restAdapter0.clientProvider = provider43;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider60 = null;
        builder52.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder52.errorHandler;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.Server server74 = builder66.server;
        retrofit.RestAdapter.Builder builder75 = builder52.setServer(server74);
        retrofit.converter.Converter converter76 = builder75.converter;
        restAdapter0.converter = converter76;
        retrofit.client.Response response79 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response81 = restAdapter0.logAndReplaceResponse("", response79, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(converter76);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.client.Client.Provider provider17 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider19 = null;
        builder18.clientProvider = provider19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.client.Client.Provider provider34 = null;
        builder26.clientProvider = provider34;
        retrofit.RequestInterceptor requestInterceptor36 = builder26.requestInterceptor;
        retrofit.RestAdapter restAdapter37 = builder26.build();
        retrofit.ErrorHandler errorHandler38 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder39 = builder18.setErrorHandler(errorHandler38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.Log log42 = restAdapter40.log;
        java.util.concurrent.Executor executor43 = restAdapter40.httpExecutor;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        restAdapter40.log = log52;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder62 = builder59.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder64 = builder59.setLogLevel(logLevel63);
        restAdapter40.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder66 = builder39.setLogLevel(logLevel63);
        retrofit.RequestInterceptor requestInterceptor67 = builder66.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider79 = null;
        builder71.clientProvider = provider79;
        retrofit.Server server81 = null;
        builder71.server = server81;
        retrofit.RequestInterceptor requestInterceptor83 = builder71.requestInterceptor;
        builder66.requestInterceptor = requestInterceptor83;
        retrofit.RestAdapter.Builder builder85 = builder0.setRequestInterceptor(requestInterceptor83);
        java.lang.Class<?> wildcardClass86 = requestInterceptor83.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(requestInterceptor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.Server server32 = builder24.server;
        retrofit.RestAdapter.Builder builder33 = builder10.setServer(server32);
        retrofit.converter.Converter converter34 = builder33.converter;
        java.util.concurrent.Executor executor35 = builder33.callbackExecutor;
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        retrofit.RestAdapter.Log log37 = builder33.log;
        retrofit.RestAdapter.Builder builder38 = builder3.setLog(log37);
        retrofit.RestAdapter restAdapter39 = builder38.build();
        java.util.concurrent.Executor executor40 = restAdapter39.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(executor40);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.RequestInterceptor requestInterceptor27 = builder17.requestInterceptor;
        retrofit.RestAdapter.Builder builder28 = builder3.setRequestInterceptor(requestInterceptor27);
        retrofit.ErrorHandler errorHandler29 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder30 = builder3.setErrorHandler(errorHandler29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter9.logLevel = logLevel11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        retrofit.converter.Converter converter15 = restAdapter13.converter;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = builder27.clientProvider;
        restAdapter13.clientProvider = provider28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter13.logLevel;
        java.util.concurrent.Executor executor31 = restAdapter13.callbackExecutor;
        retrofit.Profiler profiler32 = restAdapter13.profiler;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter33.errorHandler = errorHandler37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.Server server40 = restAdapter39.server;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter39.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        restAdapter39.clientProvider = provider55;
        restAdapter33.clientProvider = provider55;
        retrofit.RestAdapter.Log log58 = restAdapter33.log;
        java.util.concurrent.Executor executor59 = restAdapter33.httpExecutor;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.converter.Converter converter66 = restAdapter60.converter;
        java.util.concurrent.Executor executor67 = restAdapter60.callbackExecutor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.client.Client.Provider provider79 = null;
        builder71.clientProvider = provider79;
        retrofit.RequestInterceptor requestInterceptor81 = builder71.requestInterceptor;
        retrofit.RestAdapter restAdapter82 = builder71.build();
        retrofit.ErrorHandler errorHandler83 = builder71.errorHandler;
        retrofit.converter.Converter converter84 = builder71.converter;
        restAdapter60.converter = converter84;
        restAdapter33.converter = converter84;
        restAdapter13.converter = converter84;
        retrofit.client.Response response89 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response91 = restAdapter13.logAndReplaceResponse("Retrofit-Idle", response89, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(converter84);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable11, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(requestInterceptor9);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.client.Client.Provider provider13 = builder3.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter44.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        restAdapter29.log = log43;
        builder28.log = log43;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log43, logLevel62);
        retrofit.RestAdapter.Builder builder66 = builder14.setLog(log43);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder72 = builder67.setLogLevel(logLevel71);
        retrofit.Server server73 = null;
        builder67.server = server73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.RequestInterceptor requestInterceptor88 = builder78.requestInterceptor;
        retrofit.RestAdapter restAdapter89 = builder78.build();
        retrofit.ErrorHandler errorHandler90 = builder78.errorHandler;
        retrofit.converter.Converter converter91 = builder78.converter;
        retrofit.RestAdapter.Builder builder92 = builder67.setConverter(converter91);
        retrofit.RestAdapter.Log log93 = builder67.log;
        retrofit.RestAdapter.Builder builder94 = builder14.setLog(log93);
        retrofit.client.Client.Provider provider95 = builder94.clientProvider;
        retrofit.RestAdapter.Builder builder96 = builder3.setClient(provider95);
        java.util.concurrent.Executor executor97 = builder3.callbackExecutor;
        retrofit.RestAdapter restAdapter98 = builder3.build();
        retrofit.client.Client.Provider provider99 = builder3.clientProvider;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(executor97);
        org.junit.Assert.assertNotNull(restAdapter98);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter16.requestInterceptor;
        retrofit.converter.Converter converter21 = null;
        restAdapter16.converter = converter21;
        retrofit.converter.Converter converter23 = restAdapter16.converter;
        retrofit.converter.Converter converter24 = null;
        restAdapter16.converter = converter24;
        java.util.concurrent.Executor executor26 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.Log log27 = restAdapter16.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.logLevel;
        restAdapter16.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder3.setLogLevel(logLevel34);
        java.util.concurrent.Executor executor37 = builder36.httpExecutor;
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.client.Client.Provider provider43 = restAdapter39.clientProvider;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor55 = builder47.callbackExecutor;
        retrofit.Profiler profiler56 = null;
        builder47.profiler = profiler56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        java.util.concurrent.Executor executor73 = builder65.callbackExecutor;
        restAdapter58.callbackExecutor = executor73;
        builder47.callbackExecutor = executor73;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        builder80.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder83 = builder80.setServer("hi!");
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler86 = restAdapter84.new RestHandler();
        retrofit.RestAdapter.Log log87 = restAdapter84.log;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter84.logLevel = logLevel88;
        retrofit.RestAdapter.Builder builder90 = builder83.setLogLevel(logLevel88);
        java.util.concurrent.Executor executor91 = builder83.callbackExecutor;
        restAdapter76.callbackExecutor = executor91;
        builder47.httpExecutor = executor91;
        java.util.concurrent.Executor executor94 = builder47.callbackExecutor;
        restAdapter39.callbackExecutor = executor94;
        builder36.httpExecutor = executor94;
        retrofit.Server server97 = builder36.server;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(logLevel85);
        org.junit.Assert.assertNull(log87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(server97);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.converter.Converter converter27 = builder26.converter;
        java.util.concurrent.Executor executor28 = builder26.callbackExecutor;
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder31 = builder26.setLog(log30);
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.Server server47 = builder39.server;
        restAdapter32.server = server47;
        retrofit.RestAdapter.Builder builder49 = builder26.setServer(server47);
        retrofit.ErrorHandler errorHandler50 = builder26.errorHandler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(converter27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(errorHandler50);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((-1), "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.Profiler profiler8 = restAdapter0.profiler;
        retrofit.client.Response response10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = restAdapter0.logAndReplaceResponse("hi!", response10, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.ErrorHandler errorHandler14 = builder10.errorHandler;
        retrofit.RestAdapter.Log log15 = builder10.log;
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider18 = null;
        builder17.clientProvider = provider18;
        retrofit.RestAdapter.Builder builder21 = builder17.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.RestAdapter.Builder builder38 = builder17.setErrorHandler(errorHandler37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.Log log41 = restAdapter39.log;
        java.util.concurrent.Executor executor42 = restAdapter39.httpExecutor;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        restAdapter39.log = log51;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder63 = builder58.setLogLevel(logLevel62);
        restAdapter39.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder65 = builder38.setLogLevel(logLevel62);
        retrofit.RequestInterceptor requestInterceptor66 = builder65.requestInterceptor;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider78 = null;
        builder70.clientProvider = provider78;
        retrofit.Server server80 = null;
        builder70.server = server80;
        retrofit.RequestInterceptor requestInterceptor82 = builder70.requestInterceptor;
        builder65.requestInterceptor = requestInterceptor82;
        builder10.requestInterceptor = requestInterceptor82;
        retrofit.client.Client client85 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder86 = builder10.setClient(client85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor82);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter9.logLevel = logLevel11;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel11);
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter13.new RestHandler();
        retrofit.converter.Converter converter15 = restAdapter13.converter;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = builder27.clientProvider;
        restAdapter13.clientProvider = provider28;
        retrofit.Profiler profiler30 = null;
        restAdapter13.profiler = profiler30;
        retrofit.client.Request request32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request33 = restAdapter13.logAndReplaceRequest(request32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(log8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(provider28);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider9 = null;
        builder8.clientProvider = provider9;
        retrofit.RestAdapter.Builder builder12 = builder8.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter27 = builder16.build();
        retrofit.ErrorHandler errorHandler28 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder29 = builder8.setErrorHandler(errorHandler28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider41 = null;
        builder33.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = builder33.requestInterceptor;
        retrofit.RestAdapter restAdapter44 = builder33.build();
        retrofit.ErrorHandler errorHandler45 = builder33.errorHandler;
        retrofit.converter.Converter converter46 = builder33.converter;
        builder29.converter = converter46;
        restAdapter0.converter = converter46;
        retrofit.RestAdapter.Log log49 = restAdapter0.log;
        retrofit.RestAdapter.Log log50 = restAdapter0.log;
        java.util.concurrent.Executor executor51 = restAdapter0.callbackExecutor;
        retrofit.client.Request request52 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request53 = restAdapter0.logAndReplaceRequest(request52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(executor51);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        restAdapter53.log = log67;
        builder52.log = log67;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.Server server86 = builder78.server;
        builder52.server = server86;
        retrofit.RestAdapter.Builder builder88 = builder50.setServer(server86);
        retrofit.RestAdapter.Builder builder90 = builder50.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor91 = builder90.callbackExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNull(executor91);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.Server server10 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder21 = builder14.setLogLevel(logLevel19);
        retrofit.client.Client.Provider provider22 = null;
        builder14.clientProvider = provider22;
        retrofit.Server server24 = null;
        builder14.server = server24;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        java.util.concurrent.Executor executor43 = null;
        java.util.concurrent.Executor executor44 = null;
        retrofit.RequestInterceptor requestInterceptor45 = null;
        retrofit.converter.Converter converter46 = null;
        retrofit.Profiler profiler47 = null;
        retrofit.ErrorHandler errorHandler48 = null;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.logLevel = logLevel52;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server41, provider42, executor43, executor44, requestInterceptor45, converter46, profiler47, errorHandler48, log49, logLevel52);
        restAdapter35.log = log49;
        builder34.log = log49;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log49, logLevel57);
        retrofit.RestAdapter.Builder builder59 = builder14.setLogLevel(logLevel57);
        retrofit.RestAdapter.LogLevel logLevel60 = builder14.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter21.errorHandler = errorHandler25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.Server server28 = restAdapter27.server;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter27.requestInterceptor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        restAdapter27.clientProvider = provider43;
        restAdapter21.clientProvider = provider43;
        restAdapter0.clientProvider = provider43;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = null;
        builder47.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("Retrofit-Idle");
        retrofit.Server server52 = builder47.server;
        restAdapter0.server = server52;
        retrofit.Profiler profiler54 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNull(profiler54);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter4.logLevel;
        restAdapter0.logLevel = logLevel10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Profiler profiler14 = restAdapter13.profiler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = builder18.errorHandler;
        restAdapter13.errorHandler = errorHandler28;
        restAdapter0.errorHandler = errorHandler28;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        restAdapter32.log = log46;
        builder31.log = log46;
        restAdapter0.log = log46;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = null;
        builder59.clientProvider = provider67;
        retrofit.RequestInterceptor requestInterceptor69 = builder59.requestInterceptor;
        retrofit.RestAdapter restAdapter70 = builder59.build();
        retrofit.Profiler profiler71 = builder59.profiler;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.Log log74 = restAdapter72.log;
        retrofit.ErrorHandler errorHandler75 = restAdapter72.errorHandler;
        retrofit.RequestInterceptor requestInterceptor76 = restAdapter72.requestInterceptor;
        retrofit.converter.Converter converter77 = null;
        restAdapter72.converter = converter77;
        retrofit.converter.Converter converter79 = restAdapter72.converter;
        retrofit.converter.Converter converter80 = null;
        restAdapter72.converter = converter80;
        java.util.concurrent.Executor executor82 = restAdapter72.httpExecutor;
        retrofit.RestAdapter.Log log83 = restAdapter72.log;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel85 = restAdapter84.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter84.logLevel = logLevel86;
        retrofit.ErrorHandler errorHandler88 = null;
        restAdapter84.errorHandler = errorHandler88;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter84.logLevel;
        restAdapter72.logLevel = logLevel90;
        retrofit.RestAdapter.Builder builder92 = builder59.setLogLevel(logLevel90);
        java.util.concurrent.Executor executor93 = builder92.httpExecutor;
        restAdapter0.httpExecutor = executor93;
        retrofit.Server server95 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor96 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor97 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel98 = restAdapter0.getLogLevel();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNull(requestInterceptor76);
        org.junit.Assert.assertNull(converter79);
        org.junit.Assert.assertNull(executor82);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNull(logLevel85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(executor93);
        org.junit.Assert.assertNull(server95);
        org.junit.Assert.assertNull(requestInterceptor96);
        org.junit.Assert.assertNull(executor97);
        org.junit.Assert.assertTrue("'" + logLevel98 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel98.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter4.logLevel;
        restAdapter0.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter0.converter = converter13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.ErrorHandler errorHandler28 = builder18.errorHandler;
        retrofit.Server server29 = builder18.server;
        java.util.concurrent.Executor executor30 = builder18.httpExecutor;
        restAdapter0.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.converter.Converter converter38 = restAdapter32.converter;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.ErrorHandler errorHandler52 = builder42.errorHandler;
        retrofit.Server server53 = builder42.server;
        restAdapter32.server = server53;
        retrofit.Server server55 = restAdapter32.server;
        restAdapter0.server = server55;
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter0.logLevel;
        retrofit.Profiler profiler59 = null;
        restAdapter0.profiler = profiler59;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.Server server21 = builder10.server;
        restAdapter0.server = server21;
        retrofit.Server server23 = restAdapter0.server;
        retrofit.client.Client.Provider provider24 = restAdapter0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.getLogLevel();
        boolean boolean26 = logLevel25.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder27 = builder3.setClient(provider26);
        retrofit.RestAdapter.LogLevel logLevel28 = builder27.logLevel;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        restAdapter32.log = log46;
        builder31.log = log46;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.Server server65 = builder57.server;
        builder31.server = server65;
        retrofit.RestAdapter.LogLevel logLevel67 = builder31.logLevel;
        builder29.logLevel = logLevel67;
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter78.logLevel = logLevel80;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel80);
        retrofit.RestAdapter.Builder builder83 = builder29.setLog(log77);
        builder27.log = log77;
        retrofit.RestAdapter.LogLevel logLevel85 = builder27.logLevel;
        retrofit.Profiler profiler86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder87 = builder27.setProfiler(profiler86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.converter.Converter converter7 = null;
        restAdapter0.converter = converter7;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter12.errorHandler = errorHandler16;
        retrofit.converter.Converter converter18 = restAdapter12.converter;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        retrofit.client.Client.Provider provider32 = builder31.clientProvider;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        restAdapter33.requestInterceptor = requestInterceptor37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        restAdapter40.log = log54;
        builder39.log = log54;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.Server server73 = builder65.server;
        builder39.server = server73;
        restAdapter33.server = server73;
        retrofit.RestAdapter.Builder builder76 = builder31.setServer(server73);
        java.util.concurrent.Executor executor77 = builder31.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor78 = builder31.requestInterceptor;
        restAdapter12.requestInterceptor = requestInterceptor78;
        java.lang.reflect.Method method80 = null;
        java.lang.Object[] objArray81 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = restHandler11.invoke((java.lang.Object) requestInterceptor78, method80, objArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.ErrorHandler errorHandler25 = null;
        restAdapter21.errorHandler = errorHandler25;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.Server server28 = restAdapter27.server;
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter27.requestInterceptor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        retrofit.client.Client.Provider provider43 = builder42.clientProvider;
        restAdapter27.clientProvider = provider43;
        restAdapter21.clientProvider = provider43;
        restAdapter0.clientProvider = provider43;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter0.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider60 = null;
        builder52.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder52.errorHandler;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.Server server74 = builder66.server;
        retrofit.RestAdapter.Builder builder75 = builder52.setServer(server74);
        retrofit.converter.Converter converter76 = builder75.converter;
        restAdapter0.converter = converter76;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(provider43);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(converter76);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) (short) 10, "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder23 = builder18.setLogLevel(logLevel22);
        retrofit.converter.Converter converter24 = null;
        builder18.converter = converter24;
        java.util.concurrent.Executor executor26 = builder18.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder32 = builder27.setLogLevel(logLevel31);
        retrofit.converter.Converter converter33 = null;
        builder27.converter = converter33;
        java.util.concurrent.Executor executor35 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = builder17.setExecutors(executor26, executor35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor65 = builder57.callbackExecutor;
        restAdapter50.callbackExecutor = executor65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter67.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = builder49.setExecutors(executor65, executor82);
        java.util.concurrent.Executor executor85 = builder84.callbackExecutor;
        retrofit.RestAdapter.Builder builder86 = builder3.setExecutors(executor26, executor85);
        retrofit.client.Client.Provider provider87 = builder86.clientProvider;
        retrofit.converter.Converter converter88 = builder86.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder90 = builder86.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(provider87);
        org.junit.Assert.assertNotNull(converter88);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.client.Client.Provider provider15 = restAdapter14.clientProvider;
        retrofit.Server server16 = restAdapter14.server;
        retrofit.client.Response response18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response20 = restAdapter14.logAndReplaceResponse("Retrofit-Idle", response18, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(provider15);
        org.junit.Assert.assertNotNull(server16);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.converter.Converter converter51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder0.setConverter(converter51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder12.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.Server server20 = null;
        builder14.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.converter.Converter converter38 = builder25.converter;
        retrofit.RestAdapter.Builder builder39 = builder14.setConverter(converter38);
        retrofit.RestAdapter.Log log40 = builder14.log;
        retrofit.RestAdapter.Builder builder41 = builder12.setLog(log40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder47 = builder42.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler51 = builder49.errorHandler;
        retrofit.RestAdapter.Builder builder52 = builder48.setErrorHandler(errorHandler51);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider56 = null;
        builder55.clientProvider = provider56;
        retrofit.RestAdapter.Builder builder59 = builder55.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.logLevel;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.client.Client.Provider provider73 = null;
        builder65.clientProvider = provider73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.ErrorHandler errorHandler88 = builder78.errorHandler;
        retrofit.RestAdapter.Builder builder89 = builder65.setErrorHandler(errorHandler88);
        restAdapter60.errorHandler = errorHandler88;
        builder59.errorHandler = errorHandler88;
        restAdapter53.errorHandler = errorHandler88;
        builder52.errorHandler = errorHandler88;
        retrofit.RestAdapter.LogLevel logLevel94 = builder52.logLevel;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log35, logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder10.setLog(log35);
        retrofit.RestAdapter restAdapter59 = builder10.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider71 = null;
        builder63.clientProvider = provider71;
        retrofit.RequestInterceptor requestInterceptor73 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = builder10.setRequestInterceptor(requestInterceptor73);
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.Log log79 = restAdapter77.log;
        java.util.concurrent.Executor executor80 = restAdapter77.httpExecutor;
        retrofit.Server server81 = null;
        retrofit.client.Client.Provider provider82 = null;
        java.util.concurrent.Executor executor83 = null;
        java.util.concurrent.Executor executor84 = null;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        retrofit.converter.Converter converter86 = null;
        retrofit.Profiler profiler87 = null;
        retrofit.ErrorHandler errorHandler88 = null;
        retrofit.RestAdapter.Log log89 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter90 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel91 = restAdapter90.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter90.logLevel = logLevel92;
        retrofit.RestAdapter restAdapter94 = new retrofit.RestAdapter(server81, provider82, executor83, executor84, requestInterceptor85, converter86, profiler87, errorHandler88, log89, logLevel92);
        restAdapter77.log = log89;
        java.util.concurrent.Executor executor96 = null;
        restAdapter77.httpExecutor = executor96;
        retrofit.RestAdapter.Log log98 = restAdapter77.log;
        builder74.log = log98;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertNull(executor80);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNull(logLevel91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log98);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        builder27.server = server42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        restAdapter45.log = log59;
        builder44.log = log59;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        builder44.server = server78;
        builder27.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder24.setServer(server78);
        retrofit.RestAdapter.Builder builder82 = builder3.setServer(server78);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder84 = builder3.setLogLevel(logLevel83);
        retrofit.RestAdapter.Log log85 = builder84.log;
        retrofit.RestAdapter restAdapter86 = builder84.build();
        java.util.concurrent.Executor executor87 = restAdapter86.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor88 = restAdapter86.requestInterceptor;
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter86.logException(throwable89, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(requestInterceptor88);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter7.logLevel = logLevel9;
        retrofit.ErrorHandler errorHandler11 = null;
        restAdapter7.errorHandler = errorHandler11;
        java.util.concurrent.Executor executor13 = restAdapter7.callbackExecutor;
        retrofit.converter.Converter converter14 = restAdapter7.converter;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        restAdapter36.log = log50;
        builder35.log = log50;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log50, logLevel69);
        retrofit.RestAdapter.Builder builder73 = builder25.setLog(log50);
        retrofit.RestAdapter restAdapter74 = builder25.build();
        builder25.ensureSaneDefaults();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log77 = builder25.log;
        restAdapter7.log = log77;
        restAdapter0.log = log77;
        retrofit.client.Response response81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response83 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response81, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(log77);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.Server server13 = null;
        builder3.server = server13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel41);
        restAdapter24.log = log38;
        builder23.log = log38;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log38, logLevel46);
        retrofit.RestAdapter.Builder builder48 = builder3.setLogLevel(logLevel46);
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.ErrorHandler errorHandler53 = null;
        restAdapter49.errorHandler = errorHandler53;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter49.logLevel;
        retrofit.converter.Converter converter56 = null;
        restAdapter49.converter = converter56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel66);
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("hi!");
        retrofit.client.Client.Provider provider71 = builder70.clientProvider;
        restAdapter49.clientProvider = provider71;
        retrofit.RestAdapter.Builder builder73 = builder3.setClient(provider71);
        retrofit.RestAdapter.Log log74 = builder3.log;
        log74.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(provider71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(log74);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter5.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter5.new RestHandler();
        retrofit.RestAdapter.Log log8 = restAdapter5.log;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter5.logLevel = logLevel9;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel22);
        restAdapter5.log = log19;
        builder4.log = log19;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.Server server38 = builder30.server;
        builder4.server = server38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.RequestInterceptor requestInterceptor53 = builder43.requestInterceptor;
        retrofit.RestAdapter.Builder builder54 = builder4.setRequestInterceptor(requestInterceptor53);
        restAdapter0.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.Server server60 = builder59.server;
        retrofit.RestAdapter.Builder builder62 = builder59.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler65 = restAdapter63.new RestHandler();
        retrofit.RestAdapter.Log log66 = restAdapter63.log;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter63.logLevel = logLevel67;
        retrofit.converter.Converter converter69 = restAdapter63.converter;
        java.util.concurrent.Executor executor70 = restAdapter63.callbackExecutor;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.RequestInterceptor requestInterceptor84 = builder74.requestInterceptor;
        retrofit.RestAdapter restAdapter85 = builder74.build();
        retrofit.ErrorHandler errorHandler86 = builder74.errorHandler;
        retrofit.converter.Converter converter87 = builder74.converter;
        restAdapter63.converter = converter87;
        builder59.converter = converter87;
        restAdapter0.converter = converter87;
        retrofit.converter.Converter converter91 = restAdapter0.converter;
        retrofit.client.Request request92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request93 = restAdapter0.logAndReplaceRequest(request92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNull(log66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNull(executor70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNotNull(converter91);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder12.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.Server server20 = null;
        builder14.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.converter.Converter converter38 = builder25.converter;
        retrofit.RestAdapter.Builder builder39 = builder14.setConverter(converter38);
        retrofit.RestAdapter.Log log40 = builder14.log;
        retrofit.RestAdapter.Builder builder41 = builder12.setLog(log40);
        retrofit.RestAdapter.Log log42 = builder41.log;
        retrofit.client.Client client43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder41.setClient(client43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(log42);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.ErrorHandler errorHandler27 = builder17.errorHandler;
        retrofit.Server server28 = builder17.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder17.setClient(provider40);
        builder3.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        builder53.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor55 = builder53.requestInterceptor;
        retrofit.client.Client.Provider provider56 = builder53.clientProvider;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        java.util.concurrent.Executor executor59 = builder57.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor60 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder61 = builder53.setRequestInterceptor(requestInterceptor60);
        builder3.requestInterceptor = requestInterceptor60;
        retrofit.ErrorHandler errorHandler63 = builder3.errorHandler;
        retrofit.client.Client.Provider provider64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder65 = builder3.setClient(provider64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(provider56);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(errorHandler63);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter24.errorHandler = errorHandler28;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter24.logLevel;
        restAdapter20.logLevel = logLevel30;
        java.util.concurrent.Executor executor32 = restAdapter20.httpExecutor;
        retrofit.converter.Converter converter33 = null;
        restAdapter20.converter = converter33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.client.Client.Provider provider46 = null;
        builder38.clientProvider = provider46;
        retrofit.ErrorHandler errorHandler48 = builder38.errorHandler;
        retrofit.Server server49 = builder38.server;
        java.util.concurrent.Executor executor50 = builder38.httpExecutor;
        restAdapter20.callbackExecutor = executor50;
        restAdapter0.callbackExecutor = executor50;
        retrofit.Profiler profiler53 = null;
        restAdapter0.profiler = profiler53;
        java.util.concurrent.Executor executor55 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter60.errorHandler = errorHandler64;
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter60.logLevel;
        restAdapter56.logLevel = logLevel66;
        java.util.concurrent.Executor executor68 = restAdapter56.httpExecutor;
        retrofit.converter.Converter converter69 = null;
        restAdapter56.converter = converter69;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.client.Client.Provider provider82 = null;
        builder74.clientProvider = provider82;
        retrofit.ErrorHandler errorHandler84 = builder74.errorHandler;
        retrofit.Server server85 = builder74.server;
        java.util.concurrent.Executor executor86 = builder74.httpExecutor;
        restAdapter56.callbackExecutor = executor86;
        restAdapter0.callbackExecutor = executor86;
        retrofit.Server server89 = restAdapter0.server;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNull(server89);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor28 = builder20.callbackExecutor;
        restAdapter13.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor45 = builder37.callbackExecutor;
        restAdapter30.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = builder12.setExecutors(executor28, executor45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider59 = null;
        builder51.clientProvider = provider59;
        retrofit.ErrorHandler errorHandler61 = builder51.errorHandler;
        retrofit.Server server62 = builder51.server;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        retrofit.RestAdapter.Builder builder75 = builder51.setClient(provider74);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        builder51.logLevel = logLevel84;
        builder47.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder90 = builder47.setServer("hi!");
        retrofit.Profiler profiler91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder90.setProfiler(profiler91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor28 = builder20.callbackExecutor;
        restAdapter13.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor45 = builder37.callbackExecutor;
        restAdapter30.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = builder12.setExecutors(executor28, executor45);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider59 = null;
        builder51.clientProvider = provider59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.client.Client.Provider provider72 = null;
        builder64.clientProvider = provider72;
        retrofit.ErrorHandler errorHandler74 = builder64.errorHandler;
        retrofit.RestAdapter.Builder builder75 = builder51.setErrorHandler(errorHandler74);
        retrofit.RestAdapter.Builder builder76 = builder12.setErrorHandler(errorHandler74);
        retrofit.Profiler profiler77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder76.setProfiler(profiler77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = restAdapter4.httpExecutor;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log12 = restAdapter11.log;
        java.util.concurrent.Executor executor13 = null;
        restAdapter11.callbackExecutor = executor13;
        retrofit.RestAdapter.Log log15 = restAdapter11.log;
        retrofit.Server server16 = restAdapter11.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider28 = null;
        builder20.clientProvider = provider28;
        retrofit.RequestInterceptor requestInterceptor30 = builder20.requestInterceptor;
        retrofit.RestAdapter restAdapter31 = builder20.build();
        retrofit.Profiler profiler32 = builder20.profiler;
        retrofit.ErrorHandler errorHandler33 = builder20.errorHandler;
        restAdapter11.errorHandler = errorHandler33;
        restAdapter4.errorHandler = errorHandler33;
        retrofit.ErrorHandler errorHandler36 = restAdapter4.errorHandler;
        retrofit.RestAdapter.Builder builder37 = builder0.setErrorHandler(errorHandler36);
        retrofit.ErrorHandler errorHandler38 = builder37.errorHandler;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter39 = builder37.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(errorHandler38);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.Profiler profiler27 = null;
        builder26.profiler = profiler27;
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RestAdapter.Log log30 = builder26.log;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.Profiler profiler44 = builder41.profiler;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = builder45.callbackExecutor;
        retrofit.Profiler profiler47 = null;
        builder45.profiler = profiler47;
        retrofit.RestAdapter.Log log49 = builder45.log;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        java.util.concurrent.Executor executor61 = builder53.callbackExecutor;
        builder45.httpExecutor = executor61;
        builder45.ensureSaneDefaults();
        retrofit.client.Client.Provider provider64 = builder45.clientProvider;
        retrofit.RestAdapter.Builder builder66 = builder45.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.converter.Converter converter73 = restAdapter67.converter;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.ErrorHandler errorHandler87 = builder77.errorHandler;
        retrofit.Server server88 = builder77.server;
        restAdapter67.server = server88;
        retrofit.RestAdapter.Builder builder90 = builder45.setServer(server88);
        builder41.server = server88;
        retrofit.RestAdapter.Builder builder92 = builder26.setServer(server88);
        retrofit.Server server93 = builder26.server;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(profiler44);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(server93);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.Profiler profiler20 = builder8.profiler;
        retrofit.ErrorHandler errorHandler21 = builder8.errorHandler;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        restAdapter22.log = log36;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.ErrorHandler errorHandler47 = null;
        restAdapter43.errorHandler = errorHandler47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.Server server50 = restAdapter49.server;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        restAdapter49.clientProvider = provider65;
        restAdapter43.clientProvider = provider65;
        restAdapter22.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder69 = builder8.setClient(provider65);
        builder4.clientProvider = provider65;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.converter.Converter converter77 = restAdapter71.converter;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        builder78.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder81 = builder78.setServer("hi!");
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler84 = restAdapter82.new RestHandler();
        retrofit.RestAdapter.Log log85 = restAdapter82.log;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter82.logLevel = logLevel86;
        retrofit.RestAdapter.Builder builder88 = builder81.setLogLevel(logLevel86);
        retrofit.client.Client.Provider provider89 = null;
        builder81.clientProvider = provider89;
        retrofit.ErrorHandler errorHandler91 = builder81.errorHandler;
        retrofit.Server server92 = builder81.server;
        restAdapter71.server = server92;
        retrofit.Server server94 = restAdapter71.server;
        retrofit.RestAdapter.Builder builder95 = builder4.setServer(server94);
        retrofit.RestAdapter restAdapter96 = builder95.build();
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter96.getLogLevel();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler91);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNotNull(server94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(restAdapter96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter12 = builder10.build();
        retrofit.client.Client.Provider provider13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder10.setClient(provider13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter12);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.Server server23 = builder15.server;
        restAdapter8.server = server23;
        restAdapter0.server = server23;
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = builder30.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = builder30.build();
        retrofit.Profiler profiler42 = builder30.profiler;
        retrofit.ErrorHandler errorHandler43 = builder30.errorHandler;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter44.logLevel = logLevel46;
        retrofit.ErrorHandler errorHandler48 = null;
        restAdapter44.errorHandler = errorHandler48;
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter44.logLevel;
        retrofit.converter.Converter converter51 = null;
        restAdapter44.converter = converter51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("hi!");
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        restAdapter44.clientProvider = provider66;
        builder30.clientProvider = provider66;
        restAdapter0.clientProvider = provider66;
        retrofit.Profiler profiler70 = null;
        restAdapter0.profiler = profiler70;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(provider66);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log1 = restAdapter0.log;
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.callbackExecutor = executor2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        retrofit.Server server5 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.client.Client.Provider provider17 = null;
        builder9.clientProvider = provider17;
        retrofit.RequestInterceptor requestInterceptor19 = builder9.requestInterceptor;
        retrofit.RestAdapter restAdapter20 = builder9.build();
        retrofit.Profiler profiler21 = builder9.profiler;
        retrofit.ErrorHandler errorHandler22 = builder9.errorHandler;
        restAdapter0.errorHandler = errorHandler22;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(log1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        retrofit.RestAdapter.Log log18 = builder0.log;
        retrofit.RestAdapter restAdapter19 = builder0.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder25 = builder20.setLogLevel(logLevel24);
        retrofit.Server server26 = null;
        builder20.server = server26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = builder31.requestInterceptor;
        retrofit.RestAdapter restAdapter42 = builder31.build();
        retrofit.ErrorHandler errorHandler43 = builder31.errorHandler;
        retrofit.converter.Converter converter44 = builder31.converter;
        retrofit.RestAdapter.Builder builder45 = builder20.setConverter(converter44);
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = builder45.requestInterceptor;
        restAdapter19.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.ErrorHandler errorHandler76 = builder66.errorHandler;
        retrofit.RestAdapter.Builder builder77 = builder53.setErrorHandler(errorHandler76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter78.logLevel = logLevel80;
        builder53.logLevel = logLevel80;
        retrofit.converter.Converter converter83 = null;
        builder53.converter = converter83;
        retrofit.RestAdapter.Log log85 = builder53.log;
        log85.log("Retrofit-Idle");
        log85.log("");
        restAdapter19.log = log85;
        java.lang.Throwable throwable91 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter19.logException(throwable91, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log85);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel6 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.callbackExecutor;
        retrofit.Profiler profiler9 = null;
        builder7.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder7.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        java.util.concurrent.Executor executor23 = builder15.callbackExecutor;
        builder7.httpExecutor = executor23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter25.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler29 = null;
        restAdapter25.errorHandler = errorHandler29;
        java.util.concurrent.Executor executor31 = restAdapter25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter25.logLevel;
        retrofit.RestAdapter.Builder builder33 = builder7.setLogLevel(logLevel32);
        builder0.logLevel = logLevel32;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder36 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Log log27 = builder26.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.Server server29 = restAdapter28.server;
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter28.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        restAdapter28.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder46 = builder26.setClient(provider44);
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        boolean boolean48 = logLevel47.log();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.Server server32 = builder24.server;
        retrofit.RestAdapter.Builder builder33 = builder10.setServer(server32);
        retrofit.converter.Converter converter34 = builder33.converter;
        java.util.concurrent.Executor executor35 = builder33.callbackExecutor;
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        retrofit.RestAdapter.Log log37 = builder33.log;
        retrofit.RestAdapter.Builder builder38 = builder3.setLog(log37);
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.Log log41 = restAdapter39.log;
        retrofit.ErrorHandler errorHandler42 = restAdapter39.errorHandler;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        builder46.clientProvider = provider54;
        retrofit.RequestInterceptor requestInterceptor56 = builder46.requestInterceptor;
        restAdapter39.requestInterceptor = requestInterceptor56;
        retrofit.RestAdapter.Builder builder58 = builder3.setRequestInterceptor(requestInterceptor56);
        retrofit.Profiler profiler59 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder60 = builder3.setProfiler(profiler59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(converter34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor52 = builder50.httpExecutor;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter69.logLevel = logLevel71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel71);
        restAdapter54.log = log68;
        builder53.log = log68;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.Server server87 = builder79.server;
        builder53.server = server87;
        retrofit.RestAdapter.Builder builder89 = builder50.setServer(server87);
        retrofit.ErrorHandler errorHandler90 = builder50.errorHandler;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(errorHandler90);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log11, logLevel14);
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter16.new RestHandler();
        retrofit.converter.Converter converter18 = restAdapter16.converter;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.converter.Converter converter25 = restAdapter19.converter;
        java.util.concurrent.Executor executor26 = restAdapter19.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = builder30.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = builder30.build();
        retrofit.ErrorHandler errorHandler42 = builder30.errorHandler;
        retrofit.converter.Converter converter43 = builder30.converter;
        restAdapter19.converter = converter43;
        restAdapter16.converter = converter43;
        retrofit.RestAdapter.Builder builder46 = builder0.setConverter(converter43);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = null;
        builder47.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = builder55.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = builder55.build();
        retrofit.ErrorHandler errorHandler67 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder68 = builder47.setErrorHandler(errorHandler67);
        retrofit.RestAdapter.Builder builder69 = builder46.setErrorHandler(errorHandler67);
        retrofit.client.Client.Provider provider70 = builder46.clientProvider;
        retrofit.client.Client client71 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder72 = builder46.setClient(client71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(provider70);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter22.log;
        java.util.concurrent.Executor executor25 = restAdapter22.httpExecutor;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel37);
        restAdapter22.log = log34;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder46 = builder41.setLogLevel(logLevel45);
        restAdapter22.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder48 = builder21.setLogLevel(logLevel45);
        retrofit.RequestInterceptor requestInterceptor49 = builder48.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.Server server63 = null;
        builder53.server = server63;
        retrofit.RequestInterceptor requestInterceptor65 = builder53.requestInterceptor;
        builder48.requestInterceptor = requestInterceptor65;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider78 = null;
        builder70.clientProvider = provider78;
        retrofit.RequestInterceptor requestInterceptor80 = builder70.requestInterceptor;
        retrofit.RestAdapter restAdapter81 = builder70.build();
        java.util.concurrent.Executor executor82 = restAdapter81.callbackExecutor;
        retrofit.converter.Converter converter83 = restAdapter81.converter;
        retrofit.RestAdapter.Builder builder84 = builder48.setConverter(converter83);
        builder48.ensureSaneDefaults();
        retrofit.converter.Converter converter86 = builder48.converter;
        retrofit.Server server87 = builder48.server;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(converter86);
        org.junit.Assert.assertNotNull(server87);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        java.util.concurrent.Executor executor19 = restAdapter16.httpExecutor;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter16.log = log28;
        builder7.log = log28;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.Log log38 = restAdapter36.log;
        java.util.concurrent.Executor executor39 = restAdapter36.httpExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter56.logLevel = logLevel58;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel58);
        restAdapter41.log = log55;
        builder40.log = log55;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.Server server74 = builder66.server;
        builder40.server = server74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider87 = null;
        builder79.clientProvider = provider87;
        retrofit.RequestInterceptor requestInterceptor89 = builder79.requestInterceptor;
        retrofit.RestAdapter.Builder builder90 = builder40.setRequestInterceptor(requestInterceptor89);
        restAdapter36.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter.Builder builder92 = builder7.setRequestInterceptor(requestInterceptor89);
        builder0.requestInterceptor = requestInterceptor89;
        retrofit.RestAdapter restAdapter94 = builder0.build();
        java.util.concurrent.Executor executor95 = null;
        builder0.httpExecutor = executor95;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(requestInterceptor89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(restAdapter94);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.ErrorHandler errorHandler31 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder8.setErrorHandler(errorHandler31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter33.errorHandler = errorHandler37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.Server server40 = restAdapter39.server;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter39.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        restAdapter39.clientProvider = provider55;
        restAdapter33.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder32.setClient(provider55);
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.RestAdapter.Builder builder66 = builder0.setServer(server64);
        retrofit.client.Client client67 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder66.setClient(client67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        restAdapter0.server = server15;
        retrofit.Profiler profiler17 = restAdapter0.profiler;
        java.util.concurrent.Executor executor18 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter0.logLevel;
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter0.errorHandler = errorHandler20;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(logLevel19);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.client.Client client6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder5.setClient(client6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor5 = builder4.callbackExecutor;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.Profiler profiler9 = restAdapter8.profiler;
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.client.Client.Provider provider11 = restAdapter8.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter8.new RestHandler();
        java.util.concurrent.Executor executor13 = restAdapter8.httpExecutor;
        retrofit.Server server14 = restAdapter8.server;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.ErrorHandler errorHandler19 = null;
        restAdapter15.errorHandler = errorHandler19;
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        retrofit.converter.Converter converter22 = restAdapter15.converter;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter59.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        restAdapter44.log = log58;
        builder43.log = log58;
        retrofit.Server server66 = null;
        retrofit.client.Client.Provider provider67 = null;
        java.util.concurrent.Executor executor68 = null;
        java.util.concurrent.Executor executor69 = null;
        retrofit.RequestInterceptor requestInterceptor70 = null;
        retrofit.converter.Converter converter71 = null;
        retrofit.Profiler profiler72 = null;
        retrofit.ErrorHandler errorHandler73 = null;
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter75.logLevel = logLevel77;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server66, provider67, executor68, executor69, requestInterceptor70, converter71, profiler72, errorHandler73, log74, logLevel77);
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log58, logLevel77);
        retrofit.RestAdapter.Builder builder81 = builder33.setLog(log58);
        retrofit.RestAdapter restAdapter82 = builder33.build();
        builder33.ensureSaneDefaults();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Log log85 = builder33.log;
        restAdapter15.log = log85;
        restAdapter8.log = log85;
        retrofit.RestAdapter.Builder builder88 = builder4.setLog(log85);
        retrofit.Profiler profiler89 = builder88.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(provider34);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter82);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(profiler89);
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Profiler profiler7 = restAdapter6.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider19 = null;
        builder11.clientProvider = provider19;
        retrofit.ErrorHandler errorHandler21 = builder11.errorHandler;
        restAdapter6.errorHandler = errorHandler21;
        retrofit.RestAdapter.Builder builder23 = builder4.setErrorHandler(errorHandler21);
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler28 = null;
        restAdapter24.errorHandler = errorHandler28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.Server server31 = restAdapter30.server;
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter30.requestInterceptor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = builder36.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder45.clientProvider;
        restAdapter30.clientProvider = provider46;
        restAdapter24.clientProvider = provider46;
        retrofit.RestAdapter.Builder builder49 = builder23.setClient(provider46);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.Server server54 = builder53.server;
        retrofit.RestAdapter.Builder builder55 = builder23.setServer(server54);
        retrofit.converter.Converter converter56 = builder55.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(provider46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(converter56);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter34.getLogLevel();
        retrofit.Profiler profiler38 = null;
        restAdapter34.profiler = profiler38;
        retrofit.Server server40 = restAdapter34.server;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean42 = logLevel41.log();
        restAdapter34.logLevel = logLevel41;
        restAdapter32.logLevel = logLevel41;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.Profiler profiler46 = restAdapter45.profiler;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider58 = null;
        builder50.clientProvider = provider58;
        retrofit.ErrorHandler errorHandler60 = builder50.errorHandler;
        restAdapter45.errorHandler = errorHandler60;
        restAdapter32.errorHandler = errorHandler60;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter32.getLogLevel();
        retrofit.client.Request request64 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request65 = restAdapter32.logAndReplaceRequest(request64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("hi!");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.client.Client.Provider provider14 = null;
        builder6.clientProvider = provider14;
        retrofit.RequestInterceptor requestInterceptor16 = builder6.requestInterceptor;
        retrofit.RestAdapter restAdapter17 = builder6.build();
        java.util.concurrent.Executor executor18 = restAdapter17.callbackExecutor;
        retrofit.Profiler profiler19 = restAdapter17.profiler;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter17.logLevel;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider22 = null;
        builder21.clientProvider = provider22;
        retrofit.RestAdapter.Builder builder25 = builder21.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.logLevel;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.client.Client.Provider provider52 = null;
        builder44.clientProvider = provider52;
        retrofit.ErrorHandler errorHandler54 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder55 = builder31.setErrorHandler(errorHandler54);
        restAdapter26.errorHandler = errorHandler54;
        builder25.errorHandler = errorHandler54;
        retrofit.RestAdapter.Builder builder59 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder59.clientProvider;
        retrofit.ErrorHandler errorHandler61 = builder59.errorHandler;
        restAdapter17.errorHandler = errorHandler61;
        restAdapter0.errorHandler = errorHandler61;
        retrofit.client.Response response65 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response67 = restAdapter0.logAndReplaceResponse("", response65, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(errorHandler61);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.ErrorHandler errorHandler26 = builder16.errorHandler;
        retrofit.RestAdapter.Builder builder27 = builder3.setErrorHandler(errorHandler26);
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.client.Client.Provider provider50 = builder49.clientProvider;
        restAdapter34.clientProvider = provider50;
        restAdapter28.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder53 = builder27.setClient(provider50);
        retrofit.RestAdapter restAdapter54 = builder53.build();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.Server server59 = builder58.server;
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.RestAdapter.Builder builder62 = builder53.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor63 = null;
        builder62.httpExecutor = executor63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        retrofit.client.Client.Provider provider76 = null;
        builder68.clientProvider = provider76;
        retrofit.RequestInterceptor requestInterceptor78 = builder68.requestInterceptor;
        builder62.requestInterceptor = requestInterceptor78;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(provider50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(requestInterceptor78);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        builder0.ensureSaneDefaults();
        retrofit.client.Client.Provider provider19 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder21 = builder0.setServer("Retrofit-Idle");
        builder21.ensureSaneDefaults();
        java.lang.Class<?> wildcardClass23 = builder21.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = null;
        builder51.clientProvider = provider52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = null;
        builder59.clientProvider = provider67;
        retrofit.RequestInterceptor requestInterceptor69 = builder59.requestInterceptor;
        retrofit.RestAdapter restAdapter70 = builder59.build();
        retrofit.ErrorHandler errorHandler71 = builder59.errorHandler;
        retrofit.RestAdapter.Builder builder72 = builder51.setErrorHandler(errorHandler71);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        builder73.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder73.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Log log80 = restAdapter77.log;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.logLevel = logLevel81;
        retrofit.RestAdapter.Builder builder83 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider84 = null;
        builder76.clientProvider = provider84;
        retrofit.RequestInterceptor requestInterceptor86 = builder76.requestInterceptor;
        retrofit.RestAdapter restAdapter87 = builder76.build();
        retrofit.ErrorHandler errorHandler88 = builder76.errorHandler;
        retrofit.converter.Converter converter89 = builder76.converter;
        builder72.converter = converter89;
        retrofit.RestAdapter.Builder builder91 = builder50.setConverter(converter89);
        retrofit.RequestInterceptor requestInterceptor92 = builder50.requestInterceptor;
        retrofit.ErrorHandler errorHandler93 = builder50.errorHandler;
        builder50.ensureSaneDefaults();
        retrofit.Server server95 = builder50.server;
        retrofit.RestAdapter.Builder builder97 = builder50.setServer("Retrofit-Idle");
        retrofit.Server server98 = builder97.server;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(server98);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log35, logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder10.setLog(log35);
        retrofit.RestAdapter restAdapter59 = builder10.build();
        builder10.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler61 = builder10.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel62 = builder10.logLevel;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.converter.Converter converter7 = builder4.converter;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder13 = builder8.setLogLevel(logLevel12);
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.client.Client.Provider provider32 = null;
        builder24.clientProvider = provider32;
        retrofit.ErrorHandler errorHandler34 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.Server server46 = builder38.server;
        retrofit.RestAdapter.Builder builder47 = builder24.setServer(server46);
        retrofit.RestAdapter.Log log48 = builder47.log;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.Server server50 = restAdapter49.server;
        retrofit.RequestInterceptor requestInterceptor51 = restAdapter49.requestInterceptor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("hi!");
        retrofit.client.Client.Provider provider65 = builder64.clientProvider;
        restAdapter49.clientProvider = provider65;
        retrofit.RestAdapter.Builder builder67 = builder47.setClient(provider65);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.Server server72 = builder71.server;
        retrofit.RestAdapter.Builder builder73 = builder47.setServer(server72);
        builder20.server = server72;
        builder4.server = server72;
        retrofit.RestAdapter.Builder builder77 = builder4.setServer("Retrofit-Idle");
        retrofit.client.Client client78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder4.setClient(client78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(provider65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        retrofit.converter.Converter converter10 = restAdapter0.converter;
        retrofit.Server server11 = restAdapter0.server;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(server11);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter7.logLevel = logLevel11;
        retrofit.converter.Converter converter13 = restAdapter7.converter;
        retrofit.converter.Converter converter14 = restAdapter7.converter;
        java.util.concurrent.Executor executor15 = restAdapter7.callbackExecutor;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.converter.Converter converter22 = restAdapter16.converter;
        java.util.concurrent.Executor executor23 = restAdapter16.callbackExecutor;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider35 = null;
        builder27.clientProvider = provider35;
        retrofit.RequestInterceptor requestInterceptor37 = builder27.requestInterceptor;
        retrofit.RestAdapter restAdapter38 = builder27.build();
        retrofit.ErrorHandler errorHandler39 = builder27.errorHandler;
        retrofit.converter.Converter converter40 = builder27.converter;
        restAdapter16.converter = converter40;
        restAdapter7.converter = converter40;
        retrofit.RestAdapter.Builder builder43 = builder6.setConverter(converter40);
        retrofit.Profiler profiler44 = null;
        builder43.profiler = profiler44;
        retrofit.RestAdapter.Log log46 = builder43.log;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(converter40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(log46);
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        builder4.ensureSaneDefaults();
        retrofit.Profiler profiler7 = builder4.profiler;
        retrofit.RestAdapter restAdapter8 = builder4.build();
        retrofit.Profiler profiler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder4.setProfiler(profiler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(restAdapter8);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler5 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter41.logLevel = logLevel43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel43);
        restAdapter26.log = log40;
        retrofit.RestAdapter.Builder builder47 = builder16.setLog(log40);
        log40.log("hi!");
        retrofit.RestAdapter.Builder builder50 = builder12.setLog(log40);
        java.util.concurrent.Executor executor51 = builder50.httpExecutor;
        restAdapter0.callbackExecutor = executor51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.Server server54 = restAdapter53.server;
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter53.requestInterceptor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("hi!");
        retrofit.client.Client.Provider provider69 = builder68.clientProvider;
        restAdapter53.clientProvider = provider69;
        restAdapter0.clientProvider = provider69;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(errorHandler5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNull(server54);
        org.junit.Assert.assertNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(provider69);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor5 = builder3.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = builder0.setRequestInterceptor(requestInterceptor6);
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.Server server21 = builder13.server;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = builder32.clientProvider;
        builder13.clientProvider = provider33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.ErrorHandler errorHandler39 = null;
        restAdapter35.errorHandler = errorHandler39;
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.logLevel;
        builder13.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        builder46.clientProvider = provider54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        restAdapter56.log = log70;
        retrofit.RestAdapter.Builder builder77 = builder46.setLog(log70);
        log70.log("hi!");
        builder13.log = log70;
        retrofit.RestAdapter restAdapter81 = builder13.build();
        retrofit.Server server82 = builder13.server;
        builder0.server = server82;
        retrofit.ErrorHandler errorHandler84 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(converter8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(errorHandler84);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor30 = builder22.callbackExecutor;
        restAdapter0.callbackExecutor = executor30;
        retrofit.ErrorHandler errorHandler32 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor33 = restAdapter0.httpExecutor;
        java.util.concurrent.Executor executor34 = restAdapter0.httpExecutor;
        java.lang.Throwable throwable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable35, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor34);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = builder17.clientProvider;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider30 = null;
        builder22.clientProvider = provider30;
        retrofit.ErrorHandler errorHandler32 = builder22.errorHandler;
        retrofit.Server server33 = builder22.server;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        retrofit.Server server45 = builder37.server;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.Log log48 = restAdapter46.log;
        java.util.concurrent.Executor executor49 = restAdapter46.httpExecutor;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter59.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        restAdapter46.log = log58;
        builder37.log = log58;
        retrofit.RestAdapter.Builder builder66 = builder22.setLog(log58);
        retrofit.RestAdapter.Builder builder67 = builder17.setLog(log58);
        retrofit.RestAdapter.LogLevel logLevel68 = builder67.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(provider18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter4.logLevel = logLevel6;
        retrofit.ErrorHandler errorHandler8 = null;
        restAdapter4.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter4.logLevel;
        restAdapter0.logLevel = logLevel10;
        java.util.concurrent.Executor executor12 = restAdapter0.httpExecutor;
        retrofit.converter.Converter converter13 = null;
        restAdapter0.converter = converter13;
        java.util.concurrent.Executor executor15 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter0.getLogLevel();
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable18, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        java.util.concurrent.Executor executor15 = builder7.callbackExecutor;
        restAdapter0.callbackExecutor = executor15;
        java.util.concurrent.Executor executor17 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter0.getLogLevel();
        retrofit.client.Client.Provider provider19 = null;
        restAdapter0.clientProvider = provider19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.Server server25 = builder24.server;
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.ErrorHandler errorHandler41 = builder31.errorHandler;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.Server server53 = builder45.server;
        retrofit.RestAdapter.Builder builder54 = builder31.setServer(server53);
        retrofit.RestAdapter.Log log55 = builder54.log;
        log55.log("hi!");
        builder27.log = log55;
        restAdapter0.log = log55;
        java.lang.Throwable throwable60 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable60, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(log55);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        retrofit.Server server8 = null;
        retrofit.client.Client.Provider provider9 = null;
        java.util.concurrent.Executor executor10 = null;
        java.util.concurrent.Executor executor11 = null;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        retrofit.converter.Converter converter13 = null;
        retrofit.Profiler profiler14 = null;
        retrofit.ErrorHandler errorHandler15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        builder16.log = log31;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter48.logLevel = logLevel50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel50);
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server8, provider9, executor10, executor11, requestInterceptor12, converter13, profiler14, errorHandler15, log31, logLevel50);
        retrofit.RestAdapter.Builder builder54 = builder4.setLogLevel(logLevel50);
        retrofit.RestAdapter.Log log55 = builder54.log;
        retrofit.ErrorHandler errorHandler56 = builder54.errorHandler;
        retrofit.Profiler profiler57 = null;
        builder54.profiler = profiler57;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertNull(errorHandler56);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder30.setErrorHandler(errorHandler53);
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        builder26.httpExecutor = executor55;
        java.util.concurrent.Executor executor57 = builder26.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel58 = builder26.logLevel;
        retrofit.client.Client.Provider provider59 = builder26.clientProvider;
        retrofit.RestAdapter restAdapter60 = builder26.build();
        retrofit.Profiler profiler61 = restAdapter60.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider59);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNull(profiler61);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.httpExecutor = executor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.Profiler profiler24 = restAdapter23.profiler;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.converter.Converter converter26 = restAdapter23.converter;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter23.logLevel = logLevel27;
        retrofit.ErrorHandler errorHandler29 = restAdapter23.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter23.getLogLevel();
        restAdapter0.logLevel = logLevel30;
        retrofit.Server server32 = restAdapter0.server;
        java.lang.Throwable throwable33 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable33, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(profiler24);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server32);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder0.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.NONE;
        boolean boolean29 = logLevel28.log();
        retrofit.RestAdapter.Builder builder30 = builder26.setLogLevel(logLevel28);
        retrofit.client.Client.Provider provider31 = builder30.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(provider31);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.Profiler profiler7 = null;
        restAdapter0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.client.Client.Provider provider20 = null;
        builder12.clientProvider = provider20;
        retrofit.ErrorHandler errorHandler22 = builder12.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        retrofit.RestAdapter.Builder builder35 = builder12.setServer(server34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider60 = null;
        builder52.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder52.errorHandler;
        retrofit.RestAdapter.Builder builder63 = builder39.setErrorHandler(errorHandler62);
        java.util.concurrent.Executor executor64 = builder63.httpExecutor;
        builder35.httpExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter66.logLevel = logLevel68;
        retrofit.ErrorHandler errorHandler70 = null;
        restAdapter66.errorHandler = errorHandler70;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter66.logLevel;
        retrofit.converter.Converter converter73 = null;
        restAdapter66.converter = converter73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.RestAdapter.Builder builder87 = builder85.setServer("hi!");
        retrofit.client.Client.Provider provider88 = builder87.clientProvider;
        restAdapter66.clientProvider = provider88;
        retrofit.RestAdapter.Builder builder90 = builder35.setClient(provider88);
        retrofit.RequestInterceptor requestInterceptor91 = builder90.requestInterceptor;
        restAdapter0.requestInterceptor = requestInterceptor91;
        retrofit.client.Request request93 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request94 = restAdapter0.logAndReplaceRequest(request93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(provider88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(requestInterceptor91);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider62 = null;
        builder54.clientProvider = provider62;
        retrofit.RequestInterceptor requestInterceptor64 = builder54.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor64;
        retrofit.RestAdapter.Log log66 = builder50.log;
        log66.log("Retrofit-Idle");
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(log66);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter restAdapter11 = builder3.build();
        retrofit.converter.Converter converter12 = builder3.converter;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider14 = null;
        builder13.clientProvider = provider14;
        retrofit.RestAdapter.Builder builder17 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log18 = builder17.log;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter20.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter20.logLevel = logLevel22;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter20.new RestHandler();
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        restAdapter34.log = log48;
        builder33.log = log48;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log48, logLevel67);
        restAdapter20.setLogLevel(logLevel67);
        boolean boolean72 = logLevel67.log();
        retrofit.RestAdapter.Builder builder73 = builder17.setLogLevel(logLevel67);
        retrofit.RestAdapter.Builder builder74 = builder3.setLogLevel(logLevel67);
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter75.logLevel = logLevel77;
        retrofit.RequestInterceptor requestInterceptor79 = null;
        restAdapter75.requestInterceptor = requestInterceptor79;
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter75.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.Builder builder83 = builder74.setLogLevel(logLevel82);
        retrofit.RestAdapter restAdapter84 = builder83.build();
        retrofit.client.Response response86 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response88 = restAdapter84.logAndReplaceResponse("Retrofit-Idle", response86, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(converter12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(restAdapter84);
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.httpExecutor = executor19;
        retrofit.RestAdapter.Log log21 = restAdapter0.log;
        retrofit.client.Client.Provider provider22 = restAdapter0.clientProvider;
        java.lang.Class<?> wildcardClass23 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log21);
        org.junit.Assert.assertNull(provider22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        restAdapter39.log = log53;
        builder38.log = log53;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.Server server72 = builder64.server;
        builder38.server = server72;
        retrofit.RestAdapter.LogLevel logLevel74 = builder38.logLevel;
        builder36.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder0.setLogLevel(logLevel74);
        builder76.ensureSaneDefaults();
        java.util.concurrent.Executor executor78 = builder76.httpExecutor;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor78);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.Profiler profiler12 = builder3.profiler;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.ErrorHandler errorHandler17 = null;
        restAdapter13.errorHandler = errorHandler17;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter13.logLevel;
        retrofit.converter.Converter converter20 = null;
        restAdapter13.converter = converter20;
        retrofit.converter.Converter converter22 = restAdapter13.converter;
        retrofit.Profiler profiler23 = null;
        restAdapter13.profiler = profiler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.client.Client.Provider provider38 = builder37.clientProvider;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter39.logLevel = logLevel41;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        restAdapter39.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        restAdapter46.log = log60;
        builder45.log = log60;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer("hi!");
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler74 = restAdapter72.new RestHandler();
        retrofit.RestAdapter.Log log75 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter72.logLevel = logLevel76;
        retrofit.RestAdapter.Builder builder78 = builder71.setLogLevel(logLevel76);
        retrofit.Server server79 = builder71.server;
        builder45.server = server79;
        restAdapter39.server = server79;
        retrofit.RestAdapter.Builder builder82 = builder37.setServer(server79);
        restAdapter13.server = server79;
        retrofit.Server server84 = restAdapter13.server;
        builder3.server = server84;
        java.util.concurrent.Executor executor86 = builder3.callbackExecutor;
        java.util.concurrent.Executor executor87 = builder3.httpExecutor;
        retrofit.RestAdapter.Builder builder89 = builder3.setServer("hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNull(log75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server84);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.Server server8 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter0.requestInterceptor;
        retrofit.client.Request request10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request11 = restAdapter0.logAndReplaceRequest(request10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(requestInterceptor9);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.converter.Converter converter7 = null;
        restAdapter0.converter = converter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        restAdapter0.clientProvider = provider22;
        java.lang.Class<?> wildcardClass24 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder0.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.Server server30 = builder26.server;
        retrofit.client.Client.Provider provider31 = builder26.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(provider31);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.client.Client.Provider provider4 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider4);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter45.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log28, logLevel47);
        restAdapter0.setLogLevel(logLevel47);
        retrofit.Profiler profiler52 = null;
        restAdapter0.profiler = profiler52;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.Server server17 = null;
        builder7.server = server17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.Log log21 = restAdapter19.log;
        java.util.concurrent.Executor executor22 = restAdapter19.httpExecutor;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter19.log = log31;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        java.util.concurrent.Executor executor49 = builder41.callbackExecutor;
        restAdapter19.callbackExecutor = executor49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        java.util.concurrent.Executor executor62 = builder54.callbackExecutor;
        retrofit.Profiler profiler63 = null;
        builder54.profiler = profiler63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        java.util.concurrent.Executor executor80 = builder72.callbackExecutor;
        restAdapter65.callbackExecutor = executor80;
        builder54.callbackExecutor = executor80;
        retrofit.RestAdapter.Builder builder83 = builder7.setExecutors(executor49, executor80);
        restAdapter0.callbackExecutor = executor80;
        retrofit.converter.Converter converter85 = restAdapter0.converter;
        retrofit.RestAdapter.Log log86 = restAdapter0.log;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(executor80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(converter85);
        org.junit.Assert.assertNull(log86);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor30 = builder22.callbackExecutor;
        restAdapter0.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        java.util.concurrent.Executor executor43 = builder35.callbackExecutor;
        restAdapter0.callbackExecutor = executor43;
        retrofit.client.Response response46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response48 = restAdapter0.logAndReplaceResponse("hi!", response46, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable7, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.converter.Converter converter5 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter restAdapter17 = builder9.build();
        retrofit.converter.Converter converter18 = builder9.converter;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider20 = null;
        builder19.clientProvider = provider20;
        retrofit.RestAdapter.Builder builder23 = builder19.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log24 = builder23.log;
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter26.logLevel = logLevel28;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter26.new RestHandler();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        restAdapter40.log = log54;
        builder39.log = log54;
        retrofit.Server server62 = null;
        retrofit.client.Client.Provider provider63 = null;
        java.util.concurrent.Executor executor64 = null;
        java.util.concurrent.Executor executor65 = null;
        retrofit.RequestInterceptor requestInterceptor66 = null;
        retrofit.converter.Converter converter67 = null;
        retrofit.Profiler profiler68 = null;
        retrofit.ErrorHandler errorHandler69 = null;
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter71.logLevel = logLevel73;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server62, provider63, executor64, executor65, requestInterceptor66, converter67, profiler68, errorHandler69, log70, logLevel73);
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log54, logLevel73);
        restAdapter26.setLogLevel(logLevel73);
        boolean boolean78 = logLevel73.log();
        retrofit.RestAdapter.Builder builder79 = builder23.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder80 = builder9.setLogLevel(logLevel73);
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter81.logLevel = logLevel83;
        retrofit.RequestInterceptor requestInterceptor85 = null;
        restAdapter81.requestInterceptor = requestInterceptor85;
        retrofit.RequestInterceptor requestInterceptor87 = restAdapter81.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.Builder builder89 = builder80.setLogLevel(logLevel88);
        java.util.concurrent.Executor executor90 = builder89.httpExecutor;
        restAdapter0.callbackExecutor = executor90;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(restAdapter17);
        org.junit.Assert.assertNotNull(converter18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        java.util.concurrent.Executor executor50 = builder3.callbackExecutor;
        retrofit.ErrorHandler errorHandler51 = builder3.errorHandler;
        retrofit.converter.Converter converter52 = builder3.converter;
        java.lang.Class<?> wildcardClass53 = builder3.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(converter52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        retrofit.client.Client.Provider provider10 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter11 = restAdapter0.converter;
        retrofit.converter.Converter converter12 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(converter12);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.converter.Converter converter27 = builder26.converter;
        java.util.concurrent.Executor executor28 = builder26.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder26.profiler = profiler29;
        retrofit.RestAdapter.LogLevel logLevel31 = builder26.logLevel;
        retrofit.Server server32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder33 = builder26.setServer(server32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(converter27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.converter.Converter converter6 = null;
        builder0.converter = converter6;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter9 = builder0.build();
        retrofit.Server server10 = restAdapter9.server;
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter11.logLevel = logLevel13;
        retrofit.ErrorHandler errorHandler15 = null;
        restAdapter11.errorHandler = errorHandler15;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter11.logLevel;
        retrofit.client.Client.Provider provider18 = restAdapter11.clientProvider;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder24 = builder19.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        java.util.concurrent.Executor executor37 = builder35.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        java.util.concurrent.Executor executor66 = builder58.callbackExecutor;
        restAdapter51.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        java.util.concurrent.Executor executor83 = builder75.callbackExecutor;
        restAdapter68.callbackExecutor = executor83;
        retrofit.RestAdapter.Builder builder85 = builder50.setExecutors(executor66, executor83);
        java.util.concurrent.Executor executor86 = builder85.callbackExecutor;
        retrofit.RestAdapter.Builder builder87 = builder24.setExecutors(executor37, executor86);
        restAdapter11.httpExecutor = executor86;
        restAdapter9.httpExecutor = executor86;
        java.lang.Throwable throwable90 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter9.logException(throwable90, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(provider36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter13.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor19 = builder18.httpExecutor;
        retrofit.RestAdapter.Log log20 = builder18.log;
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder27 = builder22.setLogLevel(logLevel26);
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        restAdapter37.log = log51;
        builder36.log = log51;
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        java.util.concurrent.Executor executor61 = null;
        java.util.concurrent.Executor executor62 = null;
        retrofit.RequestInterceptor requestInterceptor63 = null;
        retrofit.converter.Converter converter64 = null;
        retrofit.Profiler profiler65 = null;
        retrofit.ErrorHandler errorHandler66 = null;
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server59, provider60, executor61, executor62, requestInterceptor63, converter64, profiler65, errorHandler66, log67, logLevel70);
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log51, logLevel70);
        retrofit.RestAdapter.Builder builder74 = builder22.setLog(log51);
        retrofit.Profiler profiler75 = null;
        builder22.profiler = profiler75;
        builder22.ensureSaneDefaults();
        retrofit.client.Client.Provider provider78 = builder22.clientProvider;
        retrofit.RestAdapter.Builder builder79 = builder18.setClient(provider78);
        retrofit.Server server80 = null;
        builder18.server = server80;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(provider78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.client.Client.Provider provider52 = builder50.clientProvider;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.Profiler profiler55 = restAdapter54.profiler;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.converter.Converter converter57 = restAdapter54.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel58;
        retrofit.Profiler profiler60 = restAdapter54.profiler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        builder71.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor73 = builder71.requestInterceptor;
        retrofit.client.Client.Provider provider74 = builder71.clientProvider;
        restAdapter54.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder76 = builder50.setClient(provider74);
        retrofit.client.Client client77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder50.setClient(client77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.Server server4 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.ErrorHandler errorHandler31 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder8.setErrorHandler(errorHandler31);
        retrofit.RestAdapter restAdapter33 = builder32.build();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.converter.Converter converter35 = restAdapter33.converter;
        restAdapter0.converter = converter35;
        retrofit.client.Response response38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response40 = restAdapter0.logAndReplaceResponse("", response38, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter35);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Server server1 = restAdapter0.server;
        retrofit.RequestInterceptor requestInterceptor2 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter6.log;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter6.logLevel = logLevel10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel23);
        restAdapter6.log = log20;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter6.requestInterceptor;
        java.util.concurrent.Executor executor28 = restAdapter6.callbackExecutor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        retrofit.client.Client.Provider provider42 = builder41.clientProvider;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        restAdapter43.requestInterceptor = requestInterceptor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.Log log53 = restAdapter50.log;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter50.logLevel = logLevel54;
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter65.logLevel = logLevel67;
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel67);
        restAdapter50.log = log64;
        builder49.log = log64;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.Server server83 = builder75.server;
        builder49.server = server83;
        restAdapter43.server = server83;
        retrofit.RestAdapter.Builder builder86 = builder41.setServer(server83);
        restAdapter6.server = server83;
        restAdapter0.server = server83;
        retrofit.Server server89 = restAdapter0.server;
        retrofit.RestAdapter.Log log90 = restAdapter0.log;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(server89);
        org.junit.Assert.assertNull(log90);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.converter.Converter converter38 = builder25.converter;
        builder21.converter = converter38;
        retrofit.RequestInterceptor requestInterceptor40 = builder21.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        java.util.concurrent.Executor executor47 = restAdapter41.callbackExecutor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider59 = null;
        builder51.clientProvider = provider59;
        retrofit.ErrorHandler errorHandler61 = builder51.errorHandler;
        retrofit.Server server62 = builder51.server;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.Server server74 = builder66.server;
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.Log log77 = restAdapter75.log;
        java.util.concurrent.Executor executor78 = restAdapter75.httpExecutor;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter88.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel90);
        restAdapter75.log = log87;
        builder66.log = log87;
        retrofit.RestAdapter.Builder builder95 = builder51.setLog(log87);
        retrofit.converter.Converter converter96 = builder51.converter;
        restAdapter41.converter = converter96;
        retrofit.RestAdapter.Builder builder98 = builder21.setConverter(converter96);
        retrofit.converter.Converter converter99 = builder21.converter;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(server62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertNull(executor78);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(converter96);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(converter99);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(logLevel6);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log35, logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder10.setLog(log35);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider60 = null;
        builder59.clientProvider = provider60;
        retrofit.RestAdapter.Builder builder63 = builder59.setServer("Retrofit-Idle");
        retrofit.Server server64 = builder59.server;
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.client.Client.Provider provider77 = null;
        builder69.clientProvider = provider77;
        retrofit.RequestInterceptor requestInterceptor79 = builder69.requestInterceptor;
        retrofit.RestAdapter restAdapter80 = builder69.build();
        java.util.concurrent.Executor executor81 = restAdapter80.callbackExecutor;
        retrofit.converter.Converter converter82 = restAdapter80.converter;
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        builder58.log = log83;
        retrofit.RestAdapter restAdapter85 = builder58.build();
        retrofit.client.Client.Provider provider86 = restAdapter85.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertNotNull(restAdapter85);
        org.junit.Assert.assertNotNull(provider86);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.ErrorHandler errorHandler53 = builder0.errorHandler;
        retrofit.converter.Converter converter54 = null;
        builder0.converter = converter54;
        retrofit.client.Client.Provider provider56 = null;
        builder0.clientProvider = provider56;
        java.util.concurrent.Executor executor58 = builder0.httpExecutor;
        retrofit.Server server59 = builder0.server;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(server59);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel37);
        restAdapter0.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.Server server65 = builder57.server;
        retrofit.RestAdapter.Builder builder66 = builder43.setServer(server65);
        retrofit.RestAdapter.Log log67 = builder66.log;
        log67.log("hi!");
        log67.log("hi!");
        restAdapter0.log = log67;
        retrofit.ErrorHandler errorHandler73 = restAdapter0.errorHandler;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.client.Client.Provider provider85 = null;
        builder77.clientProvider = provider85;
        retrofit.RequestInterceptor requestInterceptor87 = builder77.requestInterceptor;
        retrofit.RestAdapter restAdapter88 = builder77.build();
        retrofit.ErrorHandler errorHandler89 = builder77.errorHandler;
        retrofit.ErrorHandler errorHandler90 = builder77.errorHandler;
        restAdapter0.errorHandler = errorHandler90;
        java.lang.Throwable throwable92 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable92, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNull(errorHandler73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(restAdapter88);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(errorHandler90);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter45.logLevel = logLevel47;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel47);
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log28, logLevel47);
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter50.logLevel;
        retrofit.RestAdapter.Builder builder53 = builder0.setLogLevel(logLevel52);
        retrofit.converter.Converter converter54 = builder0.converter;
        retrofit.client.Client client55 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder56 = builder0.setClient(client55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(converter4);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(converter54);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.client.Client.Provider provider52 = builder50.clientProvider;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.Profiler profiler55 = restAdapter54.profiler;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.converter.Converter converter57 = restAdapter54.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel58;
        retrofit.Profiler profiler60 = restAdapter54.profiler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        builder71.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor73 = builder71.requestInterceptor;
        retrofit.client.Client.Provider provider74 = builder71.clientProvider;
        restAdapter54.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder76 = builder50.setClient(provider74);
        retrofit.RestAdapter restAdapter77 = builder76.build();
        retrofit.converter.Converter converter78 = restAdapter77.converter;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(converter78);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider52 = null;
        builder51.clientProvider = provider52;
        retrofit.RestAdapter.Builder builder55 = builder51.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = null;
        builder59.clientProvider = provider67;
        retrofit.RequestInterceptor requestInterceptor69 = builder59.requestInterceptor;
        retrofit.RestAdapter restAdapter70 = builder59.build();
        retrofit.ErrorHandler errorHandler71 = builder59.errorHandler;
        retrofit.RestAdapter.Builder builder72 = builder51.setErrorHandler(errorHandler71);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        builder73.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder76 = builder73.setServer("hi!");
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.Log log80 = restAdapter77.log;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter77.logLevel = logLevel81;
        retrofit.RestAdapter.Builder builder83 = builder76.setLogLevel(logLevel81);
        retrofit.client.Client.Provider provider84 = null;
        builder76.clientProvider = provider84;
        retrofit.RequestInterceptor requestInterceptor86 = builder76.requestInterceptor;
        retrofit.RestAdapter restAdapter87 = builder76.build();
        retrofit.ErrorHandler errorHandler88 = builder76.errorHandler;
        retrofit.converter.Converter converter89 = builder76.converter;
        builder72.converter = converter89;
        retrofit.RestAdapter.Builder builder91 = builder50.setConverter(converter89);
        retrofit.RequestInterceptor requestInterceptor92 = builder50.requestInterceptor;
        retrofit.ErrorHandler errorHandler93 = builder50.errorHandler;
        builder50.ensureSaneDefaults();
        retrofit.Server server95 = builder50.server;
        retrofit.RestAdapter.Builder builder97 = builder50.setServer("Retrofit-Idle");
        retrofit.Profiler profiler98 = null;
        builder50.profiler = profiler98;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(restAdapter70);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(log80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(converter89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNull(errorHandler93);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        java.util.concurrent.Executor executor50 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        java.util.concurrent.Executor executor53 = builder51.httpExecutor;
        builder3.httpExecutor = executor53;
        retrofit.Server server55 = builder3.server;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder3.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter62.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler64 = restAdapter62.new RestHandler();
        retrofit.RestAdapter.Log log65 = restAdapter62.log;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter62.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = builder61.setLogLevel(logLevel66);
        retrofit.Server server69 = builder61.server;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.Log log72 = restAdapter70.log;
        java.util.concurrent.Executor executor73 = restAdapter70.httpExecutor;
        retrofit.Server server74 = null;
        retrofit.client.Client.Provider provider75 = null;
        java.util.concurrent.Executor executor76 = null;
        java.util.concurrent.Executor executor77 = null;
        retrofit.RequestInterceptor requestInterceptor78 = null;
        retrofit.converter.Converter converter79 = null;
        retrofit.Profiler profiler80 = null;
        retrofit.ErrorHandler errorHandler81 = null;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter83.logLevel = logLevel85;
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server74, provider75, executor76, executor77, requestInterceptor78, converter79, profiler80, errorHandler81, log82, logLevel85);
        restAdapter70.log = log82;
        builder61.log = log82;
        retrofit.RestAdapter.Builder builder90 = builder3.setLog(log82);
        retrofit.ErrorHandler errorHandler91 = builder3.errorHandler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(logLevel63);
        org.junit.Assert.assertNull(log65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(server69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(errorHandler91);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel42);
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.Server server48 = restAdapter45.server;
        retrofit.client.Response response50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response52 = restAdapter45.logAndReplaceResponse("hi!", response50, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server48);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder23 = builder18.setLogLevel(logLevel22);
        retrofit.converter.Converter converter24 = null;
        builder18.converter = converter24;
        java.util.concurrent.Executor executor26 = builder18.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder32 = builder27.setLogLevel(logLevel31);
        retrofit.converter.Converter converter33 = null;
        builder27.converter = converter33;
        java.util.concurrent.Executor executor35 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = builder17.setExecutors(executor26, executor35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor65 = builder57.callbackExecutor;
        restAdapter50.callbackExecutor = executor65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter67.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = builder49.setExecutors(executor65, executor82);
        java.util.concurrent.Executor executor85 = builder84.callbackExecutor;
        retrofit.RestAdapter.Builder builder86 = builder3.setExecutors(executor26, executor85);
        retrofit.client.Client.Provider provider87 = builder86.clientProvider;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder89 = builder86.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(provider87);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.client.Client.Provider provider13 = builder3.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter44.logLevel = logLevel46;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel46);
        restAdapter29.log = log43;
        builder28.log = log43;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log43, logLevel62);
        retrofit.RestAdapter.Builder builder66 = builder14.setLog(log43);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder72 = builder67.setLogLevel(logLevel71);
        retrofit.Server server73 = null;
        builder67.server = server73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.RequestInterceptor requestInterceptor88 = builder78.requestInterceptor;
        retrofit.RestAdapter restAdapter89 = builder78.build();
        retrofit.ErrorHandler errorHandler90 = builder78.errorHandler;
        retrofit.converter.Converter converter91 = builder78.converter;
        retrofit.RestAdapter.Builder builder92 = builder67.setConverter(converter91);
        retrofit.RestAdapter.Log log93 = builder67.log;
        retrofit.RestAdapter.Builder builder94 = builder14.setLog(log93);
        retrofit.client.Client.Provider provider95 = builder94.clientProvider;
        retrofit.RestAdapter.Builder builder96 = builder3.setClient(provider95);
        java.util.concurrent.Executor executor97 = builder3.callbackExecutor;
        retrofit.RestAdapter restAdapter98 = builder3.build();
        retrofit.RequestInterceptor requestInterceptor99 = restAdapter98.requestInterceptor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(provider95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(executor97);
        org.junit.Assert.assertNotNull(restAdapter98);
        org.junit.Assert.assertNotNull(requestInterceptor99);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("Retrofit-Idle");
        retrofit.Server server8 = builder3.server;
        restAdapter0.server = server8;
        retrofit.ErrorHandler errorHandler10 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = null;
        builder15.clientProvider = provider23;
        retrofit.RequestInterceptor requestInterceptor25 = builder15.requestInterceptor;
        retrofit.RestAdapter restAdapter26 = builder15.build();
        java.util.concurrent.Executor executor27 = restAdapter26.callbackExecutor;
        retrofit.converter.Converter converter28 = restAdapter26.converter;
        restAdapter0.converter = converter28;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider41 = builder40.clientProvider;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter66.logLevel = logLevel68;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel68);
        restAdapter51.log = log65;
        builder50.log = log65;
        retrofit.Server server73 = null;
        retrofit.client.Client.Provider provider74 = null;
        java.util.concurrent.Executor executor75 = null;
        java.util.concurrent.Executor executor76 = null;
        retrofit.RequestInterceptor requestInterceptor77 = null;
        retrofit.converter.Converter converter78 = null;
        retrofit.Profiler profiler79 = null;
        retrofit.ErrorHandler errorHandler80 = null;
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter82.logLevel = logLevel84;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server73, provider74, executor75, executor76, requestInterceptor77, converter78, profiler79, errorHandler80, log81, logLevel84);
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log65, logLevel84);
        retrofit.RestAdapter.Builder builder88 = builder40.setLog(log65);
        retrofit.ErrorHandler errorHandler89 = builder40.errorHandler;
        restAdapter0.errorHandler = errorHandler89;
        java.util.concurrent.Executor executor91 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNotNull(converter28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(provider41);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNull(logLevel83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNull(executor91);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.Server server13 = null;
        builder3.server = server13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = null;
        builder18.clientProvider = provider26;
        retrofit.RestAdapter.LogLevel logLevel28 = builder18.logLevel;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Log log31 = restAdapter29.log;
        java.util.concurrent.Executor executor32 = restAdapter29.httpExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter49.logLevel = logLevel51;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel51);
        restAdapter34.log = log48;
        builder33.log = log48;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.Server server67 = builder59.server;
        builder33.server = server67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.RequestInterceptor requestInterceptor82 = builder72.requestInterceptor;
        retrofit.RestAdapter.Builder builder83 = builder33.setRequestInterceptor(requestInterceptor82);
        restAdapter29.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter.Builder builder85 = builder18.setRequestInterceptor(requestInterceptor82);
        builder3.requestInterceptor = requestInterceptor82;
        retrofit.RestAdapter.Builder builder88 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder90 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel91 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder92 = builder3.setLogLevel(logLevel91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor30 = builder22.callbackExecutor;
        restAdapter0.callbackExecutor = executor30;
        retrofit.ErrorHandler errorHandler32 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor33 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder39 = builder34.setLogLevel(logLevel38);
        retrofit.Server server40 = null;
        builder34.server = server40;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider53 = null;
        builder45.clientProvider = provider53;
        retrofit.RequestInterceptor requestInterceptor55 = builder45.requestInterceptor;
        retrofit.RestAdapter restAdapter56 = builder45.build();
        retrofit.ErrorHandler errorHandler57 = builder45.errorHandler;
        retrofit.converter.Converter converter58 = builder45.converter;
        retrofit.RestAdapter.Builder builder59 = builder34.setConverter(converter58);
        restAdapter0.converter = converter58;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter0.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter0.requestInterceptor;
        java.util.concurrent.Executor executor63 = restAdapter0.callbackExecutor;
        retrofit.ErrorHandler errorHandler64 = restAdapter0.errorHandler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNull(errorHandler64);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler9 = restAdapter7.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter7.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter7.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter7.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder18 = builder13.setLogLevel(logLevel17);
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        restAdapter28.log = log42;
        builder27.log = log42;
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter59.logLevel = logLevel61;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel61);
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log42, logLevel61);
        retrofit.RestAdapter.Builder builder65 = builder13.setLog(log42);
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        builder65.logLevel = logLevel66;
        boolean boolean68 = logLevel66.log();
        boolean boolean69 = logLevel66.log();
        restAdapter7.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder71 = builder4.setLogLevel(logLevel66);
        retrofit.Profiler profiler72 = null;
        builder71.profiler = profiler72;
        retrofit.RestAdapter.Builder builder75 = builder71.setServer("hi!");
        retrofit.Profiler profiler76 = builder75.profiler;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(requestInterceptor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(profiler76);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter14.profiler;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.logLevel;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider19 = null;
        builder18.clientProvider = provider19;
        retrofit.RestAdapter.Builder builder22 = builder18.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.logLevel;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider36 = null;
        builder28.clientProvider = provider36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.client.Client.Provider provider49 = null;
        builder41.clientProvider = provider49;
        retrofit.ErrorHandler errorHandler51 = builder41.errorHandler;
        retrofit.RestAdapter.Builder builder52 = builder28.setErrorHandler(errorHandler51);
        restAdapter23.errorHandler = errorHandler51;
        builder22.errorHandler = errorHandler51;
        retrofit.RestAdapter.Builder builder56 = builder22.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder56.clientProvider;
        retrofit.ErrorHandler errorHandler58 = builder56.errorHandler;
        restAdapter14.errorHandler = errorHandler58;
        retrofit.Profiler profiler60 = restAdapter14.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNull(profiler60);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = restAdapter0.profiler;
        retrofit.Profiler profiler6 = null;
        restAdapter0.profiler = profiler6;
        retrofit.Server server8 = restAdapter0.server;
        java.util.concurrent.Executor executor9 = restAdapter0.httpExecutor;
        java.lang.Throwable throwable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable10, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler5);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("Retrofit-Idle");
        retrofit.Server server8 = builder3.server;
        restAdapter0.server = server8;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.converter.Converter converter11 = restAdapter0.converter;
        retrofit.Profiler profiler12 = null;
        restAdapter0.profiler = profiler12;
        retrofit.converter.Converter converter14 = restAdapter0.converter;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider16 = null;
        builder15.clientProvider = provider16;
        retrofit.RestAdapter.Builder builder19 = builder15.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.callbackExecutor;
        retrofit.Profiler profiler22 = null;
        builder20.profiler = profiler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.Server server35 = builder27.server;
        builder20.server = server35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        restAdapter38.log = log52;
        builder37.log = log52;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.Server server71 = builder63.server;
        builder37.server = server71;
        builder20.server = server71;
        retrofit.RestAdapter.Builder builder74 = builder19.setServer(server71);
        retrofit.RestAdapter.LogLevel logLevel75 = builder19.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder12.clientProvider;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.Server server20 = null;
        builder14.server = server20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.ErrorHandler errorHandler37 = builder25.errorHandler;
        retrofit.converter.Converter converter38 = builder25.converter;
        retrofit.RestAdapter.Builder builder39 = builder14.setConverter(converter38);
        retrofit.RestAdapter.Log log40 = builder14.log;
        retrofit.RestAdapter.Builder builder41 = builder12.setLog(log40);
        retrofit.Profiler profiler42 = builder12.profiler;
        retrofit.converter.Converter converter43 = null;
        builder12.converter = converter43;
        retrofit.RequestInterceptor requestInterceptor45 = builder12.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder12.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor50 = builder49.requestInterceptor;
        retrofit.Profiler profiler51 = null;
        builder49.profiler = profiler51;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(profiler42);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor50);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter8.logLevel = logLevel10;
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter8.new RestHandler();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        restAdapter22.log = log36;
        builder21.log = log36;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log36, logLevel55);
        restAdapter8.setLogLevel(logLevel55);
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.Log log62 = restAdapter60.log;
        java.util.concurrent.Executor executor63 = restAdapter60.httpExecutor;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter73.logLevel = logLevel75;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel75);
        restAdapter60.log = log72;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        java.util.concurrent.Executor executor90 = builder82.callbackExecutor;
        restAdapter60.callbackExecutor = executor90;
        restAdapter8.callbackExecutor = executor90;
        restAdapter0.callbackExecutor = executor90;
        retrofit.RequestInterceptor requestInterceptor94 = restAdapter0.requestInterceptor;
        retrofit.client.Response response96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response98 = restAdapter0.logAndReplaceResponse("hi!", response96, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNull(requestInterceptor94);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel42);
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter45.new RestHandler();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.Profiler profiler48 = restAdapter47.profiler;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        retrofit.client.Client.Provider provider60 = null;
        builder52.clientProvider = provider60;
        retrofit.ErrorHandler errorHandler62 = builder52.errorHandler;
        restAdapter47.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter88.logLevel = logLevel90;
        retrofit.RestAdapter restAdapter92 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel90);
        restAdapter73.log = log87;
        builder72.log = log87;
        retrofit.RestAdapter.LogLevel logLevel95 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter96 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log87, logLevel95);
        restAdapter47.logLevel = logLevel95;
        restAdapter45.logLevel = logLevel95;
        retrofit.ErrorHandler errorHandler99 = restAdapter45.errorHandler;
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler99);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.ErrorHandler errorHandler14 = builder10.errorHandler;
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Log log16 = builder10.log;
        retrofit.RestAdapter.LogLevel logLevel17 = builder10.logLevel;
        java.util.concurrent.Executor executor18 = builder10.callbackExecutor;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.Server server23 = builder22.server;
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        java.util.concurrent.Executor executor38 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.ErrorHandler errorHandler52 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.Server server64 = builder56.server;
        retrofit.RestAdapter.Builder builder65 = builder42.setServer(server64);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.client.Client.Provider provider77 = null;
        builder69.clientProvider = provider77;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        retrofit.client.Client.Provider provider90 = null;
        builder82.clientProvider = provider90;
        retrofit.ErrorHandler errorHandler92 = builder82.errorHandler;
        retrofit.RestAdapter.Builder builder93 = builder69.setErrorHandler(errorHandler92);
        java.util.concurrent.Executor executor94 = builder93.httpExecutor;
        builder65.httpExecutor = executor94;
        java.util.concurrent.Executor executor96 = builder65.callbackExecutor;
        retrofit.RestAdapter.Builder builder97 = builder22.setExecutors(executor38, executor96);
        retrofit.converter.Converter converter98 = builder22.converter;
        builder10.converter = converter98;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(converter98);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.Profiler profiler37 = builder25.profiler;
        retrofit.ErrorHandler errorHandler38 = builder25.errorHandler;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        restAdapter39.log = log53;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter60.errorHandler = errorHandler64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.Server server67 = restAdapter66.server;
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter66.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        retrofit.client.Client.Provider provider82 = builder81.clientProvider;
        restAdapter66.clientProvider = provider82;
        restAdapter60.clientProvider = provider82;
        restAdapter39.clientProvider = provider82;
        retrofit.RestAdapter.Builder builder86 = builder25.setClient(provider82);
        retrofit.converter.Converter converter87 = builder86.converter;
        restAdapter0.converter = converter87;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter0.new RestHandler();
        retrofit.client.Request request90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request91 = restAdapter0.logAndReplaceRequest(request90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(converter87);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.converter.Converter converter53 = null;
        builder0.converter = converter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder60 = builder55.setLogLevel(logLevel59);
        retrofit.Server server61 = null;
        builder55.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.RequestInterceptor requestInterceptor76 = builder66.requestInterceptor;
        retrofit.RestAdapter restAdapter77 = builder66.build();
        retrofit.ErrorHandler errorHandler78 = builder66.errorHandler;
        retrofit.converter.Converter converter79 = builder66.converter;
        retrofit.RestAdapter.Builder builder80 = builder55.setConverter(converter79);
        builder0.converter = converter79;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        builder82.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler84 = builder82.errorHandler;
        retrofit.RestAdapter.Log log85 = builder82.log;
        retrofit.RestAdapter.Builder builder86 = builder0.setLog(log85);
        log85.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNotNull(converter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("Retrofit-Idle");
        retrofit.Server server8 = builder3.server;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider21 = null;
        builder13.clientProvider = provider21;
        retrofit.ErrorHandler errorHandler23 = builder13.errorHandler;
        retrofit.Server server24 = builder13.server;
        restAdapter0.server = server24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.ErrorHandler errorHandler38 = builder36.errorHandler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter55.logLevel = logLevel57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel57);
        restAdapter40.log = log54;
        builder39.log = log54;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        retrofit.Server server73 = builder65.server;
        builder39.server = server73;
        builder36.server = server73;
        restAdapter0.server = server73;
        retrofit.Profiler profiler77 = null;
        restAdapter0.profiler = profiler77;
        retrofit.converter.Converter converter79 = restAdapter0.converter;
        retrofit.client.Response response81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response83 = restAdapter0.logAndReplaceResponse("hi!", response81, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(provider37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server73);
        org.junit.Assert.assertNull(converter79);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter0.logLevel;
        java.lang.Throwable throwable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable5, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(logLevel4);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.RestHandler restHandler4 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider6 = null;
        builder5.clientProvider = provider6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log10 = builder9.log;
        retrofit.client.Client.Provider provider11 = builder9.clientProvider;
        retrofit.converter.Converter converter12 = builder9.converter;
        java.util.concurrent.Executor executor13 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider15 = null;
        builder14.clientProvider = provider15;
        retrofit.RestAdapter.Builder builder18 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log19 = builder18.log;
        retrofit.client.Client.Provider provider20 = builder18.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = builder18.logLevel;
        retrofit.RestAdapter.Builder builder23 = builder18.setServer("hi!");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider35 = null;
        builder27.clientProvider = provider35;
        retrofit.Server server37 = null;
        builder27.server = server37;
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter63.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter63.logLevel = logLevel65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel65);
        restAdapter48.log = log62;
        builder47.log = log62;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log62, logLevel70);
        retrofit.RestAdapter.Builder builder72 = builder27.setLogLevel(logLevel70);
        retrofit.RestAdapter.LogLevel logLevel73 = builder27.logLevel;
        builder23.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder9.setLogLevel(logLevel73);
        boolean boolean76 = logLevel73.log();
        restAdapter0.logLevel = logLevel73;
        retrofit.converter.Converter converter78 = restAdapter0.converter;
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable79, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(converter78);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        java.util.concurrent.Executor executor15 = restAdapter14.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.client.Client.Provider provider17 = restAdapter14.clientProvider;
        retrofit.client.Request request18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = restAdapter14.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(provider17);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        restAdapter0.server = server15;
        retrofit.Profiler profiler17 = restAdapter0.profiler;
        retrofit.Server server18 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider30 = null;
        builder22.clientProvider = provider30;
        retrofit.ErrorHandler errorHandler32 = builder22.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = builder36.setLogLevel(logLevel41);
        retrofit.Server server44 = builder36.server;
        retrofit.RestAdapter.Builder builder45 = builder22.setServer(server44);
        retrofit.RestAdapter.Log log46 = builder45.log;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.Server server48 = restAdapter47.server;
        retrofit.RequestInterceptor requestInterceptor49 = restAdapter47.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder62 = builder60.setServer("hi!");
        retrofit.client.Client.Provider provider63 = builder62.clientProvider;
        restAdapter47.clientProvider = provider63;
        retrofit.RestAdapter.Builder builder65 = builder45.setClient(provider63);
        retrofit.client.Client.Provider provider66 = builder65.clientProvider;
        retrofit.RequestInterceptor requestInterceptor67 = builder65.requestInterceptor;
        retrofit.client.Client.Provider provider68 = builder65.clientProvider;
        restAdapter0.clientProvider = provider68;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(provider63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(provider68);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter22.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder21.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder32 = builder21.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor33 = builder32.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel34 = null;
        builder32.logLevel = logLevel34;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(requestInterceptor33);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.client.Response response34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response36 = restAdapter32.logAndReplaceResponse("Retrofit-Idle", response34, (long) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.converter.Converter converter3 = null;
        builder0.converter = converter3;
        retrofit.RestAdapter.Log log5 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.client.Client.Provider provider20 = builder19.clientProvider;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter21.logLevel = logLevel23;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        restAdapter21.requestInterceptor = requestInterceptor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter28.logLevel = logLevel32;
        retrofit.Server server34 = null;
        retrofit.client.Client.Provider provider35 = null;
        java.util.concurrent.Executor executor36 = null;
        java.util.concurrent.Executor executor37 = null;
        retrofit.RequestInterceptor requestInterceptor38 = null;
        retrofit.converter.Converter converter39 = null;
        retrofit.Profiler profiler40 = null;
        retrofit.ErrorHandler errorHandler41 = null;
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter43.logLevel = logLevel45;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server34, provider35, executor36, executor37, requestInterceptor38, converter39, profiler40, errorHandler41, log42, logLevel45);
        restAdapter28.log = log42;
        builder27.log = log42;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.Server server61 = builder53.server;
        builder27.server = server61;
        restAdapter21.server = server61;
        retrofit.RestAdapter.Builder builder64 = builder19.setServer(server61);
        retrofit.converter.Converter converter65 = builder19.converter;
        builder0.converter = converter65;
        java.util.concurrent.Executor executor67 = builder0.callbackExecutor;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter68.logLevel = logLevel70;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        restAdapter68.requestInterceptor = requestInterceptor72;
        retrofit.RequestInterceptor requestInterceptor74 = restAdapter68.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.Builder builder77 = builder0.setLogLevel(logLevel76);
        boolean boolean78 = logLevel76.log();
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(log5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(provider20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter31.logLevel = logLevel33;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel33);
        restAdapter16.log = log30;
        builder15.log = log30;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter47.logLevel = logLevel49;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel49);
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log30, logLevel49);
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.Server server55 = restAdapter52.server;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter52.logLevel;
        restAdapter0.setLogLevel(logLevel56);
        boolean boolean58 = logLevel56.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider62 = null;
        builder54.clientProvider = provider62;
        retrofit.RequestInterceptor requestInterceptor64 = builder54.requestInterceptor;
        builder50.requestInterceptor = requestInterceptor64;
        retrofit.Profiler profiler66 = null;
        builder50.profiler = profiler66;
        retrofit.RestAdapter.LogLevel logLevel68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder50.setLogLevel(logLevel68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        builder0.ensureSaneDefaults();
        retrofit.Profiler profiler18 = builder0.profiler;
        retrofit.Profiler profiler19 = null;
        builder0.profiler = profiler19;
        retrofit.client.Client.Provider provider21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder22 = builder0.setClient(provider21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(profiler18);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor28 = builder20.callbackExecutor;
        restAdapter13.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor45 = builder37.callbackExecutor;
        restAdapter30.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = builder12.setExecutors(executor28, executor45);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        builder47.logLevel = logLevel53;
        boolean boolean56 = logLevel53.log();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider7 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder13 = builder8.setLogLevel(logLevel12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = builder24.clientProvider;
        java.util.concurrent.Executor executor26 = builder24.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor55 = builder47.callbackExecutor;
        restAdapter40.callbackExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        java.util.concurrent.Executor executor72 = builder64.callbackExecutor;
        restAdapter57.callbackExecutor = executor72;
        retrofit.RestAdapter.Builder builder74 = builder39.setExecutors(executor55, executor72);
        java.util.concurrent.Executor executor75 = builder74.callbackExecutor;
        retrofit.RestAdapter.Builder builder76 = builder13.setExecutors(executor26, executor75);
        restAdapter0.httpExecutor = executor75;
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter0.new RestHandler();
        java.lang.Throwable throwable79 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable79, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.logLevel;
        retrofit.converter.Converter converter7 = null;
        restAdapter0.converter = converter7;
        retrofit.converter.Converter converter9 = restAdapter0.converter;
        java.util.concurrent.Executor executor10 = restAdapter0.callbackExecutor;
        retrofit.Profiler profiler11 = null;
        restAdapter0.profiler = profiler11;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter0.requestInterceptor;
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable15, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = null;
        builder13.profiler = profiler15;
        retrofit.RestAdapter.Log log17 = builder13.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        builder13.httpExecutor = executor29;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel32 = builder13.logLevel;
        builder12.logLevel = logLevel32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.Server server38 = builder37.server;
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        retrofit.client.Client.Provider provider52 = null;
        builder44.clientProvider = provider52;
        retrofit.ErrorHandler errorHandler54 = builder44.errorHandler;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.Server server66 = builder58.server;
        retrofit.RestAdapter.Builder builder67 = builder44.setServer(server66);
        retrofit.RestAdapter.Log log68 = builder67.log;
        log68.log("hi!");
        builder40.log = log68;
        retrofit.RestAdapter.Builder builder72 = builder12.setLog(log68);
        retrofit.RestAdapter.Log log73 = retrofit.RestAdapter.Log.NONE;
        log73.log("");
        retrofit.RestAdapter.Builder builder76 = builder12.setLog(log73);
        retrofit.Profiler profiler77 = null;
        builder12.profiler = profiler77;
        retrofit.ErrorHandler errorHandler79 = builder12.errorHandler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(server66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(errorHandler79);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter34.getLogLevel();
        retrofit.Profiler profiler38 = null;
        restAdapter34.profiler = profiler38;
        retrofit.Server server40 = restAdapter34.server;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean42 = logLevel41.log();
        restAdapter34.logLevel = logLevel41;
        restAdapter32.logLevel = logLevel41;
        retrofit.client.Request request45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request46 = restAdapter32.logAndReplaceRequest(request45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.RestAdapter restAdapter64 = builder56.build();
        retrofit.converter.Converter converter65 = builder56.converter;
        retrofit.RestAdapter.Builder builder66 = builder0.setConverter(converter65);
        retrofit.converter.Converter converter67 = builder66.converter;
        retrofit.Profiler profiler68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder69 = builder66.setProfiler(profiler68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(converter65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(converter67);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.RestAdapter.LogLevel logLevel17 = builder0.logLevel;
        retrofit.RestAdapter.Log log18 = builder0.log;
        retrofit.RestAdapter restAdapter19 = builder0.build();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder25 = builder20.setLogLevel(logLevel24);
        retrofit.Server server26 = null;
        builder20.server = server26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = builder31.requestInterceptor;
        retrofit.RestAdapter restAdapter42 = builder31.build();
        retrofit.ErrorHandler errorHandler43 = builder31.errorHandler;
        retrofit.converter.Converter converter44 = builder31.converter;
        retrofit.RestAdapter.Builder builder45 = builder20.setConverter(converter44);
        retrofit.Profiler profiler46 = null;
        builder45.profiler = profiler46;
        retrofit.RequestInterceptor requestInterceptor48 = builder45.requestInterceptor;
        restAdapter19.requestInterceptor = requestInterceptor48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer("hi!");
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.RestAdapter.Log log57 = restAdapter54.log;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter54.logLevel = logLevel58;
        retrofit.RestAdapter.Builder builder60 = builder53.setLogLevel(logLevel58);
        retrofit.client.Client.Provider provider61 = null;
        builder53.clientProvider = provider61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.ErrorHandler errorHandler76 = builder66.errorHandler;
        retrofit.RestAdapter.Builder builder77 = builder53.setErrorHandler(errorHandler76);
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter78.logLevel = logLevel80;
        builder53.logLevel = logLevel80;
        retrofit.converter.Converter converter83 = null;
        builder53.converter = converter83;
        retrofit.RestAdapter.Log log85 = builder53.log;
        log85.log("Retrofit-Idle");
        log85.log("");
        restAdapter19.log = log85;
        java.lang.Class<?> wildcardClass91 = log85.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.ErrorHandler errorHandler7 = restAdapter0.errorHandler;
        java.util.concurrent.Executor executor8 = restAdapter0.httpExecutor;
        retrofit.client.Request request9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request10 = restAdapter0.logAndReplaceRequest(request9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(errorHandler7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.converter.Converter converter6 = null;
        builder0.converter = converter6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        retrofit.client.Client.Provider provider19 = null;
        builder11.clientProvider = provider19;
        retrofit.RequestInterceptor requestInterceptor21 = builder11.requestInterceptor;
        retrofit.RestAdapter restAdapter22 = builder11.build();
        retrofit.Profiler profiler23 = builder11.profiler;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        restAdapter25.log = log39;
        builder24.log = log39;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        retrofit.Server server58 = builder50.server;
        builder24.server = server58;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider71 = null;
        builder63.clientProvider = provider71;
        retrofit.RequestInterceptor requestInterceptor73 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = builder24.setRequestInterceptor(requestInterceptor73);
        retrofit.RestAdapter.Builder builder75 = builder11.setRequestInterceptor(requestInterceptor73);
        retrofit.RestAdapter.Builder builder76 = builder0.setRequestInterceptor(requestInterceptor73);
        retrofit.Profiler profiler77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder76.setProfiler(profiler77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.RestAdapter.Log log4 = restAdapter0.log;
        java.util.concurrent.Executor executor5 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.client.Client.Provider provider17 = builder16.clientProvider;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter42.logLevel = logLevel44;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel44);
        restAdapter27.log = log41;
        builder26.log = log41;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter58.logLevel = logLevel60;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel60);
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log41, logLevel60);
        retrofit.RestAdapter.Builder builder64 = builder16.setLog(log41);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider66 = null;
        builder65.clientProvider = provider66;
        retrofit.RestAdapter.Builder builder69 = builder65.setServer("Retrofit-Idle");
        retrofit.Server server70 = builder65.server;
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider83 = null;
        builder75.clientProvider = provider83;
        retrofit.RequestInterceptor requestInterceptor85 = builder75.requestInterceptor;
        retrofit.RestAdapter restAdapter86 = builder75.build();
        java.util.concurrent.Executor executor87 = restAdapter86.callbackExecutor;
        retrofit.converter.Converter converter88 = restAdapter86.converter;
        retrofit.RestAdapter.Log log89 = restAdapter86.log;
        builder64.log = log89;
        retrofit.RestAdapter.Log log91 = builder64.log;
        java.util.concurrent.Executor executor92 = builder64.callbackExecutor;
        restAdapter0.callbackExecutor = executor92;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(provider17);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(log89);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertNotNull(executor92);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.Server server15 = builder7.server;
        builder0.server = server15;
        retrofit.client.Client.Provider provider17 = builder0.clientProvider;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.ErrorHandler errorHandler20 = null;
        restAdapter18.errorHandler = errorHandler20;
        retrofit.Profiler profiler22 = restAdapter18.profiler;
        retrofit.Profiler profiler23 = null;
        restAdapter18.profiler = profiler23;
        java.util.concurrent.Executor executor25 = restAdapter18.callbackExecutor;
        retrofit.RestAdapter.Log log26 = restAdapter18.log;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RequestInterceptor requestInterceptor40 = builder30.requestInterceptor;
        retrofit.RestAdapter restAdapter41 = builder30.build();
        java.util.concurrent.Executor executor42 = restAdapter41.callbackExecutor;
        retrofit.converter.Converter converter43 = restAdapter41.converter;
        restAdapter18.converter = converter43;
        builder0.converter = converter43;
        retrofit.RestAdapter restAdapter46 = builder0.build();
        java.lang.Throwable throwable47 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter46.logException(throwable47, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(converter43);
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.ErrorHandler errorHandler31 = builder21.errorHandler;
        retrofit.RestAdapter.Builder builder32 = builder8.setErrorHandler(errorHandler31);
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.ErrorHandler errorHandler37 = null;
        restAdapter33.errorHandler = errorHandler37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.Server server40 = restAdapter39.server;
        retrofit.RequestInterceptor requestInterceptor41 = restAdapter39.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder54.clientProvider;
        restAdapter39.clientProvider = provider55;
        restAdapter33.clientProvider = provider55;
        retrofit.RestAdapter.Builder builder58 = builder32.setClient(provider55);
        retrofit.RestAdapter restAdapter59 = builder58.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.Server server64 = builder63.server;
        retrofit.RestAdapter.Builder builder65 = builder58.setServer(server64);
        retrofit.RestAdapter.Builder builder66 = builder0.setServer(server64);
        retrofit.Profiler profiler67 = null;
        builder66.profiler = profiler67;
        retrofit.client.Client client69 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder70 = builder66.setClient(client69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(provider55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        restAdapter39.log = log53;
        builder38.log = log53;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.Server server72 = builder64.server;
        builder38.server = server72;
        retrofit.RestAdapter.LogLevel logLevel74 = builder38.logLevel;
        builder36.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder0.setLogLevel(logLevel74);
        builder76.ensureSaneDefaults();
        retrofit.Profiler profiler78 = null;
        builder76.profiler = profiler78;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = builder80.callbackExecutor;
        retrofit.Profiler profiler82 = null;
        builder80.profiler = profiler82;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        builder84.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder87 = builder84.setServer("hi!");
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter88.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler90 = restAdapter88.new RestHandler();
        retrofit.RestAdapter.Log log91 = restAdapter88.log;
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter88.logLevel = logLevel92;
        retrofit.RestAdapter.Builder builder94 = builder87.setLogLevel(logLevel92);
        retrofit.Server server95 = builder87.server;
        builder80.server = server95;
        retrofit.RestAdapter restAdapter97 = builder80.build();
        retrofit.converter.Converter converter98 = restAdapter97.converter;
        retrofit.RestAdapter.Builder builder99 = builder76.setConverter(converter98);
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNull(logLevel89);
        org.junit.Assert.assertNull(log91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(server95);
        org.junit.Assert.assertNotNull(restAdapter97);
        org.junit.Assert.assertNotNull(converter98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.ErrorHandler errorHandler53 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = null;
        builder59.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.ErrorHandler errorHandler82 = builder72.errorHandler;
        retrofit.RestAdapter.Builder builder83 = builder59.setErrorHandler(errorHandler82);
        restAdapter54.errorHandler = errorHandler82;
        builder0.errorHandler = errorHandler82;
        retrofit.RestAdapter.Log log86 = builder0.log;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(log86);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler20 = restAdapter0.profiler;
        retrofit.Profiler profiler21 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter22.log;
        java.util.concurrent.Executor executor25 = restAdapter22.httpExecutor;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel37);
        restAdapter22.log = log34;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        java.util.concurrent.Executor executor52 = builder44.callbackExecutor;
        restAdapter22.callbackExecutor = executor52;
        restAdapter0.callbackExecutor = executor52;
        retrofit.client.Response response56 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response58 = restAdapter0.logAndReplaceResponse("hi!", response56, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.Server server4 = builder3.server;
        retrofit.RestAdapter.Builder builder6 = builder3.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.Server server32 = builder24.server;
        retrofit.RestAdapter.Builder builder33 = builder10.setServer(server32);
        retrofit.RestAdapter.Log log34 = builder33.log;
        log34.log("hi!");
        builder6.log = log34;
        retrofit.RestAdapter restAdapter38 = builder6.build();
        retrofit.client.Response response40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response42 = restAdapter38.logAndReplaceResponse("", response40, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(restAdapter38);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.Server server4 = restAdapter0.server;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter6.logLevel = logLevel8;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        restAdapter6.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = null;
        builder15.clientProvider = provider23;
        retrofit.ErrorHandler errorHandler25 = builder15.errorHandler;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.Profiler profiler41 = null;
        builder39.profiler = profiler41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.Server server54 = builder46.server;
        builder39.server = server54;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.Server server63 = null;
        retrofit.client.Client.Provider provider64 = null;
        java.util.concurrent.Executor executor65 = null;
        java.util.concurrent.Executor executor66 = null;
        retrofit.RequestInterceptor requestInterceptor67 = null;
        retrofit.converter.Converter converter68 = null;
        retrofit.Profiler profiler69 = null;
        retrofit.ErrorHandler errorHandler70 = null;
        retrofit.RestAdapter.Log log71 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter72.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter72.logLevel = logLevel74;
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter(server63, provider64, executor65, executor66, requestInterceptor67, converter68, profiler69, errorHandler70, log71, logLevel74);
        restAdapter57.log = log71;
        builder56.log = log71;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder82 = builder79.setServer("hi!");
        retrofit.RestAdapter restAdapter83 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter83.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler85 = restAdapter83.new RestHandler();
        retrofit.RestAdapter.Log log86 = restAdapter83.log;
        retrofit.RestAdapter.LogLevel logLevel87 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter83.logLevel = logLevel87;
        retrofit.RestAdapter.Builder builder89 = builder82.setLogLevel(logLevel87);
        retrofit.Server server90 = builder82.server;
        builder56.server = server90;
        builder39.server = server90;
        retrofit.RestAdapter.Builder builder93 = builder36.setServer(server90);
        retrofit.RestAdapter.Builder builder94 = builder15.setServer(server90);
        builder94.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor96 = builder94.requestInterceptor;
        restAdapter6.requestInterceptor = requestInterceptor96;
        restAdapter0.requestInterceptor = requestInterceptor96;
        retrofit.RestAdapter.RestHandler restHandler99 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(logLevel84);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(server90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(requestInterceptor96);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        builder3.clientProvider = provider23;
        retrofit.Profiler profiler25 = null;
        builder3.profiler = profiler25;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(provider23);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.Server server14 = builder3.server;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.RestAdapter.Builder builder27 = builder3.setClient(provider26);
        builder27.ensureSaneDefaults();
        retrofit.Profiler profiler29 = builder27.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler29);
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Log log7 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder13 = builder8.setLogLevel(logLevel12);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter38.logLevel = logLevel40;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel40);
        restAdapter23.log = log37;
        builder22.log = log37;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log37, logLevel56);
        retrofit.RestAdapter.Builder builder60 = builder8.setLog(log37);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder66 = builder61.setLogLevel(logLevel65);
        retrofit.Server server67 = null;
        builder61.server = server67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.RequestInterceptor requestInterceptor82 = builder72.requestInterceptor;
        retrofit.RestAdapter restAdapter83 = builder72.build();
        retrofit.ErrorHandler errorHandler84 = builder72.errorHandler;
        retrofit.converter.Converter converter85 = builder72.converter;
        retrofit.RestAdapter.Builder builder86 = builder61.setConverter(converter85);
        retrofit.RestAdapter.Log log87 = builder61.log;
        retrofit.RestAdapter.Builder builder88 = builder8.setLog(log87);
        restAdapter0.log = log87;
        java.util.concurrent.Executor executor90 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(restAdapter83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(converter85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(log87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNull(executor90);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        java.lang.Class<?> wildcardClass8 = restAdapter0.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel6 = null;
        restAdapter0.logLevel = logLevel6;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log35, logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder10.setLog(log35);
        retrofit.RestAdapter restAdapter59 = builder10.build();
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider71 = null;
        builder63.clientProvider = provider71;
        retrofit.RequestInterceptor requestInterceptor73 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = builder10.setRequestInterceptor(requestInterceptor73);
        retrofit.Profiler profiler75 = null;
        builder74.profiler = profiler75;
        retrofit.client.Client client77 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder78 = builder74.setClient(client77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter13.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel16);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter19.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter19.requestInterceptor;
        retrofit.Profiler profiler26 = restAdapter19.profiler;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        restAdapter27.server = server42;
        restAdapter19.server = server42;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        java.util.concurrent.Executor executor56 = builder48.callbackExecutor;
        retrofit.Profiler profiler57 = null;
        builder48.profiler = profiler57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        java.util.concurrent.Executor executor74 = builder66.callbackExecutor;
        restAdapter59.callbackExecutor = executor74;
        builder48.callbackExecutor = executor74;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        builder81.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder84 = builder81.setServer("hi!");
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter85.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log88 = restAdapter85.log;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter85.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder91 = builder84.setLogLevel(logLevel89);
        java.util.concurrent.Executor executor92 = builder84.callbackExecutor;
        restAdapter77.callbackExecutor = executor92;
        builder48.httpExecutor = executor92;
        java.util.concurrent.Executor executor95 = builder48.callbackExecutor;
        restAdapter19.callbackExecutor = executor95;
        builder18.callbackExecutor = executor95;
        retrofit.ErrorHandler errorHandler98 = builder18.errorHandler;
        retrofit.client.Client.Provider provider99 = builder18.clientProvider;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(logLevel86);
        org.junit.Assert.assertNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNotNull(executor95);
        org.junit.Assert.assertNotNull(errorHandler98);
        org.junit.Assert.assertNotNull(provider99);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel42);
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel42);
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter45.new RestHandler();
        retrofit.client.Response response48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response50 = restAdapter45.logAndReplaceResponse("Retrofit-Idle", response48, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.Server server20 = restAdapter19.server;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter19.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter19.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder18.setLogLevel(logLevel22);
        java.util.concurrent.Executor executor25 = builder24.httpExecutor;
        retrofit.RestAdapter.Log log26 = builder24.log;
        restAdapter0.log = log26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.Profiler profiler29 = restAdapter28.profiler;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder33 = builder30.setServer("hi!");
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler36 = restAdapter34.new RestHandler();
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter34.logLevel = logLevel38;
        retrofit.RestAdapter.Builder builder40 = builder33.setLogLevel(logLevel38);
        retrofit.client.Client.Provider provider41 = null;
        builder33.clientProvider = provider41;
        retrofit.RequestInterceptor requestInterceptor43 = builder33.requestInterceptor;
        retrofit.RestAdapter restAdapter44 = builder33.build();
        retrofit.ErrorHandler errorHandler45 = builder33.errorHandler;
        retrofit.converter.Converter converter46 = builder33.converter;
        restAdapter28.converter = converter46;
        restAdapter0.converter = converter46;
        java.lang.Throwable throwable49 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable49, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(converter46);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter13.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor19 = builder18.httpExecutor;
        retrofit.RestAdapter.Log log20 = builder18.log;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.converter.Converter converter22 = builder18.converter;
        retrofit.RestAdapter restAdapter23 = builder18.build();
        retrofit.Profiler profiler24 = restAdapter23.profiler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(converter22);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(profiler24);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.Server server18 = builder10.server;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.Log log21 = restAdapter19.log;
        java.util.concurrent.Executor executor22 = restAdapter19.httpExecutor;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter19.log = log31;
        builder10.log = log31;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.ErrorHandler errorHandler65 = builder55.errorHandler;
        retrofit.RestAdapter.Builder builder66 = builder42.setErrorHandler(errorHandler65);
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.ErrorHandler errorHandler71 = null;
        restAdapter67.errorHandler = errorHandler71;
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.Server server74 = restAdapter73.server;
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter73.requestInterceptor;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.RestAdapter.Builder builder88 = builder86.setServer("hi!");
        retrofit.client.Client.Provider provider89 = builder88.clientProvider;
        restAdapter73.clientProvider = provider89;
        restAdapter67.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder92 = builder66.setClient(provider89);
        builder10.clientProvider = provider89;
        restAdapter4.clientProvider = provider89;
        retrofit.RestAdapter.Builder builder95 = builder3.setClient(provider89);
        retrofit.converter.Converter converter96 = builder3.converter;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(converter96);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter12.logLevel = logLevel14;
        retrofit.ErrorHandler errorHandler16 = null;
        restAdapter12.errorHandler = errorHandler16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.Server server19 = restAdapter18.server;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter18.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        restAdapter18.clientProvider = provider34;
        restAdapter12.clientProvider = provider34;
        retrofit.RestAdapter.Builder builder37 = builder3.setClient(provider34);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        java.util.concurrent.Executor executor66 = builder58.callbackExecutor;
        restAdapter51.callbackExecutor = executor66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        java.util.concurrent.Executor executor83 = builder75.callbackExecutor;
        restAdapter68.callbackExecutor = executor83;
        retrofit.RestAdapter.Builder builder85 = builder50.setExecutors(executor66, executor83);
        retrofit.RequestInterceptor requestInterceptor86 = builder50.requestInterceptor;
        java.util.concurrent.Executor executor87 = builder50.httpExecutor;
        builder37.callbackExecutor = executor87;
        retrofit.Profiler profiler89 = null;
        builder37.profiler = profiler89;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(provider34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        java.util.concurrent.Executor executor6 = restAdapter0.httpExecutor;
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.Log log8 = restAdapter7.log;
        java.util.concurrent.Executor executor9 = null;
        restAdapter7.callbackExecutor = executor9;
        retrofit.RestAdapter.Log log11 = restAdapter7.log;
        retrofit.Server server12 = restAdapter7.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("hi!");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.RestAdapter.Builder builder23 = builder16.setLogLevel(logLevel21);
        retrofit.client.Client.Provider provider24 = null;
        builder16.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = builder16.requestInterceptor;
        retrofit.RestAdapter restAdapter27 = builder16.build();
        retrofit.Profiler profiler28 = builder16.profiler;
        retrofit.ErrorHandler errorHandler29 = builder16.errorHandler;
        restAdapter7.errorHandler = errorHandler29;
        restAdapter0.errorHandler = errorHandler29;
        java.util.concurrent.Executor executor32 = restAdapter0.callbackExecutor;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNull(profiler28);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        builder27.server = server42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        restAdapter45.log = log59;
        builder44.log = log59;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        builder44.server = server78;
        builder27.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder24.setServer(server78);
        retrofit.RestAdapter.Builder builder82 = builder3.setServer(server78);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder84 = builder3.setLogLevel(logLevel83);
        java.util.concurrent.Executor executor85 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        builder86.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder89 = builder86.setServer("hi!");
        java.util.concurrent.Executor executor90 = builder86.callbackExecutor;
        builder3.callbackExecutor = executor90;
        java.util.concurrent.Executor executor92 = builder3.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(executor92);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder39 = builder34.setLogLevel(logLevel38);
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.logLevel;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder45 = builder42.setServer("hi!");
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler48 = restAdapter46.new RestHandler();
        retrofit.RestAdapter.Log log49 = restAdapter46.log;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter46.logLevel = logLevel50;
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.client.Client.Provider provider53 = null;
        builder45.clientProvider = provider53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder58 = builder55.setServer("hi!");
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.Log log62 = restAdapter59.log;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter59.logLevel = logLevel63;
        retrofit.RestAdapter.Builder builder65 = builder58.setLogLevel(logLevel63);
        retrofit.client.Client.Provider provider66 = null;
        builder58.clientProvider = provider66;
        retrofit.ErrorHandler errorHandler68 = builder58.errorHandler;
        retrofit.RestAdapter.Builder builder69 = builder45.setErrorHandler(errorHandler68);
        restAdapter40.errorHandler = errorHandler68;
        builder34.errorHandler = errorHandler68;
        restAdapter32.errorHandler = errorHandler68;
        retrofit.RequestInterceptor requestInterceptor73 = restAdapter32.requestInterceptor;
        java.util.concurrent.Executor executor74 = restAdapter32.callbackExecutor;
        retrofit.client.Request request75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request76 = restAdapter32.logAndReplaceRequest(request75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertNull(log49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(requestInterceptor73);
        org.junit.Assert.assertNull(executor74);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.Profiler profiler2 = null;
        restAdapter0.profiler = profiler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel6 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor7 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler8 = null;
        restAdapter0.profiler = profiler8;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(logLevel6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel25);
        java.util.concurrent.Executor executor28 = builder20.callbackExecutor;
        restAdapter13.callbackExecutor = executor28;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder37.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor45 = builder37.callbackExecutor;
        restAdapter30.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = builder12.setExecutors(executor28, executor45);
        retrofit.RequestInterceptor requestInterceptor48 = builder12.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel49 = builder12.logLevel;
        retrofit.ErrorHandler errorHandler50 = builder12.errorHandler;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler50);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        restAdapter0.requestInterceptor = requestInterceptor4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder12 = builder7.setLogLevel(logLevel11);
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        restAdapter0.setLogLevel(logLevel17);
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        retrofit.Server server22 = restAdapter0.server;
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(server22);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Log log27 = builder26.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.Server server29 = restAdapter28.server;
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter28.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        restAdapter28.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder46 = builder26.setClient(provider44);
        retrofit.RestAdapter.LogLevel logLevel47 = builder46.logLevel;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.Log log50 = restAdapter48.log;
        java.util.concurrent.Executor executor51 = restAdapter48.httpExecutor;
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter61.logLevel = logLevel63;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel63);
        restAdapter48.log = log60;
        java.util.concurrent.Executor executor67 = null;
        restAdapter48.httpExecutor = executor67;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter48.getLogLevel();
        retrofit.ErrorHandler errorHandler70 = restAdapter48.errorHandler;
        retrofit.Profiler profiler71 = restAdapter48.profiler;
        retrofit.RestAdapter.Log log72 = restAdapter48.log;
        retrofit.RestAdapter.Builder builder73 = builder46.setLog(log72);
        retrofit.client.Client.Provider provider74 = builder73.clientProvider;
        retrofit.Profiler profiler75 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder76 = builder73.setProfiler(profiler75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(errorHandler70);
        org.junit.Assert.assertNull(profiler71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(provider74);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.Profiler profiler15 = builder3.profiler;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter16.requestInterceptor;
        retrofit.converter.Converter converter21 = null;
        restAdapter16.converter = converter21;
        retrofit.converter.Converter converter23 = restAdapter16.converter;
        retrofit.converter.Converter converter24 = null;
        restAdapter16.converter = converter24;
        java.util.concurrent.Executor executor26 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.Log log27 = restAdapter16.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter28.logLevel = logLevel30;
        retrofit.ErrorHandler errorHandler32 = null;
        restAdapter28.errorHandler = errorHandler32;
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter28.logLevel;
        restAdapter16.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder3.setLogLevel(logLevel34);
        retrofit.ErrorHandler errorHandler37 = null;
        builder3.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.RequestInterceptor requestInterceptor52 = builder42.requestInterceptor;
        retrofit.RestAdapter restAdapter53 = builder42.build();
        retrofit.ErrorHandler errorHandler54 = builder42.errorHandler;
        retrofit.converter.Converter converter55 = builder42.converter;
        java.util.concurrent.Executor executor56 = builder42.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor57 = builder42.requestInterceptor;
        retrofit.RestAdapter restAdapter58 = builder42.build();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        builder3.logLevel = logLevel59;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.Profiler profiler5 = null;
        restAdapter0.profiler = profiler5;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log9 = restAdapter0.log;
        retrofit.Profiler profiler10 = restAdapter0.profiler;
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter0.logLevel;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertNull(logLevel11);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.callbackExecutor;
        retrofit.Profiler profiler29 = null;
        builder27.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        builder27.server = server42;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.Server server51 = null;
        retrofit.client.Client.Provider provider52 = null;
        java.util.concurrent.Executor executor53 = null;
        java.util.concurrent.Executor executor54 = null;
        retrofit.RequestInterceptor requestInterceptor55 = null;
        retrofit.converter.Converter converter56 = null;
        retrofit.Profiler profiler57 = null;
        retrofit.ErrorHandler errorHandler58 = null;
        retrofit.RestAdapter.Log log59 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server51, provider52, executor53, executor54, requestInterceptor55, converter56, profiler57, errorHandler58, log59, logLevel62);
        restAdapter45.log = log59;
        builder44.log = log59;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.Server server78 = builder70.server;
        builder44.server = server78;
        builder27.server = server78;
        retrofit.RestAdapter.Builder builder81 = builder24.setServer(server78);
        retrofit.RestAdapter.Builder builder82 = builder3.setServer(server78);
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder84 = builder3.setLogLevel(logLevel83);
        java.util.concurrent.Executor executor85 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        builder86.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder89 = builder86.setServer("hi!");
        java.util.concurrent.Executor executor90 = builder86.callbackExecutor;
        builder3.callbackExecutor = executor90;
        retrofit.Server server92 = builder3.server;
        retrofit.Profiler profiler93 = builder3.profiler;
        java.util.concurrent.Executor executor94 = null;
        builder3.httpExecutor = executor94;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(executor90);
        org.junit.Assert.assertNotNull(server92);
        org.junit.Assert.assertNull(profiler93);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder0.setLogLevel(logLevel25);
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.Profiler profiler28 = null;
        builder26.profiler = profiler28;
        retrofit.Server server30 = builder26.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.client.Client.Provider provider42 = builder41.clientProvider;
        java.util.concurrent.Executor executor43 = builder41.callbackExecutor;
        retrofit.converter.Converter converter44 = builder41.converter;
        retrofit.RestAdapter.Builder builder45 = builder26.setConverter(converter44);
        retrofit.Profiler profiler46 = builder26.profiler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(provider42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNotNull(converter44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(profiler46);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = null;
        restAdapter0.httpExecutor = executor19;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter0.logLevel;
        retrofit.Profiler profiler23 = restAdapter0.profiler;
        retrofit.client.Client.Provider provider24 = restAdapter0.clientProvider;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider36 = null;
        builder28.clientProvider = provider36;
        retrofit.ErrorHandler errorHandler38 = builder28.errorHandler;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.Server server50 = builder42.server;
        retrofit.RestAdapter.Builder builder51 = builder28.setServer(server50);
        java.util.concurrent.Executor executor52 = builder51.httpExecutor;
        retrofit.converter.Converter converter53 = builder51.converter;
        restAdapter0.converter = converter53;
        retrofit.converter.Converter converter55 = null;
        restAdapter0.converter = converter55;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel21);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNotNull(converter53);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter32.requestInterceptor;
        retrofit.client.Response response36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response38 = restAdapter32.logAndReplaceResponse("Retrofit-Idle", response36, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(requestInterceptor34);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.ErrorHandler errorHandler27 = builder17.errorHandler;
        retrofit.Server server28 = builder17.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        retrofit.client.Client.Provider provider40 = builder39.clientProvider;
        retrofit.RestAdapter.Builder builder41 = builder17.setClient(provider40);
        builder3.clientProvider = provider40;
        retrofit.RestAdapter.Builder builder44 = builder3.setServer("Retrofit-Idle");
        retrofit.Profiler profiler45 = builder3.profiler;
        retrofit.ErrorHandler errorHandler46 = builder3.errorHandler;
        retrofit.Profiler profiler47 = builder3.profiler;
        retrofit.RestAdapter.Log log48 = builder3.log;
        log48.log("hi!");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(provider40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(profiler45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNull(profiler47);
        org.junit.Assert.assertNotNull(log48);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.ErrorHandler errorHandler2 = null;
        restAdapter0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = restAdapter0.clientProvider;
        retrofit.client.Response response6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response8 = restAdapter0.logAndReplaceResponse("hi!", response6, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(provider4);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.client.Client.Provider provider6 = builder4.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel7 = builder4.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder4.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.Server server14 = builder13.server;
        retrofit.RestAdapter.Builder builder16 = builder13.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.converter.Converter converter23 = restAdapter17.converter;
        java.util.concurrent.Executor executor24 = restAdapter17.callbackExecutor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.client.Client.Provider provider36 = null;
        builder28.clientProvider = provider36;
        retrofit.RequestInterceptor requestInterceptor38 = builder28.requestInterceptor;
        retrofit.RestAdapter restAdapter39 = builder28.build();
        retrofit.ErrorHandler errorHandler40 = builder28.errorHandler;
        retrofit.converter.Converter converter41 = builder28.converter;
        restAdapter17.converter = converter41;
        builder13.converter = converter41;
        builder4.converter = converter41;
        retrofit.client.Client.Provider provider45 = builder4.clientProvider;
        java.util.concurrent.Executor executor46 = builder4.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(converter41);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(executor46);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter restAdapter5 = new retrofit.RestAdapter();
        retrofit.Profiler profiler6 = restAdapter5.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.ErrorHandler errorHandler20 = builder10.errorHandler;
        restAdapter5.errorHandler = errorHandler20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        restAdapter31.log = log45;
        builder30.log = log45;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log45, logLevel53);
        restAdapter5.logLevel = logLevel53;
        restAdapter0.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder60 = builder57.setServer("hi!");
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.Log log64 = restAdapter61.log;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter61.logLevel = logLevel65;
        retrofit.RestAdapter.Builder builder67 = builder60.setLogLevel(logLevel65);
        retrofit.client.Client.Provider provider68 = null;
        builder60.clientProvider = provider68;
        retrofit.ErrorHandler errorHandler70 = builder60.errorHandler;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        retrofit.Server server82 = builder74.server;
        retrofit.RestAdapter.Builder builder83 = builder60.setServer(server82);
        restAdapter0.server = server82;
        retrofit.ErrorHandler errorHandler85 = restAdapter0.errorHandler;
        java.lang.Throwable throwable86 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.logException(throwable86, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(server82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(errorHandler85);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        restAdapter32.callbackExecutor = executor47;
        builder3.httpExecutor = executor47;
        java.util.concurrent.Executor executor50 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        java.util.concurrent.Executor executor53 = builder51.httpExecutor;
        builder3.httpExecutor = executor53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.Server server56 = restAdapter55.server;
        retrofit.RequestInterceptor requestInterceptor57 = restAdapter55.requestInterceptor;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder65 = builder62.setServer("hi!");
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler68 = restAdapter66.new RestHandler();
        retrofit.RestAdapter.Log log69 = restAdapter66.log;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter66.logLevel = logLevel70;
        retrofit.RestAdapter.Builder builder72 = builder65.setLogLevel(logLevel70);
        java.util.concurrent.Executor executor73 = builder65.callbackExecutor;
        restAdapter58.callbackExecutor = executor73;
        restAdapter55.httpExecutor = executor73;
        builder3.callbackExecutor = executor73;
        java.util.concurrent.Executor executor77 = builder3.httpExecutor;
        retrofit.Profiler profiler78 = null;
        builder3.profiler = profiler78;
        retrofit.client.Client.Provider provider80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder81 = builder3.setClient(provider80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(logLevel67);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(executor77);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.RequestInterceptor requestInterceptor18 = builder8.requestInterceptor;
        retrofit.RestAdapter restAdapter19 = builder8.build();
        retrofit.ErrorHandler errorHandler20 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder21 = builder0.setErrorHandler(errorHandler20);
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter22.logLevel = logLevel24;
        retrofit.ErrorHandler errorHandler26 = null;
        restAdapter22.errorHandler = errorHandler26;
        java.util.concurrent.Executor executor28 = restAdapter22.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder30 = builder21.setLogLevel(logLevel29);
        retrofit.RestAdapter.LogLevel logLevel31 = builder30.logLevel;
        builder30.ensureSaneDefaults();
        java.util.concurrent.Executor executor33 = builder30.httpExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(restAdapter19);
        org.junit.Assert.assertNotNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RequestInterceptor requestInterceptor6 = restAdapter0.requestInterceptor;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.Server server23 = builder15.server;
        restAdapter8.server = server23;
        restAdapter0.server = server23;
        java.util.concurrent.Executor executor26 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.Log log27 = restAdapter0.log;
        java.util.concurrent.Executor executor28 = restAdapter0.callbackExecutor;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter38.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter38.logLevel = logLevel42;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        java.util.concurrent.Executor executor46 = null;
        java.util.concurrent.Executor executor47 = null;
        retrofit.RequestInterceptor requestInterceptor48 = null;
        retrofit.converter.Converter converter49 = null;
        retrofit.Profiler profiler50 = null;
        retrofit.ErrorHandler errorHandler51 = null;
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter53.logLevel = logLevel55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server44, provider45, executor46, executor47, requestInterceptor48, converter49, profiler50, errorHandler51, log52, logLevel55);
        restAdapter38.log = log52;
        builder37.log = log52;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log52, logLevel60);
        restAdapter0.setLogLevel(logLevel60);
        retrofit.Profiler profiler63 = restAdapter0.profiler;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(logLevel39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler63);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RequestInterceptor requestInterceptor3 = restAdapter0.requestInterceptor;
        retrofit.Server server4 = restAdapter0.server;
        java.util.concurrent.Executor executor5 = restAdapter0.httpExecutor;
        retrofit.ErrorHandler errorHandler6 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter0.logLevel;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter restAdapter12 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter12.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter12.new RestHandler();
        retrofit.RestAdapter.Log log15 = restAdapter12.log;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter12.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder11.setLogLevel(logLevel16);
        java.util.concurrent.Executor executor19 = builder11.callbackExecutor;
        retrofit.Profiler profiler20 = null;
        builder11.profiler = profiler20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer("hi!");
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler32 = restAdapter30.new RestHandler();
        retrofit.RestAdapter.Log log33 = restAdapter30.log;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter30.logLevel = logLevel34;
        retrofit.RestAdapter.Builder builder36 = builder29.setLogLevel(logLevel34);
        java.util.concurrent.Executor executor37 = builder29.callbackExecutor;
        restAdapter22.callbackExecutor = executor37;
        builder11.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder47 = builder44.setServer("hi!");
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler50 = restAdapter48.new RestHandler();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter48.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = builder47.setLogLevel(logLevel52);
        java.util.concurrent.Executor executor55 = builder47.callbackExecutor;
        restAdapter40.callbackExecutor = executor55;
        builder11.httpExecutor = executor55;
        retrofit.Server server58 = builder11.server;
        retrofit.RestAdapter restAdapter59 = builder11.build();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(logLevel13);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(logLevel49);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(server58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        retrofit.client.Client.Provider provider29 = null;
        builder21.clientProvider = provider29;
        retrofit.RequestInterceptor requestInterceptor31 = builder21.requestInterceptor;
        retrofit.RestAdapter restAdapter32 = builder21.build();
        java.util.concurrent.Executor executor33 = restAdapter32.callbackExecutor;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.Log log36 = restAdapter34.log;
        retrofit.ErrorHandler errorHandler37 = restAdapter34.errorHandler;
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter34.requestInterceptor;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.Log log46 = restAdapter43.log;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter43.logLevel = logLevel47;
        retrofit.RestAdapter.Builder builder49 = builder42.setLogLevel(logLevel47);
        retrofit.client.Client.Provider provider50 = null;
        builder42.clientProvider = provider50;
        retrofit.ErrorHandler errorHandler52 = builder42.errorHandler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.Server server64 = builder56.server;
        retrofit.RestAdapter.Builder builder65 = builder42.setServer(server64);
        java.util.concurrent.Executor executor66 = builder65.httpExecutor;
        restAdapter34.httpExecutor = executor66;
        retrofit.RestAdapter.Builder builder68 = builder0.setExecutors(executor33, executor66);
        retrofit.Profiler profiler69 = builder68.profiler;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder73 = builder70.setServer("hi!");
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter74.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler76 = restAdapter74.new RestHandler();
        retrofit.RestAdapter.Log log77 = restAdapter74.log;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter74.logLevel = logLevel78;
        retrofit.RestAdapter.Builder builder80 = builder73.setLogLevel(logLevel78);
        retrofit.client.Client.Provider provider81 = builder80.clientProvider;
        retrofit.ErrorHandler errorHandler82 = builder80.errorHandler;
        retrofit.Server server83 = builder80.server;
        retrofit.converter.Converter converter84 = builder80.converter;
        builder68.converter = converter84;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(server64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(profiler69);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(logLevel75);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(provider81);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(converter84);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        retrofit.converter.Converter converter8 = null;
        restAdapter0.converter = converter8;
        retrofit.Server server10 = null;
        restAdapter0.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        builder22.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor24 = builder22.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean26 = logLevel25.log();
        boolean boolean27 = logLevel25.log();
        builder22.logLevel = logLevel25;
        restAdapter0.logLevel = logLevel25;
        boolean boolean30 = logLevel25.log();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Log log27 = builder26.log;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = builder38.clientProvider;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter64.logLevel = logLevel66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel66);
        restAdapter49.log = log63;
        builder48.log = log63;
        retrofit.Server server71 = null;
        retrofit.client.Client.Provider provider72 = null;
        java.util.concurrent.Executor executor73 = null;
        java.util.concurrent.Executor executor74 = null;
        retrofit.RequestInterceptor requestInterceptor75 = null;
        retrofit.converter.Converter converter76 = null;
        retrofit.Profiler profiler77 = null;
        retrofit.ErrorHandler errorHandler78 = null;
        retrofit.RestAdapter.Log log79 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter80.logLevel = logLevel82;
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server71, provider72, executor73, executor74, requestInterceptor75, converter76, profiler77, errorHandler78, log79, logLevel82);
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log63, logLevel82);
        retrofit.RestAdapter.Builder builder86 = builder38.setLog(log63);
        retrofit.RestAdapter restAdapter87 = builder38.build();
        builder38.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler89 = builder38.errorHandler;
        builder26.errorHandler = errorHandler89;
        java.util.concurrent.Executor executor91 = builder26.httpExecutor;
        retrofit.client.Client client92 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder93 = builder26.setClient(client92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(executor91);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        java.util.concurrent.Executor executor2 = null;
        restAdapter0.httpExecutor = executor2;
        retrofit.converter.Converter converter4 = restAdapter0.converter;
        retrofit.converter.Converter converter5 = null;
        restAdapter0.converter = converter5;
        retrofit.RestAdapter.RestHandler restHandler7 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder13 = builder8.setLogLevel(logLevel12);
        retrofit.ErrorHandler errorHandler14 = builder13.errorHandler;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.client.Client.Provider provider26 = builder25.clientProvider;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        restAdapter36.log = log50;
        builder35.log = log50;
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        java.util.concurrent.Executor executor60 = null;
        java.util.concurrent.Executor executor61 = null;
        retrofit.RequestInterceptor requestInterceptor62 = null;
        retrofit.converter.Converter converter63 = null;
        retrofit.Profiler profiler64 = null;
        retrofit.ErrorHandler errorHandler65 = null;
        retrofit.RestAdapter.Log log66 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter67.logLevel = logLevel69;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server58, provider59, executor60, executor61, requestInterceptor62, converter63, profiler64, errorHandler65, log66, logLevel69);
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log50, logLevel69);
        retrofit.RestAdapter.Builder builder73 = builder25.setLog(log50);
        retrofit.RestAdapter restAdapter74 = builder25.build();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.RequestInterceptor requestInterceptor88 = builder78.requestInterceptor;
        retrofit.RestAdapter.Builder builder89 = builder25.setRequestInterceptor(requestInterceptor88);
        retrofit.Profiler profiler90 = builder25.profiler;
        java.util.concurrent.Executor executor91 = builder25.callbackExecutor;
        builder13.httpExecutor = executor91;
        restAdapter0.httpExecutor = executor91;
        retrofit.client.Request request94 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request95 = restAdapter0.logAndReplaceRequest(request94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNull(profiler90);
        org.junit.Assert.assertNotNull(executor91);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        java.util.concurrent.Executor executor4 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter0.logLevel;
        retrofit.client.Client.Provider provider6 = restAdapter0.clientProvider;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(provider6);
        org.junit.Assert.assertNull(converter7);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.callbackExecutor;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Log log4 = builder0.log;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        java.util.concurrent.Executor executor16 = builder8.callbackExecutor;
        builder0.httpExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.ErrorHandler errorHandler22 = null;
        restAdapter18.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = restAdapter18.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter18.logLevel;
        retrofit.RestAdapter.Builder builder26 = builder0.setLogLevel(logLevel25);
        retrofit.RequestInterceptor requestInterceptor27 = builder0.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor28 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertNull(requestInterceptor28);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter restAdapter14 = builder3.build();
        retrofit.client.Client.Provider provider15 = restAdapter14.clientProvider;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Log log18 = restAdapter16.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter16.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer("hi!");
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter25.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter25.new RestHandler();
        retrofit.RestAdapter.Log log28 = restAdapter25.log;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter25.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder24.setLogLevel(logLevel29);
        retrofit.client.Client.Provider provider32 = null;
        builder24.clientProvider = provider32;
        retrofit.ErrorHandler errorHandler34 = builder24.errorHandler;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder38 = builder35.setServer("hi!");
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.RestAdapter.Builder builder45 = builder38.setLogLevel(logLevel43);
        retrofit.Server server46 = builder38.server;
        retrofit.RestAdapter.Builder builder47 = builder24.setServer(server46);
        java.util.concurrent.Executor executor48 = builder47.httpExecutor;
        restAdapter16.httpExecutor = executor48;
        restAdapter14.httpExecutor = executor48;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = builder51.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler57 = restAdapter55.new RestHandler();
        retrofit.RestAdapter.Log log58 = restAdapter55.log;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter55.logLevel = logLevel59;
        retrofit.RestAdapter.Builder builder61 = builder54.setLogLevel(logLevel59);
        retrofit.client.Client.Provider provider62 = null;
        builder54.clientProvider = provider62;
        retrofit.RequestInterceptor requestInterceptor64 = builder54.requestInterceptor;
        retrofit.RestAdapter restAdapter65 = builder54.build();
        retrofit.Profiler profiler66 = builder54.profiler;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder72 = builder67.setLogLevel(logLevel71);
        retrofit.Server server73 = null;
        builder67.server = server73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder78 = builder75.setServer("hi!");
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler81 = restAdapter79.new RestHandler();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter79.logLevel = logLevel83;
        retrofit.RestAdapter.Builder builder85 = builder78.setLogLevel(logLevel83);
        retrofit.client.Client.Provider provider86 = null;
        builder78.clientProvider = provider86;
        retrofit.RequestInterceptor requestInterceptor88 = builder78.requestInterceptor;
        retrofit.RestAdapter restAdapter89 = builder78.build();
        retrofit.ErrorHandler errorHandler90 = builder78.errorHandler;
        retrofit.converter.Converter converter91 = builder78.converter;
        retrofit.RestAdapter.Builder builder92 = builder67.setConverter(converter91);
        retrofit.RestAdapter.Log log93 = builder67.log;
        builder54.log = log93;
        restAdapter14.log = log93;
        java.lang.Class<?> wildcardClass96 = restAdapter14.getClass();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(restAdapter14);
        org.junit.Assert.assertNotNull(provider15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(logLevel26);
        org.junit.Assert.assertNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(logLevel56);
        org.junit.Assert.assertNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(restAdapter65);
        org.junit.Assert.assertNull(profiler66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.ErrorHandler errorHandler12 = builder10.errorHandler;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.logLevel = logLevel31;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel31);
        restAdapter14.log = log28;
        builder13.log = log28;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.Server server47 = builder39.server;
        builder13.server = server47;
        builder10.server = server47;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder10.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server47);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.callbackExecutor;
        retrofit.Profiler profiler15 = null;
        builder13.profiler = profiler15;
        retrofit.RestAdapter.Log log17 = builder13.log;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        builder13.httpExecutor = executor29;
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.LogLevel logLevel32 = builder13.logLevel;
        builder12.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = builder12.build();
        java.util.concurrent.Executor executor35 = restAdapter34.httpExecutor;
        java.lang.Throwable throwable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter34.logException(throwable36, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNotNull(executor35);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter15.logLevel = logLevel17;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel17);
        restAdapter0.log = log14;
        retrofit.RequestInterceptor requestInterceptor21 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("hi!");
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter26.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler28 = restAdapter26.new RestHandler();
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter26.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder25.setLogLevel(logLevel30);
        retrofit.client.Client.Provider provider33 = null;
        builder25.clientProvider = provider33;
        retrofit.RequestInterceptor requestInterceptor35 = builder25.requestInterceptor;
        retrofit.RestAdapter restAdapter36 = builder25.build();
        retrofit.Profiler profiler37 = builder25.profiler;
        retrofit.ErrorHandler errorHandler38 = builder25.errorHandler;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler41 = restAdapter39.new RestHandler();
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter39.logLevel = logLevel43;
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel56;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel56);
        restAdapter39.log = log53;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter60.logLevel = logLevel62;
        retrofit.ErrorHandler errorHandler64 = null;
        restAdapter60.errorHandler = errorHandler64;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter();
        retrofit.Server server67 = restAdapter66.server;
        retrofit.RequestInterceptor requestInterceptor68 = restAdapter66.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        retrofit.client.Client.Provider provider82 = builder81.clientProvider;
        restAdapter66.clientProvider = provider82;
        restAdapter60.clientProvider = provider82;
        restAdapter39.clientProvider = provider82;
        retrofit.RestAdapter.Builder builder86 = builder25.setClient(provider82);
        retrofit.converter.Converter converter87 = builder86.converter;
        restAdapter0.converter = converter87;
        retrofit.RestAdapter.RestHandler restHandler89 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider90 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(logLevel27);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(provider82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(converter87);
        org.junit.Assert.assertNull(provider90);
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        builder2.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = builder2.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter6.log;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter6.logLevel = logLevel10;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel10);
        java.util.concurrent.Executor executor13 = builder5.callbackExecutor;
        retrofit.Profiler profiler14 = null;
        builder5.profiler = profiler14;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer("hi!");
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler26 = restAdapter24.new RestHandler();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter24.logLevel = logLevel28;
        retrofit.RestAdapter.Builder builder30 = builder23.setLogLevel(logLevel28);
        java.util.concurrent.Executor executor31 = builder23.callbackExecutor;
        restAdapter16.callbackExecutor = executor31;
        builder5.callbackExecutor = executor31;
        restAdapter0.callbackExecutor = executor31;
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter0.requestInterceptor;
        retrofit.converter.Converter converter36 = restAdapter0.converter;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNull(converter36);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.converter.Converter converter6 = restAdapter0.converter;
        retrofit.converter.Converter converter7 = restAdapter0.converter;
        java.util.concurrent.Executor executor8 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor9 = restAdapter0.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log11 = restAdapter0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder17 = builder12.setLogLevel(logLevel16);
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler27 = builder25.errorHandler;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter37.logLevel = logLevel39;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel39);
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter41.new RestHandler();
        retrofit.converter.Converter converter43 = restAdapter41.converter;
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.converter.Converter converter50 = restAdapter44.converter;
        java.util.concurrent.Executor executor51 = restAdapter44.callbackExecutor;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = builder52.setServer("hi!");
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler58 = restAdapter56.new RestHandler();
        retrofit.RestAdapter.Log log59 = restAdapter56.log;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter56.logLevel = logLevel60;
        retrofit.RestAdapter.Builder builder62 = builder55.setLogLevel(logLevel60);
        retrofit.client.Client.Provider provider63 = null;
        builder55.clientProvider = provider63;
        retrofit.RequestInterceptor requestInterceptor65 = builder55.requestInterceptor;
        retrofit.RestAdapter restAdapter66 = builder55.build();
        retrofit.ErrorHandler errorHandler67 = builder55.errorHandler;
        retrofit.converter.Converter converter68 = builder55.converter;
        restAdapter44.converter = converter68;
        restAdapter41.converter = converter68;
        retrofit.RestAdapter.Builder builder71 = builder25.setConverter(converter68);
        builder24.converter = converter68;
        restAdapter0.converter = converter68;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(logLevel57);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(converter68);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.Server server14 = restAdapter13.server;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter13.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder12.setLogLevel(logLevel16);
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter19.logLevel = logLevel21;
        retrofit.ErrorHandler errorHandler23 = null;
        restAdapter19.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter19.requestInterceptor;
        retrofit.Profiler profiler26 = restAdapter19.profiler;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.Server server42 = builder34.server;
        restAdapter27.server = server42;
        restAdapter19.server = server42;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        java.util.concurrent.Executor executor56 = builder48.callbackExecutor;
        retrofit.Profiler profiler57 = null;
        builder48.profiler = profiler57;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler61 = restAdapter59.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter59.getLogLevel();
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        java.util.concurrent.Executor executor74 = builder66.callbackExecutor;
        restAdapter59.callbackExecutor = executor74;
        builder48.callbackExecutor = executor74;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler79 = restAdapter77.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel80 = restAdapter77.getLogLevel();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        builder81.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder84 = builder81.setServer("hi!");
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel86 = restAdapter85.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler87 = restAdapter85.new RestHandler();
        retrofit.RestAdapter.Log log88 = restAdapter85.log;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter85.logLevel = logLevel89;
        retrofit.RestAdapter.Builder builder91 = builder84.setLogLevel(logLevel89);
        java.util.concurrent.Executor executor92 = builder84.callbackExecutor;
        restAdapter77.callbackExecutor = executor92;
        builder48.httpExecutor = executor92;
        java.util.concurrent.Executor executor95 = builder48.callbackExecutor;
        restAdapter19.callbackExecutor = executor95;
        builder18.callbackExecutor = executor95;
        retrofit.Profiler profiler98 = null;
        builder18.profiler = profiler98;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNull(logLevel60);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNull(logLevel78);
        org.junit.Assert.assertNull(logLevel80);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(logLevel86);
        org.junit.Assert.assertNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RequestInterceptor requestInterceptor13 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.client.Client.Provider provider25 = null;
        builder17.clientProvider = provider25;
        retrofit.RequestInterceptor requestInterceptor27 = builder17.requestInterceptor;
        retrofit.RestAdapter.Builder builder28 = builder3.setRequestInterceptor(requestInterceptor27);
        retrofit.converter.Converter converter29 = builder28.converter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler32 = builder30.errorHandler;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        java.util.concurrent.Executor executor35 = builder33.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor36 = builder33.requestInterceptor;
        retrofit.RestAdapter.Builder builder37 = builder30.setRequestInterceptor(requestInterceptor36);
        retrofit.converter.Converter converter38 = builder30.converter;
        builder28.converter = converter38;
        retrofit.RestAdapter.Builder builder41 = builder28.setServer("hi!");
        retrofit.Profiler profiler42 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder43 = builder28.setProfiler(profiler42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(converter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(converter38);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.logLevel;
        retrofit.RestAdapter restAdapter2 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel3 = restAdapter2.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter2.logLevel = logLevel4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter2.new RestHandler();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer("hi!");
        retrofit.RestAdapter restAdapter11 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter11.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter11.new RestHandler();
        retrofit.RestAdapter.Log log14 = restAdapter11.log;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter11.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder10.setLogLevel(logLevel15);
        retrofit.client.Client.Provider provider18 = null;
        builder10.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder10.server = server20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter22.log;
        java.util.concurrent.Executor executor25 = restAdapter22.httpExecutor;
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter35.logLevel = logLevel37;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel37);
        restAdapter22.log = log34;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        builder41.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.Log log48 = restAdapter45.log;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter45.logLevel = logLevel49;
        retrofit.RestAdapter.Builder builder51 = builder44.setLogLevel(logLevel49);
        java.util.concurrent.Executor executor52 = builder44.callbackExecutor;
        restAdapter22.callbackExecutor = executor52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor65 = builder57.callbackExecutor;
        retrofit.Profiler profiler66 = null;
        builder57.profiler = profiler66;
        retrofit.RestAdapter restAdapter68 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter68.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter68.getLogLevel();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        java.util.concurrent.Executor executor83 = builder75.callbackExecutor;
        restAdapter68.callbackExecutor = executor83;
        builder57.callbackExecutor = executor83;
        retrofit.RestAdapter.Builder builder86 = builder10.setExecutors(executor52, executor83);
        restAdapter2.httpExecutor = executor83;
        retrofit.Profiler profiler88 = restAdapter2.profiler;
        retrofit.RestAdapter.LogLevel logLevel89 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean90 = logLevel89.log();
        boolean boolean91 = logLevel89.log();
        restAdapter2.logLevel = logLevel89;
        retrofit.RestAdapter.LogLevel logLevel93 = restAdapter2.getLogLevel();
        boolean boolean94 = logLevel93.log();
        restAdapter0.logLevel = logLevel93;
        retrofit.RestAdapter.LogLevel logLevel96 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter0.logLevel;
        java.lang.Class<?> wildcardClass98 = logLevel97.getClass();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(logLevel3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(logLevel12);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNull(logLevel69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(profiler88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + logLevel93 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel93.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        builder2.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = builder2.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel7 = restAdapter6.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler8 = restAdapter6.new RestHandler();
        retrofit.RestAdapter.Log log9 = restAdapter6.log;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter6.logLevel = logLevel10;
        retrofit.RestAdapter.Builder builder12 = builder5.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter19.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler21 = restAdapter19.new RestHandler();
        retrofit.RestAdapter.Log log22 = restAdapter19.log;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter19.logLevel = logLevel23;
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter28.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter28.getLogLevel();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        java.util.concurrent.Executor executor43 = builder35.callbackExecutor;
        restAdapter28.callbackExecutor = executor43;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler47 = restAdapter45.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter45.getLogLevel();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        java.util.concurrent.Executor executor60 = builder52.callbackExecutor;
        restAdapter45.callbackExecutor = executor60;
        retrofit.RestAdapter.Builder builder62 = builder27.setExecutors(executor43, executor60);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = builder63.setServer("hi!");
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.Log log70 = restAdapter67.log;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter67.logLevel = logLevel71;
        retrofit.RestAdapter.Builder builder73 = builder66.setLogLevel(logLevel71);
        retrofit.client.Client.Provider provider74 = null;
        builder66.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        builder76.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder79 = builder76.setServer("hi!");
        retrofit.RestAdapter restAdapter80 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter80.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler82 = restAdapter80.new RestHandler();
        retrofit.RestAdapter.Log log83 = restAdapter80.log;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter80.logLevel = logLevel84;
        retrofit.RestAdapter.Builder builder86 = builder79.setLogLevel(logLevel84);
        retrofit.client.Client.Provider provider87 = null;
        builder79.clientProvider = provider87;
        retrofit.ErrorHandler errorHandler89 = builder79.errorHandler;
        retrofit.RestAdapter.Builder builder90 = builder66.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder91 = builder27.setErrorHandler(errorHandler89);
        retrofit.RestAdapter.Builder builder92 = builder12.setErrorHandler(errorHandler89);
        restAdapter0.errorHandler = errorHandler89;
        retrofit.converter.Converter converter94 = restAdapter0.converter;
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter0.logLevel;
        java.util.concurrent.Executor executor96 = restAdapter0.callbackExecutor;
        java.util.concurrent.Executor executor97 = restAdapter0.httpExecutor;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel7);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(logLevel20);
        org.junit.Assert.assertNull(log22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(logLevel29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNull(logLevel81);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNull(converter94);
        org.junit.Assert.assertNull(logLevel95);
        org.junit.Assert.assertNull(executor96);
        org.junit.Assert.assertNull(executor97);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter24.logLevel = logLevel26;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel26);
        restAdapter9.log = log23;
        builder8.log = log23;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log23, logLevel31);
        retrofit.RestAdapter.Log log33 = restAdapter32.log;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter34.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter34.logLevel = logLevel36;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter34.new RestHandler();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel40 = restAdapter39.getLogLevel();
        retrofit.RestAdapter.Log log41 = restAdapter39.log;
        java.util.concurrent.Executor executor42 = restAdapter39.httpExecutor;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        restAdapter39.log = log51;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder61 = builder58.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder63 = builder58.setLogLevel(logLevel62);
        restAdapter39.logLevel = logLevel62;
        restAdapter34.setLogLevel(logLevel62);
        restAdapter32.logLevel = logLevel62;
        retrofit.client.Response response68 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response70 = restAdapter32.logAndReplaceResponse("", response68, 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNull(logLevel25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(logLevel35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.client.Client.Provider provider3 = restAdapter0.clientProvider;
        retrofit.Profiler profiler4 = restAdapter0.profiler;
        retrofit.RestAdapter.Log log5 = restAdapter0.log;
        retrofit.Server server6 = restAdapter0.server;
        retrofit.Profiler profiler7 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = builder8.callbackExecutor;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.Server server23 = builder15.server;
        builder8.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter27.getLogLevel();
        java.util.concurrent.Executor executor31 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer("hi!");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.client.Client.Provider provider43 = null;
        builder35.clientProvider = provider43;
        retrofit.RequestInterceptor requestInterceptor45 = builder35.requestInterceptor;
        retrofit.RestAdapter restAdapter46 = builder35.build();
        retrofit.ErrorHandler errorHandler47 = builder35.errorHandler;
        retrofit.converter.Converter converter48 = builder35.converter;
        restAdapter27.converter = converter48;
        builder25.converter = converter48;
        retrofit.RestAdapter.Builder builder51 = builder8.setConverter(converter48);
        retrofit.Profiler profiler52 = builder8.profiler;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer("hi!");
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler59 = restAdapter57.new RestHandler();
        retrofit.RestAdapter.Log log60 = restAdapter57.log;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter57.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder56.setLogLevel(logLevel61);
        retrofit.client.Client.Provider provider64 = null;
        builder56.clientProvider = provider64;
        retrofit.RequestInterceptor requestInterceptor66 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        builder67.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder70 = builder67.setServer("hi!");
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter71.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler73 = restAdapter71.new RestHandler();
        retrofit.RestAdapter.Log log74 = restAdapter71.log;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter71.logLevel = logLevel75;
        retrofit.RestAdapter.Builder builder77 = builder70.setLogLevel(logLevel75);
        retrofit.client.Client.Provider provider78 = null;
        builder70.clientProvider = provider78;
        retrofit.RequestInterceptor requestInterceptor80 = builder70.requestInterceptor;
        retrofit.RestAdapter.Builder builder81 = builder56.setRequestInterceptor(requestInterceptor80);
        retrofit.converter.Converter converter82 = builder81.converter;
        builder8.converter = converter82;
        restAdapter0.converter = converter82;
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(restAdapter46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(converter48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(profiler52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(logLevel72);
        org.junit.Assert.assertNull(log74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(converter82);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) ' ', "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        java.util.concurrent.Executor executor3 = restAdapter0.httpExecutor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter13.logLevel = logLevel15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel15);
        restAdapter0.log = log12;
        java.util.concurrent.Executor executor19 = restAdapter0.httpExecutor;
        retrofit.Profiler profiler20 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler23 = builder21.errorHandler;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel35);
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter37.new RestHandler();
        retrofit.converter.Converter converter39 = restAdapter37.converter;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.converter.Converter converter46 = restAdapter40.converter;
        java.util.concurrent.Executor executor47 = restAdapter40.callbackExecutor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder51 = builder48.setServer("hi!");
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.Log log55 = restAdapter52.log;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter52.logLevel = logLevel56;
        retrofit.RestAdapter.Builder builder58 = builder51.setLogLevel(logLevel56);
        retrofit.client.Client.Provider provider59 = null;
        builder51.clientProvider = provider59;
        retrofit.RequestInterceptor requestInterceptor61 = builder51.requestInterceptor;
        retrofit.RestAdapter restAdapter62 = builder51.build();
        retrofit.ErrorHandler errorHandler63 = builder51.errorHandler;
        retrofit.converter.Converter converter64 = builder51.converter;
        restAdapter40.converter = converter64;
        restAdapter37.converter = converter64;
        retrofit.RestAdapter.Builder builder67 = builder21.setConverter(converter64);
        restAdapter0.converter = converter64;
        retrofit.ErrorHandler errorHandler69 = restAdapter0.errorHandler;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.converter.Converter converter76 = restAdapter70.converter;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        builder77.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder80 = builder77.setServer("hi!");
        retrofit.RestAdapter restAdapter81 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter81.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler83 = restAdapter81.new RestHandler();
        retrofit.RestAdapter.Log log84 = restAdapter81.log;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter81.logLevel = logLevel85;
        retrofit.RestAdapter.Builder builder87 = builder80.setLogLevel(logLevel85);
        retrofit.client.Client.Provider provider88 = null;
        builder80.clientProvider = provider88;
        retrofit.ErrorHandler errorHandler90 = builder80.errorHandler;
        retrofit.Server server91 = builder80.server;
        restAdapter70.server = server91;
        retrofit.Server server93 = restAdapter70.server;
        java.util.concurrent.Executor executor94 = restAdapter70.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel95 = restAdapter70.logLevel;
        restAdapter0.logLevel = logLevel95;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(log12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(restAdapter62);
        org.junit.Assert.assertNotNull(errorHandler63);
        org.junit.Assert.assertNotNull(converter64);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNull(errorHandler69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNull(logLevel82);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNotNull(server91);
        org.junit.Assert.assertNotNull(server93);
        org.junit.Assert.assertNull(executor94);
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        builder0.clientProvider = provider1;
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Log log5 = builder4.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = builder6.setServer("hi!");
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler12 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter10.logLevel = logLevel14;
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        builder16.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor18 = builder16.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean20 = logLevel19.log();
        boolean boolean21 = logLevel19.log();
        builder16.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider24 = null;
        builder23.clientProvider = provider24;
        retrofit.RestAdapter.Builder builder27 = builder23.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.RequestInterceptor requestInterceptor41 = builder31.requestInterceptor;
        retrofit.RestAdapter restAdapter42 = builder31.build();
        retrofit.ErrorHandler errorHandler43 = builder31.errorHandler;
        retrofit.RestAdapter.Builder builder44 = builder23.setErrorHandler(errorHandler43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = builder45.setServer("hi!");
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel50 = restAdapter49.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler51 = restAdapter49.new RestHandler();
        retrofit.RestAdapter.Log log52 = restAdapter49.log;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter49.logLevel = logLevel53;
        retrofit.RestAdapter.Builder builder55 = builder48.setLogLevel(logLevel53);
        retrofit.client.Client.Provider provider56 = null;
        builder48.clientProvider = provider56;
        retrofit.RequestInterceptor requestInterceptor58 = builder48.requestInterceptor;
        retrofit.RestAdapter restAdapter59 = builder48.build();
        retrofit.ErrorHandler errorHandler60 = builder48.errorHandler;
        retrofit.converter.Converter converter61 = builder48.converter;
        builder44.converter = converter61;
        retrofit.RequestInterceptor requestInterceptor63 = builder44.requestInterceptor;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = builder64.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder69 = builder64.setLogLevel(logLevel68);
        retrofit.Server server70 = null;
        builder64.server = server70;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder75 = builder72.setServer("hi!");
        retrofit.RestAdapter restAdapter76 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter76.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler78 = restAdapter76.new RestHandler();
        retrofit.RestAdapter.Log log79 = restAdapter76.log;
        retrofit.RestAdapter.LogLevel logLevel80 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter76.logLevel = logLevel80;
        retrofit.RestAdapter.Builder builder82 = builder75.setLogLevel(logLevel80);
        retrofit.client.Client.Provider provider83 = null;
        builder75.clientProvider = provider83;
        retrofit.RequestInterceptor requestInterceptor85 = builder75.requestInterceptor;
        retrofit.RestAdapter restAdapter86 = builder75.build();
        retrofit.ErrorHandler errorHandler87 = builder75.errorHandler;
        retrofit.converter.Converter converter88 = builder75.converter;
        retrofit.RestAdapter.Builder builder89 = builder64.setConverter(converter88);
        retrofit.Profiler profiler90 = null;
        builder89.profiler = profiler90;
        retrofit.RequestInterceptor requestInterceptor92 = builder89.requestInterceptor;
        builder44.requestInterceptor = requestInterceptor92;
        builder16.requestInterceptor = requestInterceptor92;
        retrofit.RequestInterceptor requestInterceptor95 = builder16.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel96 = builder16.logLevel;
        retrofit.RestAdapter.Builder builder97 = builder4.setLogLevel(logLevel96);
        retrofit.RequestInterceptor requestInterceptor98 = builder4.requestInterceptor;
        java.util.concurrent.Executor executor99 = builder4.callbackExecutor;
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(logLevel11);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(logLevel50);
        org.junit.Assert.assertNull(log52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(restAdapter59);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNotNull(converter61);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(logLevel77);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertTrue("'" + logLevel80 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel80.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(restAdapter86);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(converter88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(requestInterceptor95);
        org.junit.Assert.assertTrue("'" + logLevel96 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel96.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(requestInterceptor98);
        org.junit.Assert.assertNull(executor99);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor5 = builder3.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor6 = builder3.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = builder0.setRequestInterceptor(requestInterceptor6);
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.client.Client.Provider provider20 = null;
        builder12.clientProvider = provider20;
        retrofit.ErrorHandler errorHandler22 = builder12.errorHandler;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        retrofit.RestAdapter.Builder builder35 = builder12.setServer(server34);
        retrofit.converter.Converter converter36 = builder35.converter;
        java.util.concurrent.Executor executor37 = builder35.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer("hi!");
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler44 = restAdapter42.new RestHandler();
        retrofit.RestAdapter.Log log45 = restAdapter42.log;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter42.logLevel = logLevel46;
        retrofit.RestAdapter.Builder builder48 = builder41.setLogLevel(logLevel46);
        java.util.concurrent.Executor executor49 = builder41.callbackExecutor;
        retrofit.Profiler profiler50 = null;
        builder41.profiler = profiler50;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler54 = restAdapter52.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        java.util.concurrent.Executor executor67 = builder59.callbackExecutor;
        restAdapter52.callbackExecutor = executor67;
        builder41.callbackExecutor = executor67;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel73 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        java.util.concurrent.Executor executor85 = builder77.callbackExecutor;
        restAdapter70.callbackExecutor = executor85;
        builder41.httpExecutor = executor85;
        retrofit.Server server88 = builder41.server;
        retrofit.RestAdapter restAdapter89 = builder41.build();
        retrofit.ErrorHandler errorHandler90 = builder41.errorHandler;
        builder35.errorHandler = errorHandler90;
        retrofit.client.Client.Provider provider92 = builder35.clientProvider;
        retrofit.RequestInterceptor requestInterceptor93 = builder35.requestInterceptor;
        builder7.requestInterceptor = requestInterceptor93;
        java.util.concurrent.Executor executor95 = builder7.httpExecutor;
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(logLevel43);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(logLevel73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(restAdapter89);
        org.junit.Assert.assertNotNull(errorHandler90);
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNotNull(requestInterceptor93);
        org.junit.Assert.assertNotNull(executor95);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        java.util.concurrent.Executor executor12 = builder3.httpExecutor;
        retrofit.Profiler profiler13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder3.setProfiler(profiler13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor12);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Log log27 = builder26.log;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter();
        retrofit.Server server29 = restAdapter28.server;
        retrofit.RequestInterceptor requestInterceptor30 = restAdapter28.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder34 = builder31.setServer("hi!");
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter35.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = builder34.setLogLevel(logLevel39);
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        restAdapter28.clientProvider = provider44;
        retrofit.RestAdapter.Builder builder46 = builder26.setClient(provider44);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider48 = null;
        builder47.clientProvider = provider48;
        retrofit.RestAdapter.Builder builder51 = builder47.setServer("Retrofit-Idle");
        retrofit.RestAdapter.LogLevel logLevel52 = builder51.logLevel;
        builder46.logLevel = logLevel52;
        retrofit.RestAdapter.LogLevel logLevel54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder55 = builder46.setLogLevel(logLevel54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(logLevel36);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(provider44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.Profiler profiler2 = restAdapter0.profiler;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider4 = null;
        builder3.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder7 = builder3.setServer("Retrofit-Idle");
        retrofit.Server server8 = builder3.server;
        restAdapter0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer("hi!");
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.Log log17 = restAdapter14.log;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter14.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.client.Client.Provider provider21 = null;
        builder13.clientProvider = provider21;
        retrofit.ErrorHandler errorHandler23 = builder13.errorHandler;
        retrofit.Server server24 = builder13.server;
        restAdapter0.server = server24;
        retrofit.ErrorHandler errorHandler26 = restAdapter0.errorHandler;
        retrofit.ErrorHandler errorHandler27 = restAdapter0.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        boolean boolean30 = logLevel29.log();
        // The following exception was thrown during execution in test generation
        try {
            restAdapter0.setLogLevel(logLevel29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.client.Client.Provider provider52 = builder50.clientProvider;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.Profiler profiler55 = restAdapter54.profiler;
        retrofit.RestAdapter.RestHandler restHandler56 = restAdapter54.new RestHandler();
        retrofit.converter.Converter converter57 = restAdapter54.converter;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter54.logLevel = logLevel58;
        retrofit.Profiler profiler60 = restAdapter54.profiler;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        builder61.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = builder61.setServer("hi!");
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler67 = restAdapter65.new RestHandler();
        retrofit.RestAdapter.Log log68 = restAdapter65.log;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter65.logLevel = logLevel69;
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        builder71.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor73 = builder71.requestInterceptor;
        retrofit.client.Client.Provider provider74 = builder71.clientProvider;
        restAdapter54.clientProvider = provider74;
        retrofit.RestAdapter.Builder builder76 = builder50.setClient(provider74);
        retrofit.RestAdapter restAdapter77 = builder76.build();
        retrofit.Profiler profiler78 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder79 = builder76.setProfiler(profiler78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(logLevel66);
        org.junit.Assert.assertNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(provider74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(restAdapter77);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = null;
        builder7.clientProvider = provider15;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter17.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter17.new RestHandler();
        retrofit.RestAdapter.Log log20 = restAdapter17.log;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter17.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter32.logLevel = logLevel34;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel34);
        restAdapter17.log = log31;
        retrofit.RestAdapter.Builder builder38 = builder7.setLog(log31);
        log31.log("hi!");
        retrofit.RestAdapter.Builder builder41 = builder3.setLog(log31);
        retrofit.RestAdapter.LogLevel logLevel42 = builder3.logLevel;
        retrofit.client.Client client43 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder44 = builder3.setClient(client43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel18);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.converter.Converter converter2 = null;
        restAdapter0.converter = converter2;
        retrofit.client.Response response5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response7 = restAdapter0.logAndReplaceResponse("Retrofit-Idle", response5, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        java.util.concurrent.Executor executor11 = builder3.callbackExecutor;
        retrofit.Profiler profiler12 = null;
        builder3.profiler = profiler12;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter14.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter14.getLogLevel();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter22.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter22.new RestHandler();
        retrofit.RestAdapter.Log log25 = restAdapter22.log;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter22.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = builder21.setLogLevel(logLevel26);
        java.util.concurrent.Executor executor29 = builder21.callbackExecutor;
        restAdapter14.callbackExecutor = executor29;
        builder3.callbackExecutor = executor29;
        java.util.concurrent.Executor executor32 = builder3.callbackExecutor;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("hi!");
        retrofit.RestAdapter restAdapter37 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter37.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler39 = restAdapter37.new RestHandler();
        retrofit.RestAdapter.Log log40 = restAdapter37.log;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter37.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = builder36.setLogLevel(logLevel41);
        java.util.concurrent.Executor executor44 = builder36.callbackExecutor;
        retrofit.Profiler profiler45 = null;
        builder36.profiler = profiler45;
        retrofit.client.Client.Provider provider47 = builder36.clientProvider;
        retrofit.RestAdapter.Builder builder48 = builder3.setClient(provider47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler55 = restAdapter53.new RestHandler();
        retrofit.RestAdapter.Log log56 = restAdapter53.log;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter53.logLevel = logLevel57;
        retrofit.RestAdapter.Builder builder59 = builder52.setLogLevel(logLevel57);
        builder59.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor61 = builder59.requestInterceptor;
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        builder48.clientProvider = provider62;
        retrofit.Server server64 = builder48.server;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(logLevel15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(logLevel23);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(logLevel38);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(provider47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(logLevel54);
        org.junit.Assert.assertNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(provider62);
        org.junit.Assert.assertNotNull(server64);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.Profiler profiler13 = builder10.profiler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.callbackExecutor;
        retrofit.Profiler profiler16 = null;
        builder14.profiler = profiler16;
        retrofit.RestAdapter.Log log18 = builder14.log;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        java.util.concurrent.Executor executor30 = builder22.callbackExecutor;
        builder14.httpExecutor = executor30;
        builder14.ensureSaneDefaults();
        retrofit.client.Client.Provider provider33 = builder14.clientProvider;
        retrofit.RestAdapter.Builder builder35 = builder14.setServer("Retrofit-Idle");
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter36.logLevel = logLevel40;
        retrofit.converter.Converter converter42 = restAdapter36.converter;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder46 = builder43.setServer("hi!");
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter47.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler49 = restAdapter47.new RestHandler();
        retrofit.RestAdapter.Log log50 = restAdapter47.log;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter47.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider54 = null;
        builder46.clientProvider = provider54;
        retrofit.ErrorHandler errorHandler56 = builder46.errorHandler;
        retrofit.Server server57 = builder46.server;
        restAdapter36.server = server57;
        retrofit.RestAdapter.Builder builder59 = builder14.setServer(server57);
        builder10.server = server57;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder10.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(provider33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(logLevel48);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.Server server11 = builder3.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer("hi!");
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter16.new RestHandler();
        retrofit.RestAdapter.Log log19 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter16.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        builder3.clientProvider = provider23;
        builder3.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = builder3.log;
        retrofit.Profiler profiler27 = builder3.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer("hi!");
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter32.new RestHandler();
        retrofit.RestAdapter.Log log35 = restAdapter32.log;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter32.logLevel = logLevel36;
        retrofit.RestAdapter.Builder builder38 = builder31.setLogLevel(logLevel36);
        retrofit.client.Client.Provider provider39 = null;
        builder31.clientProvider = provider39;
        retrofit.ErrorHandler errorHandler41 = builder31.errorHandler;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter51.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel53);
        builder31.logLevel = logLevel53;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.Log log59 = restAdapter57.log;
        java.util.concurrent.Executor executor60 = restAdapter57.httpExecutor;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel72 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter70.logLevel = logLevel72;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel72);
        restAdapter57.log = log69;
        retrofit.RestAdapter.Builder builder76 = builder31.setLog(log69);
        retrofit.Server server77 = builder76.server;
        retrofit.RestAdapter.Builder builder78 = builder3.setServer(server77);
        retrofit.Profiler profiler79 = null;
        builder78.profiler = profiler79;
        retrofit.Profiler profiler81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder82 = builder78.setProfiler(profiler81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(provider23);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(logLevel33);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.RestAdapter.Log log3 = restAdapter0.log;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter0.logLevel = logLevel4;
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter0.new RestHandler();
        retrofit.RestAdapter restAdapter7 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.getLogLevel();
        retrofit.RestAdapter.Log log9 = restAdapter7.log;
        retrofit.ErrorHandler errorHandler10 = restAdapter7.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder14 = builder11.setServer("hi!");
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.RestAdapter.Builder builder21 = builder14.setLogLevel(logLevel19);
        retrofit.client.Client.Provider provider22 = null;
        builder14.clientProvider = provider22;
        retrofit.RequestInterceptor requestInterceptor24 = builder14.requestInterceptor;
        restAdapter7.requestInterceptor = requestInterceptor24;
        restAdapter0.requestInterceptor = requestInterceptor24;
        java.util.concurrent.Executor executor27 = restAdapter0.callbackExecutor;
        retrofit.client.Client.Provider provider28 = restAdapter0.clientProvider;
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(logLevel8);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(provider28);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.Server server36 = builder0.server;
        java.lang.Class<?> wildcardClass37 = builder0.getClass();
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter1 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel2 = restAdapter1.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler3 = restAdapter1.new RestHandler();
        retrofit.RestAdapter.Log log4 = restAdapter1.log;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter1.logLevel = logLevel5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter16.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter16.logLevel = logLevel18;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel18);
        restAdapter1.log = log15;
        builder0.log = log15;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer("hi!");
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter27.new RestHandler();
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter27.logLevel = logLevel31;
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.Server server34 = builder26.server;
        builder0.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = builder36.setServer("hi!");
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter40.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter40.new RestHandler();
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter40.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder39.setLogLevel(logLevel44);
        retrofit.client.Client.Provider provider47 = null;
        builder39.clientProvider = provider47;
        retrofit.RequestInterceptor requestInterceptor49 = builder39.requestInterceptor;
        retrofit.RestAdapter.Builder builder50 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.RequestInterceptor requestInterceptor51 = builder50.requestInterceptor;
        retrofit.client.Client.Provider provider52 = builder50.clientProvider;
        retrofit.Profiler profiler53 = builder50.profiler;
        retrofit.Server server54 = builder50.server;
        org.junit.Assert.assertNull(logLevel2);
        org.junit.Assert.assertNull(log4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(logLevel17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(logLevel28);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(logLevel41);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNull(profiler53);
        org.junit.Assert.assertNotNull(server54);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter31.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter31.new RestHandler();
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter31.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.client.Client.Provider provider38 = null;
        builder30.clientProvider = provider38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder43 = builder40.setServer("hi!");
        retrofit.RestAdapter restAdapter44 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter44.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter44.new RestHandler();
        retrofit.RestAdapter.Log log47 = restAdapter44.log;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter44.logLevel = logLevel48;
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        retrofit.client.Client.Provider provider51 = null;
        builder43.clientProvider = provider51;
        retrofit.ErrorHandler errorHandler53 = builder43.errorHandler;
        retrofit.RestAdapter.Builder builder54 = builder30.setErrorHandler(errorHandler53);
        java.util.concurrent.Executor executor55 = builder54.httpExecutor;
        builder26.httpExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter57.logLevel = logLevel59;
        retrofit.ErrorHandler errorHandler61 = null;
        restAdapter57.errorHandler = errorHandler61;
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter57.logLevel;
        retrofit.converter.Converter converter64 = null;
        restAdapter57.converter = converter64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder69 = builder66.setServer("hi!");
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter70.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler72 = restAdapter70.new RestHandler();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter70.logLevel = logLevel74;
        retrofit.RestAdapter.Builder builder76 = builder69.setLogLevel(logLevel74);
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("hi!");
        retrofit.client.Client.Provider provider79 = builder78.clientProvider;
        restAdapter57.clientProvider = provider79;
        retrofit.RestAdapter.Builder builder81 = builder26.setClient(provider79);
        retrofit.RequestInterceptor requestInterceptor82 = builder81.requestInterceptor;
        retrofit.ErrorHandler errorHandler83 = builder81.errorHandler;
        retrofit.RestAdapter.Log log84 = null;
        builder81.log = log84;
        retrofit.RestAdapter.Builder builder87 = builder81.setServer("Retrofit-Idle");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(logLevel32);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(logLevel45);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(logLevel58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(logLevel71);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.Log log2 = restAdapter0.log;
        retrofit.ErrorHandler errorHandler3 = restAdapter0.errorHandler;
        retrofit.RequestInterceptor requestInterceptor4 = restAdapter0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel10 = restAdapter9.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler11 = restAdapter9.new RestHandler();
        retrofit.RestAdapter.Log log12 = restAdapter9.log;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter9.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder15 = builder8.setLogLevel(logLevel13);
        retrofit.client.Client.Provider provider16 = null;
        builder8.clientProvider = provider16;
        retrofit.ErrorHandler errorHandler18 = builder8.errorHandler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder22 = builder19.setServer("hi!");
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter23.new RestHandler();
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter23.logLevel = logLevel27;
        retrofit.RestAdapter.Builder builder29 = builder22.setLogLevel(logLevel27);
        retrofit.Server server30 = builder22.server;
        retrofit.RestAdapter.Builder builder31 = builder8.setServer(server30);
        java.util.concurrent.Executor executor32 = builder31.httpExecutor;
        restAdapter0.httpExecutor = executor32;
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter0.new RestHandler();
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertNull(log2);
        org.junit.Assert.assertNull(errorHandler3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(logLevel10);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(logLevel24);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(executor32);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = builder10.clientProvider;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter21.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler23 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter21.logLevel = logLevel25;
        retrofit.Server server27 = null;
        retrofit.client.Client.Provider provider28 = null;
        java.util.concurrent.Executor executor29 = null;
        java.util.concurrent.Executor executor30 = null;
        retrofit.RequestInterceptor requestInterceptor31 = null;
        retrofit.converter.Converter converter32 = null;
        retrofit.Profiler profiler33 = null;
        retrofit.ErrorHandler errorHandler34 = null;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter36.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter36.logLevel = logLevel38;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server27, provider28, executor29, executor30, requestInterceptor31, converter32, profiler33, errorHandler34, log35, logLevel38);
        restAdapter21.log = log35;
        builder20.log = log35;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter52.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter52.logLevel = logLevel54;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel54);
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log35, logLevel54);
        retrofit.RestAdapter.Builder builder58 = builder10.setLog(log35);
        java.util.concurrent.Executor executor59 = builder10.httpExecutor;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder63 = builder60.setServer("hi!");
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler66 = restAdapter64.new RestHandler();
        retrofit.RestAdapter.Log log67 = restAdapter64.log;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter64.logLevel = logLevel68;
        retrofit.RestAdapter.Builder builder70 = builder63.setLogLevel(logLevel68);
        retrofit.client.Client.Provider provider71 = null;
        builder63.clientProvider = provider71;
        retrofit.ErrorHandler errorHandler73 = builder63.errorHandler;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder77 = builder74.setServer("hi!");
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler80 = restAdapter78.new RestHandler();
        retrofit.RestAdapter.Log log81 = restAdapter78.log;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter78.logLevel = logLevel82;
        retrofit.RestAdapter.Builder builder84 = builder77.setLogLevel(logLevel82);
        retrofit.Server server85 = builder77.server;
        retrofit.RestAdapter.Builder builder86 = builder63.setServer(server85);
        java.util.concurrent.Executor executor87 = builder86.httpExecutor;
        retrofit.converter.Converter converter88 = builder86.converter;
        builder10.converter = converter88;
        retrofit.client.Client client90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder10.setClient(client90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(provider11);
        org.junit.Assert.assertNull(logLevel22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(logLevel37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNull(logLevel65);
        org.junit.Assert.assertNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(logLevel79);
        org.junit.Assert.assertNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(server85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executor87);
        org.junit.Assert.assertNotNull(converter88);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter3 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel4 = restAdapter3.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler5 = restAdapter3.new RestHandler();
        retrofit.RestAdapter.Log log6 = restAdapter3.log;
        retrofit.RestAdapter.LogLevel logLevel7 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter3.logLevel = logLevel7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter18.logLevel = logLevel20;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel20);
        restAdapter3.log = log17;
        builder2.log = log17;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer("hi!");
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel33;
        retrofit.RestAdapter.Builder builder35 = builder28.setLogLevel(logLevel33);
        retrofit.Server server36 = builder28.server;
        builder2.server = server36;
        retrofit.RestAdapter.LogLevel logLevel38 = builder2.logLevel;
        builder0.logLevel = logLevel38;
        retrofit.client.Client client40 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder0.setClient(client40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel4);
        org.junit.Assert.assertNull(log6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(logLevel30);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter15.new RestHandler();
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter15.logLevel = logLevel19;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter30.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter30.logLevel = logLevel32;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel32);
        restAdapter15.log = log29;
        builder14.log = log29;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter46.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.logLevel = logLevel48;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel48);
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log29, logLevel48);
        retrofit.RestAdapter.Builder builder52 = builder0.setLog(log29);
        retrofit.ErrorHandler errorHandler53 = builder0.errorHandler;
        retrofit.RestAdapter restAdapter54 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter54.logLevel;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = builder56.setServer("hi!");
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter60.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.RestAdapter.Log log63 = restAdapter60.log;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter60.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        retrofit.client.Client.Provider provider67 = null;
        builder59.clientProvider = provider67;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer("hi!");
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter73.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler75 = restAdapter73.new RestHandler();
        retrofit.RestAdapter.Log log76 = restAdapter73.log;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter73.logLevel = logLevel77;
        retrofit.RestAdapter.Builder builder79 = builder72.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider80 = null;
        builder72.clientProvider = provider80;
        retrofit.ErrorHandler errorHandler82 = builder72.errorHandler;
        retrofit.RestAdapter.Builder builder83 = builder59.setErrorHandler(errorHandler82);
        restAdapter54.errorHandler = errorHandler82;
        builder0.errorHandler = errorHandler82;
        retrofit.Server server86 = builder0.server;
        java.util.concurrent.Executor executor87 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(logLevel16);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNull(logLevel31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNull(logLevel47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNull(logLevel55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(logLevel61);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(logLevel74);
        org.junit.Assert.assertNull(log76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(server86);
        org.junit.Assert.assertNotNull(executor87);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.Profiler profiler1 = restAdapter0.profiler;
        retrofit.RestAdapter.RestHandler restHandler2 = restAdapter0.new RestHandler();
        retrofit.Server server3 = restAdapter0.server;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer("hi!");
        retrofit.RestAdapter restAdapter8 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel9 = restAdapter8.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler10 = restAdapter8.new RestHandler();
        retrofit.RestAdapter.Log log11 = restAdapter8.log;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter8.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = builder7.setLogLevel(logLevel12);
        retrofit.client.Client.Provider provider15 = builder14.clientProvider;
        retrofit.ErrorHandler errorHandler16 = builder14.errorHandler;
        retrofit.ErrorHandler errorHandler17 = builder14.errorHandler;
        restAdapter0.errorHandler = errorHandler17;
        retrofit.client.Request request19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter0.logAndReplaceRequest(request19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(profiler1);
        org.junit.Assert.assertNull(server3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(logLevel9);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(provider15);
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertNotNull(errorHandler17);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.ErrorHandler errorHandler13 = builder3.errorHandler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter18 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter18.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter18.new RestHandler();
        retrofit.RestAdapter.Log log21 = restAdapter18.log;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter18.logLevel = logLevel22;
        retrofit.RestAdapter.Builder builder24 = builder17.setLogLevel(logLevel22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = builder3.setServer(server25);
        retrofit.converter.Converter converter27 = builder26.converter;
        java.util.concurrent.Executor executor28 = builder26.callbackExecutor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer("hi!");
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel34 = restAdapter33.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter33.new RestHandler();
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter33.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder39 = builder32.setLogLevel(logLevel37);
        java.util.concurrent.Executor executor40 = builder32.callbackExecutor;
        retrofit.Profiler profiler41 = null;
        builder32.profiler = profiler41;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler45 = restAdapter43.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter43.getLogLevel();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder50 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter51.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler53 = restAdapter51.new RestHandler();
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter51.logLevel = logLevel55;
        retrofit.RestAdapter.Builder builder57 = builder50.setLogLevel(logLevel55);
        java.util.concurrent.Executor executor58 = builder50.callbackExecutor;
        restAdapter43.callbackExecutor = executor58;
        builder32.callbackExecutor = executor58;
        retrofit.RestAdapter restAdapter61 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel62 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler63 = restAdapter61.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter61.getLogLevel();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder68 = builder65.setServer("hi!");
        retrofit.RestAdapter restAdapter69 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter69.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler71 = restAdapter69.new RestHandler();
        retrofit.RestAdapter.Log log72 = restAdapter69.log;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter69.logLevel = logLevel73;
        retrofit.RestAdapter.Builder builder75 = builder68.setLogLevel(logLevel73);
        java.util.concurrent.Executor executor76 = builder68.callbackExecutor;
        restAdapter61.callbackExecutor = executor76;
        builder32.httpExecutor = executor76;
        retrofit.Server server79 = builder32.server;
        retrofit.RestAdapter restAdapter80 = builder32.build();
        retrofit.ErrorHandler errorHandler81 = builder32.errorHandler;
        builder26.errorHandler = errorHandler81;
        retrofit.client.Client.Provider provider83 = builder26.clientProvider;
        retrofit.RequestInterceptor requestInterceptor84 = builder26.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel85 = builder26.logLevel;
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(logLevel19);
        org.junit.Assert.assertNull(log21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(converter27);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(logLevel34);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNull(logLevel44);
        org.junit.Assert.assertNull(logLevel46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(logLevel52);
        org.junit.Assert.assertNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNull(logLevel62);
        org.junit.Assert.assertNull(logLevel64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(server79);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNull(provider83);
        org.junit.Assert.assertNotNull(requestInterceptor84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        retrofit.RestAdapter restAdapter0 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel1 = restAdapter0.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel2 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter0.logLevel = logLevel2;
        retrofit.ErrorHandler errorHandler4 = null;
        restAdapter0.errorHandler = errorHandler4;
        retrofit.RestAdapter restAdapter6 = new retrofit.RestAdapter();
        retrofit.Server server7 = restAdapter6.server;
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter6.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer("hi!");
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter13.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter13.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter13.log;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter13.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder12.setLogLevel(logLevel17);
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        retrofit.client.Client.Provider provider22 = builder21.clientProvider;
        restAdapter6.clientProvider = provider22;
        restAdapter0.clientProvider = provider22;
        retrofit.RestAdapter.Log log25 = restAdapter0.log;
        java.util.concurrent.Executor executor26 = restAdapter0.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter0.new RestHandler();
        java.util.concurrent.Executor executor28 = restAdapter0.httpExecutor;
        retrofit.client.Response response30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response32 = restAdapter0.logAndReplaceResponse("hi!", response30, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(logLevel1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(logLevel14);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(provider22);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor28);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter4 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel5 = restAdapter4.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler6 = restAdapter4.new RestHandler();
        retrofit.RestAdapter.Log log7 = restAdapter4.log;
        retrofit.RestAdapter.LogLevel logLevel8 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter4.logLevel = logLevel8;
        retrofit.RestAdapter.Builder builder10 = builder3.setLogLevel(logLevel8);
        retrofit.client.Client.Provider provider11 = null;
        builder3.clientProvider = provider11;
        retrofit.RestAdapter.LogLevel logLevel13 = builder3.logLevel;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("hi!");
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder23 = builder18.setLogLevel(logLevel22);
        retrofit.converter.Converter converter24 = null;
        builder18.converter = converter24;
        java.util.concurrent.Executor executor26 = builder18.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer("hi!");
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder32 = builder27.setLogLevel(logLevel31);
        retrofit.converter.Converter converter33 = null;
        builder27.converter = converter33;
        java.util.concurrent.Executor executor35 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = builder17.setExecutors(executor26, executor35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder40 = builder37.setServer("hi!");
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler43 = restAdapter41.new RestHandler();
        retrofit.RestAdapter.Log log44 = restAdapter41.log;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter41.logLevel = logLevel45;
        retrofit.RestAdapter.Builder builder47 = builder40.setLogLevel(logLevel45);
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler52 = restAdapter50.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter50.getLogLevel();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer("hi!");
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler60 = restAdapter58.new RestHandler();
        retrofit.RestAdapter.Log log61 = restAdapter58.log;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter58.logLevel = logLevel62;
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        java.util.concurrent.Executor executor65 = builder57.callbackExecutor;
        restAdapter50.callbackExecutor = executor65;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler69 = restAdapter67.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter67.getLogLevel();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder74 = builder71.setServer("hi!");
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter75.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler77 = restAdapter75.new RestHandler();
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter75.logLevel = logLevel79;
        retrofit.RestAdapter.Builder builder81 = builder74.setLogLevel(logLevel79);
        java.util.concurrent.Executor executor82 = builder74.callbackExecutor;
        restAdapter67.callbackExecutor = executor82;
        retrofit.RestAdapter.Builder builder84 = builder49.setExecutors(executor65, executor82);
        java.util.concurrent.Executor executor85 = builder84.callbackExecutor;
        retrofit.RestAdapter.Builder builder86 = builder3.setExecutors(executor26, executor85);
        builder3.ensureSaneDefaults();
        java.util.concurrent.Executor executor88 = builder3.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel89 = builder3.logLevel;
        boolean boolean90 = logLevel89.log();
        boolean boolean91 = logLevel89.log();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(logLevel5);
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(logLevel42);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(logLevel51);
        org.junit.Assert.assertNull(logLevel53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(logLevel59);
        org.junit.Assert.assertNull(log61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNull(logLevel68);
        org.junit.Assert.assertNull(logLevel70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(logLevel76);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(executor85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }
}

