import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        retrofit.RestAdapter.LogLevel logLevel0 = retrofit.RestAdapter.LogLevel.HEADERS;
        java.lang.Class<?> wildcardClass1 = logLevel0.getClass();
        org.junit.Assert.assertTrue("'" + logLevel0 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel0.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.String str0 = retrofit.RestAdapter.IDLE_THREAD_NAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Retrofit-Idle" + "'", str0, "Retrofit-Idle");
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.lang.String str0 = retrofit.RestAdapter.THREAD_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Retrofit-" + "'", str0, "Retrofit-");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.Profiler profiler2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setProfiler(profiler2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.RequestInterceptor requestInterceptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setRequestInterceptor(requestInterceptor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.client.Client.Provider provider4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setClient(provider4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client client2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setClient(client2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Log log2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setLog(log2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setProfiler(profiler2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        java.util.concurrent.Executor executor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setExecutors(executor1, executor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Profiler profiler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setProfiler(profiler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.lang.Class<?> wildcardClass4 = builder0.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.converter.Converter converter4 = null;
        builder0.converter = converter4;
        retrofit.converter.Converter converter6 = null;
        builder0.converter = converter6;
        org.junit.Assert.assertNull(requestInterceptor3);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.RestAdapter.Log log2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setLog(log2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setServer(server6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Server server7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setServer(server7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client.Provider provider1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setClient(provider1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setConverter(converter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Converter may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Profiler profiler4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setProfiler(profiler4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor3 = null;
        builder0.sethttpExecutor(executor3);
        retrofit.Profiler profiler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setProfiler(profiler5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        retrofit.RestAdapter restAdapter0 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.RestHandler restHandler1 = restAdapter0.new RestHandler();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to retrofit.RestAdapter$RestHandler with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.Profiler profiler8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setProfiler(profiler8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor3 = null;
        builder0.sethttpExecutor(executor3);
        retrofit.Server server5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setServer(server5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor6);
        retrofit.client.Client client8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setClient(client8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor6);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString2 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(typedString2);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString2 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(typedString2);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter5.deserializeObjectErrorHandler1();
        retrofit.client.Response response7 = serializedObjectSupporter5.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput8 = response7.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response9 = new retrofit.client.Response((int) ' ', "Retrofit-", (java.util.List<retrofit.client.Header>) headerList3, typedInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(errorHandler6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(typedInput8);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel3 = builder0.logLevel;
        retrofit.client.Client client4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setClient(client4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertTrue("'" + logLevel3 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel3.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString10();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Forbidden" + "'", str2, "Forbidden");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.Profiler profiler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setProfiler(profiler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter4);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections6 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.RestAdapter.Log log36 = restAdapter29.log;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(log36);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.Server server33 = builder32.server;
        retrofit.ErrorHandler errorHandler34 = null;
        builder32.errorHandler = errorHandler34;
        java.util.concurrent.Executor executor36 = null;
        builder32.sethttpExecutor(executor36);
        java.util.concurrent.Executor executor38 = builder32.httpExecutor;
        java.lang.reflect.Method method39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = builder40.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel43 = builder40.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter44.deserializeObjectConverter6();
        builder40.converter = gsonConverter46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.RequestInterceptor requestInterceptor51 = builder48.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder53 = builder48.setLogLevel(logLevel52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        java.util.concurrent.Executor executor56 = builder54.callbackExecutor;
        builder53.callbackExecutor = executor56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = null;
        builder58.errorHandler = errorHandler59;
        retrofit.Server server61 = null;
        builder58.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        java.util.concurrent.Executor executor67 = builder63.getcallbackExecutor();
        builder58.setcallbackExecutor(executor67);
        java.lang.Object[] objArray69 = new java.lang.Object[] { builder40, builder53, builder58 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = restHandler31.invoke((java.lang.Object) builder32, method39, objArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNull(requestInterceptor51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(objArray69);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.client.Client.Provider provider9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(provider9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.Profiler profiler11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setProfiler(profiler11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        builder0.requestInterceptor = requestInterceptor4;
        retrofit.client.Client client6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setClient(client6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections2 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setProfiler(profiler3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.client.Request request31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request32 = restAdapter29.logAndReplaceRequest(request31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(server4);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.lang.String str5 = response4.getReason();
        java.util.List<retrofit.client.Header> headerList6 = response4.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.client.Response response9 = serializedObjectSupporter7.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput10 = response9.getBody();
        retrofit.mime.TypedInput typedInput11 = response9.body;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response12 = new retrofit.client.Response(0, "Forbidden", headerList6, typedInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertNotNull(typedInput10);
        org.junit.Assert.assertNotNull(typedInput11);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider4);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.Server server4 = builder0.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server4);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString13();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.lang.String str5 = response4.getReason();
        java.util.List<retrofit.client.Header> headerList6 = response4.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.client.Response response9 = serializedObjectSupporter7.deserializeObjectResponse2();
        java.lang.String str10 = response9.getReason();
        java.util.List<retrofit.client.Header> headerList11 = response9.headers;
        retrofit.mime.TypedInput typedInput12 = response9.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response13 = new retrofit.client.Response(1, "hi!", headerList6, typedInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OK" + "'", str10, "OK");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(typedInput12);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.Class<?> wildcardClass5 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.Server server39 = restAdapter38.server;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter38.logLevel = logLevel40;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter38.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder0.setRequestInterceptor(requestInterceptor42);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder45 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter1();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString11();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter37 = serializedObjectSupporter32.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor25);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = builder37.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder37.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler42 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter6();
        builder37.converter = gsonConverter43;
        builder36.converter = gsonConverter43;
        retrofit.ErrorHandler errorHandler46 = builder36.errorHandler;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(serializedObjectSupporter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNull(errorHandler46);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.Profiler profiler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setProfiler(profiler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor8);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString8();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response33 = serializedObjectSupporter32.deserializeObjectResponse8();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        java.lang.String str38 = serializedObjectSupporter32.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections39 = serializedObjectSupporter32.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        builder0.setcallbackExecutor(executor11);
        retrofit.Profiler profiler14 = null;
        builder0.profiler = profiler14;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(executor11);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections3 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor25);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter38 = builder37.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = builder37.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel40 = builder37.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler42 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter6();
        builder37.converter = gsonConverter43;
        builder36.converter = gsonConverter43;
        retrofit.client.Client.Provider provider46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder36.setClient(provider46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(serializedObjectSupporter39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(gsonConverter43);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        java.util.concurrent.Executor executor8 = builder5.gethttpExecutor();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor11 = builder9.callbackExecutor;
        builder5.setcallbackExecutor(executor11);
        builder0.callbackExecutor = executor11;
        retrofit.converter.Converter converter14 = builder0.converter;
        retrofit.client.Client.Provider provider15 = null;
        builder0.setclientProvider(provider15);
        retrofit.converter.Converter converter17 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse3();
        int int5 = response4.getStatus();
        java.lang.String str6 = response4.getReason();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 200 + "'", int5 == 200);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        java.lang.String str32 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.ErrorHandler errorHandler37 = null;
        builder35.errorHandler = errorHandler37;
        retrofit.converter.Converter converter39 = builder35.converter;
        retrofit.client.Client.Provider provider40 = builder35.getclientProvider();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = null;
        builder41.errorHandler = errorHandler42;
        retrofit.Server server44 = null;
        builder41.server = server44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        java.util.concurrent.Executor executor50 = builder46.getcallbackExecutor();
        builder41.setcallbackExecutor(executor50);
        builder35.sethttpExecutor(executor50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        java.util.concurrent.Executor executor55 = builder53.callbackExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = builder56.serializedObjectSupporter;
        retrofit.client.Client.Provider provider59 = null;
        builder56.setclientProvider(provider59);
        retrofit.RequestInterceptor requestInterceptor61 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response67 = serializedObjectSupporter66.deserializeObjectResponse8();
        java.lang.String str68 = serializedObjectSupporter66.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter66.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder70 = builder62.setConverter((retrofit.converter.Converter) gsonConverter69);
        retrofit.Profiler profiler71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response77 = serializedObjectSupporter76.deserializeObjectResponse8();
        java.lang.String str78 = serializedObjectSupporter76.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter76.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder80 = builder72.setConverter((retrofit.converter.Converter) gsonConverter79);
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler82 = serializedObjectSupporter81.deserializeObjectErrorHandler1();
        builder80.errorHandler = errorHandler82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server33, provider34, executor50, executor55, requestInterceptor61, (retrofit.converter.Converter) gsonConverter69, profiler71, errorHandler82, log84, logLevel85);
        restAdapter29.setLogLevel(logLevel85);
        boolean boolean88 = logLevel85.log();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(serializedObjectSupporter58);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(response67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "http://example.com/" + "'", str68, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(response77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        retrofit.client.Request request54 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request55 = restAdapter53.logAndReplaceRequest(request54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = builder0.errorHandler;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(errorHandler2);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setClient(provider2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        builder0.logLevel = logLevel6;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor9);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.client.Client.Provider provider44 = restAdapter40.getclientProvider();
        retrofit.RestAdapter.Log log45 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor46);
        retrofit.client.Client.Provider provider48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder47.setClient(provider48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str34 = restAdapter29.getTHREAD_PREFIX();
        retrofit.converter.Converter converter35 = restAdapter29.getconverter();
        retrofit.RestAdapter.Log log36 = restAdapter29.log;
        log36.log("");
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertNotNull(converter35);
        org.junit.Assert.assertNotNull(log36);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.Server server6 = builder0.server;
        retrofit.converter.Converter converter7 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = null;
        builder4.errorHandler = errorHandler5;
        retrofit.Server server7 = null;
        builder4.server = server7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        java.util.concurrent.Executor executor13 = builder9.getcallbackExecutor();
        builder4.setcallbackExecutor(executor13);
        builder0.callbackExecutor = executor13;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor13);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler5);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = serializedObjectSupporter35.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.client.Client.Provider provider44 = restAdapter40.getclientProvider();
        retrofit.RestAdapter.Log log45 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        builder0.sethttpExecutor(executor57);
        retrofit.Server server60 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder0.setServer(server60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor57);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        builder0.ensureSaneDefaults();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        builder0.errorHandler = errorHandler39;
        retrofit.converter.Converter converter41 = builder0.converter;
        retrofit.client.Client.Provider provider42 = builder0.getclientProvider();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(provider42);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.client.Client.Provider provider9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setClient(provider9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Server server10 = null;
        builder7.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        java.util.concurrent.Executor executor16 = builder12.getcallbackExecutor();
        builder7.setcallbackExecutor(executor16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.Profiler profiler28 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean33 = logLevel32.log();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server5, provider6, executor16, executor22, requestInterceptor24, (retrofit.converter.Converter) gsonConverter27, profiler28, errorHandler30, log31, logLevel32);
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter5();
        restAdapter34.serializedObjectSupporter = serializedObjectSupporter36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = restAdapter34.serializedObjectSupporter;
        retrofit.Profiler profiler41 = restAdapter34.getprofiler();
        retrofit.converter.Converter converter42 = restAdapter34.converter;
        java.util.concurrent.Executor executor43 = restAdapter34.httpExecutor;
        builder0.httpExecutor = executor43;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(serializedObjectSupporter40);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNotNull(converter42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.Server server6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder5.setServer(server6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections8 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Internal Server Error" + "'", str6, "Internal Server Error");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response3 = serializedObjectSupporter2.deserializeObjectResponse8();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter2.deserializeObjectConverter4();
        retrofit.client.Response response6 = serializedObjectSupporter2.deserializeObjectResponse3();
        int int7 = response6.getStatus();
        java.util.List<retrofit.client.Header> headerList8 = response6.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        retrofit.client.Response response11 = serializedObjectSupporter9.deserializeObjectResponse2();
        java.lang.String str12 = response11.getReason();
        java.util.List<retrofit.client.Header> headerList13 = response11.headers;
        int int14 = response11.getStatus();
        retrofit.mime.TypedInput typedInput15 = response11.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response16 = new retrofit.client.Response((int) (byte) 1, "", headerList8, typedInput15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 200 + "'", int7 == 200);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OK" + "'", str12, "OK");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 200 + "'", int14 == 200);
        org.junit.Assert.assertNotNull(typedInput15);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = null;
        builder38.errorHandler = errorHandler39;
        retrofit.Server server41 = null;
        builder38.server = server41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        java.util.concurrent.Executor executor47 = builder43.getcallbackExecutor();
        builder38.setcallbackExecutor(executor47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        java.util.concurrent.Executor executor53 = builder49.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter56.deserializeObjectConverter5();
        retrofit.Profiler profiler59 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server36, provider37, executor47, executor53, requestInterceptor55, (retrofit.converter.Converter) gsonConverter58, profiler59, errorHandler61, log62, logLevel63);
        retrofit.Server server66 = restAdapter65.server;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter65.logLevel = logLevel67;
        retrofit.client.Client.Provider provider69 = restAdapter65.getclientProvider();
        retrofit.client.Client.Provider provider70 = restAdapter65.clientProvider;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = null;
        builder71.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder71.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder76 = builder71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        builder71.logLevel = logLevel77;
        restAdapter65.setLogLevel(logLevel77);
        restAdapter29.setLogLevel(logLevel77);
        retrofit.ErrorHandler errorHandler81 = restAdapter29.errorHandler;
        java.lang.Throwable throwable82 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter29.logException(throwable82, "Internal Server Error");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler81);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        builder0.logLevel = logLevel6;
        retrofit.client.Client.Provider provider8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setClient(provider8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setLogLevel(logLevel9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler10;
        retrofit.Server server12 = builder8.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler14 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter6();
        java.lang.String str16 = serializedObjectSupporter13.deserializeObjectString3();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        builder8.server = server17;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.Server server24 = null;
        builder21.server = server24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        java.util.concurrent.Executor executor30 = builder26.getcallbackExecutor();
        builder21.setcallbackExecutor(executor30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        retrofit.RestAdapter.Log log34 = null;
        builder32.log = log34;
        java.util.concurrent.Executor executor36 = builder32.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter39.deserializeObjectConverter5();
        retrofit.Profiler profiler42 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter43.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log45 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean47 = logLevel46.log();
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server19, provider20, executor30, executor36, requestInterceptor38, (retrofit.converter.Converter) gsonConverter41, profiler42, errorHandler44, log45, logLevel46);
        builder8.sethttpExecutor(executor30);
        retrofit.Profiler profiler50 = null;
        builder8.profiler = profiler50;
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter6();
        java.lang.String str10 = serializedObjectSupporter7.deserializeObjectString3();
        retrofit.Server server11 = serializedObjectSupporter7.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder6.setServer(server11);
        retrofit.client.Client.Provider provider13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder6.setClient(provider13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response9 = serializedObjectSupporter8.deserializeObjectResponse8();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter4();
        java.lang.String str12 = serializedObjectSupporter8.deserializeObjectString3();
        retrofit.Server server13 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server13);
        retrofit.RequestInterceptor requestInterceptor15 = builder0.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = null;
        builder38.errorHandler = errorHandler39;
        retrofit.Server server41 = null;
        builder38.server = server41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        java.util.concurrent.Executor executor47 = builder43.getcallbackExecutor();
        builder38.setcallbackExecutor(executor47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        java.util.concurrent.Executor executor53 = builder49.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter56.deserializeObjectConverter5();
        retrofit.Profiler profiler59 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server36, provider37, executor47, executor53, requestInterceptor55, (retrofit.converter.Converter) gsonConverter58, profiler59, errorHandler61, log62, logLevel63);
        retrofit.Server server66 = restAdapter65.server;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter65.logLevel = logLevel67;
        retrofit.client.Client.Provider provider69 = restAdapter65.getclientProvider();
        retrofit.client.Client.Provider provider70 = restAdapter65.clientProvider;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = null;
        builder71.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder71.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder76 = builder71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        builder71.logLevel = logLevel77;
        restAdapter65.setLogLevel(logLevel77);
        restAdapter29.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider81 = restAdapter29.clientProvider;
        retrofit.Profiler profiler82 = restAdapter29.getprofiler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNull(profiler82);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response9 = serializedObjectSupporter8.deserializeObjectResponse8();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter4();
        java.lang.String str12 = serializedObjectSupporter8.deserializeObjectString3();
        retrofit.Server server13 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server13);
        retrofit.client.Client client15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder16 = builder0.setClient(client15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = builder0.server;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder9.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        builder9.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.Profiler profiler30 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server7, provider8, executor18, executor24, requestInterceptor26, (retrofit.converter.Converter) gsonConverter29, profiler30, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        java.lang.String str40 = restAdapter36.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider41 = restAdapter36.clientProvider;
        retrofit.Server server42 = restAdapter36.server;
        java.util.concurrent.Executor executor43 = restAdapter36.getcallbackExecutor();
        builder0.setcallbackExecutor(executor43);
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-" + "'", str40, "Retrofit-");
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNotNull(executor43);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse3();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections6 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(response6);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString8 = serializedObjectSupporter5.deserializeObjectTypedInput1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response9 = new retrofit.client.Response((int) 'a', "Retrofit-", (java.util.List<retrofit.client.Header>) headerList3, (retrofit.mime.TypedInput) typedString8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 97");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(typedString8);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.Server server33 = restAdapter29.getserver();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter29.requestInterceptor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(requestInterceptor34);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        retrofit.client.Request request44 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request45 = restAdapter29.logAndReplaceRequest(request44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.client.Client.Provider provider32 = restAdapter29.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.client.Response response36 = serializedObjectSupporter34.deserializeObjectResponse2();
        int int37 = response36.getStatus();
        retrofit.client.Response response39 = restAdapter29.logAndReplaceResponse("http://example.com/", response36, (long) '#');
        java.lang.String str40 = response36.getReason();
        java.lang.String str41 = response36.getReason();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 200 + "'", int37 == 200);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OK" + "'", str40, "OK");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OK" + "'", str41, "OK");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.Builder builder37 = builder5.setErrorHandler(errorHandler36);
        retrofit.ErrorHandler errorHandler38 = null;
        builder37.errorHandler = errorHandler38;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor3 = null;
        builder0.sethttpExecutor(executor3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Server server10 = null;
        builder7.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        java.util.concurrent.Executor executor16 = builder12.getcallbackExecutor();
        builder7.setcallbackExecutor(executor16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.Profiler profiler28 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean33 = logLevel32.log();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server5, provider6, executor16, executor22, requestInterceptor24, (retrofit.converter.Converter) gsonConverter27, profiler28, errorHandler30, log31, logLevel32);
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter34.logLevel;
        retrofit.RestAdapter.Log log37 = restAdapter34.log;
        builder0.log = log37;
        retrofit.client.Client client39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder40 = builder0.setClient(client39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log37);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.client.Client client7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setClient(client7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        java.util.concurrent.Executor executor9 = builder5.getcallbackExecutor();
        builder0.setcallbackExecutor(executor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter40.getLogLevel();
        java.lang.String str43 = restAdapter40.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor44 = restAdapter40.getcallbackExecutor();
        builder0.callbackExecutor = executor44;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter46 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor44);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.client.Client.Provider provider44 = restAdapter40.getclientProvider();
        retrofit.RestAdapter.Log log45 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor46);
        retrofit.Server server48 = builder47.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(server48);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        builder0.logLevel = logLevel6;
        retrofit.client.Client.Provider provider8 = builder0.getclientProvider();
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter29.requestInterceptor;
        java.util.concurrent.Executor executor34 = restAdapter29.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean36 = logLevel35.log();
        boolean boolean37 = logLevel35.log();
        restAdapter29.logLevel = logLevel35;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.Server server32 = restAdapter29.server;
        retrofit.client.Request request33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request34 = restAdapter29.logAndReplaceRequest(request33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(server32);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString7();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.Class class42 = serializedObjectSupporter38.deserializeObjectClass1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter43 = serializedObjectSupporter38.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(class42);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.lang.String str54 = restAdapter53.getTHREAD_PREFIX();
        retrofit.Profiler profiler55 = restAdapter53.profiler;
        retrofit.client.Client.Provider provider56 = restAdapter53.getclientProvider();
        java.lang.Throwable throwable57 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter53.logException(throwable57, "Forbidden");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider56);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = null;
        builder38.errorHandler = errorHandler39;
        retrofit.Server server41 = null;
        builder38.server = server41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        java.util.concurrent.Executor executor47 = builder43.getcallbackExecutor();
        builder38.setcallbackExecutor(executor47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        java.util.concurrent.Executor executor53 = builder49.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter56.deserializeObjectConverter5();
        retrofit.Profiler profiler59 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server36, provider37, executor47, executor53, requestInterceptor55, (retrofit.converter.Converter) gsonConverter58, profiler59, errorHandler61, log62, logLevel63);
        retrofit.Server server66 = restAdapter65.server;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter65.logLevel = logLevel67;
        retrofit.client.Client.Provider provider69 = restAdapter65.getclientProvider();
        retrofit.client.Client.Provider provider70 = restAdapter65.clientProvider;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = null;
        builder71.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder71.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder76 = builder71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        builder71.logLevel = logLevel77;
        restAdapter65.setLogLevel(logLevel77);
        restAdapter29.setLogLevel(logLevel77);
        retrofit.client.Client.Provider provider81 = restAdapter29.clientProvider;
        retrofit.ErrorHandler errorHandler82 = restAdapter29.geterrorHandler();
        java.util.concurrent.Executor executor83 = restAdapter29.gethttpExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider81);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(executor83);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = builder0.converter;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.Server server8 = null;
        builder5.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        java.util.concurrent.Executor executor14 = builder10.getcallbackExecutor();
        builder5.setcallbackExecutor(executor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.Profiler profiler26 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean31 = logLevel30.log();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server3, provider4, executor14, executor20, requestInterceptor22, (retrofit.converter.Converter) gsonConverter25, profiler26, errorHandler28, log29, logLevel30);
        retrofit.Server server33 = restAdapter32.server;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter32.logLevel = logLevel34;
        java.util.concurrent.Executor executor36 = restAdapter32.gethttpExecutor();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.Server server38 = builder37.server;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        builder37.requestInterceptor = requestInterceptor39;
        retrofit.RestAdapter.Builder builder42 = builder37.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = null;
        builder43.errorHandler = errorHandler44;
        retrofit.RequestInterceptor requestInterceptor46 = builder43.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder48 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        java.util.concurrent.Executor executor51 = builder49.callbackExecutor;
        builder48.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter54 = builder53.converter;
        retrofit.ErrorHandler errorHandler55 = null;
        builder53.errorHandler = errorHandler55;
        retrofit.converter.Converter converter57 = builder53.converter;
        retrofit.client.Client.Provider provider58 = builder53.getclientProvider();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = null;
        builder59.errorHandler = errorHandler60;
        retrofit.Server server62 = null;
        builder59.server = server62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        java.util.concurrent.Executor executor68 = builder64.getcallbackExecutor();
        builder59.setcallbackExecutor(executor68);
        builder53.sethttpExecutor(executor68);
        retrofit.RestAdapter.Builder builder71 = builder37.setExecutors(executor51, executor68);
        retrofit.RestAdapter.Builder builder72 = builder0.setExecutors(executor36, executor51);
        retrofit.client.Client.Provider provider73 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder74 = builder72.setClient(provider73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor36);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        java.util.concurrent.Executor executor33 = restAdapter29.getcallbackExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.ErrorHandler errorHandler10 = null;
        builder8.errorHandler = errorHandler10;
        retrofit.RequestInterceptor requestInterceptor12 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.ErrorHandler errorHandler15 = null;
        builder13.errorHandler = errorHandler15;
        java.util.concurrent.Executor executor17 = null;
        builder13.sethttpExecutor(executor17);
        java.util.concurrent.Executor executor19 = builder13.httpExecutor;
        retrofit.Profiler profiler20 = null;
        builder13.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.setcallbackExecutor(executor23);
        retrofit.client.Client.Provider provider25 = builder22.clientProvider;
        java.util.concurrent.Executor executor26 = builder22.gethttpExecutor();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        java.util.concurrent.Executor executor29 = builder27.callbackExecutor;
        builder22.setcallbackExecutor(executor29);
        builder13.callbackExecutor = executor29;
        builder8.sethttpExecutor(executor29);
        builder0.setcallbackExecutor(executor29);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter34 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(executor29);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        builder7.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = builder7.converter;
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        builder7.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder28.serializedObjectSupporter;
        retrofit.client.Client.Provider provider31 = null;
        builder28.setclientProvider(provider31);
        retrofit.RequestInterceptor requestInterceptor33 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder42 = builder34.setConverter((retrofit.converter.Converter) gsonConverter41);
        retrofit.Profiler profiler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response49 = serializedObjectSupporter48.deserializeObjectResponse8();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder52 = builder44.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder52.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server5, provider6, executor22, executor27, requestInterceptor33, (retrofit.converter.Converter) gsonConverter41, profiler43, errorHandler54, log56, logLevel57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = null;
        builder61.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        builder61.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        builder61.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter79.deserializeObjectConverter5();
        retrofit.Profiler profiler82 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter83.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server59, provider60, executor70, executor76, requestInterceptor78, (retrofit.converter.Converter) gsonConverter81, profiler82, errorHandler84, log85, logLevel86);
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.getclientProvider();
        retrofit.client.Client.Provider provider93 = restAdapter88.clientProvider;
        java.util.concurrent.Executor executor94 = restAdapter88.httpExecutor;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor27, executor94);
        java.util.concurrent.Executor executor96 = builder95.httpExecutor;
        retrofit.ErrorHandler errorHandler97 = builder95.errorHandler;
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(provider93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(errorHandler97);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse2();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.Server server8 = null;
        builder5.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        java.util.concurrent.Executor executor14 = builder10.getcallbackExecutor();
        builder5.setcallbackExecutor(executor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.Profiler profiler26 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean31 = logLevel30.log();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server3, provider4, executor14, executor20, requestInterceptor22, (retrofit.converter.Converter) gsonConverter25, profiler26, errorHandler28, log29, logLevel30);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        retrofit.client.Client.Provider provider35 = restAdapter32.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter32.getrequestInterceptor();
        builder0.requestInterceptor = requestInterceptor36;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(requestInterceptor36);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor6);
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor6);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Profiler profiler1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setProfiler(profiler1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = builder5.build();
        retrofit.Profiler profiler7 = null;
        builder5.profiler = profiler7;
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(restAdapter6);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        java.util.concurrent.Executor executor8 = builder6.callbackExecutor;
        builder5.callbackExecutor = executor8;
        retrofit.RestAdapter.LogLevel logLevel10 = builder5.logLevel;
        boolean boolean11 = logLevel10.log();
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log41);
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder0.requestInterceptor = requestInterceptor43;
        retrofit.RestAdapter.Builder builder46 = builder0.setServer("http://example.com/");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler10;
        retrofit.Server server12 = builder8.server;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.ErrorHandler errorHandler17 = null;
        builder15.errorHandler = errorHandler17;
        retrofit.converter.Converter converter19 = builder15.converter;
        retrofit.client.Client.Provider provider20 = builder15.getclientProvider();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.Server server24 = null;
        builder21.server = server24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        java.util.concurrent.Executor executor30 = builder26.getcallbackExecutor();
        builder21.setcallbackExecutor(executor30);
        builder15.sethttpExecutor(executor30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        java.util.concurrent.Executor executor35 = builder33.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = builder36.serializedObjectSupporter;
        retrofit.client.Client.Provider provider39 = null;
        builder36.setclientProvider(provider39);
        retrofit.RequestInterceptor requestInterceptor41 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        java.util.concurrent.Executor executor44 = null;
        builder42.callbackExecutor = executor44;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response47 = serializedObjectSupporter46.deserializeObjectResponse8();
        java.lang.String str48 = serializedObjectSupporter46.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter46.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder50 = builder42.setConverter((retrofit.converter.Converter) gsonConverter49);
        retrofit.Profiler profiler51 = null;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        java.util.concurrent.Executor executor54 = null;
        builder52.callbackExecutor = executor54;
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response57 = serializedObjectSupporter56.deserializeObjectResponse8();
        java.lang.String str58 = serializedObjectSupporter56.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter56.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder60 = builder52.setConverter((retrofit.converter.Converter) gsonConverter59);
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler62 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        builder60.errorHandler = errorHandler62;
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server13, provider14, executor30, executor35, requestInterceptor41, (retrofit.converter.Converter) gsonConverter49, profiler51, errorHandler62, log64, logLevel65);
        builder8.httpExecutor = executor35;
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNull(serializedObjectSupporter38);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(response47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(response57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "http://example.com/" + "'", str58, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.Builder builder37 = builder5.setErrorHandler(errorHandler36);
        java.util.concurrent.Executor executor38 = builder5.gethttpExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor38);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        retrofit.RestAdapter.Log log0 = retrofit.RestAdapter.Log.NONE;
        log0.log("hi!");
        log0.log("Internal Server Error");
        log0.log("hi!");
        org.junit.Assert.assertNotNull(log0);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.setLogLevel(logLevel32);
        java.lang.Throwable throwable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter29.logException(throwable34, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        builder0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder11.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.RequestInterceptor requestInterceptor20 = builder17.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder22 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        builder22.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.ErrorHandler errorHandler29 = null;
        builder27.errorHandler = errorHandler29;
        retrofit.converter.Converter converter31 = builder27.converter;
        retrofit.client.Client.Provider provider32 = builder27.getclientProvider();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.Server server36 = null;
        builder33.server = server36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        builder33.setcallbackExecutor(executor42);
        builder27.sethttpExecutor(executor42);
        retrofit.RestAdapter.Builder builder45 = builder11.setExecutors(executor25, executor42);
        retrofit.RestAdapter.Builder builder46 = builder0.setExecutors(executor10, executor42);
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter8();
        builder46.converter = gsonConverter49;
        retrofit.client.Client client51 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder52 = builder46.setClient(client51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(gsonConverter49);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        builder0.ensureSaneDefaults();
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = response2.getReason();
        java.util.List<retrofit.client.Header> headerList4 = response2.headers;
        retrofit.mime.TypedInput typedInput5 = response2.getBody();
        retrofit.mime.TypedInput typedInput6 = response2.getBody();
        java.lang.String str7 = response2.reason;
        int int8 = response2.getStatus();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OK" + "'", str3, "OK");
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(typedInput5);
        org.junit.Assert.assertNotNull(typedInput6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OK" + "'", str7, "OK");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 200 + "'", int8 == 200);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        builder7.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = builder7.converter;
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        builder7.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder28.serializedObjectSupporter;
        retrofit.client.Client.Provider provider31 = null;
        builder28.setclientProvider(provider31);
        retrofit.RequestInterceptor requestInterceptor33 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder42 = builder34.setConverter((retrofit.converter.Converter) gsonConverter41);
        retrofit.Profiler profiler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response49 = serializedObjectSupporter48.deserializeObjectResponse8();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder52 = builder44.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder52.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server5, provider6, executor22, executor27, requestInterceptor33, (retrofit.converter.Converter) gsonConverter41, profiler43, errorHandler54, log56, logLevel57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = null;
        builder61.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        builder61.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        builder61.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter79.deserializeObjectConverter5();
        retrofit.Profiler profiler82 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter83.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server59, provider60, executor70, executor76, requestInterceptor78, (retrofit.converter.Converter) gsonConverter81, profiler82, errorHandler84, log85, logLevel86);
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.getclientProvider();
        retrofit.client.Client.Provider provider93 = restAdapter88.clientProvider;
        java.util.concurrent.Executor executor94 = restAdapter88.httpExecutor;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor27, executor94);
        java.util.concurrent.Executor executor96 = builder95.gethttpExecutor();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter97 = builder95.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(provider93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.Profiler profiler6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setProfiler(profiler6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(provider5);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        retrofit.RestAdapter.Log log0 = retrofit.RestAdapter.Log.NONE;
        log0.log("hi!");
        log0.log("Internal Server Error");
        log0.log("Internal Server Error");
        org.junit.Assert.assertNotNull(log0);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        builder0.setcallbackExecutor(executor23);
        retrofit.client.Client.Provider provider37 = builder0.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(provider37);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str34 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str35 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-" + "'", str35, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.Class class4 = serializedObjectSupporter0.deserializeObjectClass1();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(class4);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList5 = response4.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.client.Response response8 = serializedObjectSupporter6.deserializeObjectResponse2();
        java.lang.String str9 = response8.getReason();
        java.util.List<retrofit.client.Header> headerList10 = response8.headers;
        int int11 = response8.getStatus();
        retrofit.mime.TypedInput typedInput12 = response8.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response13 = new retrofit.client.Response((int) (short) 100, "", headerList5, typedInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OK" + "'", str9, "OK");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 200 + "'", int11 == 200);
        org.junit.Assert.assertNotNull(typedInput12);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse8();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.client.Client.Provider provider32 = restAdapter29.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.client.Response response36 = serializedObjectSupporter34.deserializeObjectResponse2();
        int int37 = response36.getStatus();
        retrofit.client.Response response39 = restAdapter29.logAndReplaceResponse("http://example.com/", response36, (long) '#');
        retrofit.mime.TypedInput typedInput40 = response36.body;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 200 + "'", int37 == 200);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertNotNull(typedInput40);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.Server server9 = builder8.server;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        builder8.requestInterceptor = requestInterceptor10;
        retrofit.RestAdapter.Builder builder13 = builder8.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.RequestInterceptor requestInterceptor17 = builder14.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder19 = builder14.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        builder19.callbackExecutor = executor22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter25 = builder24.converter;
        retrofit.ErrorHandler errorHandler26 = null;
        builder24.errorHandler = errorHandler26;
        retrofit.converter.Converter converter28 = builder24.converter;
        retrofit.client.Client.Provider provider29 = builder24.getclientProvider();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler31 = null;
        builder30.errorHandler = errorHandler31;
        retrofit.Server server33 = null;
        builder30.server = server33;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        builder30.setcallbackExecutor(executor39);
        builder24.sethttpExecutor(executor39);
        retrofit.RestAdapter.Builder builder42 = builder8.setExecutors(executor22, executor39);
        builder0.setcallbackExecutor(executor22);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor6);
        org.junit.Assert.assertNull(server9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.client.Client client4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setClient(client4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.Server server39 = restAdapter38.server;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter38.logLevel = logLevel40;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter38.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder0.setRequestInterceptor(requestInterceptor42);
        java.util.concurrent.Executor executor44 = builder0.callbackExecutor;
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor44);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.RequestInterceptor requestInterceptor9 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder11 = builder6.setLogLevel(logLevel10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        java.util.concurrent.Executor executor14 = builder12.callbackExecutor;
        builder11.callbackExecutor = executor14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter17 = builder16.converter;
        retrofit.ErrorHandler errorHandler18 = null;
        builder16.errorHandler = errorHandler18;
        retrofit.converter.Converter converter20 = builder16.converter;
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = null;
        builder22.errorHandler = errorHandler23;
        retrofit.Server server25 = null;
        builder22.server = server25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        java.util.concurrent.Executor executor31 = builder27.getcallbackExecutor();
        builder22.setcallbackExecutor(executor31);
        builder16.sethttpExecutor(executor31);
        retrofit.RestAdapter.Builder builder34 = builder0.setExecutors(executor14, executor31);
        java.util.concurrent.Executor executor35 = builder34.callbackExecutor;
        retrofit.RestAdapter.Builder builder37 = builder34.setServer("hi!");
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler41 = null;
        builder40.errorHandler = errorHandler41;
        retrofit.Server server43 = null;
        builder40.server = server43;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        builder45.ensureSaneDefaults();
        retrofit.RestAdapter.Log log47 = null;
        builder45.log = log47;
        java.util.concurrent.Executor executor49 = builder45.getcallbackExecutor();
        builder40.setcallbackExecutor(executor49);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        java.util.concurrent.Executor executor55 = builder51.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor59 = serializedObjectSupporter58.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter58.deserializeObjectConverter5();
        retrofit.Profiler profiler61 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler63 = serializedObjectSupporter62.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log64 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean66 = logLevel65.log();
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server38, provider39, executor49, executor55, requestInterceptor57, (retrofit.converter.Converter) gsonConverter60, profiler61, errorHandler63, log64, logLevel65);
        retrofit.ErrorHandler errorHandler68 = restAdapter67.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter67.logLevel;
        retrofit.RestAdapter.Builder builder70 = builder34.setLogLevel(logLevel69);
        java.util.concurrent.Executor executor71 = builder34.getcallbackExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(errorHandler63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(executor71);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response4 = serializedObjectSupporter3.deserializeObjectResponse8();
        java.lang.String str5 = serializedObjectSupporter3.deserializeObjectString10();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter3.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder7 = builder0.setConverter((retrofit.converter.Converter) gsonConverter6);
        retrofit.client.Client.Provider provider8 = builder7.getclientProvider();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Forbidden" + "'", str5, "Forbidden");
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Server server10 = null;
        builder7.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        java.util.concurrent.Executor executor16 = builder12.getcallbackExecutor();
        builder7.setcallbackExecutor(executor16);
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = null;
        builder20.errorHandler = errorHandler21;
        retrofit.Server server23 = null;
        builder20.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        builder20.setcallbackExecutor(executor29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        java.util.concurrent.Executor executor35 = builder31.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        retrofit.Profiler profiler41 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server18, provider19, executor29, executor35, requestInterceptor37, (retrofit.converter.Converter) gsonConverter40, profiler41, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter49.deserializeObjectConverter5();
        restAdapter47.serializedObjectSupporter = serializedObjectSupporter49;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = restAdapter47.serializedObjectSupporter;
        retrofit.Profiler profiler54 = restAdapter47.getprofiler();
        retrofit.converter.Converter converter55 = restAdapter47.converter;
        java.util.concurrent.Executor executor56 = restAdapter47.httpExecutor;
        retrofit.RestAdapter.Builder builder57 = builder0.setExecutors(executor16, executor56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler59 = serializedObjectSupporter58.deserializeObjectErrorHandler1();
        builder57.errorHandler = errorHandler59;
        java.lang.Class<?> wildcardClass61 = errorHandler59.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(serializedObjectSupporter53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.RestAdapter.Log log34 = restAdapter29.log;
        retrofit.RequestInterceptor requestInterceptor35 = restAdapter29.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.getclientProvider();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.Profiler profiler7 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder8 = builder0.setProfiler(profiler7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor6);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.Class class42 = serializedObjectSupporter38.deserializeObjectClass1();
        retrofit.client.Response response43 = serializedObjectSupporter38.deserializeObjectResponse7();
        java.util.List<retrofit.client.Header> headerList44 = response43.headers;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNotNull(headerList44);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        java.util.concurrent.Executor executor38 = builder37.httpExecutor;
        retrofit.client.Client client39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder40 = builder37.setClient(client39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor38);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.client.Client.Provider provider44 = restAdapter40.getclientProvider();
        retrofit.RestAdapter.Log log45 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        builder0.sethttpExecutor(executor57);
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        java.lang.String str62 = serializedObjectSupporter60.deserializeObjectString7();
        java.lang.Class class63 = serializedObjectSupporter60.deserializeObjectClass1();
        builder0.serializedObjectSupporter = serializedObjectSupporter60;
        java.lang.String str65 = serializedObjectSupporter60.deserializeObjectString13();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "http://example.com/" + "'", str62, "http://example.com/");
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "http://example.com/" + "'", str65, "http://example.com/");
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.setLogLevel(logLevel32);
        java.lang.Throwable throwable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter29.logException(throwable34, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder7.serializedObjectSupporter;
        retrofit.Server server11 = builder7.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = builder12.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder7.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = builder0.setLogLevel(logLevel15);
        retrofit.Profiler profiler18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder17.setProfiler(profiler18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        java.lang.String str37 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter29.requestInterceptor;
        java.lang.Class<?> wildcardClass39 = requestInterceptor38.getClass();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        org.junit.Assert.assertNull(requestInterceptor3);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter9 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor45 = restAdapter29.gethttpExecutor();
        retrofit.client.Request request46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request47 = restAdapter29.logAndReplaceRequest(request46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertNotNull(executor45);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        builder0.setcallbackExecutor(executor23);
        retrofit.client.Client client37 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder38 = builder0.setClient(client37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.Profiler profiler32 = restAdapter29.getprofiler();
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        java.lang.Throwable throwable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter29.logException(throwable34, "Internal Server Error");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNull(provider33);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter35.logLevel;
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter35.getLogLevel();
        builder0.logLevel = logLevel39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = null;
        builder41.errorHandler = errorHandler42;
        java.util.concurrent.Executor executor44 = builder41.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response46 = serializedObjectSupporter45.deserializeObjectResponse8();
        java.lang.String str47 = serializedObjectSupporter45.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter45.deserializeObjectConverter4();
        java.lang.String str49 = serializedObjectSupporter45.deserializeObjectString3();
        retrofit.Server server50 = serializedObjectSupporter45.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder51 = builder41.setServer(server50);
        retrofit.RestAdapter.Builder builder52 = builder0.setServer(server50);
        retrofit.ErrorHandler errorHandler53 = builder52.errorHandler;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(response46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "http://example.com/" + "'", str47, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "http://example.com/" + "'", str49, "http://example.com/");
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNull(errorHandler53);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder7.serializedObjectSupporter;
        retrofit.Server server11 = builder7.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter13 = builder12.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = builder12.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel15 = builder12.logLevel;
        retrofit.RestAdapter.Builder builder16 = builder7.setLogLevel(logLevel15);
        retrofit.RestAdapter.Builder builder17 = builder0.setLogLevel(logLevel15);
        boolean boolean18 = logLevel15.log();
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response33 = serializedObjectSupporter32.deserializeObjectResponse8();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.client.Response response38 = serializedObjectSupporter32.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList39 = response38.getHeaders();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(response38);
        org.junit.Assert.assertNotNull(headerList39);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.setLogLevel(logLevel32);
        boolean boolean34 = logLevel32.log();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.ErrorHandler errorHandler8 = null;
        builder6.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = null;
        builder6.sethttpExecutor(executor10);
        retrofit.client.Client.Provider provider12 = null;
        builder6.setclientProvider(provider12);
        retrofit.RequestInterceptor requestInterceptor14 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter16 = builder15.converter;
        retrofit.ErrorHandler errorHandler17 = null;
        builder15.errorHandler = errorHandler17;
        retrofit.converter.Converter converter19 = builder15.converter;
        retrofit.client.Client.Provider provider20 = builder15.getclientProvider();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler22 = null;
        builder21.errorHandler = errorHandler22;
        retrofit.Server server24 = null;
        builder21.server = server24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        java.util.concurrent.Executor executor30 = builder26.getcallbackExecutor();
        builder21.setcallbackExecutor(executor30);
        builder15.sethttpExecutor(executor30);
        builder6.callbackExecutor = executor30;
        builder5.sethttpExecutor(executor30);
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNotNull(executor30);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = null;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("Forbidden");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder8.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.client.Client.Provider provider32 = restAdapter29.clientProvider;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider32);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log41);
        retrofit.client.Client.Provider provider43 = builder0.clientProvider;
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = null;
        builder46.errorHandler = errorHandler47;
        retrofit.Server server49 = null;
        builder46.server = server49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        java.util.concurrent.Executor executor55 = builder51.getcallbackExecutor();
        builder46.setcallbackExecutor(executor55);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor63 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.Profiler profiler67 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler69 = serializedObjectSupporter68.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean72 = logLevel71.log();
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server44, provider45, executor55, executor61, requestInterceptor63, (retrofit.converter.Converter) gsonConverter66, profiler67, errorHandler69, log70, logLevel71);
        retrofit.RestAdapter.Builder builder74 = builder0.setErrorHandler(errorHandler69);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.converter.Converter converter4 = null;
        builder0.converter = converter4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        retrofit.client.Client.Provider provider8 = null;
        builder6.setclientProvider(provider8);
        retrofit.RestAdapter.Log log10 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder11 = builder6.setLog(log10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.setcallbackExecutor(executor13);
        retrofit.client.Client.Provider provider15 = builder12.clientProvider;
        java.util.concurrent.Executor executor16 = builder12.gethttpExecutor();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        java.util.concurrent.Executor executor19 = builder17.callbackExecutor;
        builder12.setcallbackExecutor(executor19);
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.Server server26 = null;
        builder23.server = server26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        java.util.concurrent.Executor executor32 = builder28.getcallbackExecutor();
        builder23.setcallbackExecutor(executor32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        java.util.concurrent.Executor executor38 = builder34.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.Profiler profiler44 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server21, provider22, executor32, executor38, requestInterceptor40, (retrofit.converter.Converter) gsonConverter43, profiler44, errorHandler46, log47, logLevel48);
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        builder12.errorHandler = errorHandler51;
        builder6.errorHandler = errorHandler51;
        builder0.errorHandler = errorHandler51;
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(errorHandler51);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList3 = response2.getHeaders();
        java.lang.String str4 = response2.getReason();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(headerList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder5.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        builder5.requestInterceptor = requestInterceptor8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = null;
        builder10.errorHandler = errorHandler11;
        java.util.concurrent.Executor executor13 = builder10.gethttpExecutor();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        java.util.concurrent.Executor executor16 = builder14.callbackExecutor;
        builder10.setcallbackExecutor(executor16);
        builder5.callbackExecutor = executor16;
        retrofit.converter.Converter converter19 = builder5.converter;
        retrofit.client.Client.Provider provider20 = null;
        builder5.setclientProvider(provider20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.ErrorHandler errorHandler24 = null;
        builder22.errorHandler = errorHandler24;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder22.setRequestInterceptor(requestInterceptor27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter6();
        java.lang.String str32 = serializedObjectSupporter29.deserializeObjectString3();
        retrofit.Server server33 = serializedObjectSupporter29.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder34 = builder28.setServer(server33);
        retrofit.RestAdapter.Builder builder35 = builder5.setServer(server33);
        builder0.server = server33;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.RequestInterceptor requestInterceptor10 = builder7.requestInterceptor;
        retrofit.converter.Converter converter11 = null;
        builder7.converter = converter11;
        java.util.concurrent.Executor executor13 = builder7.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        java.util.concurrent.Executor executor17 = builder14.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder14.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        builder25.requestInterceptor = requestInterceptor27;
        retrofit.RestAdapter.Builder builder30 = builder25.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = null;
        builder31.errorHandler = errorHandler32;
        retrofit.RequestInterceptor requestInterceptor34 = builder31.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder36 = builder31.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        java.util.concurrent.Executor executor39 = builder37.callbackExecutor;
        builder36.callbackExecutor = executor39;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.ErrorHandler errorHandler43 = null;
        builder41.errorHandler = errorHandler43;
        retrofit.converter.Converter converter45 = builder41.converter;
        retrofit.client.Client.Provider provider46 = builder41.getclientProvider();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = null;
        builder47.errorHandler = errorHandler48;
        retrofit.Server server50 = null;
        builder47.server = server50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        java.util.concurrent.Executor executor56 = builder52.getcallbackExecutor();
        builder47.setcallbackExecutor(executor56);
        builder41.sethttpExecutor(executor56);
        retrofit.RestAdapter.Builder builder59 = builder25.setExecutors(executor39, executor56);
        retrofit.RestAdapter.Builder builder60 = builder14.setExecutors(executor24, executor56);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel62 = builder61.logLevel;
        retrofit.client.Client.Provider provider63 = null;
        builder61.setclientProvider(provider63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder61.setLog(log65);
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = null;
        builder69.errorHandler = errorHandler70;
        retrofit.Server server72 = null;
        builder69.server = server72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        retrofit.RestAdapter.Log log76 = null;
        builder74.log = log76;
        java.util.concurrent.Executor executor78 = builder74.getcallbackExecutor();
        builder69.setcallbackExecutor(executor78);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        builder80.ensureSaneDefaults();
        retrofit.RestAdapter.Log log82 = null;
        builder80.log = log82;
        java.util.concurrent.Executor executor84 = builder80.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor86 = serializedObjectSupporter85.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter87 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor88 = serializedObjectSupporter87.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter89 = serializedObjectSupporter87.deserializeObjectConverter5();
        retrofit.Profiler profiler90 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter91 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler92 = serializedObjectSupporter91.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log93 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel94 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean95 = logLevel94.log();
        retrofit.RestAdapter restAdapter96 = new retrofit.RestAdapter(server67, provider68, executor78, executor84, requestInterceptor86, (retrofit.converter.Converter) gsonConverter89, profiler90, errorHandler92, log93, logLevel94);
        builder61.setcallbackExecutor(executor84);
        retrofit.RestAdapter.Builder builder98 = builder7.setExecutors(executor56, executor84);
        builder0.httpExecutor = executor84;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(executor84);
        org.junit.Assert.assertNotNull(requestInterceptor86);
        org.junit.Assert.assertNotNull(requestInterceptor88);
        org.junit.Assert.assertNotNull(gsonConverter89);
        org.junit.Assert.assertNotNull(errorHandler92);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        builder7.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = builder7.converter;
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        builder7.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder28.serializedObjectSupporter;
        retrofit.client.Client.Provider provider31 = null;
        builder28.setclientProvider(provider31);
        retrofit.RequestInterceptor requestInterceptor33 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder42 = builder34.setConverter((retrofit.converter.Converter) gsonConverter41);
        retrofit.Profiler profiler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response49 = serializedObjectSupporter48.deserializeObjectResponse8();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder52 = builder44.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder52.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server5, provider6, executor22, executor27, requestInterceptor33, (retrofit.converter.Converter) gsonConverter41, profiler43, errorHandler54, log56, logLevel57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = null;
        builder61.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        builder61.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        builder61.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter79.deserializeObjectConverter5();
        retrofit.Profiler profiler82 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter83.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server59, provider60, executor70, executor76, requestInterceptor78, (retrofit.converter.Converter) gsonConverter81, profiler82, errorHandler84, log85, logLevel86);
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.getclientProvider();
        retrofit.client.Client.Provider provider93 = restAdapter88.clientProvider;
        java.util.concurrent.Executor executor94 = restAdapter88.httpExecutor;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor27, executor94);
        java.util.concurrent.Executor executor96 = builder0.httpExecutor;
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(provider93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Profiler profiler30 = restAdapter29.getprofiler();
        retrofit.client.Request request31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request32 = restAdapter29.logAndReplaceRequest(request31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(profiler30);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = builder10.serializedObjectSupporter;
        retrofit.client.Client client13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder10.setClient(client13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str34 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str35 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str36 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler37 = restAdapter29.profiler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-" + "'", str35, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-Idle" + "'", str36, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler37);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel4 = builder3.logLevel;
        retrofit.client.Client.Provider provider5 = null;
        builder3.setclientProvider(provider5);
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder8 = builder3.setLog(log7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.setcallbackExecutor(executor10);
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        java.util.concurrent.Executor executor13 = builder9.gethttpExecutor();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        java.util.concurrent.Executor executor16 = builder14.callbackExecutor;
        builder9.setcallbackExecutor(executor16);
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = null;
        builder20.errorHandler = errorHandler21;
        retrofit.Server server23 = null;
        builder20.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        builder20.setcallbackExecutor(executor29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        java.util.concurrent.Executor executor35 = builder31.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        retrofit.Profiler profiler41 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server18, provider19, executor29, executor35, requestInterceptor37, (retrofit.converter.Converter) gsonConverter40, profiler41, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        builder9.errorHandler = errorHandler48;
        builder3.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler52 = null;
        builder51.errorHandler = errorHandler52;
        retrofit.RequestInterceptor requestInterceptor54 = builder51.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder56 = builder51.setLogLevel(logLevel55);
        retrofit.client.Client.Provider provider57 = null;
        builder51.clientProvider = provider57;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = null;
        builder59.errorHandler = errorHandler60;
        java.util.concurrent.Executor executor62 = builder59.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response64 = serializedObjectSupporter63.deserializeObjectResponse8();
        java.lang.String str65 = serializedObjectSupporter63.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter4();
        java.lang.String str67 = serializedObjectSupporter63.deserializeObjectString3();
        retrofit.Server server68 = serializedObjectSupporter63.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder69 = builder59.setServer(server68);
        retrofit.RestAdapter.Builder builder70 = builder51.setServer(server68);
        builder3.server = server68;
        retrofit.RestAdapter.Builder builder72 = builder0.setServer(server68);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(response64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "http://example.com/" + "'", str65, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "http://example.com/" + "'", str67, "http://example.com/");
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response3 = serializedObjectSupporter2.deserializeObjectResponse8();
        java.lang.String str4 = serializedObjectSupporter2.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter2.deserializeObjectConverter4();
        retrofit.client.Response response6 = serializedObjectSupporter2.deserializeObjectResponse3();
        int int7 = response6.getStatus();
        java.util.List<retrofit.client.Header> headerList8 = response6.getHeaders();
        retrofit.mime.TypedInput typedInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = new retrofit.client.Response((int) (byte) 0, "Retrofit-Idle", headerList8, typedInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 200 + "'", int7 == 200);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.ErrorHandler errorHandler11 = null;
        builder9.errorHandler = errorHandler11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = null;
        builder15.errorHandler = errorHandler16;
        retrofit.Server server18 = null;
        builder15.server = server18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        builder15.setcallbackExecutor(executor24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        java.util.concurrent.Executor executor30 = builder26.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.Profiler profiler36 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server13, provider14, executor24, executor30, requestInterceptor32, (retrofit.converter.Converter) gsonConverter35, profiler36, errorHandler38, log39, logLevel40);
        retrofit.Server server43 = restAdapter42.server;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter42.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder9.setLogLevel(logLevel44);
        java.util.concurrent.Executor executor47 = builder46.httpExecutor;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.setcallbackExecutor(executor49);
        retrofit.client.Client.Provider provider51 = builder48.clientProvider;
        java.util.concurrent.Executor executor52 = builder48.gethttpExecutor();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        java.util.concurrent.Executor executor55 = builder53.callbackExecutor;
        builder48.setcallbackExecutor(executor55);
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler60 = null;
        builder59.errorHandler = errorHandler60;
        retrofit.Server server62 = null;
        builder59.server = server62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        builder64.ensureSaneDefaults();
        retrofit.RestAdapter.Log log66 = null;
        builder64.log = log66;
        java.util.concurrent.Executor executor68 = builder64.getcallbackExecutor();
        builder59.setcallbackExecutor(executor68);
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        builder70.ensureSaneDefaults();
        retrofit.RestAdapter.Log log72 = null;
        builder70.log = log72;
        java.util.concurrent.Executor executor74 = builder70.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor76 = serializedObjectSupporter75.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter77.deserializeObjectConverter5();
        retrofit.Profiler profiler80 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler82 = serializedObjectSupporter81.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log83 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean85 = logLevel84.log();
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server57, provider58, executor68, executor74, requestInterceptor76, (retrofit.converter.Converter) gsonConverter79, profiler80, errorHandler82, log83, logLevel84);
        retrofit.ErrorHandler errorHandler87 = restAdapter86.errorHandler;
        builder48.errorHandler = errorHandler87;
        retrofit.RestAdapter.Builder builder89 = builder46.setErrorHandler(errorHandler87);
        retrofit.RestAdapter.Builder builder90 = builder0.setErrorHandler(errorHandler87);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(executor74);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(log83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(errorHandler87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput3 = response2.getBody();
        retrofit.mime.TypedInput typedInput4 = response2.body;
        retrofit.mime.TypedInput typedInput5 = response2.getBody();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(typedInput3);
        org.junit.Assert.assertNotNull(typedInput4);
        org.junit.Assert.assertNotNull(typedInput5);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        log32.log("Forbidden");
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.Class class42 = serializedObjectSupporter38.deserializeObjectClass1();
        retrofit.client.Response response43 = serializedObjectSupporter38.deserializeObjectResponse7();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter38.deserializeObjectConverter7();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNotNull(gsonConverter44);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.setcallbackExecutor(executor7);
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        java.util.concurrent.Executor executor10 = builder6.gethttpExecutor();
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.client.Client.Provider provider12 = null;
        builder6.clientProvider = provider12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = builder14.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder19 = builder14.setServer("hi!");
        retrofit.RestAdapter restAdapter20 = builder19.build();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.Server server26 = null;
        builder23.server = server26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        java.util.concurrent.Executor executor32 = builder28.getcallbackExecutor();
        builder23.setcallbackExecutor(executor32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        java.util.concurrent.Executor executor38 = builder34.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.Profiler profiler44 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server21, provider22, executor32, executor38, requestInterceptor40, (retrofit.converter.Converter) gsonConverter43, profiler44, errorHandler46, log47, logLevel48);
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter50.logLevel;
        retrofit.RestAdapter.Log log53 = restAdapter50.log;
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter50.getLogLevel();
        restAdapter20.logLevel = logLevel54;
        retrofit.converter.Converter converter56 = restAdapter20.converter;
        retrofit.converter.Converter converter57 = restAdapter20.getconverter();
        retrofit.client.Client.Provider provider58 = restAdapter20.getclientProvider();
        builder6.clientProvider = provider58;
        builder0.setclientProvider(provider58);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter20);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(provider58);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(errorHandler5);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Forbidden" + "'", str5, "Forbidden");
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder0.serializedObjectSupporter;
        retrofit.Profiler profiler10 = builder0.profiler;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
        org.junit.Assert.assertNull(profiler10);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = null;
        builder32.errorHandler = errorHandler33;
        retrofit.Server server35 = null;
        builder32.server = server35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        java.util.concurrent.Executor executor41 = builder37.getcallbackExecutor();
        builder32.setcallbackExecutor(executor41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        java.util.concurrent.Executor executor47 = builder43.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter5();
        retrofit.Profiler profiler53 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler55 = serializedObjectSupporter54.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean58 = logLevel57.log();
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server30, provider31, executor41, executor47, requestInterceptor49, (retrofit.converter.Converter) gsonConverter52, profiler53, errorHandler55, log56, logLevel57);
        retrofit.ErrorHandler errorHandler60 = restAdapter59.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter59.logLevel;
        restAdapter29.setLogLevel(logLevel61);
        retrofit.Server server63 = restAdapter29.getserver();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(errorHandler55);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server63);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response33 = serializedObjectSupporter32.deserializeObjectResponse8();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        java.lang.String str38 = serializedObjectSupporter32.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter32.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter39);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.Class class42 = serializedObjectSupporter38.deserializeObjectClass1();
        retrofit.client.Response response43 = serializedObjectSupporter38.deserializeObjectResponse4();
        retrofit.mime.TypedInput typedInput44 = response43.body;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNull(typedInput44);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.Server server4 = builder0.server;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server4);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        java.util.concurrent.Executor executor36 = restAdapter29.getcallbackExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(executor36);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter29.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter1();
        java.lang.String str50 = serializedObjectSupporter47.deserializeObjectString11();
        java.lang.String str51 = serializedObjectSupporter47.deserializeObjectString12();
        restHandler46.serializedObjectSupporter = serializedObjectSupporter47;
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter47.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Internal Server Error" + "'", str51, "Internal Server Error");
        org.junit.Assert.assertNotNull(gsonConverter53);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString8();
        retrofit.Server server8 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler4 = null;
        builder3.errorHandler = errorHandler4;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = builder3.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder8 = builder3.setServer("hi!");
        retrofit.RestAdapter restAdapter9 = builder8.build();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = null;
        builder12.errorHandler = errorHandler13;
        retrofit.Server server15 = null;
        builder12.server = server15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        builder12.setcallbackExecutor(executor21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        java.util.concurrent.Executor executor27 = builder23.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor31 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter5();
        retrofit.Profiler profiler33 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log36 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean38 = logLevel37.log();
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server10, provider11, executor21, executor27, requestInterceptor29, (retrofit.converter.Converter) gsonConverter32, profiler33, errorHandler35, log36, logLevel37);
        retrofit.ErrorHandler errorHandler40 = restAdapter39.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter39.logLevel;
        retrofit.RestAdapter.Log log42 = restAdapter39.log;
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter39.getLogLevel();
        restAdapter9.logLevel = logLevel43;
        retrofit.converter.Converter converter45 = restAdapter9.converter;
        retrofit.converter.Converter converter46 = restAdapter9.getconverter();
        retrofit.client.Client.Provider provider47 = restAdapter9.getclientProvider();
        builder0.setclientProvider(provider47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = null;
        builder49.errorHandler = errorHandler50;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = builder49.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder54 = builder49.setServer("hi!");
        retrofit.RestAdapter restAdapter55 = builder54.build();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler59 = null;
        builder58.errorHandler = errorHandler59;
        retrofit.Server server61 = null;
        builder58.server = server61;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.RestAdapter.Log log65 = null;
        builder63.log = log65;
        java.util.concurrent.Executor executor67 = builder63.getcallbackExecutor();
        builder58.setcallbackExecutor(executor67);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        retrofit.RestAdapter.Log log71 = null;
        builder69.log = log71;
        java.util.concurrent.Executor executor73 = builder69.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter74 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor75 = serializedObjectSupporter74.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor77 = serializedObjectSupporter76.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter78 = serializedObjectSupporter76.deserializeObjectConverter5();
        retrofit.Profiler profiler79 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler81 = serializedObjectSupporter80.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel83 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean84 = logLevel83.log();
        retrofit.RestAdapter restAdapter85 = new retrofit.RestAdapter(server56, provider57, executor67, executor73, requestInterceptor75, (retrofit.converter.Converter) gsonConverter78, profiler79, errorHandler81, log82, logLevel83);
        retrofit.ErrorHandler errorHandler86 = restAdapter85.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel87 = restAdapter85.logLevel;
        retrofit.RestAdapter.Log log88 = restAdapter85.log;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter85.getLogLevel();
        restAdapter55.logLevel = logLevel89;
        retrofit.converter.Converter converter91 = restAdapter55.converter;
        retrofit.converter.Converter converter92 = restAdapter55.getconverter();
        retrofit.client.Client.Provider provider93 = restAdapter55.clientProvider;
        builder0.setclientProvider(provider93);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(restAdapter9);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter45);
        org.junit.Assert.assertNotNull(converter46);
        org.junit.Assert.assertNotNull(provider47);
        org.junit.Assert.assertNull(serializedObjectSupporter52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter55);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(gsonConverter78);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(converter92);
        org.junit.Assert.assertNotNull(provider93);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.lang.String str5 = response4.getReason();
        java.util.List<retrofit.client.Header> headerList6 = response4.headers;
        java.util.List<retrofit.client.Header> headerList7 = response4.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString10 = serializedObjectSupporter8.deserializeObjectTypedInput1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = new retrofit.client.Response((int) (byte) 0, "http://example.com/", headerList7, (retrofit.mime.TypedInput) typedString10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(typedString10);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = builder11.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = null;
        builder11.sethttpExecutor(executor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = null;
        builder16.errorHandler = errorHandler17;
        retrofit.Server server19 = null;
        builder16.server = server19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        java.util.concurrent.Executor executor25 = builder21.getcallbackExecutor();
        builder16.setcallbackExecutor(executor25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.setcallbackExecutor(executor28);
        retrofit.client.Client.Provider provider30 = builder27.clientProvider;
        java.util.concurrent.Executor executor31 = builder27.gethttpExecutor();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        builder32.ensureSaneDefaults();
        java.util.concurrent.Executor executor34 = builder32.callbackExecutor;
        builder27.setcallbackExecutor(executor34);
        retrofit.RestAdapter.Builder builder36 = builder11.setExecutors(executor25, executor34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler38 = null;
        builder37.errorHandler = errorHandler38;
        retrofit.RequestInterceptor requestInterceptor40 = builder37.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder42 = builder37.setLogLevel(logLevel41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        java.util.concurrent.Executor executor45 = builder43.callbackExecutor;
        builder42.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder47 = builder10.setExecutors(executor25, executor45);
        retrofit.RequestInterceptor requestInterceptor48 = builder47.requestInterceptor;
        retrofit.client.Client.Provider provider49 = builder47.clientProvider;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(requestInterceptor40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNull(provider49);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = null;
        builder9.errorHandler = errorHandler11;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.ErrorHandler errorHandler14 = null;
        builder9.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = builder9.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response18 = serializedObjectSupporter17.deserializeObjectResponse8();
        java.lang.String str19 = serializedObjectSupporter17.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        java.lang.String str21 = serializedObjectSupporter17.deserializeObjectString3();
        retrofit.Server server22 = serializedObjectSupporter17.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder9.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = builder0.setServer(server22);
        retrofit.converter.Converter converter25 = builder0.converter;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter25);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter6();
        java.lang.String str10 = serializedObjectSupporter7.deserializeObjectString3();
        retrofit.Server server11 = serializedObjectSupporter7.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder6.setServer(server11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        builder13.requestInterceptor = requestInterceptor15;
        retrofit.RestAdapter.Builder builder18 = builder13.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler20 = null;
        builder19.errorHandler = errorHandler20;
        retrofit.RequestInterceptor requestInterceptor22 = builder19.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder24 = builder19.setLogLevel(logLevel23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        builder24.callbackExecutor = executor27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter30 = builder29.converter;
        retrofit.ErrorHandler errorHandler31 = null;
        builder29.errorHandler = errorHandler31;
        retrofit.converter.Converter converter33 = builder29.converter;
        retrofit.client.Client.Provider provider34 = builder29.getclientProvider();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.Server server38 = null;
        builder35.server = server38;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Log log42 = null;
        builder40.log = log42;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        builder35.setcallbackExecutor(executor44);
        builder29.sethttpExecutor(executor44);
        retrofit.RestAdapter.Builder builder47 = builder13.setExecutors(executor27, executor44);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        retrofit.Profiler profiler49 = null;
        builder47.profiler = profiler49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter52 = builder51.converter;
        retrofit.ErrorHandler errorHandler53 = null;
        builder51.errorHandler = errorHandler53;
        retrofit.converter.Converter converter55 = builder51.converter;
        retrofit.client.Client.Provider provider56 = builder51.getclientProvider();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = null;
        builder57.errorHandler = errorHandler58;
        retrofit.Server server60 = null;
        builder57.server = server60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        java.util.concurrent.Executor executor66 = builder62.getcallbackExecutor();
        builder57.setcallbackExecutor(executor66);
        builder51.sethttpExecutor(executor66);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler70 = null;
        builder69.errorHandler = errorHandler70;
        retrofit.RequestInterceptor requestInterceptor72 = builder69.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder74 = builder69.setLogLevel(logLevel73);
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        java.util.concurrent.Executor executor77 = builder75.callbackExecutor;
        builder74.callbackExecutor = executor77;
        retrofit.RestAdapter.Builder builder79 = builder47.setExecutors(executor66, executor77);
        builder12.setcallbackExecutor(executor77);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNull(requestInterceptor72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Forbidden" + "'", str5, "Forbidden");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = null;
        builder38.errorHandler = errorHandler39;
        retrofit.Server server41 = null;
        builder38.server = server41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        java.util.concurrent.Executor executor47 = builder43.getcallbackExecutor();
        builder38.setcallbackExecutor(executor47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        java.util.concurrent.Executor executor53 = builder49.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter56.deserializeObjectConverter5();
        retrofit.Profiler profiler59 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log62 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean64 = logLevel63.log();
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server36, provider37, executor47, executor53, requestInterceptor55, (retrofit.converter.Converter) gsonConverter58, profiler59, errorHandler61, log62, logLevel63);
        retrofit.Server server66 = restAdapter65.server;
        retrofit.RestAdapter.LogLevel logLevel67 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter65.logLevel = logLevel67;
        retrofit.client.Client.Provider provider69 = restAdapter65.getclientProvider();
        retrofit.client.Client.Provider provider70 = restAdapter65.clientProvider;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler72 = null;
        builder71.errorHandler = errorHandler72;
        retrofit.RequestInterceptor requestInterceptor74 = builder71.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel75 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder76 = builder71.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.NONE;
        builder71.logLevel = logLevel77;
        restAdapter65.setLogLevel(logLevel77);
        restAdapter29.setLogLevel(logLevel77);
        retrofit.converter.Converter converter81 = restAdapter29.getconverter();
        retrofit.RestAdapter.Log log82 = restAdapter29.log;
        log82.log("Internal Server Error");
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(log82);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel10 = builder9.logLevel;
        retrofit.ErrorHandler errorHandler11 = null;
        builder9.errorHandler = errorHandler11;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.ErrorHandler errorHandler14 = null;
        builder9.errorHandler = errorHandler14;
        retrofit.Profiler profiler16 = builder9.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response18 = serializedObjectSupporter17.deserializeObjectResponse8();
        java.lang.String str19 = serializedObjectSupporter17.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        java.lang.String str21 = serializedObjectSupporter17.deserializeObjectString3();
        retrofit.Server server22 = serializedObjectSupporter17.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder9.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = builder0.setServer(server22);
        java.lang.Class<?> wildcardClass25 = server22.getClass();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        java.lang.String str36 = serializedObjectSupporter35.deserializeObjectString3();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        builder0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder11.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.RequestInterceptor requestInterceptor20 = builder17.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder22 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        builder22.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.ErrorHandler errorHandler29 = null;
        builder27.errorHandler = errorHandler29;
        retrofit.converter.Converter converter31 = builder27.converter;
        retrofit.client.Client.Provider provider32 = builder27.getclientProvider();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.Server server36 = null;
        builder33.server = server36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        builder33.setcallbackExecutor(executor42);
        builder27.sethttpExecutor(executor42);
        retrofit.RestAdapter.Builder builder45 = builder11.setExecutors(executor25, executor42);
        retrofit.RestAdapter.Builder builder46 = builder0.setExecutors(executor10, executor42);
        retrofit.client.Client.Provider provider47 = builder46.clientProvider;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(provider47);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response9 = serializedObjectSupporter8.deserializeObjectResponse8();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter4();
        java.lang.String str12 = serializedObjectSupporter8.deserializeObjectString3();
        retrofit.Server server13 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.setcallbackExecutor(executor16);
        retrofit.client.Client.Provider provider18 = builder15.clientProvider;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = builder19.serializedObjectSupporter;
        java.util.concurrent.Executor executor22 = null;
        builder19.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = null;
        builder24.errorHandler = errorHandler25;
        retrofit.Server server27 = null;
        builder24.server = server27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        java.util.concurrent.Executor executor33 = builder29.getcallbackExecutor();
        builder24.setcallbackExecutor(executor33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.setcallbackExecutor(executor36);
        retrofit.client.Client.Provider provider38 = builder35.clientProvider;
        java.util.concurrent.Executor executor39 = builder35.gethttpExecutor();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        java.util.concurrent.Executor executor42 = builder40.callbackExecutor;
        builder35.setcallbackExecutor(executor42);
        retrofit.RestAdapter.Builder builder44 = builder19.setExecutors(executor33, executor42);
        builder15.setcallbackExecutor(executor42);
        builder0.callbackExecutor = executor42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler48 = serializedObjectSupporter47.deserializeObjectErrorHandler1();
        retrofit.client.Response response49 = serializedObjectSupporter47.deserializeObjectResponse2();
        builder0.serializedObjectSupporter = serializedObjectSupporter47;
        retrofit.client.Response response51 = serializedObjectSupporter47.deserializeObjectResponse8();
        java.util.List<retrofit.client.Header> headerList52 = response51.headers;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(serializedObjectSupporter21);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertNotNull(response51);
        org.junit.Assert.assertNotNull(headerList52);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        builder0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder11.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.RequestInterceptor requestInterceptor20 = builder17.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder22 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        builder22.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.ErrorHandler errorHandler29 = null;
        builder27.errorHandler = errorHandler29;
        retrofit.converter.Converter converter31 = builder27.converter;
        retrofit.client.Client.Provider provider32 = builder27.getclientProvider();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.Server server36 = null;
        builder33.server = server36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        builder33.setcallbackExecutor(executor42);
        builder27.sethttpExecutor(executor42);
        retrofit.RestAdapter.Builder builder45 = builder11.setExecutors(executor25, executor42);
        retrofit.RestAdapter.Builder builder46 = builder0.setExecutors(executor10, executor42);
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter8();
        builder46.converter = gsonConverter49;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter51 = builder46.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(gsonConverter49);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder9.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        builder9.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.Profiler profiler30 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server7, provider8, executor18, executor24, requestInterceptor26, (retrofit.converter.Converter) gsonConverter29, profiler30, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter36.getLogLevel();
        java.lang.String str39 = restAdapter36.getIDLE_THREAD_NAME();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter43 = builder42.converter;
        retrofit.ErrorHandler errorHandler44 = null;
        builder42.errorHandler = errorHandler44;
        retrofit.converter.Converter converter46 = builder42.converter;
        retrofit.client.Client.Provider provider47 = builder42.getclientProvider();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        builder42.sethttpExecutor(executor57);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        builder63.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = builder63.serializedObjectSupporter;
        retrofit.client.Client.Provider provider66 = null;
        builder63.setclientProvider(provider66);
        retrofit.RequestInterceptor requestInterceptor68 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        builder69.ensureSaneDefaults();
        java.util.concurrent.Executor executor71 = null;
        builder69.callbackExecutor = executor71;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response74 = serializedObjectSupporter73.deserializeObjectResponse8();
        java.lang.String str75 = serializedObjectSupporter73.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter73.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder77 = builder69.setConverter((retrofit.converter.Converter) gsonConverter76);
        retrofit.Profiler profiler78 = null;
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        builder79.ensureSaneDefaults();
        java.util.concurrent.Executor executor81 = null;
        builder79.callbackExecutor = executor81;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response84 = serializedObjectSupporter83.deserializeObjectResponse8();
        java.lang.String str85 = serializedObjectSupporter83.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter86 = serializedObjectSupporter83.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder87 = builder79.setConverter((retrofit.converter.Converter) gsonConverter86);
        retrofit.SerializedObjectSupporter serializedObjectSupporter88 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler89 = serializedObjectSupporter88.deserializeObjectErrorHandler1();
        builder87.errorHandler = errorHandler89;
        retrofit.RestAdapter.Log log91 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel92 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter93 = new retrofit.RestAdapter(server40, provider41, executor57, executor62, requestInterceptor68, (retrofit.converter.Converter) gsonConverter76, profiler78, errorHandler89, log91, logLevel92);
        restAdapter36.setLogLevel(logLevel92);
        retrofit.RestAdapter.LogLevel logLevel95 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter36.logLevel = logLevel95;
        retrofit.RestAdapter.LogLevel logLevel97 = restAdapter36.getLogLevel();
        retrofit.ErrorHandler errorHandler98 = restAdapter36.geterrorHandler();
        builder0.errorHandler = errorHandler98;
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Retrofit-Idle" + "'", str39, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(serializedObjectSupporter65);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(response74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "http://example.com/" + "'", str75, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(response84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "http://example.com/" + "'", str85, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(errorHandler89);
        org.junit.Assert.assertNotNull(log91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel95 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel95.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(errorHandler98);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response13 = serializedObjectSupporter12.deserializeObjectResponse8();
        java.lang.String str14 = serializedObjectSupporter12.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter12.deserializeObjectConverter4();
        java.lang.String str16 = serializedObjectSupporter12.deserializeObjectString3();
        retrofit.Server server17 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder18 = builder8.setServer(server17);
        retrofit.RestAdapter.Builder builder19 = builder0.setServer(server17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.Server server21 = builder20.server;
        retrofit.ErrorHandler errorHandler22 = null;
        builder20.errorHandler = errorHandler22;
        java.util.concurrent.Executor executor24 = null;
        builder20.sethttpExecutor(executor24);
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder27 = builder20.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder28 = builder19.setLogLevel(logLevel26);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(response13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.lang.String str54 = restAdapter53.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider55 = restAdapter53.clientProvider;
        retrofit.converter.Converter converter56 = restAdapter53.getconverter();
        retrofit.client.Client.Provider provider57 = restAdapter53.clientProvider;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(converter56);
        org.junit.Assert.assertNull(provider57);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.util.concurrent.Executor executor33 = restAdapter29.httpExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        java.lang.String str35 = restAdapter29.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-Idle" + "'", str35, "Retrofit-Idle");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.String str42 = serializedObjectSupporter38.deserializeObjectString10();
        java.lang.String str43 = serializedObjectSupporter38.deserializeObjectString6();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Forbidden" + "'", str42, "Forbidden");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://example.com/" + "'", str43, "http://example.com/");
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder0.setLogLevel(logLevel42);
        retrofit.RequestInterceptor requestInterceptor45 = builder44.requestInterceptor;
        java.util.concurrent.Executor executor46 = builder44.getcallbackExecutor();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNull(executor46);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor38 = restAdapter29.gethttpExecutor();
        retrofit.client.Request request39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request40 = restAdapter29.logAndReplaceRequest(request39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Response response7 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString9();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.Server server35 = restAdapter29.server;
        java.lang.String str36 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str37 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log38 = restAdapter29.log;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-" + "'", str36, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-" + "'", str37, "Retrofit-");
        org.junit.Assert.assertNotNull(log38);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.Class<?> wildcardClass44 = restAdapter29.getClass();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse7();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections2 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str45 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler46 = restAdapter29.profiler;
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter29.getLogLevel();
        retrofit.client.Request request48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request49 = restAdapter29.logAndReplaceRequest(request48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.converter.Converter converter2 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response4 = serializedObjectSupporter3.deserializeObjectResponse8();
        java.lang.String str5 = serializedObjectSupporter3.deserializeObjectString10();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter3.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder7 = builder0.setConverter((retrofit.converter.Converter) gsonConverter6);
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Forbidden" + "'", str5, "Forbidden");
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter6();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server8 = serializedObjectSupporter4.deserializeObjectServer1();
        builder0.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter11 = builder10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = builder10.serializedObjectSupporter;
        retrofit.RestAdapter.Log log13 = null;
        builder10.log = log13;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        builder10.logLevel = logLevel15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder20 = builder10.setRequestInterceptor(requestInterceptor19);
        builder0.requestInterceptor = requestInterceptor19;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.Class class42 = serializedObjectSupporter38.deserializeObjectClass1();
        retrofit.client.Response response43 = serializedObjectSupporter38.deserializeObjectResponse7();
        retrofit.client.Response response44 = serializedObjectSupporter38.deserializeObjectResponse4();
        retrofit.mime.TypedString typedString45 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertNotNull(typedString45);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList5 = response4.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.client.Response response8 = serializedObjectSupporter6.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput9 = response8.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response10 = new retrofit.client.Response((int) (byte) -1, "Retrofit-Idle", headerList5, typedInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(typedInput9);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.Server server11 = builder10.server;
        retrofit.RequestInterceptor requestInterceptor12 = null;
        builder10.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.Builder builder15 = builder10.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = null;
        builder16.errorHandler = errorHandler17;
        retrofit.RequestInterceptor requestInterceptor19 = builder16.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder21 = builder16.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        java.util.concurrent.Executor executor24 = builder22.callbackExecutor;
        builder21.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter27 = builder26.converter;
        retrofit.ErrorHandler errorHandler28 = null;
        builder26.errorHandler = errorHandler28;
        retrofit.converter.Converter converter30 = builder26.converter;
        retrofit.client.Client.Provider provider31 = builder26.getclientProvider();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler33 = null;
        builder32.errorHandler = errorHandler33;
        retrofit.Server server35 = null;
        builder32.server = server35;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Log log39 = null;
        builder37.log = log39;
        java.util.concurrent.Executor executor41 = builder37.getcallbackExecutor();
        builder32.setcallbackExecutor(executor41);
        builder26.sethttpExecutor(executor41);
        retrofit.RestAdapter.Builder builder44 = builder10.setExecutors(executor24, executor41);
        builder0.sethttpExecutor(executor41);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        java.util.concurrent.Executor executor63 = builder59.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter5();
        retrofit.Profiler profiler69 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler71 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean74 = logLevel73.log();
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server46, provider47, executor57, executor63, requestInterceptor65, (retrofit.converter.Converter) gsonConverter68, profiler69, errorHandler71, log72, logLevel73);
        retrofit.ErrorHandler errorHandler76 = restAdapter75.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter77.deserializeObjectConverter5();
        restAdapter75.serializedObjectSupporter = serializedObjectSupporter77;
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = restAdapter75.serializedObjectSupporter;
        retrofit.Profiler profiler82 = restAdapter75.getprofiler();
        retrofit.converter.Converter converter83 = restAdapter75.converter;
        retrofit.RestAdapter.Builder builder84 = builder0.setConverter(converter83);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(serializedObjectSupporter81);
        org.junit.Assert.assertNull(profiler82);
        org.junit.Assert.assertNotNull(converter83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput3 = response2.getBody();
        retrofit.mime.TypedInput typedInput4 = response2.body;
        java.lang.String str5 = response2.reason;
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(typedInput3);
        org.junit.Assert.assertNotNull(typedInput4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter35.deserializeObjectConverter6();
        retrofit.client.Response response37 = serializedObjectSupporter35.deserializeObjectResponse8();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(response37);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response10 = serializedObjectSupporter9.deserializeObjectResponse8();
        java.lang.String str11 = serializedObjectSupporter9.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter4();
        builder0.converter = gsonConverter12;
        retrofit.Server server14 = builder0.server;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(response10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Internal Server Error" + "'", str6, "Internal Server Error");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.ErrorHandler errorHandler33 = restAdapter29.geterrorHandler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(errorHandler33);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder4.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder9 = builder4.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = null;
        builder10.errorHandler = errorHandler11;
        java.util.concurrent.Executor executor13 = builder10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response15 = serializedObjectSupporter14.deserializeObjectResponse8();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter4();
        java.lang.String str18 = serializedObjectSupporter14.deserializeObjectString3();
        retrofit.Server server19 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder20 = builder10.setServer(server19);
        builder4.server = server19;
        retrofit.RestAdapter.Builder builder22 = builder0.setServer(server19);
        java.util.concurrent.Executor executor23 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(executor23);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.Server server6 = builder0.server;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder9.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        builder9.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.Profiler profiler30 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server7, provider8, executor18, executor24, requestInterceptor26, (retrofit.converter.Converter) gsonConverter29, profiler30, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter36.new RestHandler();
        retrofit.RestAdapter.Log log39 = restAdapter36.log;
        java.lang.String str40 = restAdapter36.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor41 = restAdapter36.gethttpExecutor();
        builder0.httpExecutor = executor41;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-" + "'", str40, "Retrofit-");
        org.junit.Assert.assertNotNull(executor41);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Server server36 = restAdapter29.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = restAdapter29.serializedObjectSupporter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = serializedObjectSupporter37.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(serializedObjectSupporter37);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.client.Client.Provider provider9 = builder0.clientProvider;
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(provider9);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.Profiler profiler2 = null;
        builder0.profiler = profiler2;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.Server server5 = builder4.server;
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder4.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder9 = builder4.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = null;
        builder10.errorHandler = errorHandler11;
        java.util.concurrent.Executor executor13 = builder10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response15 = serializedObjectSupporter14.deserializeObjectResponse8();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter4();
        java.lang.String str18 = serializedObjectSupporter14.deserializeObjectString3();
        retrofit.Server server19 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder20 = builder10.setServer(server19);
        builder4.server = server19;
        retrofit.RestAdapter.Builder builder22 = builder0.setServer(server19);
        java.lang.Class<?> wildcardClass23 = builder22.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(response15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        retrofit.RequestInterceptor requestInterceptor5 = null;
        builder0.requestInterceptor = requestInterceptor5;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder9.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        builder9.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.Profiler profiler30 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server7, provider8, executor18, executor24, requestInterceptor26, (retrofit.converter.Converter) gsonConverter29, profiler30, errorHandler32, log33, logLevel34);
        retrofit.Profiler profiler37 = restAdapter36.getprofiler();
        retrofit.Server server38 = restAdapter36.server;
        retrofit.converter.Converter converter39 = restAdapter36.converter;
        builder0.converter = converter39;
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNull(server38);
        org.junit.Assert.assertNotNull(converter39);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.lang.String str5 = response4.getReason();
        java.util.List<retrofit.client.Header> headerList6 = response4.headers;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder9.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        builder9.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.Profiler profiler30 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server7, provider8, executor18, executor24, requestInterceptor26, (retrofit.converter.Converter) gsonConverter29, profiler30, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        restAdapter36.serializedObjectSupporter = serializedObjectSupporter38;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter36.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.client.Response response46 = serializedObjectSupporter44.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput47 = response46.getBody();
        retrofit.mime.TypedInput typedInput48 = response46.body;
        retrofit.client.Response response50 = restAdapter36.logAndReplaceResponse("OK", response46, (long) 500);
        retrofit.mime.TypedInput typedInput51 = response50.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response52 = new retrofit.client.Response((int) (short) 100, "OK", headerList6, typedInput51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(response46);
        org.junit.Assert.assertNotNull(typedInput47);
        org.junit.Assert.assertNotNull(typedInput48);
        org.junit.Assert.assertNotNull(response50);
        org.junit.Assert.assertNotNull(typedInput51);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response9 = serializedObjectSupporter8.deserializeObjectResponse8();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter4();
        java.lang.String str12 = serializedObjectSupporter8.deserializeObjectString3();
        retrofit.Server server13 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server13);
        java.util.concurrent.Executor executor15 = builder14.gethttpExecutor();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler19 = null;
        builder18.errorHandler = errorHandler19;
        retrofit.Server server21 = null;
        builder18.server = server21;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.RestAdapter.Log log25 = null;
        builder23.log = log25;
        java.util.concurrent.Executor executor27 = builder23.getcallbackExecutor();
        builder18.setcallbackExecutor(executor27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        java.util.concurrent.Executor executor33 = builder29.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter5();
        retrofit.Profiler profiler39 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log42 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean44 = logLevel43.log();
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server16, provider17, executor27, executor33, requestInterceptor35, (retrofit.converter.Converter) gsonConverter38, profiler39, errorHandler41, log42, logLevel43);
        retrofit.Server server46 = restAdapter45.server;
        retrofit.ErrorHandler errorHandler47 = restAdapter45.errorHandler;
        java.lang.String str48 = restAdapter45.getTHREAD_PREFIX();
        retrofit.ErrorHandler errorHandler49 = restAdapter45.errorHandler;
        retrofit.RestAdapter.Builder builder50 = builder14.setErrorHandler(errorHandler49);
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Retrofit-" + "'", str48, "Retrofit-");
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.client.Client.Provider provider32 = restAdapter29.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.client.Response response36 = serializedObjectSupporter34.deserializeObjectResponse2();
        int int37 = response36.getStatus();
        retrofit.client.Response response39 = restAdapter29.logAndReplaceResponse("http://example.com/", response36, (long) '#');
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter41 = builder40.converter;
        retrofit.ErrorHandler errorHandler42 = null;
        builder40.errorHandler = errorHandler42;
        retrofit.converter.Converter converter44 = builder40.converter;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel46 = builder45.logLevel;
        builder40.logLevel = logLevel46;
        boolean boolean48 = logLevel46.log();
        restAdapter29.setLogLevel(logLevel46);
        java.util.concurrent.Executor executor50 = restAdapter29.gethttpExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 200 + "'", int37 == 200);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(executor50);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = response2.getReason();
        java.util.List<retrofit.client.Header> headerList4 = response2.headers;
        java.util.List<retrofit.client.Header> headerList5 = response2.getHeaders();
        java.lang.String str6 = response2.reason;
        retrofit.mime.TypedInput typedInput7 = response2.body;
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OK" + "'", str3, "OK");
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
        org.junit.Assert.assertNotNull(typedInput7);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response33 = serializedObjectSupporter32.deserializeObjectResponse8();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.client.Response response38 = serializedObjectSupporter32.deserializeObjectResponse2();
        int int39 = response38.getStatus();
        java.lang.String str40 = response38.reason;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(response38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 200 + "'", int39 == 200);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OK" + "'", str40, "OK");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.ErrorHandler errorHandler9 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder0.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response12 = serializedObjectSupporter11.deserializeObjectResponse7();
        retrofit.Server server13 = serializedObjectSupporter11.deserializeObjectServer1();
        builder0.server = server13;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertNotNull(server13);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str45 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler46 = restAdapter29.profiler;
        retrofit.ErrorHandler errorHandler47 = restAdapter29.errorHandler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler46);
        org.junit.Assert.assertNotNull(errorHandler47);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        builder0.errorHandler = errorHandler39;
        retrofit.RestAdapter.Log log41 = builder0.log;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter42 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNull(log41);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response33 = serializedObjectSupporter32.deserializeObjectResponse8();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        java.lang.String str38 = serializedObjectSupporter32.deserializeObjectString5();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter7.deserializeObjectRequestInterceptor1();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter7.deserializeObjectRequestInterceptor1();
        builder0.requestInterceptor = requestInterceptor9;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Forbidden" + "'", str3, "Forbidden");
        org.junit.Assert.assertNotNull(typedString4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        retrofit.RestAdapter.Log log0 = retrofit.RestAdapter.Log.NONE;
        log0.log("Forbidden");
        org.junit.Assert.assertNotNull(log0);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse7();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = response2.getReason();
        java.util.List<retrofit.client.Header> headerList4 = response2.headers;
        java.util.List<retrofit.client.Header> headerList5 = response2.getHeaders();
        java.lang.String str6 = response2.reason;
        java.util.List<retrofit.client.Header> headerList7 = response2.headers;
        int int8 = response2.status;
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OK" + "'", str3, "OK");
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 200 + "'", int8 == 200);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.client.Client.Provider provider9 = builder0.getclientProvider();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider9);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.setcallbackExecutor(executor8);
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        java.util.concurrent.Executor executor11 = builder7.gethttpExecutor();
        retrofit.RestAdapter.Log log12 = builder7.log;
        retrofit.client.Client.Provider provider13 = null;
        builder7.clientProvider = provider13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = null;
        builder15.errorHandler = errorHandler16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = builder15.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder20 = builder15.setServer("hi!");
        retrofit.RestAdapter restAdapter21 = builder20.build();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = null;
        builder24.errorHandler = errorHandler25;
        retrofit.Server server27 = null;
        builder24.server = server27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        java.util.concurrent.Executor executor33 = builder29.getcallbackExecutor();
        builder24.setcallbackExecutor(executor33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        builder35.ensureSaneDefaults();
        retrofit.RestAdapter.Log log37 = null;
        builder35.log = log37;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.Profiler profiler45 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter46.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log48 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean50 = logLevel49.log();
        retrofit.RestAdapter restAdapter51 = new retrofit.RestAdapter(server22, provider23, executor33, executor39, requestInterceptor41, (retrofit.converter.Converter) gsonConverter44, profiler45, errorHandler47, log48, logLevel49);
        retrofit.ErrorHandler errorHandler52 = restAdapter51.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel53 = restAdapter51.logLevel;
        retrofit.RestAdapter.Log log54 = restAdapter51.log;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter51.getLogLevel();
        restAdapter21.logLevel = logLevel55;
        retrofit.converter.Converter converter57 = restAdapter21.converter;
        retrofit.converter.Converter converter58 = restAdapter21.getconverter();
        retrofit.client.Client.Provider provider59 = restAdapter21.getclientProvider();
        builder7.clientProvider = provider59;
        builder0.setclientProvider(provider59);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(serializedObjectSupporter18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(log48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter57);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(provider59);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.client.Client client8 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder9 = builder0.setClient(client8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.lang.String str54 = restAdapter53.getTHREAD_PREFIX();
        retrofit.Profiler profiler55 = restAdapter53.profiler;
        retrofit.client.Client.Provider provider56 = restAdapter53.getclientProvider();
        retrofit.ErrorHandler errorHandler57 = restAdapter53.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter53.getLogLevel();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNull(profiler55);
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNotNull(errorHandler57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.httpExecutor;
        builder0.httpExecutor = executor38;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter40 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.client.Client.Provider provider9 = null;
        builder7.setclientProvider(provider9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder7.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.Server server14 = builder0.server;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.Server server33 = restAdapter29.server;
        java.util.concurrent.Executor executor34 = restAdapter29.gethttpExecutor();
        retrofit.converter.Converter converter35 = restAdapter29.converter;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(converter35);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.util.List<retrofit.client.Header> headerList6 = response5.headers;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        java.util.concurrent.Executor executor37 = restAdapter29.httpExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RestAdapter.RestHandler restHandler34 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.client.Response response37 = serializedObjectSupporter35.deserializeObjectResponse2();
        restHandler34.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter35.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter40 = serializedObjectSupporter35.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(response37);
        org.junit.Assert.assertNotNull(gsonConverter39);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        java.util.concurrent.Executor executor8 = builder5.gethttpExecutor();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor11 = builder9.callbackExecutor;
        builder5.setcallbackExecutor(executor11);
        builder0.callbackExecutor = executor11;
        retrofit.converter.Converter converter14 = builder0.converter;
        retrofit.client.Client.Provider provider15 = null;
        builder0.setclientProvider(provider15);
        retrofit.ErrorHandler errorHandler17 = builder0.errorHandler;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = response2.getReason();
        int int4 = response2.getStatus();
        java.lang.String str5 = response2.reason;
        java.lang.String str6 = response2.reason;
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "OK" + "'", str3, "OK");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 200 + "'", int4 == 200);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder0.setLogLevel(logLevel42);
        retrofit.Server server45 = builder44.server;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        java.util.concurrent.Executor executor12 = builder9.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response14 = serializedObjectSupporter13.deserializeObjectResponse8();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter4();
        java.lang.String str17 = serializedObjectSupporter13.deserializeObjectString3();
        retrofit.Server server18 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder19 = builder9.setServer(server18);
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = null;
        builder22.errorHandler = errorHandler23;
        retrofit.Server server25 = null;
        builder22.server = server25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        java.util.concurrent.Executor executor31 = builder27.getcallbackExecutor();
        builder22.setcallbackExecutor(executor31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        builder33.ensureSaneDefaults();
        retrofit.RestAdapter.Log log35 = null;
        builder33.log = log35;
        java.util.concurrent.Executor executor37 = builder33.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter5();
        retrofit.Profiler profiler43 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean48 = logLevel47.log();
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server20, provider21, executor31, executor37, requestInterceptor39, (retrofit.converter.Converter) gsonConverter42, profiler43, errorHandler45, log46, logLevel47);
        retrofit.Server server50 = restAdapter49.server;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter49.logLevel = logLevel51;
        retrofit.RestAdapter.Builder builder53 = builder9.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = builder0.setLogLevel(logLevel51);
        retrofit.client.Client.Provider provider55 = builder0.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(server18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response33 = serializedObjectSupporter32.deserializeObjectResponse8();
        java.lang.String str34 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        java.lang.String str36 = serializedObjectSupporter32.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        java.lang.String str38 = serializedObjectSupporter32.deserializeObjectString3();
        java.lang.String str39 = serializedObjectSupporter32.deserializeObjectString13();
        java.lang.String str40 = serializedObjectSupporter32.deserializeObjectString9();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        java.lang.String str33 = restAdapter29.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor34 = restAdapter29.gethttpExecutor();
        retrofit.Profiler profiler35 = restAdapter29.profiler;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNull(profiler35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Profiler profiler30 = restAdapter29.getprofiler();
        retrofit.Server server31 = restAdapter29.server;
        retrofit.converter.Converter converter32 = restAdapter29.converter;
        retrofit.converter.Converter converter33 = restAdapter29.converter;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNotNull(converter32);
        org.junit.Assert.assertNotNull(converter33);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.Server server32 = restAdapter29.server;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter29.requestInterceptor;
        java.util.concurrent.Executor executor34 = restAdapter29.getcallbackExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(executor34);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.Server server32 = restAdapter29.server;
        retrofit.RestAdapter.Log log33 = restAdapter29.log;
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(profiler34);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.RestAdapter.Log log34 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter29.logLevel;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        java.util.concurrent.Executor executor8 = builder5.gethttpExecutor();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        java.util.concurrent.Executor executor11 = builder9.callbackExecutor;
        builder5.setcallbackExecutor(executor11);
        builder0.callbackExecutor = executor11;
        retrofit.converter.Converter converter14 = builder0.converter;
        retrofit.client.Client.Provider provider15 = null;
        builder0.setclientProvider(provider15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.Server server18 = builder17.server;
        retrofit.ErrorHandler errorHandler19 = null;
        builder17.errorHandler = errorHandler19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder23 = builder17.setRequestInterceptor(requestInterceptor22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter6();
        java.lang.String str27 = serializedObjectSupporter24.deserializeObjectString3();
        retrofit.Server server28 = serializedObjectSupporter24.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder23.setServer(server28);
        retrofit.RestAdapter.Builder builder30 = builder0.setServer(server28);
        retrofit.converter.Converter converter31 = builder30.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "http://example.com/" + "'", str27, "http://example.com/");
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter31);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList4 = response3.getHeaders();
        java.lang.String str5 = response3.reason;
        retrofit.mime.TypedInput typedInput6 = response3.getBody();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(typedInput6);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder0.setLogLevel(logLevel42);
        java.util.concurrent.Executor executor45 = builder44.httpExecutor;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor25);
        java.util.concurrent.Executor executor37 = builder36.getcallbackExecutor();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(executor37);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.setcallbackExecutor(executor10);
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        java.util.concurrent.Executor executor13 = builder9.gethttpExecutor();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        java.util.concurrent.Executor executor16 = builder14.callbackExecutor;
        builder9.setcallbackExecutor(executor16);
        builder0.callbackExecutor = executor16;
        retrofit.Profiler profiler19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder20 = builder0.setProfiler(profiler19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(executor16);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.lang.Class class42 = serializedObjectSupporter38.deserializeObjectClass1();
        retrofit.client.Response response43 = serializedObjectSupporter38.deserializeObjectResponse7();
        retrofit.client.Response response44 = serializedObjectSupporter38.deserializeObjectResponse4();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = serializedObjectSupporter38.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNotNull(class42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNotNull(response44);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.Server server8 = null;
        builder5.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        java.util.concurrent.Executor executor14 = builder10.getcallbackExecutor();
        builder5.setcallbackExecutor(executor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.Profiler profiler26 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean31 = logLevel30.log();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server3, provider4, executor14, executor20, requestInterceptor22, (retrofit.converter.Converter) gsonConverter25, profiler26, errorHandler28, log29, logLevel30);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        retrofit.client.Client.Provider provider35 = restAdapter32.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter32.getrequestInterceptor();
        builder0.requestInterceptor = requestInterceptor36;
        java.util.concurrent.Executor executor38 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = null;
        builder39.errorHandler = errorHandler40;
        java.util.concurrent.Executor executor42 = builder39.gethttpExecutor();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        java.util.concurrent.Executor executor45 = builder43.callbackExecutor;
        builder39.setcallbackExecutor(executor45);
        java.util.concurrent.Executor executor47 = builder39.callbackExecutor;
        builder0.setcallbackExecutor(executor47);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(executor47);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString8();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(typedString5);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        builder7.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = builder7.converter;
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        builder7.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder28.serializedObjectSupporter;
        retrofit.client.Client.Provider provider31 = null;
        builder28.setclientProvider(provider31);
        retrofit.RequestInterceptor requestInterceptor33 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder42 = builder34.setConverter((retrofit.converter.Converter) gsonConverter41);
        retrofit.Profiler profiler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response49 = serializedObjectSupporter48.deserializeObjectResponse8();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder52 = builder44.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder52.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server5, provider6, executor22, executor27, requestInterceptor33, (retrofit.converter.Converter) gsonConverter41, profiler43, errorHandler54, log56, logLevel57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = null;
        builder61.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        builder61.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        builder61.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter79.deserializeObjectConverter5();
        retrofit.Profiler profiler82 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter83.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server59, provider60, executor70, executor76, requestInterceptor78, (retrofit.converter.Converter) gsonConverter81, profiler82, errorHandler84, log85, logLevel86);
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.getclientProvider();
        retrofit.client.Client.Provider provider93 = restAdapter88.clientProvider;
        java.util.concurrent.Executor executor94 = restAdapter88.httpExecutor;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor27, executor94);
        retrofit.Profiler profiler96 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder97 = builder95.setProfiler(profiler96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(provider93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter29.requestInterceptor;
        retrofit.Server server38 = restAdapter29.getserver();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNull(server38);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.Server server32 = restAdapter29.server;
        retrofit.Profiler profiler33 = restAdapter29.getprofiler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(profiler33);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.util.concurrent.Executor executor44 = restAdapter29.httpExecutor;
        retrofit.client.Client.Provider provider45 = restAdapter29.getclientProvider();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNull(provider45);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler10;
        java.util.concurrent.Executor executor12 = builder8.getcallbackExecutor();
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.client.Client.Provider provider44 = restAdapter40.getclientProvider();
        retrofit.RestAdapter.Log log45 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        builder0.sethttpExecutor(executor57);
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        java.lang.String str62 = serializedObjectSupporter60.deserializeObjectString7();
        java.lang.Class class63 = serializedObjectSupporter60.deserializeObjectClass1();
        builder0.serializedObjectSupporter = serializedObjectSupporter60;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        java.util.concurrent.Executor executor69 = builder65.getcallbackExecutor();
        builder0.httpExecutor = executor69;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "http://example.com/" + "'", str62, "http://example.com/");
        org.junit.Assert.assertNotNull(class63);
        org.junit.Assert.assertNotNull(executor69);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        java.lang.String str31 = restAdapter29.getTHREAD_PREFIX();
        retrofit.Profiler profiler32 = restAdapter29.profiler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-" + "'", str31, "Retrofit-");
        org.junit.Assert.assertNull(profiler32);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter35.logLevel;
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        builder5.log = log38;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        log40.log("Internal Server Error");
        retrofit.RestAdapter.Builder builder43 = builder5.setLog(log40);
        log40.log("OK");
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString11();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor45 = restAdapter29.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter29.new RestHandler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertNotNull(executor45);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder6.serializedObjectSupporter;
        retrofit.client.Client.Provider provider9 = null;
        builder6.setclientProvider(provider9);
        retrofit.RequestInterceptor requestInterceptor11 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.client.Response response16 = serializedObjectSupporter13.deserializeObjectResponse2();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter13.deserializeObjectConverter5();
        builder12.converter = gsonConverter17;
        builder12.ensureSaneDefaults();
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertNotNull(gsonConverter17);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        builder0.requestInterceptor = requestInterceptor4;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(errorHandler6);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response(10, "http://example.com/", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Internal Server Error" + "'", str6, "Internal Server Error");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.lang.String str54 = restAdapter53.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider55 = restAdapter53.clientProvider;
        retrofit.Profiler profiler56 = restAdapter53.profiler;
        retrofit.Profiler profiler57 = restAdapter53.getprofiler();
        retrofit.converter.Converter converter58 = restAdapter53.converter;
        java.util.concurrent.Executor executor59 = restAdapter53.httpExecutor;
        retrofit.Profiler profiler60 = restAdapter53.getprofiler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor63 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter64 = serializedObjectSupporter62.deserializeObjectConverter5();
        retrofit.client.Response response65 = serializedObjectSupporter62.deserializeObjectResponse2();
        retrofit.client.Response response67 = restAdapter53.logAndReplaceResponse("", response65, (long) 200);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNotNull(converter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(gsonConverter64);
        org.junit.Assert.assertNotNull(response65);
        org.junit.Assert.assertNotNull(response67);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Log log7 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder8 = builder0.setLog(log7);
        java.util.concurrent.Executor executor9 = builder8.httpExecutor;
        retrofit.Profiler profiler10 = null;
        builder8.profiler = profiler10;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(log7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.Server server7 = builder6.server;
        retrofit.ErrorHandler errorHandler8 = null;
        builder6.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = null;
        builder6.sethttpExecutor(executor10);
        retrofit.client.Client.Provider provider12 = null;
        builder6.setclientProvider(provider12);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder16 = builder6.setRequestInterceptor(requestInterceptor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = builder17.serializedObjectSupporter;
        java.util.concurrent.Executor executor20 = null;
        builder17.sethttpExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = null;
        builder22.errorHandler = errorHandler23;
        retrofit.Server server25 = null;
        builder22.server = server25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        java.util.concurrent.Executor executor31 = builder27.getcallbackExecutor();
        builder22.setcallbackExecutor(executor31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.setcallbackExecutor(executor34);
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        java.util.concurrent.Executor executor37 = builder33.gethttpExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        java.util.concurrent.Executor executor40 = builder38.callbackExecutor;
        builder33.setcallbackExecutor(executor40);
        retrofit.RestAdapter.Builder builder42 = builder17.setExecutors(executor31, executor40);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = null;
        builder43.errorHandler = errorHandler44;
        retrofit.RequestInterceptor requestInterceptor46 = builder43.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder48 = builder43.setLogLevel(logLevel47);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        java.util.concurrent.Executor executor51 = builder49.callbackExecutor;
        builder48.callbackExecutor = executor51;
        retrofit.RestAdapter.Builder builder53 = builder16.setExecutors(executor31, executor51);
        builder0.setcallbackExecutor(executor51);
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler58 = null;
        builder57.errorHandler = errorHandler58;
        retrofit.Server server60 = null;
        builder57.server = server60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        retrofit.RestAdapter.Log log64 = null;
        builder62.log = log64;
        java.util.concurrent.Executor executor66 = builder62.getcallbackExecutor();
        builder57.setcallbackExecutor(executor66);
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.RestAdapter.Log log70 = null;
        builder68.log = log70;
        java.util.concurrent.Executor executor72 = builder68.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor74 = serializedObjectSupporter73.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor76 = serializedObjectSupporter75.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter77 = serializedObjectSupporter75.deserializeObjectConverter5();
        retrofit.Profiler profiler78 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler80 = serializedObjectSupporter79.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log81 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean83 = logLevel82.log();
        retrofit.RestAdapter restAdapter84 = new retrofit.RestAdapter(server55, provider56, executor66, executor72, requestInterceptor74, (retrofit.converter.Converter) gsonConverter77, profiler78, errorHandler80, log81, logLevel82);
        retrofit.ErrorHandler errorHandler85 = restAdapter84.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter86 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor87 = serializedObjectSupporter86.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter88 = serializedObjectSupporter86.deserializeObjectConverter5();
        restAdapter84.serializedObjectSupporter = serializedObjectSupporter86;
        retrofit.RestAdapter.Log log90 = restAdapter84.log;
        retrofit.converter.Converter converter91 = restAdapter84.converter;
        retrofit.RequestInterceptor requestInterceptor92 = restAdapter84.requestInterceptor;
        retrofit.RestAdapter.Builder builder93 = builder0.setRequestInterceptor(requestInterceptor92);
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(executor72);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(requestInterceptor76);
        org.junit.Assert.assertNotNull(gsonConverter77);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(requestInterceptor87);
        org.junit.Assert.assertNotNull(gsonConverter88);
        org.junit.Assert.assertNotNull(log90);
        org.junit.Assert.assertNotNull(converter91);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response9 = serializedObjectSupporter8.deserializeObjectResponse8();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter4();
        java.lang.String str12 = serializedObjectSupporter8.deserializeObjectString3();
        retrofit.Server server13 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder0.setServer(server13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.setcallbackExecutor(executor16);
        retrofit.client.Client.Provider provider18 = builder15.clientProvider;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter20 = builder19.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = builder19.serializedObjectSupporter;
        java.util.concurrent.Executor executor22 = null;
        builder19.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler25 = null;
        builder24.errorHandler = errorHandler25;
        retrofit.Server server27 = null;
        builder24.server = server27;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        retrofit.RestAdapter.Log log31 = null;
        builder29.log = log31;
        java.util.concurrent.Executor executor33 = builder29.getcallbackExecutor();
        builder24.setcallbackExecutor(executor33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.setcallbackExecutor(executor36);
        retrofit.client.Client.Provider provider38 = builder35.clientProvider;
        java.util.concurrent.Executor executor39 = builder35.gethttpExecutor();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        builder40.ensureSaneDefaults();
        java.util.concurrent.Executor executor42 = builder40.callbackExecutor;
        builder35.setcallbackExecutor(executor42);
        retrofit.RestAdapter.Builder builder44 = builder19.setExecutors(executor33, executor42);
        builder15.setcallbackExecutor(executor42);
        builder0.callbackExecutor = executor42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler48 = serializedObjectSupporter47.deserializeObjectErrorHandler1();
        retrofit.client.Response response49 = serializedObjectSupporter47.deserializeObjectResponse2();
        builder0.serializedObjectSupporter = serializedObjectSupporter47;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter51 = serializedObjectSupporter47.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(serializedObjectSupporter21);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(response49);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        builder7.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = builder7.converter;
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        builder7.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder28.serializedObjectSupporter;
        retrofit.client.Client.Provider provider31 = null;
        builder28.setclientProvider(provider31);
        retrofit.RequestInterceptor requestInterceptor33 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder42 = builder34.setConverter((retrofit.converter.Converter) gsonConverter41);
        retrofit.Profiler profiler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response49 = serializedObjectSupporter48.deserializeObjectResponse8();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder52 = builder44.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder52.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server5, provider6, executor22, executor27, requestInterceptor33, (retrofit.converter.Converter) gsonConverter41, profiler43, errorHandler54, log56, logLevel57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = null;
        builder61.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        builder61.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        builder61.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter79.deserializeObjectConverter5();
        retrofit.Profiler profiler82 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter83.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server59, provider60, executor70, executor76, requestInterceptor78, (retrofit.converter.Converter) gsonConverter81, profiler82, errorHandler84, log85, logLevel86);
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.getclientProvider();
        retrofit.client.Client.Provider provider93 = restAdapter88.clientProvider;
        java.util.concurrent.Executor executor94 = restAdapter88.httpExecutor;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor27, executor94);
        builder95.ensureSaneDefaults();
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(provider93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        builder0.logLevel = logLevel6;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.client.Response response39 = serializedObjectSupporter37.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput40 = response39.getBody();
        retrofit.mime.TypedInput typedInput41 = response39.body;
        retrofit.client.Response response43 = restAdapter29.logAndReplaceResponse("OK", response39, (long) 500);
        int int44 = response43.getStatus();
        java.util.List<retrofit.client.Header> headerList45 = response43.headers;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertNotNull(typedInput40);
        org.junit.Assert.assertNotNull(typedInput41);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 200 + "'", int44 == 200);
        org.junit.Assert.assertNotNull(headerList45);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.ErrorHandler errorHandler9 = null;
        builder7.errorHandler = errorHandler9;
        retrofit.converter.Converter converter11 = builder7.converter;
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        builder7.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        java.util.concurrent.Executor executor27 = builder25.callbackExecutor;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder28.serializedObjectSupporter;
        retrofit.client.Client.Provider provider31 = null;
        builder28.setclientProvider(provider31);
        retrofit.RequestInterceptor requestInterceptor33 = builder28.requestInterceptor;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        java.util.concurrent.Executor executor36 = null;
        builder34.callbackExecutor = executor36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder42 = builder34.setConverter((retrofit.converter.Converter) gsonConverter41);
        retrofit.Profiler profiler43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        java.util.concurrent.Executor executor46 = null;
        builder44.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response49 = serializedObjectSupporter48.deserializeObjectResponse8();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder52 = builder44.setConverter((retrofit.converter.Converter) gsonConverter51);
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder52.errorHandler = errorHandler54;
        retrofit.RestAdapter.Log log56 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server5, provider6, executor22, executor27, requestInterceptor33, (retrofit.converter.Converter) gsonConverter41, profiler43, errorHandler54, log56, logLevel57);
        retrofit.Server server59 = null;
        retrofit.client.Client.Provider provider60 = null;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler62 = null;
        builder61.errorHandler = errorHandler62;
        retrofit.Server server64 = null;
        builder61.server = server64;
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        builder66.ensureSaneDefaults();
        retrofit.RestAdapter.Log log68 = null;
        builder66.log = log68;
        java.util.concurrent.Executor executor70 = builder66.getcallbackExecutor();
        builder61.setcallbackExecutor(executor70);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        retrofit.RestAdapter.Log log74 = null;
        builder72.log = log74;
        java.util.concurrent.Executor executor76 = builder72.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter79.deserializeObjectConverter5();
        retrofit.Profiler profiler82 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter83 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter83.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log85 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel86 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean87 = logLevel86.log();
        retrofit.RestAdapter restAdapter88 = new retrofit.RestAdapter(server59, provider60, executor70, executor76, requestInterceptor78, (retrofit.converter.Converter) gsonConverter81, profiler82, errorHandler84, log85, logLevel86);
        retrofit.Server server89 = restAdapter88.server;
        retrofit.RestAdapter.LogLevel logLevel90 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter88.logLevel = logLevel90;
        retrofit.client.Client.Provider provider92 = restAdapter88.getclientProvider();
        retrofit.client.Client.Provider provider93 = restAdapter88.clientProvider;
        java.util.concurrent.Executor executor94 = restAdapter88.httpExecutor;
        retrofit.RestAdapter.Builder builder95 = builder0.setExecutors(executor27, executor94);
        java.util.concurrent.Executor executor96 = builder95.gethttpExecutor();
        retrofit.ErrorHandler errorHandler97 = builder95.errorHandler;
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log56);
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertTrue("'" + logLevel86 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel86.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(server89);
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider92);
        org.junit.Assert.assertNull(provider93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(errorHandler97);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        java.util.concurrent.Executor executor6 = builder0.httpExecutor;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.ErrorHandler errorHandler11 = null;
        builder9.errorHandler = errorHandler11;
        retrofit.converter.Converter converter13 = builder9.converter;
        retrofit.client.Client.Provider provider14 = builder9.getclientProvider();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = null;
        builder15.errorHandler = errorHandler16;
        retrofit.Server server18 = null;
        builder15.server = server18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        builder15.setcallbackExecutor(executor24);
        builder9.sethttpExecutor(executor24);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        java.util.concurrent.Executor executor29 = builder27.callbackExecutor;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        builder30.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = builder30.serializedObjectSupporter;
        retrofit.client.Client.Provider provider33 = null;
        builder30.setclientProvider(provider33);
        retrofit.RequestInterceptor requestInterceptor35 = builder30.requestInterceptor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        java.util.concurrent.Executor executor38 = null;
        builder36.callbackExecutor = executor38;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response41 = serializedObjectSupporter40.deserializeObjectResponse8();
        java.lang.String str42 = serializedObjectSupporter40.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter40.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder44 = builder36.setConverter((retrofit.converter.Converter) gsonConverter43);
        retrofit.Profiler profiler45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        builder46.ensureSaneDefaults();
        java.util.concurrent.Executor executor48 = null;
        builder46.callbackExecutor = executor48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response51 = serializedObjectSupporter50.deserializeObjectResponse8();
        java.lang.String str52 = serializedObjectSupporter50.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter50.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder54 = builder46.setConverter((retrofit.converter.Converter) gsonConverter53);
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter55.deserializeObjectErrorHandler1();
        builder54.errorHandler = errorHandler56;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server7, provider8, executor24, executor29, requestInterceptor35, (retrofit.converter.Converter) gsonConverter43, profiler45, errorHandler56, log58, logLevel59);
        retrofit.RestAdapter.Builder builder61 = builder0.setLog(log58);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter62 = builder61.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(serializedObjectSupporter32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(response41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://example.com/" + "'", str42, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(response51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "http://example.com/" + "'", str52, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-Idle" + "'", str5, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel9 = builder8.logLevel;
        retrofit.ErrorHandler errorHandler10 = null;
        builder8.errorHandler = errorHandler10;
        retrofit.RequestInterceptor requestInterceptor12 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.Server server14 = builder13.server;
        retrofit.ErrorHandler errorHandler15 = null;
        builder13.errorHandler = errorHandler15;
        java.util.concurrent.Executor executor17 = null;
        builder13.sethttpExecutor(executor17);
        java.util.concurrent.Executor executor19 = builder13.httpExecutor;
        retrofit.Profiler profiler20 = null;
        builder13.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.setcallbackExecutor(executor23);
        retrofit.client.Client.Provider provider25 = builder22.clientProvider;
        java.util.concurrent.Executor executor26 = builder22.gethttpExecutor();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        java.util.concurrent.Executor executor29 = builder27.callbackExecutor;
        builder22.setcallbackExecutor(executor29);
        builder13.callbackExecutor = executor29;
        builder8.sethttpExecutor(executor29);
        builder0.setcallbackExecutor(executor29);
        retrofit.RequestInterceptor requestInterceptor34 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNull(requestInterceptor34);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        builder0.ensureSaneDefaults();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Server server10 = null;
        builder7.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        java.util.concurrent.Executor executor16 = builder12.getcallbackExecutor();
        builder7.setcallbackExecutor(executor16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.Profiler profiler28 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean33 = logLevel32.log();
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server5, provider6, executor16, executor22, requestInterceptor24, (retrofit.converter.Converter) gsonConverter27, profiler28, errorHandler30, log31, logLevel32);
        retrofit.Server server35 = restAdapter34.server;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter34.logLevel = logLevel36;
        java.lang.String str38 = restAdapter34.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor39 = restAdapter34.gethttpExecutor();
        retrofit.RequestInterceptor requestInterceptor40 = restAdapter34.requestInterceptor;
        builder0.requestInterceptor = requestInterceptor40;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Retrofit-Idle" + "'", str38, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor40);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections7 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-Idle" + "'", str5, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.RestAdapter.LogLevel logLevel7 = builder6.logLevel;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = builder6.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Internal Server Error" + "'", str4, "Internal Server Error");
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder0.setLogLevel(logLevel42);
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter48 = builder47.converter;
        retrofit.ErrorHandler errorHandler49 = null;
        builder47.errorHandler = errorHandler49;
        retrofit.converter.Converter converter51 = builder47.converter;
        retrofit.client.Client.Provider provider52 = builder47.getclientProvider();
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler54 = null;
        builder53.errorHandler = errorHandler54;
        retrofit.Server server56 = null;
        builder53.server = server56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        builder58.ensureSaneDefaults();
        retrofit.RestAdapter.Log log60 = null;
        builder58.log = log60;
        java.util.concurrent.Executor executor62 = builder58.getcallbackExecutor();
        builder53.setcallbackExecutor(executor62);
        builder47.sethttpExecutor(executor62);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        java.util.concurrent.Executor executor67 = builder65.callbackExecutor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        builder68.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = builder68.serializedObjectSupporter;
        retrofit.client.Client.Provider provider71 = null;
        builder68.setclientProvider(provider71);
        retrofit.RequestInterceptor requestInterceptor73 = builder68.requestInterceptor;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        builder74.ensureSaneDefaults();
        java.util.concurrent.Executor executor76 = null;
        builder74.callbackExecutor = executor76;
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response79 = serializedObjectSupporter78.deserializeObjectResponse8();
        java.lang.String str80 = serializedObjectSupporter78.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter78.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder82 = builder74.setConverter((retrofit.converter.Converter) gsonConverter81);
        retrofit.Profiler profiler83 = null;
        retrofit.RestAdapter.Builder builder84 = new retrofit.RestAdapter.Builder();
        builder84.ensureSaneDefaults();
        java.util.concurrent.Executor executor86 = null;
        builder84.callbackExecutor = executor86;
        retrofit.SerializedObjectSupporter serializedObjectSupporter88 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response89 = serializedObjectSupporter88.deserializeObjectResponse8();
        java.lang.String str90 = serializedObjectSupporter88.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter91 = serializedObjectSupporter88.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder92 = builder84.setConverter((retrofit.converter.Converter) gsonConverter91);
        retrofit.SerializedObjectSupporter serializedObjectSupporter93 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler94 = serializedObjectSupporter93.deserializeObjectErrorHandler1();
        builder92.errorHandler = errorHandler94;
        retrofit.RestAdapter.Log log96 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel97 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter98 = new retrofit.RestAdapter(server45, provider46, executor62, executor67, requestInterceptor73, (retrofit.converter.Converter) gsonConverter81, profiler83, errorHandler94, log96, logLevel97);
        builder0.errorHandler = errorHandler94;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNull(serializedObjectSupporter70);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(response79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "http://example.com/" + "'", str80, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(response89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "http://example.com/" + "'", str90, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(errorHandler94);
        org.junit.Assert.assertNotNull(log96);
        org.junit.Assert.assertTrue("'" + logLevel97 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel97.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        java.util.concurrent.Executor executor9 = builder5.getcallbackExecutor();
        builder0.setcallbackExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNull(provider11);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-");
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter35.logLevel;
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        builder5.log = log38;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder41 = builder5.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        retrofit.Server server32 = restAdapter29.server;
        java.util.concurrent.Executor executor33 = restAdapter29.httpExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log41);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = null;
        builder45.errorHandler = errorHandler46;
        retrofit.Server server48 = null;
        builder45.server = server48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        java.util.concurrent.Executor executor54 = builder50.getcallbackExecutor();
        builder45.setcallbackExecutor(executor54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        java.util.concurrent.Executor executor60 = builder56.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.Profiler profiler66 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler68 = serializedObjectSupporter67.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server43, provider44, executor54, executor60, requestInterceptor62, (retrofit.converter.Converter) gsonConverter65, profiler66, errorHandler68, log69, logLevel70);
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter74 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor75 = serializedObjectSupporter74.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter74.deserializeObjectConverter5();
        restAdapter72.serializedObjectSupporter = serializedObjectSupporter74;
        retrofit.RestAdapter.Log log78 = restAdapter72.log;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter72.logLevel;
        java.lang.String str80 = restAdapter72.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor81 = restAdapter72.requestInterceptor;
        builder42.requestInterceptor = requestInterceptor81;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Retrofit-Idle" + "'", str80, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor81);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = restHandler37.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(serializedObjectSupporter38);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Internal Server Error" + "'", str5, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        java.lang.String str36 = restAdapter29.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor37 = restAdapter29.callbackExecutor;
        java.lang.String str38 = restAdapter29.getTHREAD_PREFIX();
        retrofit.Server server39 = restAdapter29.getserver();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-Idle" + "'", str36, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Retrofit-" + "'", str38, "Retrofit-");
        org.junit.Assert.assertNull(server39);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections3 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        java.util.concurrent.Executor executor37 = restAdapter29.getcallbackExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder5.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder0.setLogLevel(logLevel8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        retrofit.client.Response response12 = serializedObjectSupporter10.deserializeObjectResponse2();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString13();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter10.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder15 = builder9.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.client.Client client16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder17 = builder9.setClient(client16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com/" + "'", str13, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter29.getrequestInterceptor();
        retrofit.RestAdapter.RestHandler restHandler46 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = restHandler46.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNull(serializedObjectSupporter47);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString40 = serializedObjectSupporter38.deserializeObjectTypedInput1();
        builder0.serializedObjectSupporter = serializedObjectSupporter38;
        java.util.concurrent.Executor executor42 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.Server server44 = builder43.server;
        retrofit.ErrorHandler errorHandler45 = null;
        builder43.errorHandler = errorHandler45;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder49 = builder43.setRequestInterceptor(requestInterceptor48);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter51 = builder50.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = builder50.serializedObjectSupporter;
        retrofit.RestAdapter.Log log53 = null;
        builder50.log = log53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler56 = null;
        builder55.errorHandler = errorHandler56;
        java.util.concurrent.Executor executor58 = builder55.gethttpExecutor();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        java.util.concurrent.Executor executor61 = builder59.callbackExecutor;
        builder55.setcallbackExecutor(executor61);
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel64 = builder63.logLevel;
        retrofit.ErrorHandler errorHandler65 = null;
        builder63.errorHandler = errorHandler65;
        retrofit.RequestInterceptor requestInterceptor67 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.Server server69 = builder68.server;
        retrofit.ErrorHandler errorHandler70 = null;
        builder68.errorHandler = errorHandler70;
        java.util.concurrent.Executor executor72 = null;
        builder68.sethttpExecutor(executor72);
        java.util.concurrent.Executor executor74 = builder68.httpExecutor;
        retrofit.Profiler profiler75 = null;
        builder68.profiler = profiler75;
        retrofit.RestAdapter.Builder builder77 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor78 = null;
        builder77.setcallbackExecutor(executor78);
        retrofit.client.Client.Provider provider80 = builder77.clientProvider;
        java.util.concurrent.Executor executor81 = builder77.gethttpExecutor();
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        builder82.ensureSaneDefaults();
        java.util.concurrent.Executor executor84 = builder82.callbackExecutor;
        builder77.setcallbackExecutor(executor84);
        builder68.callbackExecutor = executor84;
        builder63.sethttpExecutor(executor84);
        builder55.setcallbackExecutor(executor84);
        builder50.httpExecutor = executor84;
        builder49.httpExecutor = executor84;
        builder0.callbackExecutor = executor84;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(typedString40);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(serializedObjectSupporter52);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertNull(executor74);
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.client.Response response39 = serializedObjectSupporter37.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput40 = response39.getBody();
        retrofit.mime.TypedInput typedInput41 = response39.body;
        retrofit.client.Response response43 = restAdapter29.logAndReplaceResponse("OK", response39, (long) 500);
        retrofit.mime.TypedInput typedInput44 = response43.getBody();
        int int45 = response43.status;
        int int46 = response43.getStatus();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertNotNull(typedInput40);
        org.junit.Assert.assertNotNull(typedInput41);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNotNull(typedInput44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 200 + "'", int45 == 200);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 200 + "'", int46 == 200);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.RestAdapter.Log log34 = restAdapter29.log;
        log34.log("Retrofit-");
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(log34);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.Server server33 = restAdapter29.server;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(server33);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString13();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(typedString3);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.util.concurrent.Executor executor54 = restAdapter53.gethttpExecutor();
        java.util.concurrent.Executor executor55 = restAdapter53.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor56 = restAdapter53.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(requestInterceptor56);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.Class<?> wildcardClass4 = serializedObjectSupporter0.getClass();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.RequestInterceptor requestInterceptor38 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder40 = builder35.setLogLevel(logLevel39);
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.NONE;
        builder35.logLevel = logLevel41;
        restAdapter29.setLogLevel(logLevel41);
        java.lang.String str44 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter29.getrequestInterceptor();
        retrofit.client.Request request46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request47 = restAdapter29.logAndReplaceRequest(request46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor45);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor4);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder0.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter6();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter10.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter10.deserializeObjectConverter1();
        retrofit.Server server16 = serializedObjectSupporter10.deserializeObjectServer1();
        builder0.server = server16;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com/" + "'", str13, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(server16);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString12();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString13();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Internal Server Error" + "'", str3, "Internal Server Error");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        java.util.concurrent.Executor executor11 = builder10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = builder10.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel18 = builder17.logLevel;
        retrofit.ErrorHandler errorHandler19 = null;
        builder17.errorHandler = errorHandler19;
        retrofit.RequestInterceptor requestInterceptor21 = builder17.requestInterceptor;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.Server server23 = builder22.server;
        retrofit.ErrorHandler errorHandler24 = null;
        builder22.errorHandler = errorHandler24;
        java.util.concurrent.Executor executor26 = null;
        builder22.sethttpExecutor(executor26);
        java.util.concurrent.Executor executor28 = builder22.httpExecutor;
        retrofit.Profiler profiler29 = null;
        builder22.profiler = profiler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.setcallbackExecutor(executor32);
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        java.util.concurrent.Executor executor35 = builder31.gethttpExecutor();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        java.util.concurrent.Executor executor38 = builder36.callbackExecutor;
        builder31.setcallbackExecutor(executor38);
        builder22.callbackExecutor = executor38;
        builder17.sethttpExecutor(executor38);
        builder13.sethttpExecutor(executor38);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = builder43.serializedObjectSupporter;
        retrofit.client.Client.Provider provider46 = null;
        builder43.setclientProvider(provider46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.Server server49 = builder48.server;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        builder48.requestInterceptor = requestInterceptor50;
        retrofit.RestAdapter.Builder builder53 = builder48.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler55 = null;
        builder54.errorHandler = errorHandler55;
        retrofit.RequestInterceptor requestInterceptor57 = builder54.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder59 = builder54.setLogLevel(logLevel58);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        builder60.ensureSaneDefaults();
        java.util.concurrent.Executor executor62 = builder60.callbackExecutor;
        builder59.callbackExecutor = executor62;
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter65 = builder64.converter;
        retrofit.ErrorHandler errorHandler66 = null;
        builder64.errorHandler = errorHandler66;
        retrofit.converter.Converter converter68 = builder64.converter;
        retrofit.client.Client.Provider provider69 = builder64.getclientProvider();
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler71 = null;
        builder70.errorHandler = errorHandler71;
        retrofit.Server server73 = null;
        builder70.server = server73;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        builder75.ensureSaneDefaults();
        retrofit.RestAdapter.Log log77 = null;
        builder75.log = log77;
        java.util.concurrent.Executor executor79 = builder75.getcallbackExecutor();
        builder70.setcallbackExecutor(executor79);
        builder64.sethttpExecutor(executor79);
        retrofit.RestAdapter.Builder builder82 = builder48.setExecutors(executor62, executor79);
        builder43.setcallbackExecutor(executor62);
        retrofit.RestAdapter.Builder builder84 = builder10.setExecutors(executor38, executor62);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(serializedObjectSupporter45);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(requestInterceptor57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNull(converter68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.setcallbackExecutor(executor34);
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        java.util.concurrent.Executor executor37 = builder33.gethttpExecutor();
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.RestAdapter.LogLevel logLevel39 = builder33.logLevel;
        restAdapter29.logLevel = logLevel39;
        retrofit.client.Request request41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request42 = restAdapter29.logAndReplaceRequest(request41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log41);
        retrofit.RequestInterceptor requestInterceptor43 = null;
        builder0.requestInterceptor = requestInterceptor43;
        java.util.concurrent.Executor executor45 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor45);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString5();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RequestInterceptor requestInterceptor2 = null;
        builder0.requestInterceptor = requestInterceptor2;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        java.util.concurrent.Executor executor9 = builder6.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response11 = serializedObjectSupporter10.deserializeObjectResponse8();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter10.deserializeObjectConverter4();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString3();
        retrofit.Server server15 = serializedObjectSupporter10.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder16 = builder6.setServer(server15);
        builder0.server = server15;
        java.util.concurrent.Executor executor18 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel20 = builder19.logLevel;
        retrofit.ErrorHandler errorHandler21 = null;
        builder19.errorHandler = errorHandler21;
        retrofit.client.Client.Provider provider23 = null;
        builder19.clientProvider = provider23;
        retrofit.RequestInterceptor requestInterceptor25 = builder19.requestInterceptor;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler27 = null;
        builder26.errorHandler = errorHandler27;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = builder26.serializedObjectSupporter;
        retrofit.Server server30 = builder26.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter32 = builder31.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = builder31.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel34 = builder31.logLevel;
        retrofit.RestAdapter.Builder builder35 = builder26.setLogLevel(logLevel34);
        retrofit.RestAdapter.Builder builder36 = builder19.setLogLevel(logLevel34);
        retrofit.RestAdapter.LogLevel logLevel37 = builder36.logLevel;
        builder0.logLevel = logLevel37;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(serializedObjectSupporter33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder5.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder0.setLogLevel(logLevel8);
        retrofit.client.Client client10 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder11 = builder0.setClient(client10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter2.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter2.deserializeObjectConverter5();
        retrofit.client.Response response5 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList6 = response5.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter7.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString10 = serializedObjectSupporter7.deserializeObjectTypedInput1();
        java.lang.String str11 = serializedObjectSupporter7.deserializeObjectString12();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter7.deserializeObjectTypedInput1();
        retrofit.client.Response response13 = new retrofit.client.Response(200, "hi!", headerList6, (retrofit.mime.TypedInput) typedString12);
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(typedString10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Internal Server Error" + "'", str11, "Internal Server Error");
        org.junit.Assert.assertNotNull(typedString12);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.RestAdapter.Log log34 = restAdapter29.log;
        java.lang.String str35 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        restAdapter29.logLevel = logLevel36;
        java.lang.Throwable throwable38 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter29.logException(throwable38, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-Idle" + "'", str35, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput3 = response2.getBody();
        java.lang.String str4 = response2.getReason();
        int int5 = response2.status;
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(typedInput3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 200 + "'", int5 == 200);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.Server server33 = restAdapter29.server;
        java.util.concurrent.Executor executor34 = restAdapter29.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter29.new RestHandler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(executor34);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.Server server33 = restAdapter29.getserver();
        java.lang.String str34 = restAdapter29.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        retrofit.RestAdapter.Log log38 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor40 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(serializedObjectSupporter39);
        org.junit.Assert.assertNull(executor40);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter29.requestInterceptor;
        java.util.concurrent.Executor executor38 = restAdapter29.httpExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString8();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Forbidden" + "'", str5, "Forbidden");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter6();
        java.lang.String str10 = serializedObjectSupporter7.deserializeObjectString3();
        retrofit.Server server11 = serializedObjectSupporter7.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder6.setServer(server11);
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = null;
        builder15.errorHandler = errorHandler16;
        retrofit.Server server18 = null;
        builder15.server = server18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        builder15.setcallbackExecutor(executor24);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        builder26.ensureSaneDefaults();
        retrofit.RestAdapter.Log log28 = null;
        builder26.log = log28;
        java.util.concurrent.Executor executor30 = builder26.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.Profiler profiler36 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log39 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server13, provider14, executor24, executor30, requestInterceptor32, (retrofit.converter.Converter) gsonConverter35, profiler36, errorHandler38, log39, logLevel40);
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = null;
        builder45.errorHandler = errorHandler46;
        retrofit.Server server48 = null;
        builder45.server = server48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        java.util.concurrent.Executor executor54 = builder50.getcallbackExecutor();
        builder45.setcallbackExecutor(executor54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        java.util.concurrent.Executor executor60 = builder56.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.Profiler profiler66 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler68 = serializedObjectSupporter67.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server43, provider44, executor54, executor60, requestInterceptor62, (retrofit.converter.Converter) gsonConverter65, profiler66, errorHandler68, log69, logLevel70);
        retrofit.ErrorHandler errorHandler73 = restAdapter72.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter72.logLevel;
        restAdapter42.setLogLevel(logLevel74);
        builder12.logLevel = logLevel74;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder7.serializedObjectSupporter;
        retrofit.client.Client.Provider provider10 = null;
        builder7.setclientProvider(provider10);
        retrofit.RequestInterceptor requestInterceptor12 = builder7.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = builder13.serializedObjectSupporter;
        retrofit.client.Client.Provider provider16 = null;
        builder13.setclientProvider(provider16);
        retrofit.RequestInterceptor requestInterceptor18 = builder13.requestInterceptor;
        retrofit.RestAdapter.Builder builder19 = builder7.setRequestInterceptor(requestInterceptor18);
        retrofit.RestAdapter.Builder builder20 = builder0.setRequestInterceptor(requestInterceptor18);
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor21);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        builder4.ensureSaneDefaults();
        java.util.concurrent.Executor executor6 = builder4.callbackExecutor;
        builder0.setcallbackExecutor(executor6);
        retrofit.converter.Converter converter8 = builder0.converter;
        java.util.concurrent.Executor executor9 = null;
        builder0.sethttpExecutor(executor9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder5.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder0.setLogLevel(logLevel8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        retrofit.client.Response response12 = serializedObjectSupporter10.deserializeObjectResponse2();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString13();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter10.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder15 = builder9.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.Profiler profiler16 = builder15.profiler;
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(response12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com/" + "'", str13, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.Profiler profiler32 = restAdapter29.profiler;
        retrofit.RequestInterceptor requestInterceptor33 = restAdapter29.requestInterceptor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(profiler32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString12();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Internal Server Error" + "'", str4, "Internal Server Error");
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter35.logLevel;
        retrofit.RestAdapter.Log log38 = restAdapter35.log;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter35.getLogLevel();
        builder0.logLevel = logLevel39;
        java.util.concurrent.Executor executor41 = builder0.httpExecutor;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor41);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.NONE;
        builder0.logLevel = logLevel6;
        retrofit.Server server8 = builder0.server;
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server8);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        java.lang.String str32 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.ErrorHandler errorHandler37 = null;
        builder35.errorHandler = errorHandler37;
        retrofit.converter.Converter converter39 = builder35.converter;
        retrofit.client.Client.Provider provider40 = builder35.getclientProvider();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = null;
        builder41.errorHandler = errorHandler42;
        retrofit.Server server44 = null;
        builder41.server = server44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        java.util.concurrent.Executor executor50 = builder46.getcallbackExecutor();
        builder41.setcallbackExecutor(executor50);
        builder35.sethttpExecutor(executor50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        java.util.concurrent.Executor executor55 = builder53.callbackExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = builder56.serializedObjectSupporter;
        retrofit.client.Client.Provider provider59 = null;
        builder56.setclientProvider(provider59);
        retrofit.RequestInterceptor requestInterceptor61 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response67 = serializedObjectSupporter66.deserializeObjectResponse8();
        java.lang.String str68 = serializedObjectSupporter66.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter66.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder70 = builder62.setConverter((retrofit.converter.Converter) gsonConverter69);
        retrofit.Profiler profiler71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response77 = serializedObjectSupporter76.deserializeObjectResponse8();
        java.lang.String str78 = serializedObjectSupporter76.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter76.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder80 = builder72.setConverter((retrofit.converter.Converter) gsonConverter79);
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler82 = serializedObjectSupporter81.deserializeObjectErrorHandler1();
        builder80.errorHandler = errorHandler82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server33, provider34, executor50, executor55, requestInterceptor61, (retrofit.converter.Converter) gsonConverter69, profiler71, errorHandler82, log84, logLevel85);
        restAdapter29.setLogLevel(logLevel85);
        retrofit.RestAdapter.LogLevel logLevel88 = null;
        restAdapter29.setLogLevel(logLevel88);
        retrofit.Profiler profiler90 = restAdapter29.getprofiler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(serializedObjectSupporter58);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(response67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "http://example.com/" + "'", str68, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(response77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler90);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder5.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder0.setLogLevel(logLevel8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder9.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        java.util.concurrent.Executor executor14 = builder11.gethttpExecutor();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        java.util.concurrent.Executor executor17 = builder15.callbackExecutor;
        builder11.setcallbackExecutor(executor17);
        retrofit.client.Client.Provider provider19 = builder11.getclientProvider();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = null;
        builder20.callbackExecutor = executor22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response25 = serializedObjectSupporter24.deserializeObjectResponse8();
        java.lang.String str26 = serializedObjectSupporter24.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter24.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder28 = builder20.setConverter((retrofit.converter.Converter) gsonConverter27);
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler32 = null;
        builder31.errorHandler = errorHandler32;
        retrofit.Server server34 = null;
        builder31.server = server34;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Log log38 = null;
        builder36.log = log38;
        java.util.concurrent.Executor executor40 = builder36.getcallbackExecutor();
        builder31.setcallbackExecutor(executor40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        retrofit.RestAdapter.Log log44 = null;
        builder42.log = log44;
        java.util.concurrent.Executor executor46 = builder42.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter49.deserializeObjectConverter5();
        retrofit.Profiler profiler52 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler54 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log55 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean57 = logLevel56.log();
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server29, provider30, executor40, executor46, requestInterceptor48, (retrofit.converter.Converter) gsonConverter51, profiler52, errorHandler54, log55, logLevel56);
        retrofit.Server server59 = restAdapter58.server;
        retrofit.RestAdapter.LogLevel logLevel60 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter58.logLevel = logLevel60;
        retrofit.RequestInterceptor requestInterceptor62 = restAdapter58.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = builder20.setRequestInterceptor(requestInterceptor62);
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString67 = serializedObjectSupporter64.deserializeObjectTypedInput1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter64.deserializeObjectConverter4();
        retrofit.RequestInterceptor requestInterceptor69 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder70 = builder20.setRequestInterceptor(requestInterceptor69);
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.HEADERS;
        builder70.logLevel = logLevel71;
        builder11.logLevel = logLevel71;
        boolean boolean74 = logLevel71.log();
        builder9.logLevel = logLevel71;
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(response25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(executor46);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(errorHandler54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(typedString67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter35.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response39 = serializedObjectSupporter38.deserializeObjectResponse8();
        java.lang.String str40 = serializedObjectSupporter38.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter4();
        java.lang.String str42 = serializedObjectSupporter38.deserializeObjectString3();
        restHandler37.serializedObjectSupporter = serializedObjectSupporter38;
        builder5.serializedObjectSupporter = serializedObjectSupporter38;
        retrofit.client.Client client45 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder46 = builder5.setClient(client45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "http://example.com/" + "'", str42, "http://example.com/");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        builder0.errorHandler = errorHandler39;
        retrofit.converter.Converter converter41 = null;
        builder0.converter = converter41;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        retrofit.client.Client.Provider provider33 = restAdapter29.getclientProvider();
        retrofit.RestAdapter.Log log34 = restAdapter29.log;
        retrofit.client.Client.Provider provider35 = restAdapter29.clientProvider;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNull(provider35);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        java.util.concurrent.Executor executor38 = builder37.httpExecutor;
        retrofit.converter.Converter converter39 = builder37.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.Server server41 = builder40.server;
        retrofit.ErrorHandler errorHandler42 = null;
        builder40.errorHandler = errorHandler42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder46 = builder40.setRequestInterceptor(requestInterceptor45);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler48 = null;
        builder47.errorHandler = errorHandler48;
        retrofit.Server server50 = null;
        builder47.server = server50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        builder52.ensureSaneDefaults();
        retrofit.RestAdapter.Log log54 = null;
        builder52.log = log54;
        java.util.concurrent.Executor executor56 = builder52.getcallbackExecutor();
        builder47.setcallbackExecutor(executor56);
        retrofit.Server server58 = null;
        retrofit.client.Client.Provider provider59 = null;
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler61 = null;
        builder60.errorHandler = errorHandler61;
        retrofit.Server server63 = null;
        builder60.server = server63;
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        builder65.ensureSaneDefaults();
        retrofit.RestAdapter.Log log67 = null;
        builder65.log = log67;
        java.util.concurrent.Executor executor69 = builder65.getcallbackExecutor();
        builder60.setcallbackExecutor(executor69);
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        builder71.ensureSaneDefaults();
        retrofit.RestAdapter.Log log73 = null;
        builder71.log = log73;
        java.util.concurrent.Executor executor75 = builder71.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor77 = serializedObjectSupporter76.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor79 = serializedObjectSupporter78.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter80 = serializedObjectSupporter78.deserializeObjectConverter5();
        retrofit.Profiler profiler81 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter82 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler83 = serializedObjectSupporter82.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean86 = logLevel85.log();
        retrofit.RestAdapter restAdapter87 = new retrofit.RestAdapter(server58, provider59, executor69, executor75, requestInterceptor77, (retrofit.converter.Converter) gsonConverter80, profiler81, errorHandler83, log84, logLevel85);
        retrofit.ErrorHandler errorHandler88 = restAdapter87.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter89 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor90 = serializedObjectSupporter89.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter91 = serializedObjectSupporter89.deserializeObjectConverter5();
        restAdapter87.serializedObjectSupporter = serializedObjectSupporter89;
        retrofit.SerializedObjectSupporter serializedObjectSupporter93 = restAdapter87.serializedObjectSupporter;
        retrofit.Profiler profiler94 = restAdapter87.getprofiler();
        retrofit.converter.Converter converter95 = restAdapter87.converter;
        java.util.concurrent.Executor executor96 = restAdapter87.httpExecutor;
        retrofit.RestAdapter.Builder builder97 = builder40.setExecutors(executor56, executor96);
        java.util.concurrent.Executor executor98 = builder40.gethttpExecutor();
        builder37.httpExecutor = executor98;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(executor69);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(requestInterceptor77);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(gsonConverter80);
        org.junit.Assert.assertNotNull(errorHandler83);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(gsonConverter91);
        org.junit.Assert.assertNotNull(serializedObjectSupporter93);
        org.junit.Assert.assertNull(profiler94);
        org.junit.Assert.assertNotNull(converter95);
        org.junit.Assert.assertNotNull(executor96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(executor98);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(errorHandler5);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        java.lang.String str32 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter36 = builder35.converter;
        retrofit.ErrorHandler errorHandler37 = null;
        builder35.errorHandler = errorHandler37;
        retrofit.converter.Converter converter39 = builder35.converter;
        retrofit.client.Client.Provider provider40 = builder35.getclientProvider();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler42 = null;
        builder41.errorHandler = errorHandler42;
        retrofit.Server server44 = null;
        builder41.server = server44;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        builder46.ensureSaneDefaults();
        retrofit.RestAdapter.Log log48 = null;
        builder46.log = log48;
        java.util.concurrent.Executor executor50 = builder46.getcallbackExecutor();
        builder41.setcallbackExecutor(executor50);
        builder35.sethttpExecutor(executor50);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        java.util.concurrent.Executor executor55 = builder53.callbackExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = builder56.serializedObjectSupporter;
        retrofit.client.Client.Provider provider59 = null;
        builder56.setclientProvider(provider59);
        retrofit.RequestInterceptor requestInterceptor61 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        builder62.ensureSaneDefaults();
        java.util.concurrent.Executor executor64 = null;
        builder62.callbackExecutor = executor64;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response67 = serializedObjectSupporter66.deserializeObjectResponse8();
        java.lang.String str68 = serializedObjectSupporter66.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter66.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder70 = builder62.setConverter((retrofit.converter.Converter) gsonConverter69);
        retrofit.Profiler profiler71 = null;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        builder72.ensureSaneDefaults();
        java.util.concurrent.Executor executor74 = null;
        builder72.callbackExecutor = executor74;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response77 = serializedObjectSupporter76.deserializeObjectResponse8();
        java.lang.String str78 = serializedObjectSupporter76.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter76.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder80 = builder72.setConverter((retrofit.converter.Converter) gsonConverter79);
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler82 = serializedObjectSupporter81.deserializeObjectErrorHandler1();
        builder80.errorHandler = errorHandler82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel85 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter86 = new retrofit.RestAdapter(server33, provider34, executor50, executor55, requestInterceptor61, (retrofit.converter.Converter) gsonConverter69, profiler71, errorHandler82, log84, logLevel85);
        restAdapter29.setLogLevel(logLevel85);
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel88;
        retrofit.RestAdapter.LogLevel logLevel90 = restAdapter29.getLogLevel();
        java.lang.String str91 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter92 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response93 = serializedObjectSupporter92.deserializeObjectResponse8();
        java.lang.String str94 = serializedObjectSupporter92.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter95 = serializedObjectSupporter92.deserializeObjectConverter4();
        retrofit.client.Response response96 = serializedObjectSupporter92.deserializeObjectResponse3();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter92;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(serializedObjectSupporter58);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(response67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "http://example.com/" + "'", str68, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(response77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "http://example.com/" + "'", str78, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(errorHandler82);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel90 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel90.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Retrofit-Idle" + "'", str91, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(response93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "http://example.com/" + "'", str94, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter95);
        org.junit.Assert.assertNotNull(response96);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Profiler profiler30 = restAdapter29.getprofiler();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.Server server36 = null;
        builder33.server = server36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        builder33.setcallbackExecutor(executor42);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        builder44.ensureSaneDefaults();
        retrofit.RestAdapter.Log log46 = null;
        builder44.log = log46;
        java.util.concurrent.Executor executor48 = builder44.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter51.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter5();
        retrofit.Profiler profiler54 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter55.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean59 = logLevel58.log();
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server31, provider32, executor42, executor48, requestInterceptor50, (retrofit.converter.Converter) gsonConverter53, profiler54, errorHandler56, log57, logLevel58);
        retrofit.ErrorHandler errorHandler61 = restAdapter60.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler62 = restAdapter60.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter1();
        java.lang.String str66 = serializedObjectSupporter63.deserializeObjectString11();
        restHandler62.serializedObjectSupporter = serializedObjectSupporter63;
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter63;
        retrofit.ErrorHandler errorHandler69 = restAdapter29.errorHandler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(profiler30);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "http://example.com/" + "'", str66, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler69);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter29.getLogLevel();
        retrofit.Server server34 = restAdapter29.server;
        java.util.concurrent.Executor executor35 = restAdapter29.httpExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNotNull(executor35);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        builder0.setcallbackExecutor(executor11);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler17 = null;
        builder16.errorHandler = errorHandler17;
        retrofit.Server server19 = null;
        builder16.server = server19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        builder21.ensureSaneDefaults();
        retrofit.RestAdapter.Log log23 = null;
        builder21.log = log23;
        java.util.concurrent.Executor executor25 = builder21.getcallbackExecutor();
        builder16.setcallbackExecutor(executor25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Log log29 = null;
        builder27.log = log29;
        java.util.concurrent.Executor executor31 = builder27.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter5();
        retrofit.Profiler profiler37 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean42 = logLevel41.log();
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server14, provider15, executor25, executor31, requestInterceptor33, (retrofit.converter.Converter) gsonConverter36, profiler37, errorHandler39, log40, logLevel41);
        retrofit.Server server44 = restAdapter43.server;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter43.logLevel = logLevel45;
        retrofit.client.Client.Provider provider47 = restAdapter43.getclientProvider();
        retrofit.client.Client.Provider provider48 = restAdapter43.clientProvider;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler50 = null;
        builder49.errorHandler = errorHandler50;
        retrofit.RequestInterceptor requestInterceptor52 = builder49.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder54 = builder49.setLogLevel(logLevel53);
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.NONE;
        builder49.logLevel = logLevel55;
        restAdapter43.setLogLevel(logLevel55);
        retrofit.RestAdapter.Builder builder58 = builder0.setLogLevel(logLevel55);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter59 = builder58.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNull(requestInterceptor52);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler6 = null;
        builder5.errorHandler = errorHandler6;
        retrofit.Server server8 = null;
        builder5.server = server8;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        builder10.ensureSaneDefaults();
        retrofit.RestAdapter.Log log12 = null;
        builder10.log = log12;
        java.util.concurrent.Executor executor14 = builder10.getcallbackExecutor();
        builder5.setcallbackExecutor(executor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.Profiler profiler26 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler28 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean31 = logLevel30.log();
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server3, provider4, executor14, executor20, requestInterceptor22, (retrofit.converter.Converter) gsonConverter25, profiler26, errorHandler28, log29, logLevel30);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        retrofit.client.Client.Provider provider35 = restAdapter32.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor36 = restAdapter32.getrequestInterceptor();
        builder0.requestInterceptor = requestInterceptor36;
        retrofit.Profiler profiler38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder39 = builder0.setProfiler(profiler38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(errorHandler28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(requestInterceptor36);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.Server server35 = restAdapter29.server;
        java.lang.String str36 = restAdapter29.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor37 = restAdapter29.callbackExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Retrofit-" + "'", str36, "Retrofit-");
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.Profiler profiler33 = restAdapter29.getprofiler();
        retrofit.ErrorHandler errorHandler34 = restAdapter29.errorHandler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNotNull(errorHandler34);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(errorHandler8);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        builder0.errorHandler = errorHandler39;
        retrofit.RestAdapter.Log log41 = builder0.log;
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler45 = null;
        builder44.errorHandler = errorHandler45;
        retrofit.Server server47 = null;
        builder44.server = server47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        builder49.ensureSaneDefaults();
        retrofit.RestAdapter.Log log51 = null;
        builder49.log = log51;
        java.util.concurrent.Executor executor53 = builder49.getcallbackExecutor();
        builder44.setcallbackExecutor(executor53);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Log log57 = null;
        builder55.log = log57;
        java.util.concurrent.Executor executor59 = builder55.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor61 = serializedObjectSupporter60.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor63 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter64 = serializedObjectSupporter62.deserializeObjectConverter5();
        retrofit.Profiler profiler65 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler67 = serializedObjectSupporter66.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean70 = logLevel69.log();
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server42, provider43, executor53, executor59, requestInterceptor61, (retrofit.converter.Converter) gsonConverter64, profiler65, errorHandler67, log68, logLevel69);
        retrofit.ErrorHandler errorHandler72 = restAdapter71.errorHandler;
        builder0.errorHandler = errorHandler72;
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler75 = null;
        builder74.errorHandler = errorHandler75;
        java.util.concurrent.Executor executor77 = builder74.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response79 = serializedObjectSupporter78.deserializeObjectResponse8();
        java.lang.String str80 = serializedObjectSupporter78.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter81 = serializedObjectSupporter78.deserializeObjectConverter4();
        java.lang.String str82 = serializedObjectSupporter78.deserializeObjectString3();
        retrofit.Server server83 = serializedObjectSupporter78.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder84 = builder74.setServer(server83);
        retrofit.RestAdapter.Builder builder85 = builder0.setServer(server83);
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel87 = builder86.logLevel;
        retrofit.ErrorHandler errorHandler88 = null;
        builder86.errorHandler = errorHandler88;
        retrofit.RequestInterceptor requestInterceptor90 = builder86.requestInterceptor;
        retrofit.ErrorHandler errorHandler91 = null;
        builder86.errorHandler = errorHandler91;
        retrofit.RestAdapter.Log log93 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder94 = builder86.setLog(log93);
        retrofit.RestAdapter.Builder builder95 = builder85.setLog(log93);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(gsonConverter64);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNotNull(response79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "http://example.com/" + "'", str80, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "http://example.com/" + "'", str82, "http://example.com/");
        org.junit.Assert.assertNotNull(server83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + logLevel87 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel87.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor90);
        org.junit.Assert.assertNotNull(log93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.Profiler profiler7 = builder0.profiler;
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.RestAdapter.Builder builder44 = builder0.setLogLevel(logLevel42);
        retrofit.Server server45 = builder0.server;
        retrofit.RestAdapter restAdapter46 = builder0.build();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(restAdapter46);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.client.Client.Provider provider32 = restAdapter29.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.client.Response response36 = serializedObjectSupporter34.deserializeObjectResponse2();
        int int37 = response36.getStatus();
        retrofit.client.Response response39 = restAdapter29.logAndReplaceResponse("http://example.com/", response36, (long) '#');
        retrofit.mime.TypedInput typedInput40 = response39.body;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 200 + "'", int37 == 200);
        org.junit.Assert.assertNotNull(response39);
        org.junit.Assert.assertNotNull(typedInput40);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.lang.String str54 = restAdapter53.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider55 = restAdapter53.clientProvider;
        retrofit.Profiler profiler56 = restAdapter53.profiler;
        retrofit.Profiler profiler57 = restAdapter53.getprofiler();
        retrofit.ErrorHandler errorHandler58 = restAdapter53.geterrorHandler();
        java.lang.String str59 = restAdapter53.getTHREAD_PREFIX();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Retrofit-" + "'", str59, "Retrofit-");
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder6.serializedObjectSupporter;
        retrofit.client.Client.Provider provider9 = null;
        builder6.setclientProvider(provider9);
        retrofit.RequestInterceptor requestInterceptor11 = builder6.requestInterceptor;
        retrofit.RestAdapter.Builder builder12 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.Profiler profiler13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder14 = builder0.setProfiler(profiler13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Server server10 = null;
        builder7.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        java.util.concurrent.Executor executor16 = builder12.getcallbackExecutor();
        builder7.setcallbackExecutor(executor16);
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = null;
        builder20.errorHandler = errorHandler21;
        retrofit.Server server23 = null;
        builder20.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        builder20.setcallbackExecutor(executor29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        java.util.concurrent.Executor executor35 = builder31.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        retrofit.Profiler profiler41 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server18, provider19, executor29, executor35, requestInterceptor37, (retrofit.converter.Converter) gsonConverter40, profiler41, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter49.deserializeObjectConverter5();
        restAdapter47.serializedObjectSupporter = serializedObjectSupporter49;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = restAdapter47.serializedObjectSupporter;
        retrofit.Profiler profiler54 = restAdapter47.getprofiler();
        retrofit.converter.Converter converter55 = restAdapter47.converter;
        java.util.concurrent.Executor executor56 = restAdapter47.httpExecutor;
        retrofit.RestAdapter.Builder builder57 = builder0.setExecutors(executor16, executor56);
        java.util.concurrent.Executor executor58 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor59 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(serializedObjectSupporter53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(executor59);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.Server server36 = restAdapter35.server;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        builder0.errorHandler = errorHandler37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response40 = serializedObjectSupporter39.deserializeObjectResponse8();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = builder0.setErrorHandler(errorHandler41);
        retrofit.RestAdapter.Builder builder44 = builder0.setServer("OK");
        retrofit.RestAdapter restAdapter45 = builder44.build();
        java.lang.String str46 = restAdapter45.getTHREAD_PREFIX();
        retrofit.converter.Converter converter47 = restAdapter45.converter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(response40);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-" + "'", str46, "Retrofit-");
        org.junit.Assert.assertNotNull(converter47);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler34 = restAdapter29.profiler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNull(serializedObjectSupporter33);
        org.junit.Assert.assertNull(profiler34);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = builder0.serializedObjectSupporter;
        retrofit.client.Client client9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setClient(client9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(serializedObjectSupporter8);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider34 = restAdapter29.clientProvider;
        retrofit.Server server35 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.Server server41 = restAdapter40.server;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter40.logLevel = logLevel42;
        retrofit.client.Client.Provider provider44 = restAdapter40.getclientProvider();
        retrofit.RestAdapter.Log log45 = restAdapter40.log;
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter40.requestInterceptor;
        retrofit.RestAdapter.Builder builder47 = builder0.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        builder0.sethttpExecutor(executor57);
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNotNull(log45);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNull(serializedObjectSupporter60);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response3 = serializedObjectSupporter2.deserializeObjectResponse7();
        retrofit.Server server4 = serializedObjectSupporter2.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder5 = builder0.setServer(server4);
        retrofit.Profiler profiler6 = null;
        builder5.profiler = profiler6;
        retrofit.ErrorHandler errorHandler8 = builder5.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(errorHandler8);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.converter.Converter converter6 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.Profiler profiler8 = builder0.profiler;
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(converter6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        java.util.concurrent.Executor executor32 = restAdapter29.httpExecutor;
        retrofit.Server server33 = restAdapter29.server;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(server33);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor25);
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter1();
        java.lang.String str40 = serializedObjectSupporter37.deserializeObjectString11();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter37.deserializeObjectConverter1();
        java.lang.String str42 = serializedObjectSupporter37.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter37.deserializeObjectConverter8();
        builder0.serializedObjectSupporter = serializedObjectSupporter37;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "http://example.com/" + "'", str40, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-" + "'", str42, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter43);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString10();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Forbidden" + "'", str6, "Forbidden");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor25);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        builder37.ensureSaneDefaults();
        java.util.concurrent.Executor executor39 = null;
        builder37.callbackExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response42 = serializedObjectSupporter41.deserializeObjectResponse8();
        java.lang.String str43 = serializedObjectSupporter41.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter41.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder45 = builder37.setConverter((retrofit.converter.Converter) gsonConverter44);
        builder36.converter = gsonConverter44;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(response42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://example.com/" + "'", str43, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString13();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse2();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(response4);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = builder0.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor3 = null;
        builder0.requestInterceptor = requestInterceptor3;
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.Server server6 = builder0.server;
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler10 = null;
        builder9.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder9.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Log log16 = null;
        builder14.log = log16;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        builder9.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Log log22 = null;
        builder20.log = log22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.Profiler profiler30 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean35 = logLevel34.log();
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server7, provider8, executor18, executor24, requestInterceptor26, (retrofit.converter.Converter) gsonConverter29, profiler30, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        restAdapter36.serializedObjectSupporter = serializedObjectSupporter38;
        retrofit.RestAdapter.Log log42 = restAdapter36.log;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler46 = null;
        builder45.errorHandler = errorHandler46;
        retrofit.Server server48 = null;
        builder45.server = server48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        builder50.ensureSaneDefaults();
        retrofit.RestAdapter.Log log52 = null;
        builder50.log = log52;
        java.util.concurrent.Executor executor54 = builder50.getcallbackExecutor();
        builder45.setcallbackExecutor(executor54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        builder56.ensureSaneDefaults();
        retrofit.RestAdapter.Log log58 = null;
        builder56.log = log58;
        java.util.concurrent.Executor executor60 = builder56.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.Profiler profiler66 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler68 = serializedObjectSupporter67.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean71 = logLevel70.log();
        retrofit.RestAdapter restAdapter72 = new retrofit.RestAdapter(server43, provider44, executor54, executor60, requestInterceptor62, (retrofit.converter.Converter) gsonConverter65, profiler66, errorHandler68, log69, logLevel70);
        retrofit.Server server73 = restAdapter72.server;
        retrofit.RestAdapter.LogLevel logLevel74 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter72.logLevel = logLevel74;
        retrofit.client.Client.Provider provider76 = restAdapter72.getclientProvider();
        retrofit.client.Client.Provider provider77 = restAdapter72.clientProvider;
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler79 = null;
        builder78.errorHandler = errorHandler79;
        retrofit.RequestInterceptor requestInterceptor81 = builder78.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel82 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder83 = builder78.setLogLevel(logLevel82);
        retrofit.RestAdapter.LogLevel logLevel84 = retrofit.RestAdapter.LogLevel.NONE;
        builder78.logLevel = logLevel84;
        restAdapter72.setLogLevel(logLevel84);
        restAdapter36.setLogLevel(logLevel84);
        retrofit.converter.Converter converter88 = restAdapter36.getconverter();
        builder0.converter = converter88;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(serializedObjectSupporter2);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(log42);
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider76);
        org.junit.Assert.assertNull(provider77);
        org.junit.Assert.assertNull(requestInterceptor81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(converter88);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.Server server32 = restAdapter29.server;
        retrofit.Profiler profiler33 = restAdapter29.profiler;
        retrofit.Server server34 = restAdapter29.getserver();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(server34);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Log log2 = null;
        builder0.log = log2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = null;
        builder0.setclientProvider(provider5);
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("http://example.com/");
        org.junit.Assert.assertNotNull(executor4);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.Server server6 = builder0.server;
        retrofit.converter.Converter converter7 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter29.setLogLevel(logLevel32);
        retrofit.client.Client.Provider provider34 = restAdapter29.getclientProvider();
        java.util.concurrent.Executor executor35 = restAdapter29.callbackExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(executor35);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.client.Client client6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder5.setClient(client6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        log35.log("Retrofit-Idle");
        log35.log("Retrofit-");
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        retrofit.Profiler profiler37 = restAdapter29.getprofiler();
        java.util.concurrent.Executor executor38 = restAdapter29.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter29.converter;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(profiler37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(converter39);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler3 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.client.Response response4 = serializedObjectSupporter2.deserializeObjectResponse2();
        java.lang.String str5 = response4.getReason();
        java.util.List<retrofit.client.Header> headerList6 = response4.headers;
        retrofit.mime.TypedInput typedInput7 = response4.getBody();
        retrofit.mime.TypedInput typedInput8 = response4.getBody();
        java.lang.String str9 = response4.reason;
        java.util.List<retrofit.client.Header> headerList10 = response4.headers;
        java.util.List<retrofit.client.Header> headerList11 = response4.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse2();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString8();
        retrofit.RequestInterceptor requestInterceptor16 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString17 = serializedObjectSupporter12.deserializeObjectTypedInput1();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedInput1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response19 = new retrofit.client.Response((int) (byte) 100, "Retrofit-", headerList11, (retrofit.mime.TypedInput) typedString18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorHandler3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(typedInput7);
        org.junit.Assert.assertNotNull(typedInput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OK" + "'", str9, "OK");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(typedString17);
        org.junit.Assert.assertNotNull(typedString18);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse8();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse2();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder5.requestInterceptor = requestInterceptor6;
        retrofit.RestAdapter.Builder builder9 = builder5.setServer("hi!");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler11 = null;
        builder10.errorHandler = errorHandler11;
        retrofit.Server server13 = null;
        builder10.server = server13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        java.util.concurrent.Executor executor19 = builder15.getcallbackExecutor();
        builder10.setcallbackExecutor(executor19);
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler24 = null;
        builder23.errorHandler = errorHandler24;
        retrofit.Server server26 = null;
        builder23.server = server26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        retrofit.RestAdapter.Log log30 = null;
        builder28.log = log30;
        java.util.concurrent.Executor executor32 = builder28.getcallbackExecutor();
        builder23.setcallbackExecutor(executor32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        builder34.ensureSaneDefaults();
        retrofit.RestAdapter.Log log36 = null;
        builder34.log = log36;
        java.util.concurrent.Executor executor38 = builder34.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.Profiler profiler44 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log47 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server21, provider22, executor32, executor38, requestInterceptor40, (retrofit.converter.Converter) gsonConverter43, profiler44, errorHandler46, log47, logLevel48);
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter50.getLogLevel();
        java.lang.String str53 = restAdapter50.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor54 = restAdapter50.getcallbackExecutor();
        builder10.callbackExecutor = executor54;
        builder5.httpExecutor = executor54;
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(log47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Retrofit-Idle" + "'", str53, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor54);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse4();
        retrofit.mime.TypedInput typedInput6 = response5.body;
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertNull(typedInput6);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        java.util.concurrent.Executor executor32 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter29.new RestHandler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor32);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.clientProvider = provider6;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        java.util.concurrent.Executor executor11 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response13 = serializedObjectSupporter12.deserializeObjectResponse8();
        java.lang.String str14 = serializedObjectSupporter12.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter12.deserializeObjectConverter4();
        java.lang.String str16 = serializedObjectSupporter12.deserializeObjectString3();
        retrofit.Server server17 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder18 = builder8.setServer(server17);
        retrofit.RestAdapter.Builder builder19 = builder0.setServer(server17);
        retrofit.Profiler profiler20 = builder0.profiler;
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(response13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "http://example.com/" + "'", str14, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler36 = restAdapter29.profiler;
        java.util.concurrent.Executor executor37 = restAdapter29.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter29.logLevel;
        java.util.concurrent.Executor executor39 = restAdapter29.getcallbackExecutor();
        retrofit.Server server40 = restAdapter29.server;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(serializedObjectSupporter35);
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNull(server40);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.Server server36 = restAdapter29.getserver();
        java.util.concurrent.Executor executor37 = restAdapter29.callbackExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(executor37);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.converter.Converter converter36 = restAdapter29.converter;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter29.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = restAdapter29.serializedObjectSupporter;
        retrofit.RestAdapter.Log log39 = restAdapter29.log;
        java.lang.String str40 = restAdapter29.getTHREAD_PREFIX();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(serializedObjectSupporter38);
        org.junit.Assert.assertNotNull(log39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-" + "'", str40, "Retrofit-");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse1();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(response3);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.Log log32 = restAdapter29.log;
        java.lang.String str33 = restAdapter29.getTHREAD_PREFIX();
        java.lang.String str34 = restAdapter29.getTHREAD_PREFIX();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler36 = null;
        builder35.errorHandler = errorHandler36;
        retrofit.Server server38 = null;
        builder35.server = server38;
        java.util.concurrent.Executor executor40 = builder35.callbackExecutor;
        retrofit.Server server41 = null;
        retrofit.client.Client.Provider provider42 = null;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler44 = null;
        builder43.errorHandler = errorHandler44;
        retrofit.Server server46 = null;
        builder43.server = server46;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        builder48.ensureSaneDefaults();
        retrofit.RestAdapter.Log log50 = null;
        builder48.log = log50;
        java.util.concurrent.Executor executor52 = builder48.getcallbackExecutor();
        builder43.setcallbackExecutor(executor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Log log56 = null;
        builder54.log = log56;
        java.util.concurrent.Executor executor58 = builder54.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter61.deserializeObjectConverter5();
        retrofit.Profiler profiler64 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler66 = serializedObjectSupporter65.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log67 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel68 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean69 = logLevel68.log();
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server41, provider42, executor52, executor58, requestInterceptor60, (retrofit.converter.Converter) gsonConverter63, profiler64, errorHandler66, log67, logLevel68);
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter70.logLevel;
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter70.getLogLevel();
        builder35.logLevel = logLevel74;
        restAdapter29.setLogLevel(logLevel74);
        retrofit.RequestInterceptor requestInterceptor77 = restAdapter29.getrequestInterceptor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNotNull(executor58);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(requestInterceptor77);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString11();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString7();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(response6);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.Server server36 = restAdapter35.server;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        builder0.errorHandler = errorHandler37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response40 = serializedObjectSupporter39.deserializeObjectResponse8();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = builder0.setErrorHandler(errorHandler41);
        retrofit.RestAdapter.Builder builder44 = builder0.setServer("OK");
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.client.Response response47 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response49 = restAdapter45.logAndReplaceResponse("", response47, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(response40);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = builder0.setServer("hi!");
        retrofit.RestAdapter restAdapter6 = builder5.build();
        retrofit.Server server7 = restAdapter6.getserver();
        retrofit.ErrorHandler errorHandler8 = restAdapter6.geterrorHandler();
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(restAdapter6);
        org.junit.Assert.assertNotNull(server7);
        org.junit.Assert.assertNotNull(errorHandler8);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedInput1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString10();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Forbidden" + "'", str4, "Forbidden");
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.client.Client.Provider provider37 = restAdapter33.getclientProvider();
        retrofit.RestAdapter.Log log38 = restAdapter33.log;
        retrofit.RequestInterceptor requestInterceptor39 = restAdapter33.requestInterceptor;
        retrofit.RestAdapter.Builder builder40 = builder0.setRequestInterceptor(requestInterceptor39);
        retrofit.Profiler profiler41 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder42 = builder40.setProfiler(profiler41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        java.lang.String str37 = restAdapter29.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor38 = restAdapter29.callbackExecutor;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor38);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = builder0.serializedObjectSupporter;
        retrofit.Server server4 = builder0.server;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder5.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel8 = builder5.logLevel;
        retrofit.RestAdapter.Builder builder9 = builder0.setLogLevel(logLevel8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder9.serializedObjectSupporter;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter40.logLevel;
        retrofit.RestAdapter.Log log43 = restAdapter40.log;
        builder9.log = log43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = builder9.serializedObjectSupporter;
        retrofit.Profiler profiler46 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder47 = builder9.setProfiler(profiler46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(serializedObjectSupporter3);
        org.junit.Assert.assertNull(server4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log43);
        org.junit.Assert.assertNull(serializedObjectSupporter45);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.RestAdapter.LogLevel logLevel6 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder0.logLevel;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter38.new RestHandler();
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        retrofit.RestAdapter.Builder builder42 = builder0.setLog(log41);
        retrofit.client.Client.Provider provider43 = builder0.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel44 = builder0.logLevel;
        java.lang.Class<?> wildcardClass45 = logLevel44.getClass();
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.converter.Converter converter4 = builder0.converter;
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("hi!");
        retrofit.converter.Converter converter8 = null;
        builder7.converter = converter8;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.errorHandler;
        java.lang.String str32 = restAdapter29.getTHREAD_PREFIX();
        retrofit.ErrorHandler errorHandler33 = restAdapter29.errorHandler;
        java.lang.String str34 = restAdapter29.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor35 = restAdapter29.gethttpExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-" + "'", str32, "Retrofit-");
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
        org.junit.Assert.assertNotNull(executor35);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.getLogLevel();
        java.lang.String str32 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler33 = restAdapter29.getprofiler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler33);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter8 = builder7.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = builder7.serializedObjectSupporter;
        retrofit.RestAdapter.Log log10 = null;
        builder7.log = log10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler13 = null;
        builder12.errorHandler = errorHandler13;
        java.util.concurrent.Executor executor15 = builder12.gethttpExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        java.util.concurrent.Executor executor18 = builder16.callbackExecutor;
        builder12.setcallbackExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.ErrorHandler errorHandler22 = null;
        builder20.errorHandler = errorHandler22;
        retrofit.RequestInterceptor requestInterceptor24 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.Server server26 = builder25.server;
        retrofit.ErrorHandler errorHandler27 = null;
        builder25.errorHandler = errorHandler27;
        java.util.concurrent.Executor executor29 = null;
        builder25.sethttpExecutor(executor29);
        java.util.concurrent.Executor executor31 = builder25.httpExecutor;
        retrofit.Profiler profiler32 = null;
        builder25.profiler = profiler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.setcallbackExecutor(executor35);
        retrofit.client.Client.Provider provider37 = builder34.clientProvider;
        java.util.concurrent.Executor executor38 = builder34.gethttpExecutor();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = builder39.callbackExecutor;
        builder34.setcallbackExecutor(executor41);
        builder25.callbackExecutor = executor41;
        builder20.sethttpExecutor(executor41);
        builder12.setcallbackExecutor(executor41);
        builder7.httpExecutor = executor41;
        builder6.httpExecutor = executor41;
        retrofit.RestAdapter.Builder builder49 = builder6.setServer("OK");
        retrofit.Profiler profiler50 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setProfiler(profiler50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(serializedObjectSupporter9);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor24);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(executor41);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertNotNull(class2);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.client.Client.Provider provider6 = null;
        builder0.setclientProvider(provider6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder10 = builder0.setRequestInterceptor(requestInterceptor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.Server server17 = builder16.server;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        builder16.requestInterceptor = requestInterceptor18;
        retrofit.RestAdapter.Builder builder21 = builder16.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler23 = null;
        builder22.errorHandler = errorHandler23;
        retrofit.RequestInterceptor requestInterceptor25 = builder22.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder27 = builder22.setLogLevel(logLevel26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        builder28.ensureSaneDefaults();
        java.util.concurrent.Executor executor30 = builder28.callbackExecutor;
        builder27.callbackExecutor = executor30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.ErrorHandler errorHandler34 = null;
        builder32.errorHandler = errorHandler34;
        retrofit.converter.Converter converter36 = builder32.converter;
        retrofit.client.Client.Provider provider37 = builder32.getclientProvider();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler39 = null;
        builder38.errorHandler = errorHandler39;
        retrofit.Server server41 = null;
        builder38.server = server41;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Log log45 = null;
        builder43.log = log45;
        java.util.concurrent.Executor executor47 = builder43.getcallbackExecutor();
        builder38.setcallbackExecutor(executor47);
        builder32.sethttpExecutor(executor47);
        retrofit.RestAdapter.Builder builder50 = builder16.setExecutors(executor30, executor47);
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        java.util.concurrent.Executor executor55 = builder51.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder56 = builder11.setExecutors(executor30, executor55);
        builder0.setcallbackExecutor(executor55);
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(executor30);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler12 = null;
        builder11.errorHandler = errorHandler12;
        retrofit.Server server14 = null;
        builder11.server = server14;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Log log18 = null;
        builder16.log = log18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        builder11.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        builder22.ensureSaneDefaults();
        retrofit.RestAdapter.Log log24 = null;
        builder22.log = log24;
        java.util.concurrent.Executor executor26 = builder22.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.Profiler profiler32 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean37 = logLevel36.log();
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server9, provider10, executor20, executor26, requestInterceptor28, (retrofit.converter.Converter) gsonConverter31, profiler32, errorHandler34, log35, logLevel36);
        retrofit.Server server39 = restAdapter38.server;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter38.logLevel = logLevel40;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter38.requestInterceptor;
        retrofit.RestAdapter.Builder builder43 = builder0.setRequestInterceptor(requestInterceptor42);
        retrofit.Server server44 = null;
        retrofit.client.Client.Provider provider45 = null;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler47 = null;
        builder46.errorHandler = errorHandler47;
        retrofit.Server server49 = null;
        builder46.server = server49;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        builder51.ensureSaneDefaults();
        retrofit.RestAdapter.Log log53 = null;
        builder51.log = log53;
        java.util.concurrent.Executor executor55 = builder51.getcallbackExecutor();
        builder46.setcallbackExecutor(executor55);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        builder57.ensureSaneDefaults();
        retrofit.RestAdapter.Log log59 = null;
        builder57.log = log59;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor63 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.Profiler profiler67 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler69 = serializedObjectSupporter68.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log70 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel71 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean72 = logLevel71.log();
        retrofit.RestAdapter restAdapter73 = new retrofit.RestAdapter(server44, provider45, executor55, executor61, requestInterceptor63, (retrofit.converter.Converter) gsonConverter66, profiler67, errorHandler69, log70, logLevel71);
        retrofit.ErrorHandler errorHandler74 = restAdapter73.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter73.getLogLevel();
        java.lang.String str76 = restAdapter73.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor77 = restAdapter73.getcallbackExecutor();
        builder0.sethttpExecutor(executor77);
        java.util.concurrent.Executor executor79 = builder0.gethttpExecutor();
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(executor20);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(executor61);
        org.junit.Assert.assertNotNull(requestInterceptor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertNotNull(log70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Retrofit-Idle" + "'", str76, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(executor79);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        retrofit.Server server3 = null;
        builder0.server = server3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        retrofit.RestAdapter.Log log7 = null;
        builder5.log = log7;
        java.util.concurrent.Executor executor9 = builder5.getcallbackExecutor();
        builder0.setcallbackExecutor(executor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler14 = null;
        builder13.errorHandler = errorHandler14;
        retrofit.Server server16 = null;
        builder13.server = server16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Log log20 = null;
        builder18.log = log20;
        java.util.concurrent.Executor executor22 = builder18.getcallbackExecutor();
        builder13.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Log log26 = null;
        builder24.log = log26;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.Profiler profiler34 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean39 = logLevel38.log();
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server11, provider12, executor22, executor28, requestInterceptor30, (retrofit.converter.Converter) gsonConverter33, profiler34, errorHandler36, log37, logLevel38);
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter40.getLogLevel();
        java.lang.String str43 = restAdapter40.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor44 = restAdapter40.getcallbackExecutor();
        builder0.callbackExecutor = executor44;
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        java.util.concurrent.Executor executor63 = builder59.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter5();
        retrofit.Profiler profiler69 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler71 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean74 = logLevel73.log();
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server46, provider47, executor57, executor63, requestInterceptor65, (retrofit.converter.Converter) gsonConverter68, profiler69, errorHandler71, log72, logLevel73);
        retrofit.ErrorHandler errorHandler76 = restAdapter75.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter77 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor78 = serializedObjectSupporter77.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter77.deserializeObjectConverter5();
        restAdapter75.serializedObjectSupporter = serializedObjectSupporter77;
        retrofit.RestAdapter.Log log81 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel82 = restAdapter75.logLevel;
        builder0.logLevel = logLevel82;
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNotNull(executor28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertNotNull(requestInterceptor78);
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertTrue("'" + logLevel82 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel82.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.Log log4 = builder0.log;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log4);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString12();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString12();
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Internal Server Error" + "'", str6, "Internal Server Error");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Internal Server Error" + "'", str8, "Internal Server Error");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RequestInterceptor requestInterceptor6 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel8 = builder7.logLevel;
        retrofit.client.Client.Provider provider9 = null;
        builder7.setclientProvider(provider9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder7.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RequestInterceptor requestInterceptor14 = builder0.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor6);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        java.lang.String str37 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler38 = restAdapter29.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = restAdapter29.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = restAdapter29.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(serializedObjectSupporter39);
        org.junit.Assert.assertNotNull(serializedObjectSupporter40);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.ErrorHandler errorHandler5 = null;
        builder0.errorHandler = errorHandler5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(requestInterceptor9);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        java.lang.String str30 = restAdapter29.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler31);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.Server server2 = null;
        retrofit.client.Client.Provider provider3 = null;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler5 = null;
        builder4.errorHandler = errorHandler5;
        retrofit.Server server7 = null;
        builder4.server = server7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        builder9.ensureSaneDefaults();
        retrofit.RestAdapter.Log log11 = null;
        builder9.log = log11;
        java.util.concurrent.Executor executor13 = builder9.getcallbackExecutor();
        builder4.setcallbackExecutor(executor13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        builder15.ensureSaneDefaults();
        retrofit.RestAdapter.Log log17 = null;
        builder15.log = log17;
        java.util.concurrent.Executor executor19 = builder15.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter5();
        retrofit.Profiler profiler25 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler27 = serializedObjectSupporter26.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log28 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean30 = logLevel29.log();
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server2, provider3, executor13, executor19, requestInterceptor21, (retrofit.converter.Converter) gsonConverter24, profiler25, errorHandler27, log28, logLevel29);
        retrofit.Server server32 = restAdapter31.server;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter31.logLevel = logLevel33;
        retrofit.client.Client.Provider provider35 = restAdapter31.getclientProvider();
        retrofit.client.Client.Provider provider36 = restAdapter31.clientProvider;
        java.util.concurrent.Executor executor37 = restAdapter31.httpExecutor;
        builder0.sethttpExecutor(executor37);
        retrofit.client.Client.Provider provider39 = builder0.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(executor13);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(provider39);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        java.util.concurrent.Executor executor36 = restAdapter29.gethttpExecutor();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(executor36);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse7();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter1();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString11();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler38 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter6();
        retrofit.client.Response response40 = serializedObjectSupporter37.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter37.deserializeObjectConverter1();
        retrofit.client.Response response42 = serializedObjectSupporter37.deserializeObjectResponse2();
        java.lang.String str43 = serializedObjectSupporter37.deserializeObjectString3();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter37;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(response40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(response42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "http://example.com/" + "'", str43, "http://example.com/");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString11();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        builder0.requestInterceptor = requestInterceptor4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Log log8 = null;
        builder6.log = log8;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.Server server12 = builder11.server;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        builder11.requestInterceptor = requestInterceptor13;
        retrofit.RestAdapter.Builder builder16 = builder11.setServer("Retrofit-");
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = null;
        builder17.errorHandler = errorHandler18;
        retrofit.RequestInterceptor requestInterceptor20 = builder17.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder22 = builder17.setLogLevel(logLevel21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        java.util.concurrent.Executor executor25 = builder23.callbackExecutor;
        builder22.callbackExecutor = executor25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter28 = builder27.converter;
        retrofit.ErrorHandler errorHandler29 = null;
        builder27.errorHandler = errorHandler29;
        retrofit.converter.Converter converter31 = builder27.converter;
        retrofit.client.Client.Provider provider32 = builder27.getclientProvider();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler34 = null;
        builder33.errorHandler = errorHandler34;
        retrofit.Server server36 = null;
        builder33.server = server36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        builder38.ensureSaneDefaults();
        retrofit.RestAdapter.Log log40 = null;
        builder38.log = log40;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        builder33.setcallbackExecutor(executor42);
        builder27.sethttpExecutor(executor42);
        retrofit.RestAdapter.Builder builder45 = builder11.setExecutors(executor25, executor42);
        retrofit.RestAdapter.Builder builder46 = builder0.setExecutors(executor10, executor42);
        retrofit.RestAdapter.Log log47 = null;
        builder46.log = log47;
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(executor10);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        java.util.concurrent.Executor executor33 = restAdapter29.gethttpExecutor();
        retrofit.client.Request request34 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = restAdapter29.logAndReplaceRequest(request34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.util.concurrent.Executor executor54 = restAdapter53.gethttpExecutor();
        retrofit.RequestInterceptor requestInterceptor55 = restAdapter53.getrequestInterceptor();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(executor54);
        org.junit.Assert.assertNotNull(requestInterceptor55);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder6 = builder0.setRequestInterceptor(requestInterceptor5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler8 = null;
        builder7.errorHandler = errorHandler8;
        retrofit.Server server10 = null;
        builder7.server = server10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        builder12.ensureSaneDefaults();
        retrofit.RestAdapter.Log log14 = null;
        builder12.log = log14;
        java.util.concurrent.Executor executor16 = builder12.getcallbackExecutor();
        builder7.setcallbackExecutor(executor16);
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = null;
        builder20.errorHandler = errorHandler21;
        retrofit.Server server23 = null;
        builder20.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        builder20.setcallbackExecutor(executor29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        builder31.ensureSaneDefaults();
        retrofit.RestAdapter.Log log33 = null;
        builder31.log = log33;
        java.util.concurrent.Executor executor35 = builder31.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        retrofit.Profiler profiler41 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean46 = logLevel45.log();
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server18, provider19, executor29, executor35, requestInterceptor37, (retrofit.converter.Converter) gsonConverter40, profiler41, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter49.deserializeObjectConverter5();
        restAdapter47.serializedObjectSupporter = serializedObjectSupporter49;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = restAdapter47.serializedObjectSupporter;
        retrofit.Profiler profiler54 = restAdapter47.getprofiler();
        retrofit.converter.Converter converter55 = restAdapter47.converter;
        java.util.concurrent.Executor executor56 = restAdapter47.httpExecutor;
        retrofit.RestAdapter.Builder builder57 = builder0.setExecutors(executor16, executor56);
        retrofit.ErrorHandler errorHandler58 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder59 = builder0.setErrorHandler(errorHandler58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Error handler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(serializedObjectSupporter53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertNotNull(converter55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.Log log4 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        builder0.setcallbackExecutor(executor23);
        retrofit.ErrorHandler errorHandler37 = builder0.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(log4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(errorHandler37);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response1 = serializedObjectSupporter0.deserializeObjectResponse8();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse3();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(response1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(response4);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter29.geterrorHandler();
        retrofit.client.Client.Provider provider32 = restAdapter29.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter34.deserializeObjectErrorHandler1();
        retrofit.client.Response response36 = serializedObjectSupporter34.deserializeObjectResponse2();
        int int37 = response36.getStatus();
        retrofit.client.Response response39 = restAdapter29.logAndReplaceResponse("http://example.com/", response36, (long) '#');
        retrofit.RestAdapter.RestHandler restHandler40 = restAdapter29.new RestHandler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(response36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 200 + "'", int37 == 200);
        org.junit.Assert.assertNotNull(response39);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = builder0.server;
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections3 = serializedObjectSupporter0.deserializeObjectList2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "OK" + "'", str1, "OK");
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler7 = null;
        builder6.errorHandler = errorHandler7;
        retrofit.Server server9 = null;
        builder6.server = server9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Log log13 = null;
        builder11.log = log13;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        builder6.setcallbackExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Log log19 = null;
        builder17.log = log19;
        java.util.concurrent.Executor executor21 = builder17.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter5();
        retrofit.Profiler profiler27 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log30 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server4, provider5, executor15, executor21, requestInterceptor23, (retrofit.converter.Converter) gsonConverter26, profiler27, errorHandler29, log30, logLevel31);
        retrofit.Server server34 = restAdapter33.server;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.logLevel = logLevel35;
        retrofit.RestAdapter.Builder builder37 = builder0.setLogLevel(logLevel35);
        boolean boolean38 = logLevel35.log();
        boolean boolean39 = logLevel35.log();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(executor15);
        org.junit.Assert.assertNotNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.Server server30 = restAdapter29.server;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter29.logLevel = logLevel31;
        java.lang.String str33 = restAdapter29.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor34 = restAdapter29.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Log log36 = restAdapter29.log;
        retrofit.RestAdapter.LogLevel logLevel37 = null;
        restAdapter29.setLogLevel(logLevel37);
        retrofit.ErrorHandler errorHandler39 = restAdapter29.errorHandler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(errorHandler39);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Server server1 = builder0.server;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        java.util.concurrent.Executor executor4 = null;
        builder0.sethttpExecutor(executor4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.Profiler profiler29 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log32 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean34 = logLevel33.log();
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server6, provider7, executor17, executor23, requestInterceptor25, (retrofit.converter.Converter) gsonConverter28, profiler29, errorHandler31, log32, logLevel33);
        retrofit.Server server36 = restAdapter35.server;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        builder0.errorHandler = errorHandler37;
        retrofit.RestAdapter.Log log39 = builder0.log;
        retrofit.RestAdapter.LogLevel logLevel40 = builder0.logLevel;
        org.junit.Assert.assertNull(server1);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter29.logLevel;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.setcallbackExecutor(executor34);
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        java.util.concurrent.Executor executor37 = builder33.gethttpExecutor();
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.RestAdapter.LogLevel logLevel39 = builder33.logLevel;
        restAdapter29.logLevel = logLevel39;
        retrofit.Server server41 = restAdapter29.server;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server41);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.ErrorHandler errorHandler4 = null;
        builder2.errorHandler = errorHandler4;
        retrofit.converter.Converter converter6 = builder2.converter;
        retrofit.client.Client.Provider provider7 = builder2.getclientProvider();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler9 = null;
        builder8.errorHandler = errorHandler9;
        retrofit.Server server11 = null;
        builder8.server = server11;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        builder8.setcallbackExecutor(executor17);
        builder2.sethttpExecutor(executor17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        builder20.ensureSaneDefaults();
        java.util.concurrent.Executor executor22 = builder20.callbackExecutor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        builder23.ensureSaneDefaults();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = builder23.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = null;
        builder23.setclientProvider(provider26);
        retrofit.RequestInterceptor requestInterceptor28 = builder23.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        builder29.ensureSaneDefaults();
        java.util.concurrent.Executor executor31 = null;
        builder29.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response34 = serializedObjectSupporter33.deserializeObjectResponse8();
        java.lang.String str35 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder37 = builder29.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.Profiler profiler38 = null;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        builder39.ensureSaneDefaults();
        java.util.concurrent.Executor executor41 = null;
        builder39.callbackExecutor = executor41;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response44 = serializedObjectSupporter43.deserializeObjectResponse8();
        java.lang.String str45 = serializedObjectSupporter43.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter43.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder47 = builder39.setConverter((retrofit.converter.Converter) gsonConverter46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler49;
        retrofit.RestAdapter.Log log51 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server0, provider1, executor17, executor22, requestInterceptor28, (retrofit.converter.Converter) gsonConverter36, profiler38, errorHandler49, log51, logLevel52);
        java.lang.String str54 = restAdapter53.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider55 = restAdapter53.clientProvider;
        retrofit.Profiler profiler56 = restAdapter53.profiler;
        retrofit.Profiler profiler57 = restAdapter53.getprofiler();
        java.lang.Throwable throwable58 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter53.logException(throwable58, "Forbidden");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(profiler56);
        org.junit.Assert.assertNull(profiler57);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel1 = builder0.logLevel;
        retrofit.ErrorHandler errorHandler2 = null;
        builder0.errorHandler = errorHandler2;
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.Server server6 = builder0.server;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        org.junit.Assert.assertTrue("'" + logLevel1 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel1.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server6);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = null;
        builder0.errorHandler = errorHandler1;
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString3();
        retrofit.Server server9 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder0.setServer(server9);
        java.util.concurrent.Executor executor11 = builder10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = builder10.serializedObjectSupporter;
        retrofit.client.Client.Provider provider13 = builder10.getclientProvider();
        retrofit.Profiler profiler14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder15 = builder10.setProfiler(profiler14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(serializedObjectSupporter12);
        org.junit.Assert.assertNull(provider13);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.converter.Converter converter36 = restAdapter29.converter;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter29.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = restAdapter29.serializedObjectSupporter;
        retrofit.Profiler profiler39 = restAdapter29.getprofiler();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(converter36);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(serializedObjectSupporter38);
        org.junit.Assert.assertNull(profiler39);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        builder5.ensureSaneDefaults();
        java.util.concurrent.Executor executor7 = builder5.callbackExecutor;
        builder0.setcallbackExecutor(executor7);
        retrofit.ErrorHandler errorHandler9 = builder0.errorHandler;
        retrofit.RestAdapter.Log log10 = builder0.log;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(log10);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.RestAdapter.Log log35 = restAdapter29.log;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler37 = null;
        builder36.errorHandler = errorHandler37;
        retrofit.RequestInterceptor requestInterceptor39 = builder36.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter.Builder builder41 = builder36.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        builder42.ensureSaneDefaults();
        java.util.concurrent.Executor executor44 = builder42.callbackExecutor;
        builder41.callbackExecutor = executor44;
        retrofit.RestAdapter.LogLevel logLevel46 = builder41.logLevel;
        restAdapter29.setLogLevel(logLevel46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = restAdapter29.serializedObjectSupporter;
        retrofit.client.Client.Provider provider49 = restAdapter29.getclientProvider();
        retrofit.ErrorHandler errorHandler50 = restAdapter29.errorHandler;
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(serializedObjectSupporter48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(errorHandler50);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler31 = restAdapter29.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter1();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString11();
        restHandler31.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.client.Response response37 = serializedObjectSupporter32.deserializeObjectResponse7();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(response37);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler15 = null;
        builder14.errorHandler = errorHandler15;
        retrofit.Server server17 = null;
        builder14.server = server17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Log log21 = null;
        builder19.log = log21;
        java.util.concurrent.Executor executor23 = builder19.getcallbackExecutor();
        builder14.setcallbackExecutor(executor23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        builder25.ensureSaneDefaults();
        retrofit.RestAdapter.Log log27 = null;
        builder25.log = log27;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor31 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter5();
        retrofit.Profiler profiler35 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log38 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean40 = logLevel39.log();
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server12, provider13, executor23, executor29, requestInterceptor31, (retrofit.converter.Converter) gsonConverter34, profiler35, errorHandler37, log38, logLevel39);
        retrofit.Server server42 = restAdapter41.server;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter41.logLevel = logLevel43;
        retrofit.client.Client.Provider provider45 = restAdapter41.getclientProvider();
        retrofit.RestAdapter.Log log46 = restAdapter41.log;
        retrofit.RequestInterceptor requestInterceptor47 = restAdapter41.getrequestInterceptor();
        retrofit.RequestInterceptor requestInterceptor48 = restAdapter41.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler49 = restAdapter41.errorHandler;
        retrofit.RestAdapter.Builder builder50 = builder8.setErrorHandler(errorHandler49);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(log38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.Server server3 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(server3);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler10;
        retrofit.Server server12 = null;
        builder8.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel15 = builder14.logLevel;
        retrofit.ErrorHandler errorHandler16 = null;
        builder14.errorHandler = errorHandler16;
        retrofit.client.Client.Provider provider18 = builder14.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = builder14.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.LogLevel logLevel21 = builder20.logLevel;
        retrofit.ErrorHandler errorHandler22 = null;
        builder20.errorHandler = errorHandler22;
        retrofit.client.Client.Provider provider24 = null;
        builder20.clientProvider = provider24;
        retrofit.RequestInterceptor requestInterceptor26 = builder20.requestInterceptor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler28 = null;
        builder27.errorHandler = errorHandler28;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = builder27.serializedObjectSupporter;
        retrofit.Server server31 = builder27.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter33 = builder32.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = builder32.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel35 = builder32.logLevel;
        retrofit.RestAdapter.Builder builder36 = builder27.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder37 = builder20.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = builder14.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler40 = null;
        builder39.errorHandler = errorHandler40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = builder39.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder44 = builder39.setServer("hi!");
        retrofit.RestAdapter restAdapter45 = builder44.build();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler49 = null;
        builder48.errorHandler = errorHandler49;
        retrofit.Server server51 = null;
        builder48.server = server51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        builder53.ensureSaneDefaults();
        retrofit.RestAdapter.Log log55 = null;
        builder53.log = log55;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        builder48.setcallbackExecutor(executor57);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Log log61 = null;
        builder59.log = log61;
        java.util.concurrent.Executor executor63 = builder59.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter5();
        retrofit.Profiler profiler69 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler71 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log72 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean74 = logLevel73.log();
        retrofit.RestAdapter restAdapter75 = new retrofit.RestAdapter(server46, provider47, executor57, executor63, requestInterceptor65, (retrofit.converter.Converter) gsonConverter68, profiler69, errorHandler71, log72, logLevel73);
        retrofit.ErrorHandler errorHandler76 = restAdapter75.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel77 = restAdapter75.logLevel;
        retrofit.RestAdapter.Log log78 = restAdapter75.log;
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter75.getLogLevel();
        restAdapter45.logLevel = logLevel79;
        retrofit.converter.Converter converter81 = restAdapter45.converter;
        retrofit.converter.Converter converter82 = restAdapter45.getconverter();
        retrofit.client.Client.Provider provider83 = restAdapter45.getclientProvider();
        builder38.clientProvider = provider83;
        retrofit.RestAdapter.Builder builder85 = builder8.setClient(provider83);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(serializedObjectSupporter30);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(serializedObjectSupporter34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(executor57);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(log72);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(errorHandler76);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(converter81);
        org.junit.Assert.assertNotNull(converter82);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor2 = null;
        builder0.callbackExecutor = executor2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Response response5 = serializedObjectSupporter4.deserializeObjectResponse8();
        java.lang.String str6 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder8 = builder0.setConverter((retrofit.converter.Converter) gsonConverter7);
        retrofit.ErrorHandler errorHandler9 = builder0.errorHandler;
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorHandler9);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        retrofit.RestAdapter.Builder builder2 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler3 = null;
        builder2.errorHandler = errorHandler3;
        retrofit.Server server5 = null;
        builder2.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        builder7.ensureSaneDefaults();
        retrofit.RestAdapter.Log log9 = null;
        builder7.log = log9;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        builder2.setcallbackExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        builder13.ensureSaneDefaults();
        retrofit.RestAdapter.Log log15 = null;
        builder13.log = log15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.Profiler profiler23 = null;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Log log26 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server0, provider1, executor11, executor17, requestInterceptor19, (retrofit.converter.Converter) gsonConverter22, profiler23, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter29.logLevel;
        boolean boolean32 = logLevel31.log();
        org.junit.Assert.assertNotNull(executor11);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }
}

