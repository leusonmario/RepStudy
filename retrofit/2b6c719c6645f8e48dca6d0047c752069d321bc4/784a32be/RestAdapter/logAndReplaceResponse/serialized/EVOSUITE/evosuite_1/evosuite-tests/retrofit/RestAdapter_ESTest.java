/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 18:31:00 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.content.IntentFilter;
import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import java.lang.reflect.Method;
import java.net.ResponseCache;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      RequestInterceptor requestInterceptor0 = null;
      boolean boolean0 = false;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = forkJoinPool0.getUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setclientProvider(client_Provider1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      restAdapter_Builder5.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask0.getException();
      assertNull(throwable0);
      
      String string1 = "b6eE.t.d'&W9{mP}xfz";
      restAdapter0.logException(throwable0, string1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Response response0 = null;
      long long0 = 2880L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string1, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder2.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      String string0 = "-|g\"t.w fx'5a?00ZdF";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      String string1 = "";
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "%%udd;`=k~A*";
      requestInterceptorTape0.addEncodedQueryParam(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(runnable0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(profiler1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(requestInterceptor0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(requestInterceptor0, requestInterceptorTape0);
      assertSame(requestInterceptorTape0, requestInterceptor0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      String string3 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", string3);
      assertNotNull(string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(requestInterceptorTape0, requestInterceptor0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) server0;
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse3();
      assertNull(response0);
      
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptorTape0, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "HEADERS";
      Server server0 = new Server(string0);
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse4();
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response0, response0.status);
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      assertNotNull(response1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertFalse(restAdapter_LogLevel1.log());
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertFalse(restAdapter_LogLevel2.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "Sa0=QVd89e8iA?nY0,";
      Server server0 = new Server(string0, string0);
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse4();
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler1);
      assertNotSame(errorHandler1, errorHandler0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler1, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      Server server1 = restAdapter0.getserver();
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server1.getUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server1.getapiUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server1.getName());
      assertNotNull(server1);
      assertSame(server0, server1);
      assertNotSame(errorHandler1, errorHandler0);
      assertSame(server1, server0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(server0, server1);
      assertNotSame(errorHandler1, errorHandler0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      String string1 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-Idle", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(server0, server1);
      assertNotSame(errorHandler1, errorHandler0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      String string2 = "";
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      assertFalse(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      
      String string3 = "";
      long long0 = 32L;
      Response response1 = restAdapter0.logAndReplaceResponse(string3, response0, long0);
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(200, response1.status);
      assertEquals(200, response0.status);
      assertNotNull(response1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(response1, response0);
      assertSame(response0, response1);
      assertNotSame(errorHandler1, errorHandler0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", string4);
      assertNotNull(string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(errorHandler1, errorHandler0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      Server server2 = restAdapter0.getserver();
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server2.getapiUrl());
      assertEquals("default", server2.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server2.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server2.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(server2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertSame(server0, server2);
      assertSame(server2, server1);
      assertSame(server2, server0);
      assertNotSame(errorHandler1, errorHandler0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      boolean boolean0 = restAdapter0.logLevel.log();
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(boolean0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertSame(server0, server2);
      assertNotSame(errorHandler1, errorHandler0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(restAdapter0.callbackExecutor, restAdapter0.callbackExecutor);
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertSame(server0, server2);
      assertNotSame(errorHandler1, errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      
      boolean boolean1 = forkJoinPool0.isTerminating();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(gsonConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      long long0 = 2022L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      
      List<Header> list0 = null;
      String string1 = "";
      TypedString typedString0 = new TypedString(string1);
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotNull(typedString0);
      assertFalse(string1.equals((Object)string0));
      
      Request request0 = new Request(server0.apiUrl, gsonConverter0.encoding, list0, typedString0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertNull(typedString0.fileName());
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("UTF-8", request0.getUrl());
      assertEquals("android.view.TouchDelegate", request0.getMethod());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 75;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      scheduledThreadPoolExecutor0.purge();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "M";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder3.clientProvider, restAdapter_Builder3.callbackExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder3.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Converter converter0 = restAdapter0.getconverter();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNull(converter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(restAdapter_Builder3.server);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setErrorHandler(restAdapter_Builder3.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Executor executor1 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter0.callbackExecutor, restAdapter_Builder2.callbackExecutor);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setLogLevel(restAdapter0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      restAdapter_Builder5.sethttpExecutor(restAdapter_Builder1.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_RestHandler0);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "00Ox.QJ^~RP";
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "D&kVT\"({i'qEt<l";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "pMJXXx=?\\v5@pWK3";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okHttpClient0);
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertNotNull(okHttpClient1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient1);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Rename failed!";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "%jkf{;CEEB+h";
      Server server0 = new Server(string0);
      assertEquals("%jkf{;CEEB+h", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("%jkf{;CEEB+h", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("%jkf{;CEEB+h", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("%jkf{;CEEB+h", server0.getUrl());
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertEquals("%jkf{;CEEB+h", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("%jkf{;CEEB+h", server0.getUrl());
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setExecutors(restAdapter_Builder1.httpExecutor, restAdapter_Builder1.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "g=+}XQfac|fqb0B0&Hi";
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      String string1 = "?:J}]wjIMgP!-";
      restAdapter_Log0.log(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = (-1396);
      int int1 = 0;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(int0, int1, long0, timeUnit0, linkedBlockingQueue0, threadPoolExecutor_CallerRunsPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(restAdapter0.callbackExecutor, restAdapter0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "[\"J;LpvIB^, .[T)";
      Server server0 = new Server(string0, string0);
      assertEquals("[\"J;LpvIB^, .[T)", server0.getName());
      assertEquals("[\"J;LpvIB^, .[T)", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("[\"J;LpvIB^, .[T)", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("[\"J;LpvIB^, .[T)", server0.getName());
      assertEquals("[\"J;LpvIB^, .[T)", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("[\"J;LpvIB^, .[T)", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertEquals("[\"J;LpvIB^, .[T)", server0.getName());
      assertEquals("[\"J;LpvIB^, .[T)", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("[\"J;LpvIB^, .[T)", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(requestInterceptor1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(requestInterceptor1, requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      String string1 = "4kWucCe:WB8;^";
      Server server0 = new Server(string0, string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("4kWucCe:WB8;^", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = null;
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string2 = " J,YeA";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string2);
      assertEquals(" J,YeA", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("4kWucCe:WB8;^", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals(" J,YeA", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("4kWucCe:WB8;^", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals(" J,YeA", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("4kWucCe:WB8;^", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals(" J,YeA", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(" J,YeA", gsonConverter1.getencoding());
      assertNotNull(gsonConverter1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(gsonConverter1, gsonConverter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      Server server0 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string0 = "?.<zOA#H+LRV&D`IdG";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      Method method0 = null;
      RestMethodInfo restMethodInfo0 = null;
      try {
        restMethodInfo0 = new RestMethodInfo(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestMethodInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "retrofit.RestAdapter$Builder$1";
      String string1 = "http.scheme-registry";
      restAdapter_Log0.log(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      restAdapter_Log0.log(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "";
      restAdapter_Log0.log(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "Asynchronous invocation requires calling setExecutors.";
      String string4 = "dW";
      Server server0 = new Server(string3, string4);
      assertEquals("dW", server0.getName());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3341;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("dW", server0.getName());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(restAdapter0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("dW", server0.getName());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(executor0);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "HEADERS";
      Server server0 = new Server(string0);
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      String string1 = "$VALUES";
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse4();
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, response0.status);
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response1.status);
      assertEquals(200, response0.status);
      assertNotNull(response1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getUrl());
      assertFalse(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getUrl());
      assertFalse(restAdapter_LogLevel2.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = restAdapter_Builder0.getclientProvider();
      assertNull(client_Provider0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setConverter(restAdapter_Builder1.converter);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      String string0 = "FULL";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      
      String string1 = "";
      Server server0 = new Server(string1, string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder4.setServer(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertFalse(string1.equals((Object)string0));
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder7.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      String string0 = "-|g\"t.w fx'5a?00ZdF";
      restAdapter_Builder0.ensureSaneDefaults();
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      String string1 = "";
      androidLog0.log(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, client_Provider0, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(profiler0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      String string1 = serializedObjectSupporter0.deserializeObjectString1();
      assertEquals("Retrofit-", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(executor1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(client_Provider1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertFalse(client_Provider1.equals((Object)client_Provider0));
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "b";
      String string1 = "EL1`A7]=P";
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      restAdapter_Builder0.setcallbackExecutor(forkJoinPool0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, profiler0, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(delayed0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask0.getException();
      assertNull(throwable0);
      
      String string1 = "b6eE.t.d'&W9{mP}xfz";
      restAdapter0.logException(throwable0, string1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter_Log0.log(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter0.getconverter();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "'";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("'", server0.getapiUrl());
      assertEquals("'", server0.getUrl());
      assertEquals("'", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 1016;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Callable<Integer>> profiler0 = (Profiler<Callable<Integer>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(server0.DEFAULT_NAME);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("'", server0.getapiUrl());
      assertEquals("'", server0.getUrl());
      assertEquals("'", server0.getName());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("'", server0.getapiUrl());
      assertEquals("'", server0.getUrl());
      assertEquals("'", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("'", server0.getapiUrl());
      assertEquals("'", server0.getUrl());
      assertEquals("'", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.logLevel = restAdapter_LogLevel1;
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 75;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      scheduledThreadPoolExecutor0.purge();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "M";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder3.clientProvider, restAdapter_Builder3.callbackExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder3.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      Converter converter0 = restAdapter0.getconverter();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(converter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setErrorHandler(restAdapter_Builder3.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNotNull(executor0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      Server server0 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ForkJoinPool forkJoinPool1 = ForkJoinTask.getPool();
      assertNull(forkJoinPool1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool1, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      String string0 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", string0);
      assertNotNull(string0);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(executor0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      
      String string1 = "2'_Hhu?6s{)c";
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse3();
      assertNull(response0);
      
      long long0 = 1805L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string1, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      
      TypedString typedString0 = serializedObjectSupporter0.deserializeObjectTypedInput1();
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(2L, typedString0.length());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(requestInterceptor1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(requestInterceptor1, requestInterceptor0);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "Sa0=QVd89e8iA?nY0,";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse4();
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler1);
      assertNotSame(errorHandler1, errorHandler0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler1, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      Server server1 = restAdapter0.getserver();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server1.getapiUrl());
      assertEquals("default", server1.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server1.getUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertNotNull(server1);
      assertSame(server0, server1);
      assertNotSame(errorHandler1, errorHandler0);
      assertSame(server1, server0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(server0, server1);
      assertNotSame(errorHandler1, errorHandler0);
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      String string1 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Sa0=QVd89e8iA?nY0,", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-Idle", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(server0, server1);
      assertNotSame(errorHandler1, errorHandler0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(errorHandler1.equals((Object)errorHandler0));
      
      String string2 = "Content-Length: ";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.Content-Length: 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter restAdapter1 = restAdapter_Builder1.build();
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask0.getException();
      assertNull(throwable0);
      
      String string1 = "b6eE.t.d'&W9{mP}xfz";
      restAdapter0.logException(throwable0, string1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(string1, string0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter restAdapter1 = restAdapter_Builder1.build();
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      
      restAdapter1.logLevel = restAdapter_Builder1.logLevel;
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertFalse(restAdapter1.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask0.getException();
      assertNull(throwable0);
      
      String string1 = "b6eE.t.d'&W9{mP}xfz";
      restAdapter0.logException(throwable0, string1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask0.getException();
      assertNull(throwable0);
      
      boolean boolean0 = ForkJoinTask.inForkJoinPool();
      assertFalse(boolean0);
      
      String string1 = "b6eE.t.d'&W9{mP}xfz";
      restAdapter0.logException(throwable0, string1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      String string2 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", string2);
      assertNotNull(string2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$xoOJ?z()u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      restAdapter_Builder4.setcallbackExecutor(restAdapter_Builder5.httpExecutor);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      boolean boolean0 = restAdapter_Builder1.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      String string1 = "b6eE.t.d'&W9{mP}xfz";
      Profiler profiler0 = restAdapter0.getprofiler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      String string1 = serializedObjectSupporter0.deserializeObjectString3();
      assertEquals("http://example.com/", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      
      Class<Object> class0 = Object.class;
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(map0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      Class<Object> class0 = Object.class;
      Profiler profiler1 = restAdapter0.getprofiler();
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(profiler1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(requestInterceptor0);
      assertSame(requestInterceptor0, requestInterceptorTape0);
      assertSame(requestInterceptorTape0, requestInterceptor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      
      String string1 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(requestInterceptorTape0, requestInterceptor0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "HEADERS";
      Server server0 = new Server(string0);
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("HEADERS", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("HEADERS", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      
      String string1 = "$VALUES";
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse4();
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string1, response0, response0.status);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#Fz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      Executor executor0 = null;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter0.callbackExecutor, executor0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      
      restAdapter_Builder5.sethttpExecutor(restAdapter_Builder1.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_RestHandler0);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "$SxoO\"J?z%)u#IFz&3e";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setLogLevel(restAdapter0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setExecutors(restAdapter_Builder3.callbackExecutor, restAdapter_Builder3.httpExecutor);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      restAdapter_Builder5.setcallbackExecutor(restAdapter_Builder2.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setClient(restAdapter_Builder4.clientProvider);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      
      Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinTask<Integer> forkJoinTask0 = ForkJoinTask.adapt((Callable<? extends Integer>) callable0);
      assertNotNull(forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask0.getException();
      assertNull(throwable0);
      
      boolean boolean0 = ForkJoinTask.inForkJoinPool();
      assertFalse(boolean0);
      
      String string1 = "";
      restAdapter0.logException(throwable0, string1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      
      String string2 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", string2);
      assertNotNull(string2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Executor executor0 = restAdapter_Builder3.gethttpExecutor();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertNotNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "x|t]F.KIy";
      String string1 = "Hh^\\TQ]%";
      Server server0 = new Server(string0, string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Client.Provider client_Provider0 = null;
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string2 = "";
      requestInterceptorTape0.addEncodedPathParam(string2, server0.name);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "N{,]{}7r!vA[|(5'N";
      requestInterceptorTape0.addPathParam(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      gsonConverter0.encoding = server0.DEFAULT_NAME;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertEquals("default", gsonConverter0.getencoding());
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string4 = "";
      gsonConverter0.setencoding(string4);
      assertEquals("", gsonConverter0.getencoding());
      assertSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(requestInterceptor1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(requestInterceptor1, requestInterceptorTape0);
      assertSame(requestInterceptorTape0, requestInterceptor1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("", gsonConverter0.getencoding());
      assertNull(client_Provider1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(requestInterceptorTape0, requestInterceptor1);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      
      Server server1 = restAdapter0.getserver();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server0.getName());
      assertEquals("x|t]F.KIy", server0.getapiUrl());
      assertEquals("x|t]F.KIy", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("x|t]F.KIy", server1.getUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("Hh^\\TQ]%", server1.getName());
      assertEquals("x|t]F.KIy", server1.getapiUrl());
      assertEquals("", gsonConverter0.getencoding());
      assertNotNull(server1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(server0, server1);
      assertSame(requestInterceptorTape0, requestInterceptor1);
      assertSame(server1, server0);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(gsonConverter0.encoding);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      long long0 = 2022L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "";
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      Server server0 = restAdapter0.getserver();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(server0);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 75;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      String string0 = scheduledThreadPoolExecutor0.toString();
      assertNotNull(string0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string1 = "M";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string2, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      String string1 = "";
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "%%udd;`=k~A*";
      MockIOException mockIOException0 = new MockIOException(server0.name);
      assertNotNull(mockIOException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockIOException0, string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "_L38vEpv\"";
      restAdapter_Log0.log(string0);
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      restAdapter_Builder1.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string1 = "";
      String string2 = null;
      int int0 = 16;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder2.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.callbackExecutor, scheduledThreadPoolExecutor0, restAdapter_Builder2.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder1.log, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "android.view.TouchDelegate";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      String string1 = null;
      gsonConverter0.setencoding(string1);
      assertNull(gsonConverter0.getencoding());
      
      Profiler<IntentFilter> profiler0 = (Profiler<IntentFilter>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertNull(gsonConverter0.getencoding());
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      
      List<Header> list0 = null;
      String string2 = "";
      TypedString typedString0 = new TypedString(string2);
      assertEquals(0L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertNotNull(typedString0);
      assertFalse(string2.equals((Object)string0));
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.TouchDelegate", server0.getName());
      assertEquals("android.view.TouchDelegate", server0.getUrl());
      assertEquals("android.view.TouchDelegate", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      
      Method method0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) executor0;
      objectArray0[1] = (Object) restAdapter_RestHandler0;
      objectArray0[2] = (Object) string2;
      objectArray0[3] = (Object) restAdapter_LogLevel0;
      try { 
        restAdapter_RestHandler0.invoke(executor0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }
}
