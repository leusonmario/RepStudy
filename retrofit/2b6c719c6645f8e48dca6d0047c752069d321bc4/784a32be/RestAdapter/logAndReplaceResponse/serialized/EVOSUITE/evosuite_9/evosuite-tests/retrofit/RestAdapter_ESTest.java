/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 23:11:11 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.content.ClipData;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.squareup.okhttp.OkHttpClient;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Class<Integer> class0 = Integer.class;
      String string2 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string2);
      assertEquals("Retrofit-Idle", string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      assertFalse(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      restAdapter_Builder2.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.status);
      
      Response response1 = restAdapter1.logAndReplaceResponse(restAdapter0.THREAD_PREFIX, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      RestAdapter.Builder restAdapter_Builder9 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder9);
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder8));
      
      String string1 = "#+pKZ)c{}05";
      Response response2 = restAdapter1.logAndReplaceResponse(string1, response1, response0.status);
      assertNotNull(response2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(response0, response2);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertSame(response1, response2);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(string1, string0);
      assertSame(response2, response1);
      assertSame(response2, response0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(500, response2.getStatus());
      assertEquals("Internal Server Error", response2.getReason());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(500, response2.status);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder5.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertNotNull(restAdapter_Builder10);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder10, restAdapter_Builder5);
      assertSame(restAdapter_Builder10, restAdapter_Builder0);
      assertSame(restAdapter_Builder10, restAdapter_Builder2);
      assertSame(restAdapter_Builder10, restAdapter_Builder6);
      assertSame(restAdapter_Builder10, restAdapter_Builder1);
      assertSame(restAdapter_Builder10, restAdapter_Builder3);
      assertSame(restAdapter_Builder10, restAdapter_Builder8);
      assertSame(restAdapter_Builder10, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder10, restAdapter_Builder9);
      assertSame(restAdapter_Builder10, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder10.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder11 = restAdapter_Builder5.setServer(server0);
      assertNotNull(restAdapter_Builder11);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder11, restAdapter_Builder5);
      assertSame(restAdapter_Builder11, restAdapter_Builder0);
      assertSame(restAdapter_Builder11, restAdapter_Builder8);
      assertSame(restAdapter_Builder11, restAdapter_Builder6);
      assertSame(restAdapter_Builder11, restAdapter_Builder2);
      assertSame(restAdapter_Builder11, restAdapter_Builder4);
      assertSame(restAdapter_Builder11, restAdapter_Builder7);
      assertSame(restAdapter_Builder11, restAdapter_Builder10);
      assertSame(restAdapter_Builder11, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder11, restAdapter_Builder9);
      assertSame(restAdapter_Builder11, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder11.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      restAdapter_Builder5.ensureSaneDefaults();
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Executor executor0 = restAdapter_Builder5.gethttpExecutor();
      assertNotNull(executor0);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Profiler profiler0 = restAdapter1.getprofiler();
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder12 = restAdapter_Builder3.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder12, restAdapter_Builder6);
      assertSame(restAdapter_Builder12, restAdapter_Builder10);
      assertSame(restAdapter_Builder12, restAdapter_Builder1);
      assertSame(restAdapter_Builder12, restAdapter_Builder7);
      assertSame(restAdapter_Builder12, restAdapter_Builder2);
      assertSame(restAdapter_Builder12, restAdapter_Builder0);
      assertSame(restAdapter_Builder12, restAdapter_Builder8);
      assertSame(restAdapter_Builder12, restAdapter_Builder11);
      assertSame(restAdapter_Builder12, restAdapter_Builder4);
      assertSame(restAdapter_Builder12, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder12, restAdapter_Builder9);
      assertSame(restAdapter_Builder12, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder12.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Executor executor1 = restAdapter_Builder6.getcallbackExecutor();
      assertNotNull(executor1);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder10);
      assertNotSame(restAdapter_Builder6, restAdapter_Builder9);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder11);
      assertSame(restAdapter_Builder6, restAdapter_Builder12);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder12);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertSame(restAdapter_Builder4, restAdapter_Builder12);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder6.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      String string2 = "<--- HTTP %s %s (%sms)";
      String string3 = "Profiler may not be null.";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)44;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)90;
      byteArray0[2] = byte1;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertNotNull(typedByteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)1, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals(4, byteArray0.length);
      
      Request request0 = new Request(server0.DEFAULT_NAME, string2, response1.headers, typedByteArray0);
      assertNotNull(request0);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)1, (byte)0}, byteArray0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals("default", request0.getMethod());
      assertEquals("<--- HTTP %s %s (%sms)", request0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(4, byteArray0.length);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)1, (byte)0}, byteArray0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(response0, response2);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertSame(response1, response2);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals("default", request0.getMethod());
      assertEquals("<--- HTTP %s %s (%sms)", request0.getUrl());
      assertEquals("<--- HTTP %s %s (%sms)", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      restAdapter_Builder0.logLevel = restAdapter_Builder1.logLevel;
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertFalse(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      restAdapter_Builder2.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response0.status);
      
      Response response1 = restAdapter1.logAndReplaceResponse(restAdapter0.THREAD_PREFIX, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      RestAdapter.Builder restAdapter_Builder8 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder8);
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder8.equals((Object)restAdapter_Builder6));
      
      String string1 = "#+pKZ)c{}05";
      Response response2 = restAdapter1.logAndReplaceResponse(string1, response1, response0.status);
      assertNotNull(response2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response0);
      assertSame(response1, response2);
      assertNotSame(string1, string0);
      assertSame(response2, response1);
      assertSame(response2, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals(500, response2.getStatus());
      assertEquals("Internal Server Error", response2.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(500, response2.status);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder5.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertNotNull(restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder9, restAdapter_Builder6);
      assertSame(restAdapter_Builder9, restAdapter_Builder4);
      assertSame(restAdapter_Builder9, restAdapter_Builder3);
      assertSame(restAdapter_Builder9, restAdapter_Builder5);
      assertSame(restAdapter_Builder9, restAdapter_Builder1);
      assertSame(restAdapter_Builder9, restAdapter_Builder7);
      assertSame(restAdapter_Builder9, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder9, restAdapter_Builder8);
      assertSame(restAdapter_Builder9, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder8));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder5.setServer(server0);
      assertNotNull(restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder10, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder10, restAdapter_Builder8);
      assertSame(restAdapter_Builder10, restAdapter_Builder5);
      assertSame(restAdapter_Builder10, restAdapter_Builder0);
      assertSame(restAdapter_Builder10, restAdapter_Builder9);
      assertSame(restAdapter_Builder10, restAdapter_Builder4);
      assertSame(restAdapter_Builder10, restAdapter_Builder2);
      assertSame(restAdapter_Builder10, restAdapter_Builder6);
      assertSame(restAdapter_Builder10, restAdapter_Builder7);
      assertSame(restAdapter_Builder10, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder10.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder8));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      restAdapter_Builder5.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder8));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      Executor executor0 = restAdapter_Builder5.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder8));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder11 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder11, restAdapter_Builder4);
      assertSame(restAdapter_Builder11, restAdapter_Builder6);
      assertSame(restAdapter_Builder11, restAdapter_Builder3);
      assertSame(restAdapter_Builder11, restAdapter_Builder7);
      assertSame(restAdapter_Builder11, restAdapter_Builder0);
      assertSame(restAdapter_Builder11, restAdapter_Builder10);
      assertNotSame(restAdapter_Builder11, restAdapter_Builder8);
      assertSame(restAdapter_Builder11, restAdapter_Builder5);
      assertSame(restAdapter_Builder11, restAdapter_Builder2);
      assertSame(restAdapter_Builder11, restAdapter_Builder1);
      assertSame(restAdapter_Builder11, restAdapter_Builder9);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_Builder11.equals((Object)restAdapter_Builder8));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Profiler profiler0 = restAdapter1.getprofiler();
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder12 = restAdapter_Builder3.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder12, restAdapter_Builder9);
      assertSame(restAdapter_Builder12, restAdapter_Builder6);
      assertSame(restAdapter_Builder12, restAdapter_Builder0);
      assertSame(restAdapter_Builder12, restAdapter_Builder10);
      assertSame(restAdapter_Builder12, restAdapter_Builder2);
      assertSame(restAdapter_Builder12, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder12, restAdapter_Builder8);
      assertSame(restAdapter_Builder12, restAdapter_Builder11);
      assertSame(restAdapter_Builder12, restAdapter_Builder3);
      assertSame(restAdapter_Builder12, restAdapter_Builder5);
      assertSame(restAdapter_Builder12, restAdapter_Builder4);
      assertSame(restAdapter_Builder12, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder12.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Executor executor1 = restAdapter_Builder6.getcallbackExecutor();
      assertNotNull(executor1);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder12);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder9);
      assertNotSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder10);
      assertSame(restAdapter_Builder6, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder12);
      assertSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder12);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder12);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertFalse(restAdapter_Builder6.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder8));
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      String string2 = "<--- HTTP %s %s (%sms)";
      String string3 = "Profiler may not be null.";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)44;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)90;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertNotNull(typedByteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)90, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertEquals(4, byteArray0.length);
      
      Request request0 = new Request(server0.DEFAULT_NAME, string2, response1.headers, typedByteArray0);
      assertNotNull(request0);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)90, (byte)0}, byteArray0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertEquals("default", request0.getMethod());
      assertEquals("<--- HTTP %s %s (%sms)", request0.getUrl());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(4, byteArray0.length);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)90, (byte)0}, byteArray0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response0);
      assertSame(response1, response2);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder8));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder8));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("<--- HTTP %s %s (%sms)", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertNull(typedByteArray0.fileName());
      assertEquals(4L, typedByteArray0.length());
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertEquals("default", request0.getMethod());
      assertEquals("<--- HTTP %s %s (%sms)", request0.getUrl());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Long long0 = serializedObjectSupporter0.deserializeObjectLong8();
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "eq_J";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(androidLog0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 2991;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(restAdapter_Builder1.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder0.setcallbackExecutor(restAdapter_Builder0.httpExecutor);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder0.setclientProvider(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      restAdapter_Builder0.setcallbackExecutor(restAdapter_Builder0.httpExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      String string0 = "-hbJ'\\e";
      int int0 = 10;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = false;
      restAdapter_Builder0.logLevel = restAdapter_Builder0.logLevel;
      assertFalse(restAdapter_Builder0.logLevel.log());
      
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      String string1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "H";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      String string1 = "<";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string2 = "";
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockException mockException0 = new MockException(string2, mockThrowable0);
      assertNotNull(mockException0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "-SH$V";
      restAdapter0.logException(mockException0, string3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      
      String string4 = "";
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 12;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Callable<Object>> profiler0 = (Profiler<Callable<Object>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypedString typedString0 = new TypedString(gsonConverter0.encoding);
      assertNotNull(typedString0);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(5L, typedString0.length());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(restAdapter0.profiler);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter_Builder1.sethttpExecutor(scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter0.callbackExecutor, restAdapter_Builder0.callbackExecutor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter_Builder4.serializedObjectSupporter = restAdapter0.serializedObjectSupporter;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLogLevel(restAdapter_Builder2.logLevel);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertNotNull(delayed0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder5.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 12;
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      assertNotNull(threadPoolExecutor_AbortPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_AbortPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Callable<Object>> profiler0 = (Profiler<Callable<Object>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      String string1 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypedString typedString0 = new TypedString(gsonConverter0.encoding);
      assertNotNull(typedString0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(5L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Request request0 = new Request(server0.DEFAULT_NAME, string1, linkedList0, typedString0);
      assertNotNull(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(5L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("default", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(0, linkedList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(5L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("default", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("", request1.getUrl());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(restAdapter0.profiler);
      assertNotNull(restAdapter_Builder1);
      assertSame(string0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter0.server);
      assertNotNull(restAdapter_Builder2);
      assertSame(string0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter0.callbackExecutor, restAdapter_Builder0.callbackExecutor);
      assertNotNull(restAdapter_Builder3);
      assertSame(string0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder4);
      assertSame(string0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter_Builder4.serializedObjectSupporter = restAdapter0.serializedObjectSupporter;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLogLevel(restAdapter_Builder2.logLevel);
      assertNotNull(restAdapter_Builder5);
      assertSame(string0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertNotNull(delayed0);
      assertSame(string0, string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder5.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "android.view.ViewTreeObserver";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "Interface definitions must not extend other interfaces.";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(restAdapter_LogLevel1.log());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) server0;
      objectArray0[1] = (Object) string1;
      objectArray0[2] = (Object) serializedObjectSupporter0;
      objectArray0[3] = (Object) restAdapter_RestHandler0;
      objectArray0[4] = (Object) restAdapter_RestHandler0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptor0, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "android.view.ViewTreeObserver";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      gsonConverter0.setencoding(server0.DEFAULT_NAME);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      
      String string1 = serializedObjectSupporter0.deserializeObjectString10();
      assertNotNull(string1);
      assertEquals("http://example.com/", string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string2 = "Interface definitions must not extend other interfaces.";
      AndroidLog androidLog0 = new AndroidLog(string2);
      assertNotNull(androidLog0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(restAdapter_LogLevel1.log());
      
      String string3 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string3);
      assertEquals("Retrofit-", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Class<Integer> class0 = Integer.class;
      ErrorHandler errorHandler1 = restAdapter0.geterrorHandler();
      assertNotNull(errorHandler1);
      assertSame(errorHandler1, errorHandler0);
      assertSame(errorHandler0, errorHandler1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Converter converter1 = restAdapter0.getconverter();
      assertNull(converter1);
      assertSame(errorHandler0, errorHandler1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.status);
      
      long long0 = 20000L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response0, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-75);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-104);
      byteArray0[2] = byte2;
      byte byte3 = (byte)75;
      byteArray0[3] = byte3;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-75), (byte) (-104), (byte)75}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      int int0 = 12540;
      Random.setNextRandom(int0);
      String string0 = "Asynchronous invocation requires calling setExecutors.";
      String string1 = "";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int1 = 975;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int1);
      assertNotNull(forkJoinPool0);
      assertFalse(int1 == int0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = null;
      String string2 = "";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string2);
      assertNotNull(gsonConverter0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", gsonConverter0.getencoding());
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      String string3 = "X";
      RestMethodInfo restMethodInfo0 = null;
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string0, linkedList0, formUrlEncodedTypedOutput0);
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("Asynchronous invocation requires calling setExecutors.", request0.getUrl());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getapiUrl());
      assertEquals("Asynchronous invocation requires calling setExecutors.", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string3, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      byte byte1 = (byte)22;
      byteArray0[1] = byte1;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)22}, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Log0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestMethodInfo restMethodInfo0 = null;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertNull(requestInterceptor0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      String string0 = null;
      requestInterceptorTape0.addEncodedQueryParam(string0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "ljmg)d3vd";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("ljmg)d3vd", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("ljmg)d3vd", server0.getapiUrl());
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "isR:";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("isR:", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("isR:", gsonConverter0.getencoding());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      String string0 = restAdapter0.getTHREAD_PREFIX();
      assertNotNull(string0);
      assertEquals("Retrofit-", string0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = ")27fy";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals(")27fy", server0.getUrl());
      assertEquals(")27fy", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertEquals(")27fy", server0.getUrl());
      assertEquals(")27fy", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "R-@lW'PG$o";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("R-@lW'PG$o", server0.getapiUrl());
      assertEquals("R-@lW'PG$o", server0.getName());
      assertEquals("R-@lW'PG$o", server0.getUrl());
      
      String string1 = null;
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0.apiUrl);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("R-@lW'PG$o", server0.getapiUrl());
      assertEquals("R-@lW'PG$o", server0.getName());
      assertEquals("R-@lW'PG$o", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setClient(restAdapter_Builder2.clientProvider);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("R-@lW'PG$o", server0.getapiUrl());
      assertEquals("R-@lW'PG$o", server0.getName());
      assertEquals("R-@lW'PG$o", server0.getUrl());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setConverter(restAdapter_Builder1.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 0;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter_Builder0.sethttpExecutor(scheduledThreadPoolExecutor0);
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 2004;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      int int1 = 761;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int1);
      assertNotNull(scheduledThreadPoolExecutor0);
      assertFalse(int1 == int0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = null;
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string0 = "Server may not be blank.";
      String string1 = null;
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertEquals("Server may not be blank.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertEquals("Server may not be blank.", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("Server may not be blank.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertEquals("Server may not be blank.", server0.getUrl());
      
      String string2 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setServer(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client_Provider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client_Provider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "M5/V[yA%GGmo$fnZ";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertEquals("M5/V[yA%GGmo$fnZ", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("M5/V[yA%GGmo$fnZ", gsonConverter0.getencoding());
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("M5/V[yA%GGmo$fnZ", gsonConverter0.getencoding());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      restAdapter_Builder1.setclientProvider(client_Provider1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(client_Provider0).toString();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "-VVma<!]Th!$n_s:j";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("-VVma<!]Th!$n_s:j", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getUrl());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals("-VVma<!]Th!$n_s:j", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getUrl());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0.DEFAULT_NAME);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("-VVma<!]Th!$n_s:j", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getUrl());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getName());
      
      Client.Provider client_Provider1 = restAdapter_Builder3.getclientProvider();
      assertNotNull(client_Provider1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(client_Provider1, client_Provider0);
      assertEquals("-VVma<!]Th!$n_s:j", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getUrl());
      assertEquals("-VVma<!]Th!$n_s:j", server0.getName());
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "[principal: ";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      MockThrowable mockThrowable0 = new MockThrowable(restAdapter0.THREAD_PREFIX);
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockThrowable0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Retrofit-", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Retrofit-", throwable0.toString());
      assertEquals("Retrofit-", throwable0.getMessage());
      
      String string1 = "HEADERS";
      restAdapter0.logException(mockThrowable0, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(mockThrowable0, throwable0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: Retrofit-", mockThrowable0.toString());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      BasicHttpParams basicHttpParams0 = new BasicHttpParams();
      assertNotNull(basicHttpParams0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(basicHttpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "---> HTTP %s %s";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("---> HTTP %s %s", server0.getName());
      assertEquals("---> HTTP %s %s", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("---> HTTP %s %s", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(client_Provider0).toString();
      int int0 = 300;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("---> HTTP %s %s", server0.getName());
      assertEquals("---> HTTP %s %s", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("---> HTTP %s %s", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider1);
      assertSame(client_Provider1, client_Provider0);
      assertEquals("---> HTTP %s %s", server0.getName());
      assertEquals("---> HTTP %s %s", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("---> HTTP %s %s", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertNotNull(okClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      restAdapter_Builder1.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder1.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertNotNull(server0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string0 = null;
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestMethodInfo restMethodInfo0 = null;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.getcallbackExecutor();
      assertNull(executor0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      ApacheClient apacheClient1 = new ApacheClient();
      assertNotNull(apacheClient1);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      
      int int0 = 2;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      assertNotNull(priorityBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, priorityBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      String string0 = "lrsbi";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient1);
      assertNotNull(restAdapter_Builder1);
      assertNotSame(apacheClient1, apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(threadPoolExecutor0, restAdapter_Builder0.callbackExecutor);
      assertNotNull(restAdapter_Builder2);
      assertNotSame(apacheClient1, apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      
      restAdapter_Builder2.setcallbackExecutor(restAdapter_Builder1.httpExecutor);
      assertNotSame(apacheClient1, apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "android.webkit.JsPromptResult";
      String string1 = "@[ShP%WW!nV36Hn{U";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string1);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_LogLevel0.log());
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("android.webkit.JsPromptResult", gsonConverter0.getencoding());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("android.webkit.JsPromptResult", gsonConverter0.getencoding());
      
      MockFile mockFile0 = new MockFile(string1, string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      TypedFile typedFile0 = new TypedFile(gsonConverter0.encoding, mockFile0);
      assertNotNull(typedFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("android.webkit.JsPromptResult", gsonConverter0.getencoding());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_9/@[ShP%WW!nV36Hn{U/android.webkit.JsPromptResult", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_9/@[ShP%WW!nV36Hn{U", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("android.webkit.JsPromptResult", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("android.webkit.JsPromptResult", typedFile0.mimeType());
      assertEquals(0L, typedFile0.length());
      assertEquals("android.webkit.JsPromptResult", typedFile0.fileName());
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      
      try { 
        gsonConverter0.fromBody(typedFile0, class0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.io.FileNotFoundException
         //
         verifyException("retrofit.converter.GsonConverter", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder2.setClient(restAdapter_Builder8.clientProvider);
      assertNotNull(restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder9);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder9);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder8);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder9, restAdapter_Builder3);
      assertSame(restAdapter_Builder9, restAdapter_Builder1);
      assertSame(restAdapter_Builder9, restAdapter_Builder0);
      assertSame(restAdapter_Builder9, restAdapter_Builder7);
      assertSame(restAdapter_Builder9, restAdapter_Builder6);
      assertSame(restAdapter_Builder9, restAdapter_Builder5);
      assertSame(restAdapter_Builder9, restAdapter_Builder8);
      assertSame(restAdapter_Builder9, restAdapter_Builder2);
      assertSame(restAdapter_Builder9, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder5.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertNotNull(restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder10, restAdapter_Builder2);
      assertSame(restAdapter_Builder10, restAdapter_Builder0);
      assertSame(restAdapter_Builder10, restAdapter_Builder5);
      assertSame(restAdapter_Builder10, restAdapter_Builder7);
      assertSame(restAdapter_Builder10, restAdapter_Builder9);
      assertSame(restAdapter_Builder10, restAdapter_Builder6);
      assertSame(restAdapter_Builder10, restAdapter_Builder3);
      assertSame(restAdapter_Builder10, restAdapter_Builder4);
      assertSame(restAdapter_Builder10, restAdapter_Builder8);
      assertSame(restAdapter_Builder10, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder11 = restAdapter_Builder5.setServer(server0);
      assertNotNull(restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder11, restAdapter_Builder3);
      assertSame(restAdapter_Builder11, restAdapter_Builder1);
      assertSame(restAdapter_Builder11, restAdapter_Builder10);
      assertSame(restAdapter_Builder11, restAdapter_Builder8);
      assertSame(restAdapter_Builder11, restAdapter_Builder4);
      assertSame(restAdapter_Builder11, restAdapter_Builder6);
      assertSame(restAdapter_Builder11, restAdapter_Builder2);
      assertSame(restAdapter_Builder11, restAdapter_Builder9);
      assertSame(restAdapter_Builder11, restAdapter_Builder0);
      assertSame(restAdapter_Builder11, restAdapter_Builder5);
      assertSame(restAdapter_Builder11, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter_Builder5.ensureSaneDefaults();
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Executor executor0 = restAdapter_Builder5.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder12 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel2);
      assertNotNull(restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder12, restAdapter_Builder1);
      assertSame(restAdapter_Builder12, restAdapter_Builder11);
      assertSame(restAdapter_Builder12, restAdapter_Builder6);
      assertSame(restAdapter_Builder12, restAdapter_Builder0);
      assertSame(restAdapter_Builder12, restAdapter_Builder5);
      assertSame(restAdapter_Builder12, restAdapter_Builder7);
      assertSame(restAdapter_Builder12, restAdapter_Builder10);
      assertSame(restAdapter_Builder12, restAdapter_Builder9);
      assertSame(restAdapter_Builder12, restAdapter_Builder3);
      assertSame(restAdapter_Builder12, restAdapter_Builder4);
      assertSame(restAdapter_Builder12, restAdapter_Builder2);
      assertSame(restAdapter_Builder12, restAdapter_Builder8);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Profiler profiler0 = restAdapter1.getprofiler();
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder13 = restAdapter_Builder3.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder13, restAdapter_Builder6);
      assertSame(restAdapter_Builder13, restAdapter_Builder2);
      assertSame(restAdapter_Builder13, restAdapter_Builder0);
      assertSame(restAdapter_Builder13, restAdapter_Builder8);
      assertSame(restAdapter_Builder13, restAdapter_Builder11);
      assertSame(restAdapter_Builder13, restAdapter_Builder12);
      assertSame(restAdapter_Builder13, restAdapter_Builder10);
      assertSame(restAdapter_Builder13, restAdapter_Builder1);
      assertSame(restAdapter_Builder13, restAdapter_Builder3);
      assertSame(restAdapter_Builder13, restAdapter_Builder4);
      assertSame(restAdapter_Builder13, restAdapter_Builder9);
      assertSame(restAdapter_Builder13, restAdapter_Builder7);
      assertSame(restAdapter_Builder13, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Executor executor1 = restAdapter_Builder6.getcallbackExecutor();
      assertNotNull(executor1);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder12);
      assertSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder13);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder9);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder12);
      assertSame(restAdapter_Builder6, restAdapter_Builder11);
      assertSame(restAdapter_Builder6, restAdapter_Builder10);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder13);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      restAdapter_Builder0.setcallbackExecutor(forkJoinPool0);
      String string0 = ")27fy";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(androidLog0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(")27fy", server0.getUrl());
      assertEquals(")27fy", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(server0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(")27fy", server0.getUrl());
      assertEquals(")27fy", server0.getapiUrl());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, client_Provider0, restAdapter_Builder1.httpExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder1.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      Class<TypedByteArray> class0 = TypedByteArray.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder4.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder4.errorHandler);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder6.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder4.setRequestInterceptor(restAdapter_Builder7.requestInterceptor);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder8);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder4.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder9, restAdapter_Builder4);
      assertSame(restAdapter_Builder9, restAdapter_Builder7);
      assertSame(restAdapter_Builder9, restAdapter_Builder2);
      assertSame(restAdapter_Builder9, restAdapter_Builder5);
      assertSame(restAdapter_Builder9, restAdapter_Builder0);
      assertSame(restAdapter_Builder9, restAdapter_Builder8);
      assertSame(restAdapter_Builder9, restAdapter_Builder1);
      assertSame(restAdapter_Builder9, restAdapter_Builder6);
      assertSame(restAdapter_Builder9, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      GsonConverter gsonConverter0 = (GsonConverter)restAdapter1.getconverter();
      assertNotNull(gsonConverter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setProfiler(restAdapter1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "H";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      String string1 = "<";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse1();
      assertNotNull(response0);
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertNotNull(profiler1);
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor1 = restAdapter0.getcallbackExecutor();
      assertNull(executor1);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "=8?N`";
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse1();
      assertNotNull(response0);
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertEquals(200, response0.status);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RequestInterceptor requestInterceptor1 = restAdapter0.getrequestInterceptor();
      assertNotNull(requestInterceptor1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(requestInterceptor1, requestInterceptor0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "retrofit.RestAdapter$Log$1";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder1.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder1.log, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertNull(executor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter restAdapter1 = restAdapter_Builder0.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      
      Executor executor1 = restAdapter1.getcallbackExecutor();
      assertNotNull(executor1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response0.status);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "Q";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("Q", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q", server0.getName());
      assertEquals("Q", server0.getUrl());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, server0.DEFAULT_NAME);
      assertFalse(boolean0);
      assertEquals("Q", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q", server0.getName());
      assertEquals("Q", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Q", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q", server0.getName());
      assertEquals("Q", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = restAdapter_Builder1.serializedObjectSupporter;
      assertNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("Q", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q", server0.getName());
      assertEquals("Q", server0.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertEquals("Q", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Q", server0.getName());
      assertEquals("Q", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      Server server1 = restAdapter0.getserver();
      assertNotNull(server1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(server1, server0);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Q", server1.getapiUrl());
      assertEquals("Q", server1.getUrl());
      assertEquals("Q", server1.getName());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder6.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      RequestInterceptor requestInterceptor1 = restAdapter1.getrequestInterceptor();
      assertNotNull(requestInterceptor1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(requestInterceptor1, requestInterceptor0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder9, restAdapter_Builder3);
      assertSame(restAdapter_Builder9, restAdapter_Builder8);
      assertSame(restAdapter_Builder9, restAdapter_Builder6);
      assertSame(restAdapter_Builder9, restAdapter_Builder2);
      assertSame(restAdapter_Builder9, restAdapter_Builder1);
      assertSame(restAdapter_Builder9, restAdapter_Builder4);
      assertSame(restAdapter_Builder9, restAdapter_Builder0);
      assertSame(restAdapter_Builder9, restAdapter_Builder5);
      assertSame(restAdapter_Builder9, restAdapter_Builder7);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "interface";
      String string1 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, client_Provider0, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, profiler0, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      String string2 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string2);
      assertEquals("Retrofit-Idle", string2);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(gsonConverter0.encoding);
      assertNotNull(androidLog0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(forkJoinPool0, executor0);
      assertSame(executor0, forkJoinPool0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.status);
      
      Response response1 = restAdapter1.logAndReplaceResponse(restAdapter0.THREAD_PREFIX, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Y\\Qx%8CC";
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor, requestInterceptor0, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Server server0 = restAdapter0.getserver();
      assertNull(server0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_LogLevel0.log());
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "q";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder1.clientProvider, restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder1.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "H";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "<";
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse1();
      assertNotNull(response0);
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string1, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      
      String string2 = "";
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      
      Request request0 = new Request(string2, response1.reason, response0.headers, formUrlEncodedTypedOutput0);
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals("", request0.getMethod());
      assertEquals("OK", request0.getUrl());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals("", request0.getMethod());
      assertEquals("OK", request0.getUrl());
      assertEquals("OK", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertNotNull(request2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals("", request0.getMethod());
      assertEquals("OK", request0.getUrl());
      assertEquals("OK", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals("", request2.getMethod());
      assertEquals("OK", request2.getUrl());
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLogLevel(restAdapter_LogLevel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response0.status);
      
      Response response1 = restAdapter1.logAndReplaceResponse(restAdapter0.THREAD_PREFIX, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      restAdapter1.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder3.errorHandler);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, server0.name);
      assertFalse(boolean0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = serializedObjectSupporter0;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.status);
      
      String string1 = "A";
      String string2 = "android.util.SparseArray";
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      
      Request request0 = new Request(string1, string2, response0.headers, multipartTypedOutput0);
      assertNotNull(request0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("A", request0.getMethod());
      assertEquals("android.util.SparseArray", request0.getUrl());
      assertEquals(500, response0.status);
      
      Request request1 = restAdapter1.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("A", request0.getMethod());
      assertEquals("android.util.SparseArray", request0.getUrl());
      assertEquals("android.util.SparseArray", request1.getUrl());
      assertEquals("A", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(500, response0.status);
      
      Response response1 = restAdapter1.logAndReplaceResponse(restAdapter0.THREAD_PREFIX, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter1.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertNull(server0.getapiUrl());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      String string1 = "org.apache.http.message.BasicHeader";
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string2 = "";
      AndroidLog androidLog0 = new AndroidLog(string2);
      assertNotNull(androidLog0);
      assertFalse(string2.equals((Object)string1));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNull(server0.getapiUrl());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      String string3 = "";
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse3();
      assertNotNull(response0);
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.status);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string3, response0, response0.status);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      restAdapter_Builder2.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response0.status);
      
      Response response1 = restAdapter1.logAndReplaceResponse(restAdapter0.THREAD_PREFIX, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      RestAdapter.Builder restAdapter_Builder9 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder9);
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder8));
      
      String string1 = "#+pKZ)c{}05";
      Response response2 = restAdapter1.logAndReplaceResponse(string1, response1, response0.status);
      assertNotNull(response2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(response0, response2);
      assertSame(response0, response1);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(string1, string0);
      assertSame(response2, response0);
      assertSame(response2, response1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(500, response2.getStatus());
      assertEquals("Internal Server Error", response2.getReason());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(500, response2.status);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder5.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertNotNull(restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder10, restAdapter_Builder8);
      assertSame(restAdapter_Builder10, restAdapter_Builder1);
      assertSame(restAdapter_Builder10, restAdapter_Builder5);
      assertSame(restAdapter_Builder10, restAdapter_Builder0);
      assertSame(restAdapter_Builder10, restAdapter_Builder7);
      assertSame(restAdapter_Builder10, restAdapter_Builder4);
      assertSame(restAdapter_Builder10, restAdapter_Builder6);
      assertSame(restAdapter_Builder10, restAdapter_Builder2);
      assertSame(restAdapter_Builder10, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder10, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder10.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder11 = restAdapter_Builder5.setServer(server0);
      assertNotNull(restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder11, restAdapter_Builder10);
      assertSame(restAdapter_Builder11, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder11, restAdapter_Builder9);
      assertSame(restAdapter_Builder11, restAdapter_Builder6);
      assertSame(restAdapter_Builder11, restAdapter_Builder4);
      assertSame(restAdapter_Builder11, restAdapter_Builder8);
      assertSame(restAdapter_Builder11, restAdapter_Builder2);
      assertSame(restAdapter_Builder11, restAdapter_Builder0);
      assertSame(restAdapter_Builder11, restAdapter_Builder1);
      assertSame(restAdapter_Builder11, restAdapter_Builder5);
      assertSame(restAdapter_Builder11, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder11.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      restAdapter_Builder5.ensureSaneDefaults();
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      Executor executor0 = restAdapter_Builder5.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder12 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel2);
      assertNotNull(restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder12, restAdapter_Builder8);
      assertSame(restAdapter_Builder12, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder12, restAdapter_Builder9);
      assertSame(restAdapter_Builder12, restAdapter_Builder0);
      assertSame(restAdapter_Builder12, restAdapter_Builder11);
      assertSame(restAdapter_Builder12, restAdapter_Builder2);
      assertSame(restAdapter_Builder12, restAdapter_Builder4);
      assertSame(restAdapter_Builder12, restAdapter_Builder6);
      assertSame(restAdapter_Builder12, restAdapter_Builder1);
      assertSame(restAdapter_Builder12, restAdapter_Builder5);
      assertSame(restAdapter_Builder12, restAdapter_Builder10);
      assertSame(restAdapter_Builder12, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder12.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Profiler profiler0 = restAdapter1.getprofiler();
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder13 = restAdapter_Builder3.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder13, restAdapter_Builder5);
      assertSame(restAdapter_Builder13, restAdapter_Builder7);
      assertSame(restAdapter_Builder13, restAdapter_Builder3);
      assertSame(restAdapter_Builder13, restAdapter_Builder10);
      assertSame(restAdapter_Builder13, restAdapter_Builder4);
      assertSame(restAdapter_Builder13, restAdapter_Builder2);
      assertSame(restAdapter_Builder13, restAdapter_Builder6);
      assertSame(restAdapter_Builder13, restAdapter_Builder12);
      assertSame(restAdapter_Builder13, restAdapter_Builder8);
      assertSame(restAdapter_Builder13, restAdapter_Builder0);
      assertSame(restAdapter_Builder13, restAdapter_Builder11);
      assertSame(restAdapter_Builder13, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder13, restAdapter_Builder9);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder13.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Executor executor1 = restAdapter_Builder6.getcallbackExecutor();
      assertNotNull(executor1);
      assertSame(restAdapter_Builder5, restAdapter_Builder13);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder12);
      assertSame(restAdapter_Builder6, restAdapter_Builder13);
      assertNotSame(restAdapter_Builder6, restAdapter_Builder9);
      assertSame(restAdapter_Builder6, restAdapter_Builder10);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder11);
      assertNotSame(string0, string1);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder12);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder13);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertSame(restAdapter_Builder4, restAdapter_Builder13);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder12);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder6.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      String string2 = "<--- HTTP %s %s (%sms)";
      String string3 = "Profiler may not be null.";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)44;
      byteArray0[0] = byte0;
      byte byte1 = (byte)1;
      byteArray0[1] = byte1;
      byte byte2 = (byte)90;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertNotNull(typedByteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)90, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4L, typedByteArray0.length());
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals(4, byteArray0.length);
      
      Request request0 = new Request(server0.DEFAULT_NAME, string2, response1.headers, typedByteArray0);
      assertNotNull(request0);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)90, (byte)0}, byteArray0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4L, typedByteArray0.length());
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("<--- HTTP %s %s (%sms)", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(4, byteArray0.length);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertNotNull(request1);
      assertArrayEquals(new byte[] {(byte)44, (byte)1, (byte)90, (byte)0}, byteArray0);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(response0, response2);
      assertSame(response0, response1);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4L, typedByteArray0.length());
      assertEquals("Profiler may not be null.", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("<--- HTTP %s %s (%sms)", request0.getUrl());
      assertEquals("default", request0.getMethod());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("<--- HTTP %s %s (%sms)", request1.getUrl());
      assertEquals("default", request1.getMethod());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.getStatus());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockThrowable0, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Class<Integer> class0 = Integer.class;
      String string2 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string2);
      assertEquals("Retrofit-Idle", string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Class<Integer> class1 = null;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.NONE;
      RestAdapter.LogLevel restAdapter_LogLevel3 = RestAdapter.LogLevel.BASIC;
      Class<Object> class0 = Object.class;
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      String string0 = "Host must not be null.";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, forkJoinPool0, forkJoinPool0, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertNull(errorHandler0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel3);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertNotNull(restAdapter0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      restAdapter0.serializedObjectSupporter = restAdapter_Builder0.serializedObjectSupporter;
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertNotNull(restAdapter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      restAdapter_Builder2.serializedObjectSupporter = restAdapter_Builder2.serializedObjectSupporter;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setConverter(restAdapter1.converter);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      HttpClient httpClient0 = null;
      ApacheClient apacheClient0 = new ApacheClient(httpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder6.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder3.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse7();
      assertNotNull(response0);
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals(500, response0.status);
      
      RestAdapter.Builder restAdapter_Builder9 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder9);
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder4));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder7));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder5));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder6));
      assertFalse(restAdapter_Builder9.equals((Object)restAdapter_Builder8));
      
      String string1 = "#+pKZ)c{}05";
      Response response1 = restAdapter1.logAndReplaceResponse(string1, response0, response0.status);
      assertNotNull(response1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(response0, response1);
      assertNotSame(string1, string0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(response1, response0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(500, response0.getStatus());
      assertEquals("Internal Server Error", response0.getReason());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(500, response1.getStatus());
      assertEquals("Internal Server Error", response1.getReason());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(500, response0.status);
      assertEquals(500, response1.status);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder5.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertNotNull(restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder10, restAdapter_Builder4);
      assertSame(restAdapter_Builder10, restAdapter_Builder8);
      assertSame(restAdapter_Builder10, restAdapter_Builder1);
      assertSame(restAdapter_Builder10, restAdapter_Builder6);
      assertSame(restAdapter_Builder10, restAdapter_Builder3);
      assertSame(restAdapter_Builder10, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder10, restAdapter_Builder9);
      assertSame(restAdapter_Builder10, restAdapter_Builder7);
      assertSame(restAdapter_Builder10, restAdapter_Builder2);
      assertSame(restAdapter_Builder10, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder10.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder11 = restAdapter_Builder5.setServer(server0);
      assertNotNull(restAdapter_Builder11);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder11, restAdapter_Builder2);
      assertSame(restAdapter_Builder11, restAdapter_Builder0);
      assertSame(restAdapter_Builder11, restAdapter_Builder7);
      assertSame(restAdapter_Builder11, restAdapter_Builder10);
      assertSame(restAdapter_Builder11, restAdapter_Builder4);
      assertSame(restAdapter_Builder11, restAdapter_Builder3);
      assertSame(restAdapter_Builder11, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder11, restAdapter_Builder9);
      assertSame(restAdapter_Builder11, restAdapter_Builder8);
      assertSame(restAdapter_Builder11, restAdapter_Builder1);
      assertSame(restAdapter_Builder11, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder11.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      restAdapter_Builder5.ensureSaneDefaults();
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      Executor executor0 = restAdapter_Builder5.gethttpExecutor();
      assertNotNull(executor0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder12 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel2);
      assertNotNull(restAdapter_Builder12);
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder12, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder12, restAdapter_Builder9);
      assertSame(restAdapter_Builder12, restAdapter_Builder3);
      assertSame(restAdapter_Builder12, restAdapter_Builder4);
      assertSame(restAdapter_Builder12, restAdapter_Builder11);
      assertSame(restAdapter_Builder12, restAdapter_Builder2);
      assertSame(restAdapter_Builder12, restAdapter_Builder10);
      assertSame(restAdapter_Builder12, restAdapter_Builder7);
      assertSame(restAdapter_Builder12, restAdapter_Builder8);
      assertSame(restAdapter_Builder12, restAdapter_Builder6);
      assertSame(restAdapter_Builder12, restAdapter_Builder0);
      assertSame(restAdapter_Builder12, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder12.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertNotNull(client_Provider0);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Profiler profiler0 = restAdapter1.getprofiler();
      assertNull(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      RestAdapter.Builder restAdapter_Builder13 = restAdapter_Builder3.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder13, restAdapter_Builder1);
      assertSame(restAdapter_Builder13, restAdapter_Builder3);
      assertSame(restAdapter_Builder13, restAdapter_Builder12);
      assertSame(restAdapter_Builder13, restAdapter_Builder2);
      assertSame(restAdapter_Builder13, restAdapter_Builder0);
      assertSame(restAdapter_Builder13, restAdapter_Builder6);
      assertSame(restAdapter_Builder13, restAdapter_Builder8);
      assertSame(restAdapter_Builder13, restAdapter_Builder7);
      assertSame(restAdapter_Builder13, restAdapter_Builder11);
      assertSame(restAdapter_Builder13, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder13, restAdapter_Builder9);
      assertSame(restAdapter_Builder13, restAdapter_Builder10);
      assertSame(restAdapter_Builder13, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder13.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Executor executor1 = restAdapter_Builder6.getcallbackExecutor();
      assertNotNull(executor1);
      assertSame(restAdapter_Builder5, restAdapter_Builder12);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder13);
      assertSame(restAdapter_Builder5, restAdapter_Builder10);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder9);
      assertSame(restAdapter_Builder5, restAdapter_Builder6);
      assertSame(restAdapter_Builder5, restAdapter_Builder8);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder7);
      assertSame(restAdapter_Builder5, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder6, restAdapter_Builder9);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder6, restAdapter_Builder11);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder10);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder13);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder12);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder12);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder10);
      assertSame(restAdapter_Builder1, restAdapter_Builder13);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder9);
      assertSame(restAdapter_Builder1, restAdapter_Builder11);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertNotSame(restAdapter1, restAdapter0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder12);
      assertSame(restAdapter_Builder4, restAdapter_Builder13);
      assertSame(restAdapter_Builder4, restAdapter_Builder10);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder9);
      assertSame(restAdapter_Builder4, restAdapter_Builder7);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder6);
      assertSame(restAdapter_Builder4, restAdapter_Builder8);
      assertSame(restAdapter_Builder4, restAdapter_Builder11);
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_Builder6.equals((Object)restAdapter_Builder9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder9));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getapiUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      String string2 = restAdapter1.getIDLE_THREAD_NAME();
      assertNotNull(string2);
      assertEquals("Retrofit-Idle", string2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      
      Executor executor2 = restAdapter1.gethttpExecutor();
      assertNotNull(executor2);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder9);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder11);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder10);
      assertSame(restAdapter_Builder0, restAdapter_Builder13);
      assertSame(restAdapter_Builder0, restAdapter_Builder12);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(executor2, executor0);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder12);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder13);
      assertSame(restAdapter_Builder3, restAdapter_Builder10);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder9);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder11);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder9));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Class<Integer> class0 = Integer.class;
      String string2 = restAdapter0.getIDLE_THREAD_NAME();
      assertNotNull(string2);
      assertEquals("Retrofit-Idle", string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      String string0 = "Nqu;?1')";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("Nqu;?1')", server0.getName());
      assertEquals("Nqu;?1')", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Nqu;?1')", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 4;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter6();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      AndroidLog androidLog0 = new AndroidLog(server0.apiUrl);
      assertNotNull(androidLog0);
      assertEquals("Nqu;?1')", server0.getName());
      assertEquals("Nqu;?1')", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Nqu;?1')", server0.getapiUrl());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Nqu;?1')", server0.getName());
      assertEquals("Nqu;?1')", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Nqu;?1')", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("Nqu;?1')", server0.getName());
      assertEquals("Nqu;?1')", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Nqu;?1')", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      Method method0 = null;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) restAdapter_LogLevel0;
      objectArray0[1] = (Object) restAdapter_RestHandler0;
      objectArray0[2] = (Object) method0;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) androidLog0;
      objectArray0[5] = (Object) restAdapter_LogLevel0;
      objectArray0[6] = (Object) errorHandler0;
      try { 
        restAdapter_RestHandler0.invoke(errorHandler0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      String string0 = "android.view.ViewTreeObserver";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "Interface definitions must not extend other interfaces.";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(restAdapter_LogLevel1.log());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) server0;
      objectArray0[1] = (Object) string1;
      objectArray0[2] = (Object) serializedObjectSupporter0;
      objectArray0[3] = (Object) restAdapter_RestHandler0;
      objectArray0[4] = (Object) restAdapter_RestHandler0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptor0, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertNull(executor1);
      assertEquals("default", server0.getName());
      assertNull(server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      MockThrowable mockThrowable0 = new MockThrowable(string1);
      assertNotNull(mockThrowable0);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockThrowable0, string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "c=v'GJ}:Zp";
      String string1 = "";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("c=v'GJ}:Zp", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("c=v'GJ}:Zp", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 14;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<Callable<Object>> profiler0 = (Profiler<Callable<Object>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("c=v'GJ}:Zp", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getName());
      assertEquals("c=v'GJ}:Zp", server0.getUrl());
      
      Response response0 = null;
      long long0 = 4294967295L;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(server0.DEFAULT_NAME, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 2993;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RequestInterceptor requestInterceptor0 = null;
      String string0 = "";
      AndroidLog androidLog0 = new AndroidLog(string0);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.callbackExecutor, requestInterceptor0, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      String string1 = "";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = "";
      TypedString typedString0 = new TypedString(string2);
      assertNotNull(typedString0);
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      
      Request request0 = new Request(string1, string1, linkedList0, typedString0);
      assertNotNull(request0);
      assertEquals("", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      String string0 = null;
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Converter converter0 = null;
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, converter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = null;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getName());
      assertNull(server0.getUrl());
      assertNull(server0.getapiUrl());
      assertNull(restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test91()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      Class<Object> class0 = Object.class;
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel1);
      assertNotNull(restAdapter0);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      String string0 = "^.Xm.y";
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Object> forkJoinTask0 = ForkJoinTask.adapt((Callable<?>) callable0);
      assertNotNull(forkJoinTask0);
      
      ForkJoinTask<Object> forkJoinTask1 = forkJoinTask0.fork();
      assertNotNull(forkJoinTask1);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      
      Throwable throwable0 = forkJoinTask1.getException();
      assertNull(throwable0);
      assertSame(forkJoinTask0, forkJoinTask1);
      assertSame(forkJoinTask1, forkJoinTask0);
      
      MockIOException mockIOException0 = new MockIOException(string0, throwable0);
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockIOException0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test92()  throws Throwable  {
      int int0 = 62;
      Random.setNextRandom(int0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "Qlv";
      restAdapter_Log0.log(string0);
      String string1 = null;
      String string2 = "Onc;1";
      restAdapter_Log0.log(string2);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      
      restAdapter_Log0.log(string1);
      restAdapter_Log0.log(string1);
      String string3 = "";
      restAdapter_Log0.log(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      long long1 = 1353L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      String string4 = "u";
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string4, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test93()  throws Throwable  {
      String string0 = "android.view.ViewTreeObserver";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Profiler<ClipData> profiler0 = (Profiler<ClipData>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      String string1 = "Interface definitions must not extend other interfaces.";
      AndroidLog androidLog0 = new AndroidLog(string1);
      assertNotNull(androidLog0);
      assertFalse(string1.equals((Object)string0));
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, androidLog0, restAdapter_LogLevel0);
      assertNotNull(restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertNotNull(restAdapter_RestHandler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) server0;
      objectArray0[1] = (Object) string1;
      objectArray0[2] = (Object) serializedObjectSupporter0;
      objectArray0[3] = (Object) restAdapter_RestHandler0;
      objectArray0[4] = (Object) restAdapter_RestHandler0;
      String string2 = "or";
      String string3 = "D>k*1Z)0\\Gv/Z!gc";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      
      Request request0 = new Request(string3, server0.apiUrl, arrayList0, multipartTypedOutput0);
      assertNotNull(request0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("android.view.ViewTreeObserver", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("android.view.ViewTreeObserver", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("D>k*1Z)0\\Gv/Z!gc", request0.getMethod());
      assertEquals("android.view.ViewTreeObserver", request0.getUrl());
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stub!
         //
         verifyException("android.util.Log", e);
      }
  }
}
