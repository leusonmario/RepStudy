/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 20:11:39 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Region;
import android.graphics.drawable.AnimationDrawable;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.gson.Gson;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.wire.Wire;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.http.client.HttpClient;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.DefaultedHttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.Server;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedInput;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      boolean boolean0 = forkJoinPool0.getAsyncMode();
      assertFalse(boolean0);
      
      boolean boolean1 = forkJoinPool0.hasQueuedSubmissions();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<Region> profiler0 = (Profiler<Region>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      restAdapter_Builder3.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setExecutors(restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.callbackExecutor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Class<RestMethodInfo.ParamUsage> class0 = RestMethodInfo.ParamUsage.class;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(restAdapter0.httpExecutor, restAdapter0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter_Log0.log(string0);
      String string1 = "5@1^Yn{R^X+9'Vo%";
      String string2 = "qd_";
      Server server0 = new Server(string1, string2);
      assertNotNull(server0);
      assertEquals("qd_", server0.getName());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Client.Provider client_Provider0 = null;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Class<ObjectNode>[] classArray0 = (Class<ObjectNode>[]) Array.newInstance(Class.class, 2);
      Class<ObjectNode> class0 = ObjectNode.class;
      classArray0[0] = class0;
      Class<ObjectNode> class1 = ObjectNode.class;
      classArray0[1] = class1;
      Wire wire0 = new Wire(classArray0);
      assertNotNull(wire0);
      assertEquals(2, classArray0.length);
      
      WireConverter wireConverter0 = new WireConverter(wire0);
      assertNotNull(wireConverter0);
      assertEquals(2, classArray0.length);
      
      Profiler<Class<Region>> profiler0 = (Profiler<Class<Region>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(2, classArray0.length);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("qd_", server0.getName());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "JDd:b<(;,- ";
      int int0 = 2703;
      String string4 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)38;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-11);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-92);
      byteArray0[2] = byte2;
      TypedByteArray typedByteArray0 = new TypedByteArray(string3, byteArray0);
      assertNotNull(typedByteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      
      Response response0 = new Response(int0, string4, arrayList0, typedByteArray0);
      assertNotNull(response0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("", response0.getReason());
      assertEquals(2703, response0.getStatus());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      List<Header> list0 = response0.getHeaders();
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("", response0.getReason());
      assertEquals(2703, response0.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string3, list0, typedByteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, classArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("", response0.getReason());
      assertEquals(2703, response0.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("JDd:b<(;,- ", request0.getUrl());
      assertEquals("qd_", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, classArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("", response0.getReason());
      assertEquals(2703, response0.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("JDd:b<(;,- ", request0.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("JDd:b<(;,- ", request1.getUrl());
      assertEquals("qd_", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request2);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, classArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("", response0.getReason());
      assertEquals(2703, response0.getStatus());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("JDd:b<(;,- ", request0.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("JDd:b<(;,- ", request1.getUrl());
      assertEquals("Retrofit-", request2.getMethod());
      assertEquals("JDd:b<(;,- ", request2.getUrl());
      assertEquals("qd_", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertSame(request2, request1);
      assertSame(request2, request0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      
      String string5 = "";
      long long0 = 2488L;
      Response response1 = restAdapter0.logAndReplaceResponse(string5, response0, long0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response1);
      assertArrayEquals(new byte[] {(byte)38, (byte) (-11), (byte) (-92)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(2, classArray0.length);
      assertEquals(3L, typedByteArray0.length());
      assertEquals("JDd:b<(;,- ", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals("", response0.getReason());
      assertEquals(2703, response0.getStatus());
      assertEquals("qd_", server0.getName());
      assertEquals(2703, response1.getStatus());
      assertEquals("", response1.getReason());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertSame(response0, response1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string5, string3);
      assertSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertSame(response1, response0);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string4, string0);
      assertSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "only \"true\" or \"false\" recognized";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("only \"true\" or \"false\" recognized", server0.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("only \"true\" or \"false\" recognized", server0.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.log = restAdapter_Log0;
      assertNull(restAdapter0.getLogLevel());
      
      restAdapter0.server = restAdapter0.server;
      assertNull(restAdapter0.getLogLevel());
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter0.profiler = profiler0;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log1 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log1);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      restAdapter_Log1.log(restAdapter0.server.DEFAULT_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      String string0 = "";
      String string1 = "^\"MZ1\\x #37_[6Q)i";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(restAdapter0.server.DEFAULT_NAME, string1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(sQLTransientConnectionException0);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("^\"MZ1\\x #37_[6Q)i", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: default", sQLTransientConnectionException0.toString());
      assertFalse(string1.equals((Object)string0));
      
      restAdapter0.logException(sQLTransientConnectionException0, restAdapter0.server.DEFAULT_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("^\"MZ1\\x #37_[6Q)i", sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: default", sQLTransientConnectionException0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      int int0 = 1309;
      restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.server = restAdapter0.server;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(restAdapter0.profiler);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder1);
      assertNull(restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(restAdapter0.profiler);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder2);
      assertNull(restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string2 = "S&n.7?~:\\J;jRh";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.S&n.7?~:\\J;jRh
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      restAdapter_Builder0.server = server0;
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", restAdapter_Builder0.server.getName());
      assertEquals("", restAdapter_Builder0.server.getUrl());
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string1 = "cvWOfu";
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "(-1;2l'wB[\\YSK]Ue^N";
      int int0 = 437;
      Vector<Header> vector0 = new Vector<Header>(int0, restAdapter0.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(vector0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      
      restAdapter0.requestInterceptor = restAdapter_Builder0.requestInterceptor;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder3);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      
      ApacheClient apacheClient1 = new ApacheClient();
      assertNotNull(apacheClient1);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(runnable0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setClient((Client) apacheClient1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder5);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(apacheClient1, apacheClient0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      String string3 = "";
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      
      String string4 = "s\\m";
      String string5 = "~sZ4&6E{*";
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      
      UnaryOperator<Header> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      
      String string6 = "";
      String string7 = "`aM#RTXVTx:kJR}'t#H";
      Request request0 = new Request(string6, string7, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals("", request0.getMethod());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals("", request0.getMethod());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request0.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string5);
      assertSame(string6, string3);
      assertNotSame(string6, string1);
      assertSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      
      String string8 = "com.fasterxml.jackson.databind.DeserializationConfig";
      String string9 = "";
      TypedString typedString0 = new TypedString(string9);
      assertNotNull(typedString0);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, string7, vector0, typedString0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response0);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("`aM#RTXVTx:kJR}'t#H", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      
      long long0 = (-1167L);
      Response response1 = restAdapter0.logAndReplaceResponse(string8, response0, long0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response1);
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertEquals("`aM#RTXVTx:kJR}'t#H", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, response1.getStatus());
      assertEquals("`aM#RTXVTx:kJR}'t#H", response1.getReason());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string9);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string9);
      assertNotSame(string8, string0);
      assertNotSame(string9, string2);
      assertSame(string9, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertSame(string9, string3);
      assertSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(response0, response1);
      assertSame(response1, response0);
      
      Request request2 = new Request(string5, server0.DEFAULT_NAME, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request2);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("default", request2.getUrl());
      assertEquals("~sZ4&6E{*", request2.getMethod());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(437, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string8));
      assertFalse(request2.equals((Object)request1));
      assertFalse(request2.equals((Object)request0));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string4, restMethodInfo0, request2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      restAdapter_Builder0.server = server0;
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", restAdapter_Builder0.server.getUrl());
      assertEquals("", restAdapter_Builder0.server.getName());
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string1 = "cvWOfu";
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "(-1;2l'wB[\\YSK]Ue^N";
      int int0 = 427;
      Vector<Header> vector0 = new Vector<Header>(int0, restAdapter0.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(vector0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(427, vector0.capacity());
      
      restAdapter0.requestInterceptor = restAdapter_Builder0.requestInterceptor;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder3);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setErrorHandler(restAdapter_Builder2.errorHandler);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(runnable0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      
      String string3 = "";
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      
      String string4 = "s\\m";
      String string5 = "~sZ4&6E{*";
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      
      Request request0 = new Request(string5, server0.DEFAULT_NAME, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("~sZ4&6E{*", request0.getMethod());
      assertEquals("default", request0.getUrl());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(427, vector0.capacity());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string4, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.LogLevel restAdapter_LogLevel1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter_LogLevel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 193;
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      assertNotNull(linkedTransferQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, long0, timeUnit0, linkedTransferQueue0, threadFactory0);
      assertNotNull(threadPoolExecutor0);
      
      Stream<Runnable> stream0 = linkedTransferQueue0.parallelStream();
      assertNotNull(stream0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(threadPoolExecutor0, threadPoolExecutor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertNull(restAdapter0.getLogLevel());
      
      Map<Method, RestMethodInfo> map0 = null;
      RestMethodInfo restMethodInfo0 = null;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      restAdapter0.errorHandler = errorHandler0;
      assertNull(restAdapter0.getLogLevel());
      
      Object[] objectArray0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.log = restAdapter_Log0;
      assertNull(restAdapter0.getLogLevel());
      
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertNotNull(okClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      restAdapter0.profiler = restAdapter_Builder0.profiler;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertNull(restAdapter0.getLogLevel());
      
      Method method0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) okHttpClient0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) restAdapter0;
      objectArray0[3] = (Object) restAdapter0;
      objectArray0[4] = (Object) okHttpClient0;
      objectArray0[5] = (Object) method0;
      objectArray0[6] = (Object) restAdapter_Builder0;
      objectArray0[7] = (Object) restAdapter_RestHandler0;
      objectArray0[8] = (Object) restAdapter_Builder0;
      try { 
        restAdapter_RestHandler0.invoke(okHttpClient0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.log = restAdapter_Log0;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      long long0 = 100L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "retrofit.RestAdapter$Log";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string1 = ":JC";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      assertNotNull(gsonConverter0);
      assertFalse(string1.equals((Object)string0));
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertNotNull(okHttpClient1);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient1);
      assertNotNull(okClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      
      TypedFile typedFile0 = new TypedFile(server0.DEFAULT_NAME, mockFile0);
      assertNotNull(typedFile0);
      assertEquals("default", server0.getName());
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("retrofit.RestAdapter$Log", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log/retrofit.RestAdapter$Log", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, typedFile0.length());
      assertEquals("retrofit.RestAdapter$Log", typedFile0.fileName());
      assertEquals("default", typedFile0.mimeType());
      assertFalse(string0.equals((Object)string1));
      
      Request request0 = new Request(string0, restAdapter0.THREAD_PREFIX, linkedList0, typedFile0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("default", server0.getName());
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("retrofit.RestAdapter$Log", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log/retrofit.RestAdapter$Log", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, typedFile0.length());
      assertEquals("retrofit.RestAdapter$Log", typedFile0.fileName());
      assertEquals("default", typedFile0.mimeType());
      assertEquals("retrofit.RestAdapter$Log", request0.getMethod());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Z#L%e";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("Z#L%e", server0.getUrl());
      assertEquals("default", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("Z#L%e", server0.getUrl());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ClientConnectionManager clientConnectionManager0 = null;
      BasicHttpParams basicHttpParams0 = new BasicHttpParams();
      assertNotNull(basicHttpParams0);
      
      DefaultedHttpParams defaultedHttpParams0 = new DefaultedHttpParams(basicHttpParams0, basicHttpParams0);
      assertNotNull(defaultedHttpParams0);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(clientConnectionManager0, defaultedHttpParams0);
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertEquals("Z#L%e", server0.getUrl());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      int int0 = 13;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)MockThread.getDefaultUncaughtExceptionHandler();
      assertNotNull(threadGroup0);
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      boolean boolean0 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, boolean0);
      assertNotNull(forkJoinPool0);
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(forkJoinPool0, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertEquals("Z#L%e", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setExecutors(forkJoinPool0, restAdapter_Builder2.callbackExecutor);
      assertNotNull(restAdapter_Builder4);
      assertEquals("Z#L%e", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      String string1 = "XmHy2p--$";
      int int0 = 65534;
      String string2 = ":|O):RvcNrN+B8";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      File file0 = MockFile.createTempFile(string2, string2);
      assertNotNull(file0);
      assertEquals(":|O):RvcNrN+B80:|O):RvcNrN+B8", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = "o";
      MockFile mockFile0 = new MockFile(file0, string3);
      assertNotNull(mockFile0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      TypedFile typedFile0 = new TypedFile(server0.DEFAULT_NAME, mockFile0);
      assertNotNull(typedFile0);
      assertEquals(":|O):RvcNrN+B80:|O):RvcNrN+B8", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8/o", mockFile0.toString());
      assertEquals("o", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("default", typedFile0.mimeType());
      assertEquals("o", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      Response response0 = new Response(int0, string2, arrayList0, typedFile0);
      assertNotNull(response0);
      assertEquals(":|O):RvcNrN+B80:|O):RvcNrN+B8", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8/o", mockFile0.toString());
      assertEquals("o", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("default", typedFile0.mimeType());
      assertEquals("o", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals(":|O):RvcNrN+B8", response0.getReason());
      assertEquals(65534, response0.getStatus());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      Response response1 = restAdapter0.logAndReplaceResponse(string0, response0, int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response1);
      assertEquals(":|O):RvcNrN+B80:|O):RvcNrN+B8", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8/o", mockFile0.toString());
      assertEquals("o", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("default", typedFile0.mimeType());
      assertEquals("o", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals(":|O):RvcNrN+B8", response0.getReason());
      assertEquals(65534, response0.getStatus());
      assertEquals(":|O):RvcNrN+B8", response1.getReason());
      assertEquals(65534, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(file0, mockFile0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(mockFile0, file0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      
      Response response2 = restAdapter0.logAndReplaceResponse(string1, response1, int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response2);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(":|O):RvcNrN+B80:|O):RvcNrN+B8", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertTrue(file0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8/o", mockFile0.toString());
      assertEquals("o", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/:|O):RvcNrN+B80:|O):RvcNrN+B8", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals("default", typedFile0.mimeType());
      assertEquals("o", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals(":|O):RvcNrN+B8", response0.getReason());
      assertEquals(65534, response0.getStatus());
      assertEquals(":|O):RvcNrN+B8", response1.getReason());
      assertEquals(65534, response1.getStatus());
      assertEquals(":|O):RvcNrN+B8", response2.getReason());
      assertEquals(65534, response2.getStatus());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockFile0.equals((Object)file0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(file0, mockFile0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(mockFile0, file0);
      assertSame(response0, response1);
      assertSame(response0, response2);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(response2, response0);
      assertSame(response2, response1);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      boolean boolean0 = true;
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(string3, annotationIntrospector1, boolean0);
      assertNotNull(pOJOPropertyBuilder0);
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertEquals("o", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertEquals("o", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      AnnotatedField annotatedField0 = pOJOPropertyBuilder0.getField();
      assertNull(annotatedField0);
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertEquals("o", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertEquals("o", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      Class<Runnable>[] classArray0 = (Class<Runnable>[]) Array.newInstance(Class.class, 9);
      Class<Runnable> class0 = Runnable.class;
      classArray0[0] = class0;
      Class<Runnable> class1 = Runnable.class;
      classArray0[1] = class1;
      Class<Runnable> class2 = Runnable.class;
      classArray0[2] = class2;
      Class<Runnable> class3 = Runnable.class;
      classArray0[3] = class3;
      Class<Runnable> class4 = Runnable.class;
      classArray0[4] = class4;
      Class<Runnable> class5 = Runnable.class;
      classArray0[5] = class5;
      Class<Runnable> class6 = Runnable.class;
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      long long0 = 610L;
      System.setCurrentTimeMillis(long0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Runnable> profiler0 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      String string0 = "-";
      String string1 = "!G8t_^Rx@&5gl+O~=FU";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertEquals("!G8t_^Rx@&5gl+O~=FU", server0.getName());
      assertEquals("-", server0.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Client.Provider client_Provider0 = null;
      int int0 = 154;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string2 = "P+Pa*~UGrgO|PK0t.X";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string2);
      assertNotNull(gsonConverter0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Profiler<Annotation> profiler0 = (Profiler<Annotation>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("!G8t_^Rx@&5gl+O~=FU", server0.getName());
      assertEquals("-", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "'hw";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string2, string3, linkedList0, typedOutput0);
      assertNotNull(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("P+Pa*~UGrgO|PK0t.X", request0.getMethod());
      assertEquals("'hw", request0.getUrl());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals(0, linkedList0.size());
      assertEquals("P+Pa*~UGrgO|PK0t.X", request0.getMethod());
      assertEquals("'hw", request0.getUrl());
      assertEquals("!G8t_^Rx@&5gl+O~=FU", server0.getName());
      assertEquals("-", server0.getUrl());
      assertEquals("'hw", request1.getUrl());
      assertEquals("P+Pa*~UGrgO|PK0t.X", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(request0, request1);
      assertSame(request1, request0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Server server0 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, protoConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "R*";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      boolean boolean0 = forkJoinPool0.isTerminated();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(executor0, forkJoinPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 4000;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, forkJoinPool0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptorTape0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = forkJoinPool0.hasQueuedSubmissions();
      assertFalse(boolean0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(restAdapter0.THREAD_PREFIX);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder1);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder2);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      restAdapter_Builder2.ensureSaneDefaults();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel1);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(restAdapter_Builder2.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertNull(server0.getUrl());
      assertEquals("", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      String string2 = "}0o:2BF0";
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string2);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: }0o:2BF0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("}0o:2BF0", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "";
      restAdapter0.logException(sQLSyntaxErrorException0, string3);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("java.sql.SQLSyntaxErrorException: }0o:2BF0", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("}0o:2BF0", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      restAdapter0.logLevel = restAdapter_LogLevel0;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter0.logLevel.log());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(restAdapter0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = ",=7}4~$)-z21z";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Class<TypedByteArray> class0 = TypedByteArray.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RequestInterceptor requestInterceptor1 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor1);
      assertSame(requestInterceptor1, requestInterceptor0);
      
      restAdapter_Builder1.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      restAdapter_Builder3.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor1);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(requestInterceptor1, requestInterceptor0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setExecutors(restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.callbackExecutor);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(requestInterceptor0, requestInterceptor1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder3.server, restAdapter_Builder4.clientProvider, restAdapter_Builder5.httpExecutor, restAdapter_Builder5.httpExecutor, requestInterceptor0, restAdapter_Builder0.converter, restAdapter_Builder2.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      
      Request request0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JacksonConverter jacksonConverter0 = new JacksonConverter(objectMapper0);
      assertNotNull(jacksonConverter0);
      assertEquals(0, objectMapper0.mixInCount());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(jacksonConverter0);
      assertNotNull(restAdapter_Builder1);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder2);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(restAdapter_Builder1.clientProvider);
      assertNotNull(restAdapter_Builder3);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter_Builder2.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.THREAD_PREFIX = restAdapter0.THREAD_PREFIX;
      assertNull(restAdapter0.getLogLevel());
      
      restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "k+cciae%B";
      restAdapter_Log0.log(string0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "D";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("D", server0.getUrl());
      assertEquals("D", server0.getName());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertNotNull(restAdapter_Builder1);
      assertEquals("D", server0.getUrl());
      assertEquals("D", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.httpExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.logLevel = restAdapter_Builder0.logLevel;
      assertFalse(restAdapter_Builder1.logLevel.log());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "C|F?uj/JX];b7Nb";
      restAdapter_Log0.log(string0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      assertTrue(restAdapter_LogLevel0.log());
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(boolean0);
      assertTrue(restAdapter_LogLevel0.log());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string1 = "Y;b`'U+Ljp `P:Q]\\Y";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertNotNull(restAdapter_Builder2);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setRequestInterceptor(restAdapter_Builder1.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      String string0 = "|H";
      List<Header> list0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = byte0;
      byte byte1 = (byte)46;
      byteArray0[1] = byte1;
      byte byte2 = (byte)44;
      byteArray0[2] = byte2;
      TypedByteArray typedByteArray0 = new TypedByteArray(restAdapter0.IDLE_THREAD_NAME, byteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedByteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)46, (byte)44}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", typedByteArray0.mimeType());
      assertEquals(3L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      
      InputStream inputStream0 = typedByteArray0.in();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(inputStream0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)46, (byte)44}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", typedByteArray0.mimeType());
      assertEquals(3L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals(3, inputStream0.available());
      
      Request request0 = new Request(string0, string0, list0, typedByteArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)46, (byte)44}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", typedByteArray0.mimeType());
      assertEquals(3L, typedByteArray0.length());
      assertNull(typedByteArray0.fileName());
      assertEquals("|H", request0.getUrl());
      assertEquals("|H", request0.getMethod());
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      Server server0 = null;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 344;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Wire wire0 = null;
      WireConverter wireConverter0 = new WireConverter(wire0);
      assertNotNull(wireConverter0);
      
      Profiler<ObjectNode> profiler0 = (Profiler<ObjectNode>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptorTape0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertTrue(restAdapter_LogLevel1.log());
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter0.profiler = profiler0;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "zf1";
      Response response0 = null;
      long long0 = (-156L);
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string0, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      int[] intArray0 = new int[5];
      intArray0[0] = restAdapter0.LOG_CHUNK_SIZE;
      intArray0[1] = restAdapter0.LOG_CHUNK_SIZE;
      intArray0[2] = restAdapter0.LOG_CHUNK_SIZE;
      intArray0[3] = restAdapter0.LOG_CHUNK_SIZE;
      intArray0[4] = restAdapter0.LOG_CHUNK_SIZE;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(restAdapter0.IDLE_THREAD_NAME, intArray0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {4000, 4000, 4000, 4000, 4000}, intArray0);
      assertEquals(5, intArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", batchUpdateException0.toString());
      assertEquals("Retrofit-Idle", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(sQLRecoverableException0);
      assertArrayEquals(new int[] {4000, 4000, 4000, 4000, 4000}, intArray0);
      assertEquals(5, intArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", batchUpdateException0.toString());
      assertEquals("Retrofit-Idle", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.BatchUpdateException: Retrofit-Idle", sQLRecoverableException0.toString());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(restAdapter0.THREAD_PREFIX, restAdapter0.IDLE_THREAD_NAME, sQLRecoverableException0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(sQLTimeoutException0);
      assertArrayEquals(new int[] {4000, 4000, 4000, 4000, 4000}, intArray0);
      assertEquals(5, intArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", batchUpdateException0.toString());
      assertEquals("Retrofit-Idle", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.BatchUpdateException: Retrofit-Idle", sQLRecoverableException0.toString());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("Retrofit-Idle", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Retrofit-", sQLTimeoutException0.toString());
      assertEquals("Retrofit-", sQLTimeoutException0.getMessage());
      
      sQLTimeoutException0.printStackTrace();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertArrayEquals(new int[] {4000, 4000, 4000, 4000, 4000}, intArray0);
      assertEquals(5, intArray0.length);
      assertNull(restAdapter0.getLogLevel());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", batchUpdateException0.toString());
      assertEquals("Retrofit-Idle", batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.BatchUpdateException: Retrofit-Idle", sQLRecoverableException0.toString());
      assertEquals("java.sql.BatchUpdateException: Retrofit-Idle", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("Retrofit-Idle", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Retrofit-", sQLTimeoutException0.toString());
      assertEquals("Retrofit-", sQLTimeoutException0.getMessage());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter0.logException(sQLTimeoutException0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      String string0 = "NW6-S0|=x'MV)\\WM";
      int int0 = 1919;
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = ": expected ";
      byte[] byteArray0 = new byte[3];
      String string2 = "qM s$Z!<_";
      String string3 = ")c~a#v#ELQ";
      Header header0 = new Header(string2, string3);
      assertNotNull(header0);
      assertEquals(")c~a#v#ELQ", header0.getValue());
      assertEquals("qM s$Z!<_", header0.getName());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = linkedList0.add(header0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(header0));
      assertEquals(1, linkedList0.size());
      assertEquals(")c~a#v#ELQ", header0.getValue());
      assertEquals("qM s$Z!<_", header0.getName());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      linkedList0.push(header0);
      assertTrue(linkedList0.contains(header0));
      assertEquals(2, linkedList0.size());
      assertEquals(")c~a#v#ELQ", header0.getValue());
      assertEquals("qM s$Z!<_", header0.getName());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-99);
      byteArray0[1] = byte1;
      byte byte2 = (byte)24;
      byteArray0[2] = byte2;
      TypedByteArray typedByteArray0 = new TypedByteArray(string1, byteArray0);
      assertNotNull(typedByteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-99), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(typedByteArray0.fileName());
      assertEquals(": expected ", typedByteArray0.mimeType());
      assertEquals(3L, typedByteArray0.length());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      Response response0 = new Response(int0, string0, linkedList0, typedByteArray0);
      assertNotNull(response0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-99), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(linkedList0.contains(header0));
      assertNull(typedByteArray0.fileName());
      assertEquals(": expected ", typedByteArray0.mimeType());
      assertEquals(3L, typedByteArray0.length());
      assertEquals("NW6-S0|=x'MV)\\WM", response0.getReason());
      assertEquals(1919, response0.getStatus());
      assertEquals(2, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string0, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = ",!ac;%O(v)l@2)!";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel1.log());
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      String string1 = "android.graphics.Bitmap";
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setServer(string1);
      assertNotNull(restAdapter_Builder4);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder5);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel1.log());
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      
      long long0 = 0L;
      restAdapter_Builder0.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(restAdapter1.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(restAdapter1, restAdapter0);
      
      String string2 = "=A>";
      Method method0 = null;
      RestMethodInfo restMethodInfo0 = null;
      try {
        restMethodInfo0 = new RestMethodInfo(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestMethodInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      restAdapter_Builder0.server = server0;
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", restAdapter_Builder0.server.getName());
      assertEquals("", restAdapter_Builder0.server.getUrl());
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string1 = "cvWOfu";
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "(-1;2l'wB[\\YSK]Ue^N";
      String string3 = "&++$:U_BUqI#o3";
      int int0 = 427;
      Vector<Header> vector0 = new Vector<Header>(int0, restAdapter0.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(vector0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertEquals(427, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      restAdapter0.requestInterceptor = restAdapter_Builder0.requestInterceptor;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder3);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      
      RequestBuilder requestBuilder0 = null;
      try {
        requestBuilder0 = new RequestBuilder(restAdapter0.converter, restMethodInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "(_S?L*1jU";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("(_S?L*1jU", server0.getUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      WireConverter wireConverter0 = new WireConverter();
      assertNotNull(wireConverter0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("(_S?L*1jU", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(delayed0);
      assertEquals("(_S?L*1jU", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = ",!ac;%O(v)l@2)!";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      
      RestAdapter restAdapter1 = restAdapter_Builder3.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter1, restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertNotSame(restAdapter0, restAdapter1);
      
      String string1 = "android.graphics.Bitmap";
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setServer(string1);
      assertNotNull(restAdapter_Builder4);
      assertFalse(string1.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setLogLevel(restAdapter_LogLevel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.httpExecutor);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      
      String string0 = "\"4:)o.P";
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setLog(restAdapter_Builder4.log);
      assertNotNull(restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      
      restAdapter_Builder1.requestInterceptor = restAdapter_Builder2.requestInterceptor;
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder3.setServer(string0);
      assertNotNull(restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      
      RestAdapter restAdapter0 = restAdapter_Builder6.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder3.setRequestInterceptor(restAdapter_Builder2.requestInterceptor);
      assertNotNull(restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder7, restAdapter_Builder0);
      assertSame(restAdapter_Builder7, restAdapter_Builder5);
      assertSame(restAdapter_Builder7, restAdapter_Builder1);
      assertSame(restAdapter_Builder7, restAdapter_Builder2);
      assertSame(restAdapter_Builder7, restAdapter_Builder6);
      assertSame(restAdapter_Builder7, restAdapter_Builder4);
      assertSame(restAdapter_Builder7, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder2.setConverter(restAdapter0.converter);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder8);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder6);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder7);
      assertSame(restAdapter_Builder0, restAdapter_Builder8);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder8);
      assertSame(restAdapter_Builder1, restAdapter_Builder6);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder7);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder8);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder7);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder8);
      assertSame(restAdapter_Builder3, restAdapter_Builder6);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder7);
      assertSame(restAdapter_Builder6, restAdapter_Builder0);
      assertSame(restAdapter_Builder6, restAdapter_Builder5);
      assertSame(restAdapter_Builder6, restAdapter_Builder3);
      assertSame(restAdapter_Builder6, restAdapter_Builder2);
      assertSame(restAdapter_Builder6, restAdapter_Builder8);
      assertSame(restAdapter_Builder6, restAdapter_Builder1);
      assertSame(restAdapter_Builder6, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder6);
      assertSame(restAdapter_Builder8, restAdapter_Builder4);
      assertSame(restAdapter_Builder8, restAdapter_Builder1);
      assertSame(restAdapter_Builder8, restAdapter_Builder7);
      assertSame(restAdapter_Builder8, restAdapter_Builder2);
      assertSame(restAdapter_Builder8, restAdapter_Builder3);
      assertSame(restAdapter_Builder8, restAdapter_Builder0);
      assertSame(restAdapter_Builder8, restAdapter_Builder5);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "Server may not be blank.";
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      String string1 = "cvWOfu";
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "(-1;2l'wB[\\YSK]Ue^N";
      String string3 = "&++$:U_BUqI#o3";
      int int0 = 427;
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      String string4 = "";
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertNull(restAdapter0.getLogLevel());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) restAdapter0;
      objectArray0[1] = (Object) string1;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(restAdapter0.requestInterceptor, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      // Undeclared exception!
      try { 
        restAdapter0.setLogLevel(restAdapter_LogLevel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Class<RestMethodInfo.ParamUsage> class0 = RestMethodInfo.ParamUsage.class;
      Class<RestMethodInfo.ParamUsage> class1 = null;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Client client0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "%MN<<:I9Iz2]^I1W.IN";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Executor executor0 = null;
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      Class<AnimationDrawable> class0 = AnimationDrawable.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      String string0 = ",!ac;%O(v)l@2)!";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      assertNotNull(restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      
      RestAdapter restAdapter1 = restAdapter_Builder4.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel1.log());
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      
      String string1 = "android.graphics.Bitmap";
      String string2 = "android.app.LauncherActivity";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      
      Request request0 = new Request(string2, restAdapter0.THREAD_PREFIX, arrayList0, formUrlEncodedTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals("android.app.LauncherActivity", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals("android.app.LauncherActivity", request0.getMethod());
      assertEquals("Retrofit-", request1.getUrl());
      assertEquals("android.app.LauncherActivity", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(restAdapter0.IDLE_THREAD_NAME);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.Retrofit-Idle
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      RestAdapter restAdapter0 = new RestAdapter();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter0.log = restAdapter_Log0;
      assertNull(restAdapter0.getLogLevel());
      
      Server server0 = new Server(restAdapter0.IDLE_THREAD_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(server0);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", server0.getUrl());
      
      restAdapter0.server = server0;
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", server0.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.server.getUrl());
      assertEquals("default", restAdapter0.server.getName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      restAdapter0.profiler = profiler0;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Log restAdapter_Log1 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log1);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      restAdapter_Log1.log(server0.DEFAULT_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", server0.getUrl());
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      String string0 = "";
      restAdapter_Log1.log(string0);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      
      String string1 = "^\"MZ1\\x #37_[6Q)i";
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1, string0);
      assertNotNull(sQLTransientException0);
      assertEquals("^\"MZ1\\x #37_[6Q)i", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ^\"MZ1\\x #37_[6Q)i", sQLTransientException0.toString());
      assertEquals("", sQLTransientException0.getSQLState());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = sQLTransientException0.getLocalizedMessage();
      assertNotNull(string2);
      assertEquals("^\"MZ1\\x #37_[6Q)i", string2);
      assertEquals("^\"MZ1\\x #37_[6Q)i", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ^\"MZ1\\x #37_[6Q)i", sQLTransientException0.toString());
      assertEquals("", sQLTransientException0.getSQLState());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      restAdapter0.logException(sQLTransientException0, server0.DEFAULT_NAME);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-Idle", server0.getUrl());
      assertEquals("^\"MZ1\\x #37_[6Q)i", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: ^\"MZ1\\x #37_[6Q)i", sQLTransientException0.toString());
      assertEquals("", sQLTransientException0.getSQLState());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      
      int int0 = 1309;
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      assertNotNull(threadPoolExecutor_DiscardOldestPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardOldestPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      restAdapter0.httpExecutor = (Executor) scheduledThreadPoolExecutor0;
      assertNull(restAdapter0.getLogLevel());
      
      restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.server = restAdapter0.server;
      assertNull(restAdapter0.getLogLevel());
      assertEquals("default", restAdapter_Builder0.server.getName());
      assertEquals("Retrofit-Idle", restAdapter_Builder0.server.getUrl());
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(restAdapter0.profiler);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder1);
      assertNull(restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.log = restAdapter_Log0;
      assertNull(restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertNotNull(restAdapter_LogLevelArray0);
      assertEquals(4, restAdapter_LogLevelArray0.length);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(restAdapter0.profiler);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder2);
      assertNull(restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string3 = "S&n.7?~:\\J;jRh";
      RestMethodInfo.ParamUsage restMethodInfo_ParamUsage0 = RestMethodInfo.ParamUsage.ENCODED_QUERY;
      Method method0 = null;
      try { 
        restAdapter_RestHandler0.invoke(restMethodInfo_ParamUsage0, method0, restAdapter_LogLevelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      int int0 = 8;
      Random.setNextRandom(int0);
      Random.setNextRandom(int0);
      String string0 = null;
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      LinkedBlockingQueue<Runnable> linkedBlockingQueue0 = new LinkedBlockingQueue<Runnable>();
      assertNotNull(linkedBlockingQueue0);
      
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, linkedBlockingQueue0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptor0, protoConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = "): number of type arguments != number of type parameters (";
      String string2 = "Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value";
      String string3 = "Error handler may not be null.";
      TypedInput typedInput0 = null;
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, string3, arrayList0, typedInput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, response0.getStatus());
      assertEquals("Error handler may not be null.", response0.getReason());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Response response1 = restAdapter0.logAndReplaceResponse(string2, response0, int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(4000, response0.getStatus());
      assertEquals("Error handler may not be null.", response0.getReason());
      assertEquals("Error handler may not be null.", response1.getReason());
      assertEquals(4000, response1.getStatus());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      
      try { 
        MockURI.URI(string2);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 6: Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "?R/k8l$n|(c";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "Profiler may not be null.";
      List<Header> list0 = null;
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string0, string1, list0, typedOutput0);
      assertNotNull(request0);
      assertEquals("Profiler may not be null.", request0.getUrl());
      assertEquals("?R/k8l$n|(c", request0.getMethod());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      restAdapter_Builder0.server = server0;
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("", restAdapter_Builder0.server.getUrl());
      assertEquals("", restAdapter_Builder0.server.getName());
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string1 = "cvWOfu";
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "(-1;2l'wB[\\YSK]Ue^N";
      int int0 = 427;
      Vector<Header> vector0 = new Vector<Header>(int0, restAdapter0.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(vector0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(427, vector0.capacity());
      
      restAdapter0.requestInterceptor = restAdapter_Builder0.requestInterceptor;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder3);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      
      ApacheClient apacheClient1 = new ApacheClient();
      assertNotNull(apacheClient1);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(runnable0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setClient((Client) apacheClient1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder5);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(apacheClient1, apacheClient0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      
      String string3 = "";
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      
      String string4 = "s\\m";
      String string5 = "~sZ4&6E{*";
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      
      String string6 = "";
      String string7 = "`aM#RTXVTx:kJR}'t#H";
      Request request0 = new Request(string6, string7, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(427, vector0.capacity());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals("", request1.getMethod());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(427, vector0.capacity());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertSame(request1, request0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertSame(string6, string0);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertSame(request0, request1);
      
      Request request2 = new Request(string5, server0.DEFAULT_NAME, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request2);
      assertEquals("~sZ4&6E{*", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(427, vector0.capacity());
      assertFalse(request2.equals((Object)request1));
      assertFalse(request2.equals((Object)request0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string4, restMethodInfo0, request2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertNotNull(server0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      
      restAdapter_Builder0.server = server0;
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("", restAdapter_Builder0.server.getName());
      assertEquals("", restAdapter_Builder0.server.getUrl());
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      assertNotNull(restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Builder0.log);
      assertNotNull(restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      
      String string1 = "cvWOfu";
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "(-1;2l'wB[\\YSK]Ue^N";
      int int0 = 437;
      Vector<Header> vector0 = new Vector<Header>(int0, restAdapter0.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(vector0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      restAdapter0.requestInterceptor = restAdapter_Builder0.requestInterceptor;
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setRequestInterceptor(restAdapter0.requestInterceptor);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder3);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertNotNull(restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      
      ApacheClient apacheClient1 = new ApacheClient();
      assertNotNull(apacheClient1);
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter0.create(class0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(runnable0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setClient((Client) apacheClient1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder5);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(apacheClient1.equals((Object)apacheClient0));
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertNotSame(apacheClient1, apacheClient0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      
      String string3 = "";
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertFalse(restAdapter_LogLevel0.log());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string4 = "s\\m";
      String string5 = "~sZ4&6E{*";
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNotNull(multipartTypedOutput0);
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      
      UnaryOperator<Header> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      String string6 = "";
      String string7 = "`aM#RTXVTx:kJR}'t#H";
      Request request0 = new Request(string6, string7, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals("`aM#RTXVTx:kJR}'t#H", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals("`aM#RTXVTx:kJR}'t#H", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals("`aM#RTXVTx:kJR}'t#H", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      
      String string8 = "com.fasterxml.jackson.databind.DeserializationConfig";
      String string9 = "";
      TypedString typedString0 = new TypedString(string9);
      assertNotNull(typedString0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, string7, vector0, typedString0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals(4000, response0.getStatus());
      assertEquals("`aM#RTXVTx:kJR}'t#H", response0.getReason());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      
      long long0 = (-1167L);
      Response response1 = restAdapter0.logAndReplaceResponse(string8, response0, long0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response1);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(0L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals(4000, response0.getStatus());
      assertEquals("`aM#RTXVTx:kJR}'t#H", response0.getReason());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("`aM#RTXVTx:kJR}'t#H", response1.getReason());
      assertEquals(4000, response1.getStatus());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string9);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertSame(string9, string3);
      assertSame(string9, string6);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertSame(response0, response1);
      assertSame(response1, response0);
      
      Request request2 = new Request(string5, server0.DEFAULT_NAME, vector0, multipartTypedOutput0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request2);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("~sZ4&6E{*", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, vector0.size());
      assertEquals(437, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string8));
      assertFalse(request2.equals((Object)request0));
      assertFalse(request2.equals((Object)request1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string4, restMethodInfo0, request2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Server server0 = new Server(string0, string1);
      assertNotNull(server0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 65;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      ProtoConverter protoConverter0 = new ProtoConverter();
      assertNotNull(protoConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, protoConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      String string2 = "FY_:?~8tVSR]t[mYU7";
      String string3 = "tYf";
      List<Header> list0 = null;
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string2, string3, list0, typedOutput0);
      assertNotNull(request0);
      assertEquals("tYf", request0.getUrl());
      assertEquals("FY_:?~8tVSR]t[mYU7", request0.getMethod());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals("tYf", request0.getUrl());
      assertEquals("FY_:?~8tVSR]t[mYU7", request0.getMethod());
      assertEquals("", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("FY_:?~8tVSR]t[mYU7", request1.getMethod());
      assertEquals("tYf", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      // Undeclared exception!
      try { 
        apacheClient0.execute(request1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Target host must not be null, or set in parameters.
         //
         verifyException("org.apache.http.impl.client.DefaultRequestDirector", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      int int0 = 8;
      Random.setNextRandom(int0);
      String string0 = "";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Wire wire0 = new Wire(classArray0);
      assertNotNull(wire0);
      assertEquals(9, classArray0.length);
      
      WireConverter wireConverter0 = new WireConverter(wire0);
      assertNotNull(wireConverter0);
      assertEquals(9, classArray0.length);
      
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, wireConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals(9, classArray0.length);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      
      String string1 = "";
      Stack<Header> stack0 = new Stack<Header>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      
      Request request0 = new Request(string1, server0.DEFAULT_NAME, stack0, formUrlEncodedTypedOutput0);
      assertNotNull(request0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("", request0.getMethod());
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals(9, classArray0.length);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request2);
      assertEquals(9, classArray0.length);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("default", request0.getUrl());
      assertEquals("", request0.getMethod());
      assertEquals("default", request1.getUrl());
      assertEquals("", request1.getMethod());
      assertEquals("", request2.getMethod());
      assertEquals("default", request2.getUrl());
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(request0, request2);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "retrofit.RestAdapter$Log";
      Server server0 = new Server(string0);
      assertNotNull(server0);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string1 = "$bp|!xl'* oLi;*M6G&";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      assertNotNull(gsonConverter0);
      assertFalse(string1.equals((Object)string0));
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertNotNull(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      
      ResponseCache responseCache0 = ResponseCache.getDefault();
      assertNull(responseCache0);
      
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      assertNotNull(okHttpClient1);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      assertSame(okHttpClient0, okHttpClient1);
      assertSame(okHttpClient1, okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient1);
      assertNotNull(okClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient1.getConnectTimeout());
      assertEquals(0, okHttpClient1.getReadTimeout());
      assertTrue(okHttpClient1.getFollowProtocolRedirects());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      
      TypedFile typedFile0 = new TypedFile(server0.DEFAULT_NAME, mockFile0);
      assertNotNull(typedFile0);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("retrofit.RestAdapter$Log", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log/retrofit.RestAdapter$Log", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("default", typedFile0.mimeType());
      assertEquals(0L, typedFile0.length());
      assertEquals("retrofit.RestAdapter$Log", typedFile0.fileName());
      assertFalse(string0.equals((Object)string1));
      
      Request request0 = new Request(string0, restAdapter0.THREAD_PREFIX, linkedList0, typedFile0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      assertEquals(0, linkedList0.size());
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertEquals("retrofit.RestAdapter$Log", mockFile0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log/retrofit.RestAdapter$Log", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("default", typedFile0.mimeType());
      assertEquals(0L, typedFile0.length());
      assertEquals("retrofit.RestAdapter$Log", typedFile0.fileName());
      assertEquals("retrofit.RestAdapter$Log", request0.getMethod());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, boolean0);
      assertNotNull(mockFileOutputStream0);
      assertFalse(string0.equals((Object)string1));
      
      typedFile0.writeTo(mockFileOutputStream0);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("retrofit.RestAdapter$Log", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log/retrofit.RestAdapter$Log", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("default", typedFile0.mimeType());
      assertEquals(0L, typedFile0.length());
      assertEquals("retrofit.RestAdapter$Log", typedFile0.fileName());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      assertEquals(0, linkedList0.size());
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("retrofit.RestAdapter$Log", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log/retrofit.RestAdapter$Log", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_6/retrofit.RestAdapter$Log", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("default", typedFile0.mimeType());
      assertEquals(0L, typedFile0.length());
      assertEquals("retrofit.RestAdapter$Log", typedFile0.fileName());
      assertEquals("retrofit.RestAdapter$Log", request0.getMethod());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals("retrofit.RestAdapter$Log", request1.getMethod());
      assertEquals("Retrofit-", request1.getUrl());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(request1.equals((Object)request0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(request0, request1);
      assertNotSame(request1, request0);
      
      Random.setNextRandom(restAdapter0.LOG_CHUNK_SIZE);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("retrofit.RestAdapter$Log", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: Retrofit-
         //
         verifyException("java.net.URL", e);
      }
  }
}
