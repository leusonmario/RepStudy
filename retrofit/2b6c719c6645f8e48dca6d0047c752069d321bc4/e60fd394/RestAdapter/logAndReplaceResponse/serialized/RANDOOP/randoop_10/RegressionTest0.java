import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        int int0 = retrofit.RestAdapter.LOG_CHUNK_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4000 + "'", int0 == 4000);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        java.lang.String str0 = retrofit.RestAdapter.IDLE_THREAD_NAME;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Retrofit-Idle" + "'", str0, "Retrofit-Idle");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        java.util.concurrent.Executor executor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setExecutors(executor1, executor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: HTTP executor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedInput typedInput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response6 = new retrofit.client.Response((int) (byte) 100, "", (java.util.List<retrofit.client.Header>) headerList3, typedInput5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RequestInterceptor requestInterceptor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setRequestInterceptor(requestInterceptor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response20 = restAdapter10.logAndReplaceResponse("hi!", response18, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Request request12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request13 = restAdapter10.logAndReplaceRequest(request12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.client.Client.Provider provider4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder3.setClient(provider4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.Throwable throwable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        java.lang.String str0 = retrofit.RestAdapter.THREAD_PREFIX;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "Retrofit-" + "'", str0, "Retrofit-");
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        builder3.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder3.setRequestInterceptor(requestInterceptor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Request interceptor may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.Profiler profiler1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setProfiler(profiler1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        retrofit.client.Request request19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter10.logAndReplaceRequest(request19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.Class class4 = serializedObjectSupporter0.deserializeObjectClass1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(class4);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(log15);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider3 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder4 = builder0.setClient(provider3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        java.lang.Class<?> wildcardClass8 = builder0.getClass();
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = restAdapter10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        retrofit.client.Response response19 = serializedObjectSupporter16.deserializeObjectResponse4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response21 = restAdapter10.logAndReplaceResponse("hi!", response19, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter1 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.client.Request request13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request14 = restAdapter10.logAndReplaceRequest(request13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        builder3.ensureSaneDefaults();
        retrofit.Profiler profiler5 = builder3.profiler;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable15, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider14);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.client.Client.Provider provider4 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder5 = builder0.setClient(provider4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client provider may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.util.List<retrofit.client.Header> headerList3 = response2.getHeaders();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(headerList3);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = builder3.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(serializedObjectSupporter5);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = response3.reason;
        java.lang.String str5 = response3.reason;
        java.util.List<retrofit.client.Header> headerList6 = response3.headers;
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server15 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.client.Response response16 = serializedObjectSupporter14.deserializeObjectResponse7();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler18;
        retrofit.client.Client client20 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder21 = builder13.setClient(client20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        int int23 = response22.status;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 200 + "'", int23 == 200);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.lang.Throwable throwable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable14, "OK");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.client.Request request15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = restAdapter10.logAndReplaceRequest(request15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.converter.Converter converter24 = restAdapter23.converter;
        java.util.concurrent.Executor executor25 = restAdapter23.callbackExecutor;
        retrofit.RestAdapter.Log log26 = restAdapter23.log;
        java.util.concurrent.Executor executor27 = restAdapter23.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter23.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler29 = restAdapter23.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter23.setLogLevel(logLevel30);
        restAdapter10.logLevel = logLevel30;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(log26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log7);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.RestAdapter.Log log7 = null;
        builder4.log = log7;
        java.util.concurrent.Executor executor9 = builder4.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.RestAdapter.Log log13 = null;
        builder10.log = log13;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.FULL;
        builder10.logLevel = logLevel15;
        retrofit.RestAdapter.Builder builder17 = builder4.setLogLevel(logLevel15);
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server19 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.client.Response response20 = serializedObjectSupporter18.deserializeObjectResponse7();
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter18.deserializeObjectErrorHandler1();
        builder17.errorHandler = errorHandler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder27 = builder24.setServer(server26);
        retrofit.RestAdapter restAdapter28 = builder24.build();
        java.util.concurrent.Executor executor29 = builder24.getcallbackExecutor();
        builder17.sethttpExecutor(executor29);
        builder0.sethttpExecutor(executor29);
        retrofit.Profiler profiler32 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder33 = builder0.setProfiler(profiler32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(response20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(executor29);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server16 = serializedObjectSupporter15.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer(server16);
        retrofit.RestAdapter restAdapter18 = builder14.build();
        java.util.concurrent.Executor executor19 = builder14.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.RestAdapter.Log log23 = null;
        builder20.log = log23;
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer(server28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.RestAdapter.Log log33 = null;
        builder30.log = log33;
        java.util.concurrent.Executor executor35 = builder30.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.RestAdapter.Log log39 = null;
        builder36.log = log39;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.FULL;
        builder36.logLevel = logLevel41;
        retrofit.RestAdapter.Builder builder43 = builder30.setLogLevel(logLevel41);
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server45 = serializedObjectSupporter44.deserializeObjectServer1();
        retrofit.client.Response response46 = serializedObjectSupporter44.deserializeObjectResponse7();
        java.lang.String str47 = serializedObjectSupporter44.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler48 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        builder43.errorHandler = errorHandler48;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server52 = serializedObjectSupporter51.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder53 = builder50.setServer(server52);
        retrofit.RestAdapter restAdapter54 = builder50.build();
        java.util.concurrent.Executor executor55 = builder50.getcallbackExecutor();
        builder43.sethttpExecutor(executor55);
        builder26.sethttpExecutor(executor55);
        builder20.httpExecutor = executor55;
        retrofit.RestAdapter.Builder builder59 = builder0.setExecutors(executor19, executor55);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder61 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(server45);
        org.junit.Assert.assertNotNull(response46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "http://example.com/" + "'", str47, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler48);
        org.junit.Assert.assertNotNull(server52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter20 = serializedObjectSupporter12.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-" + "'", str19, "Retrofit-");
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Response response32 = serializedObjectSupporter26.deserializeObjectResponse4();
        int int33 = response32.status;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 200 + "'", int33 == 200);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLogLevel(logLevel4);
        retrofit.client.Client client6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder5.setClient(client6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.client.Request request15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = restAdapter10.logAndReplaceRequest(request15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.RestAdapter.Log log6 = builder0.log;
        retrofit.converter.Converter converter7 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter7);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.client.Request request16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request17 = restAdapter10.logAndReplaceRequest(request16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.client.Request request15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = restAdapter10.logAndReplaceRequest(request15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.LogLevel logLevel9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setLogLevel(logLevel9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = builder0.serializedObjectSupporter;
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(serializedObjectSupporter7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter34 = serializedObjectSupporter32.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Response response32 = serializedObjectSupporter26.deserializeObjectResponse4();
        int int33 = response32.getStatus();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 200 + "'", int33 == 200);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        org.junit.Assert.assertNull(provider5);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server3 = serializedObjectSupporter2.deserializeObjectServer1();
        java.lang.Class class4 = serializedObjectSupporter2.deserializeObjectClass1();
        retrofit.client.Response response5 = serializedObjectSupporter2.deserializeObjectResponse7();
        int int6 = response5.getStatus();
        java.util.List<retrofit.client.Header> headerList7 = response5.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString1();
        java.lang.Class class10 = serializedObjectSupporter8.deserializeObjectClass1();
        retrofit.client.Response response11 = serializedObjectSupporter8.deserializeObjectResponse3();
        java.lang.String str12 = response11.reason;
        retrofit.mime.TypedInput typedInput13 = response11.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response14 = new retrofit.client.Response(0, "OK", headerList7, typedInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server3);
        org.junit.Assert.assertNotNull(class4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-" + "'", str9, "Retrofit-");
        org.junit.Assert.assertNotNull(class10);
        org.junit.Assert.assertNotNull(response11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OK" + "'", str12, "OK");
        org.junit.Assert.assertNotNull(typedInput13);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter21 = serializedObjectSupporter16.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.RestAdapter restAdapter7 = builder3.build();
        java.lang.Class<?> wildcardClass8 = restAdapter7.getClass();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor12 = restAdapter10.requestInterceptor;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str31 = serializedObjectSupporter26.deserializeObjectString2();
        java.lang.String str32 = serializedObjectSupporter26.deserializeObjectString7();
        retrofit.client.Response response33 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.util.List<retrofit.client.Header> headerList34 = response33.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response36 = restAdapter10.logAndReplaceResponse("Retrofit-", response33, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertNotNull(response33);
        org.junit.Assert.assertNotNull(headerList34);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restHandler13.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restHandler15.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restHandler15.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server33 = restAdapter10.getserver();
        retrofit.ErrorHandler errorHandler34 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter35;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(errorHandler34);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter2 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.RestAdapter.Log log8 = null;
        builder5.log = log8;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        builder5.logLevel = logLevel10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server14 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder12.build();
        java.util.concurrent.Executor executor17 = builder12.getcallbackExecutor();
        builder5.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        java.util.concurrent.Executor executor31 = builder26.getcallbackExecutor();
        builder19.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = builder0.setExecutors(executor17, executor31);
        retrofit.client.Client.Provider provider34 = builder33.clientProvider;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter41.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server44 = serializedObjectSupporter43.deserializeObjectServer1();
        retrofit.client.Response response45 = serializedObjectSupporter43.deserializeObjectResponse7();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString9();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter43;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = restAdapter27.serializedObjectSupporter;
        retrofit.Server server50 = restAdapter27.getserver();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.sethttpExecutor(executor52);
        retrofit.RestAdapter.Log log54 = null;
        builder51.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        builder51.logLevel = logLevel56;
        restAdapter27.logLevel = logLevel56;
        restAdapter10.logLevel = logLevel56;
        java.lang.Throwable throwable60 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable60, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(response45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = restAdapter10.server;
        retrofit.client.Request request15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = restAdapter10.logAndReplaceRequest(request15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.lang.String str14 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-" + "'", str14, "Retrofit-");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString1();
        java.lang.Class class7 = serializedObjectSupporter5.deserializeObjectClass1();
        retrofit.client.Response response8 = serializedObjectSupporter5.deserializeObjectResponse3();
        java.lang.String str9 = response8.reason;
        retrofit.mime.TypedInput typedInput10 = response8.getBody();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response11 = new retrofit.client.Response(0, "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
        org.junit.Assert.assertNotNull(class7);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "OK" + "'", str9, "OK");
        org.junit.Assert.assertNotNull(typedInput10);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter4.deserializeObjectResponse7();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        java.lang.Class<?> wildcardClass10 = builder0.getClass();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse7();
        int int4 = response3.getStatus();
        java.util.List<retrofit.client.Header> headerList5 = response3.getHeaders();
        int int6 = response3.getStatus();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 500 + "'", int4 == 500);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 500 + "'", int6 == 500);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(requestInterceptor3);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        java.util.concurrent.Executor executor4 = builder3.getcallbackExecutor();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.gethttpExecutor();
        retrofit.Server server16 = restAdapter10.getserver();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = server16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server16);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        builder3.ensureSaneDefaults();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.converter.Converter converter16 = restAdapter15.converter;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        java.util.concurrent.Executor executor19 = restAdapter15.getcallbackExecutor();
        int int20 = restAdapter15.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        java.lang.String str22 = restAdapter15.getTHREAD_PREFIX();
        retrofit.Profiler profiler23 = restAdapter15.getprofiler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter15.getLogLevel();
        builder3.logLevel = logLevel24;
        retrofit.Profiler profiler26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder27 = builder3.setProfiler(profiler26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-" + "'", str22, "Retrofit-");
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse7();
        int int4 = response3.getStatus();
        java.util.List<retrofit.client.Header> headerList5 = response3.getHeaders();
        java.util.List<retrofit.client.Header> headerList6 = response3.headers;
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 500 + "'", int4 == 500);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter restAdapter4 = builder0.build();
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.Profiler profiler6 = null;
        builder0.profiler = profiler6;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(restAdapter4);
        org.junit.Assert.assertNotNull(executor5);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter10.logLevel = logLevel15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        java.util.concurrent.Executor executor31 = restAdapter27.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter27.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler33 = restAdapter27.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter27.setLogLevel(logLevel34);
        restAdapter10.logLevel = logLevel34;
        retrofit.ErrorHandler errorHandler37 = restAdapter10.errorHandler;
        retrofit.client.Request request38 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request39 = restAdapter10.logAndReplaceRequest(request38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString6();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler34);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.converter.Converter converter18 = restAdapter10.converter;
        retrofit.client.Request request19 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = restAdapter10.logAndReplaceRequest(request19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.Server server15 = restAdapter10.server;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        retrofit.client.Request request18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = restAdapter10.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(errorHandler16);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor3);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        java.lang.Class<?> wildcardClass19 = restAdapter10.getClass();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server9 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer(server9);
        retrofit.RestAdapter restAdapter11 = builder7.build();
        java.util.concurrent.Executor executor12 = builder7.getcallbackExecutor();
        builder0.setcallbackExecutor(executor12);
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(executor12);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter28.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server31 = serializedObjectSupporter30.deserializeObjectServer1();
        retrofit.client.Response response32 = serializedObjectSupporter30.deserializeObjectResponse7();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString9();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter28.logLevel = logLevel35;
        restAdapter10.setLogLevel(logLevel35);
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        java.util.concurrent.Executor executor8 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder0.setclientProvider(provider9);
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(provider11);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.Server server15 = restAdapter10.server;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter4.deserializeObjectResponse7();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.client.Client client11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder0.setClient(client11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.client.Request request17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request18 = restAdapter10.logAndReplaceRequest(request17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLogLevel(logLevel4);
        retrofit.Profiler profiler6 = builder3.profiler;
        retrofit.Server server7 = builder3.server;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNotNull(server7);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter10 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com/" + "'", str9, "http://example.com/");
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter10.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler20 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter restAdapter4 = builder0.build();
        retrofit.Profiler profiler5 = builder0.profiler;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(restAdapter4);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Request request12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request13 = restAdapter10.logAndReplaceRequest(request12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString10();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter20 = serializedObjectSupporter12.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider13 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(provider13);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider19 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor20 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.client.Client.Provider provider7 = builder3.getclientProvider();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(provider7);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter10.logLevel = logLevel15;
        java.lang.Throwable throwable17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable17, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter41.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server44 = serializedObjectSupporter43.deserializeObjectServer1();
        retrofit.client.Response response45 = serializedObjectSupporter43.deserializeObjectResponse7();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString9();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter43;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = restAdapter27.serializedObjectSupporter;
        retrofit.Server server50 = restAdapter27.getserver();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.sethttpExecutor(executor52);
        retrofit.RestAdapter.Log log54 = null;
        builder51.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        builder51.logLevel = logLevel56;
        restAdapter27.logLevel = logLevel56;
        restAdapter10.logLevel = logLevel56;
        retrofit.Server server61 = null;
        retrofit.client.Client.Provider provider62 = null;
        java.util.concurrent.Executor executor63 = null;
        java.util.concurrent.Executor executor64 = null;
        retrofit.RequestInterceptor requestInterceptor65 = null;
        retrofit.converter.Converter converter66 = null;
        retrofit.Profiler profiler67 = null;
        retrofit.ErrorHandler errorHandler68 = null;
        retrofit.RestAdapter.Log log69 = null;
        retrofit.RestAdapter.LogLevel logLevel70 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter71 = new retrofit.RestAdapter(server61, provider62, executor63, executor64, requestInterceptor65, converter66, profiler67, errorHandler68, log69, logLevel70);
        retrofit.SerializedObjectSupporter serializedObjectSupporter72 = restAdapter71.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server74 = serializedObjectSupporter73.deserializeObjectServer1();
        retrofit.client.Response response75 = serializedObjectSupporter73.deserializeObjectResponse7();
        java.lang.String str76 = serializedObjectSupporter73.deserializeObjectString9();
        restAdapter71.serializedObjectSupporter = serializedObjectSupporter73;
        java.lang.String str78 = serializedObjectSupporter73.deserializeObjectString2();
        java.lang.String str79 = serializedObjectSupporter73.deserializeObjectString7();
        retrofit.client.Response response80 = serializedObjectSupporter73.deserializeObjectResponse7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response82 = restAdapter10.logAndReplaceResponse("Internal Server Error", response80, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(response45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter72);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(response75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "http://example.com/" + "'", str76, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Retrofit-Idle" + "'", str78, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "http://example.com/" + "'", str79, "http://example.com/");
        org.junit.Assert.assertNotNull(response80);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter10.logLevel = logLevel17;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler19);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.Server server8 = builder0.server;
        retrofit.Profiler profiler9 = builder0.profiler;
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor17 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = builder0.getclientProvider();
        java.util.concurrent.Executor executor3 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.RestAdapter.Log log8 = null;
        builder5.log = log8;
        java.util.concurrent.Executor executor10 = builder5.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.RestAdapter.Log log14 = null;
        builder11.log = log14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = builder5.setLogLevel(logLevel16);
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server20 = serializedObjectSupporter19.deserializeObjectServer1();
        retrofit.client.Response response21 = serializedObjectSupporter19.deserializeObjectResponse7();
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter19.deserializeObjectErrorHandler1();
        builder18.errorHandler = errorHandler23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder28 = builder25.setServer(server27);
        retrofit.RestAdapter restAdapter29 = builder25.build();
        java.util.concurrent.Executor executor30 = builder25.getcallbackExecutor();
        builder18.sethttpExecutor(executor30);
        builder0.httpExecutor = executor30;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNotNull(executor30);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log12 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(log12);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler18 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(errorHandler19);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RestAdapter.Log log6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setLog(log6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.BASIC;
        java.lang.reflect.Method method17 = null;
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = restHandler15.invoke((java.lang.Object) logLevel16, method17, objArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RequestInterceptor requestInterceptor11 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor11);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.client.Request request11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request12 = restAdapter10.logAndReplaceRequest(request11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.gethttpExecutor();
        retrofit.Server server18 = restAdapter10.getserver();
        retrofit.converter.Converter converter19 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(converter19);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter16.deserializeObjectConverter5();
        java.lang.String str25 = serializedObjectSupporter16.deserializeObjectString9();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://example.com/" + "'", str25, "http://example.com/");
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.converter.Converter converter27 = restAdapter26.converter;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.ErrorHandler errorHandler29 = restAdapter26.errorHandler;
        retrofit.Server server30 = restAdapter26.getserver();
        java.util.concurrent.Executor executor31 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter26.getLogLevel();
        restAdapter10.logLevel = logLevel32;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter4.deserializeObjectResponse7();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.RestAdapter.LogLevel logLevel11 = null;
        builder0.logLevel = logLevel11;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter12.deserializeObjectConverter6();
        retrofit.client.Response response19 = serializedObjectSupporter12.deserializeObjectResponse4();
        java.lang.String str20 = response19.reason;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OK" + "'", str20, "OK");
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        java.util.concurrent.Executor executor31 = restAdapter27.gethttpExecutor();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        restAdapter27.logLevel = logLevel41;
        restAdapter10.logLevel = logLevel41;
        java.lang.Throwable throwable45 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable45, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(log15);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.RestAdapter.Log log6 = builder0.log;
        java.util.concurrent.Executor executor7 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server3 = serializedObjectSupporter2.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder4 = builder1.setServer(server3);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server6 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.client.Response response7 = serializedObjectSupporter5.deserializeObjectResponse7();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler9 = serializedObjectSupporter5.deserializeObjectErrorHandler1();
        builder1.errorHandler = errorHandler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder1.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        log15.log("hi!");
        retrofit.RestAdapter.Builder builder18 = builder13.setLog(log15);
        retrofit.RestAdapter.Log log19 = builder13.log;
        log19.log("http://example.com/");
        retrofit.RestAdapter.Builder builder22 = builder0.setLog(log19);
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        retrofit.ErrorHandler errorHandler24 = builder22.errorHandler;
        org.junit.Assert.assertNotNull(server3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(errorHandler24);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter1 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server9 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer(server9);
        retrofit.RestAdapter restAdapter11 = builder7.build();
        java.util.concurrent.Executor executor12 = builder7.getcallbackExecutor();
        builder0.httpExecutor = executor12;
        retrofit.Server server14 = builder0.server;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        boolean boolean27 = logLevel25.log();
        java.lang.reflect.Method method28 = null;
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = null;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = restAdapter39.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server42 = serializedObjectSupporter41.deserializeObjectServer1();
        retrofit.client.Response response43 = serializedObjectSupporter41.deserializeObjectResponse7();
        java.lang.String str44 = serializedObjectSupporter41.deserializeObjectString9();
        restAdapter39.serializedObjectSupporter = serializedObjectSupporter41;
        java.lang.Object[] objArray46 = new java.lang.Object[] { restAdapter39 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = restHandler15.invoke((java.lang.Object) logLevel25, method28, objArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter40);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "http://example.com/" + "'", str44, "http://example.com/");
        org.junit.Assert.assertNotNull(objArray46);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server33 = restAdapter10.getserver();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.RestAdapter.Log log37 = null;
        builder34.log = log37;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        builder34.logLevel = logLevel39;
        restAdapter10.logLevel = logLevel39;
        retrofit.converter.Converter converter42 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(converter42);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        retrofit.client.Response response19 = serializedObjectSupporter12.deserializeObjectResponse1();
        java.util.List<retrofit.client.Header> headerList20 = response19.getHeaders();
        java.lang.String str21 = response19.getReason();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OK" + "'", str21, "OK");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        retrofit.client.Client.Provider provider5 = builder0.clientProvider;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider5);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server33 = restAdapter10.getserver();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.RestAdapter.Log log37 = null;
        builder34.log = log37;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.FULL;
        builder34.logLevel = logLevel39;
        restAdapter10.logLevel = logLevel39;
        retrofit.RequestInterceptor requestInterceptor42 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor42);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Profiler profiler14 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter35.setLogLevel(logLevel36);
        restAdapter10.setLogLevel(logLevel36);
        boolean boolean39 = logLevel36.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server14 = restAdapter10.server;
        retrofit.client.Request request15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = restAdapter10.logAndReplaceRequest(request15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLogLevel(logLevel4);
        boolean boolean6 = logLevel4.log();
        java.lang.Class<?> wildcardClass7 = logLevel4.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.RestAdapter.Log log10 = null;
        builder7.log = log10;
        java.util.concurrent.Executor executor12 = builder7.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.RestAdapter.Log log16 = null;
        builder13.log = log16;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        builder13.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder7.setLogLevel(logLevel18);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.client.Response response23 = serializedObjectSupporter21.deserializeObjectResponse7();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter21.deserializeObjectErrorHandler1();
        builder20.errorHandler = errorHandler25;
        builder0.errorHandler = errorHandler25;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(response23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler25);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter5 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(requestInterceptor19);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        boolean boolean14 = logLevel13.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.converter.Converter converter5 = builder0.converter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(converter5);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor13 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter23.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.client.Response response27 = serializedObjectSupporter25.deserializeObjectResponse7();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString9();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter25;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.RestAdapter.Log log31 = restAdapter10.log;
        java.util.concurrent.Executor executor32 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(profiler18);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(converter15);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter19 = restAdapter10.converter;
        retrofit.Profiler profiler20 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = restAdapter10.server;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.Server server15 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(server15);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.client.Request request16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request17 = restAdapter10.logAndReplaceRequest(request16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.Server server15 = restAdapter10.server;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server20 = serializedObjectSupporter19.deserializeObjectServer1();
        retrofit.client.Response response21 = serializedObjectSupporter19.deserializeObjectResponse7();
        java.util.List<retrofit.client.Header> headerList22 = response21.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response24 = restAdapter10.logAndReplaceResponse("OK", response21, (long) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertNotNull(headerList22);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        retrofit.RestAdapter.Log log0 = retrofit.RestAdapter.Log.NONE;
        log0.log("Retrofit-Idle");
        org.junit.Assert.assertNotNull(log0);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.client.Response response9 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str10 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.Server server11 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(server11);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.Server server12 = restAdapter10.getserver();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.ErrorHandler errorHandler6 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(errorHandler6);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor9 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor10 = builder0.getcallbackExecutor();
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter16.deserializeObjectConverter3();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(log15);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.Server server18 = restAdapter10.getserver();
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        java.util.concurrent.Executor executor5 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter17 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter28.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server31 = serializedObjectSupporter30.deserializeObjectServer1();
        retrofit.client.Response response32 = serializedObjectSupporter30.deserializeObjectResponse7();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString9();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter28.logLevel = logLevel35;
        restAdapter10.setLogLevel(logLevel35);
        boolean boolean38 = logLevel35.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.RestAdapter.LogLevel logLevel6 = builder5.logLevel;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel6 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel6.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        restAdapter10.logLevel = logLevel17;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.logLevel;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Request request22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = restAdapter10.logAndReplaceRequest(request22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter5();
        java.lang.String str21 = serializedObjectSupporter12.deserializeObjectString6();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-" + "'", str19, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler20 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.ErrorHandler errorHandler21 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler21);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        boolean boolean5 = logLevel4.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter12.deserializeObjectConverter4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-" + "'", str19, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.setclientProvider(provider2);
        retrofit.RestAdapter.LogLevel logLevel4 = builder0.logLevel;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        java.lang.String str7 = serializedObjectSupporter6.deserializeObjectString1();
        java.lang.Class class8 = serializedObjectSupporter6.deserializeObjectClass1();
        retrofit.client.Response response9 = serializedObjectSupporter6.deserializeObjectResponse3();
        java.lang.String str10 = serializedObjectSupporter6.deserializeObjectString2();
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString3();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(class8);
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Retrofit-Idle" + "'", str10, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com/" + "'", str13, "http://example.com/");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        java.util.concurrent.Executor executor5 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter20 = serializedObjectSupporter12.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter16.deserializeObjectConverter5();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter22);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString7();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com/" + "'", str9, "http://example.com/");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = response3.reason;
        retrofit.mime.TypedInput typedInput5 = response3.getBody();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertNull(typedInput5);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server14 = restAdapter10.server;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(errorHandler25);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.util.List<retrofit.client.Header> headerList9 = response8.headers;
        int int10 = response8.getStatus();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 200 + "'", int10 == 200);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Client.Provider provider26 = restAdapter10.clientProvider;
        retrofit.client.Request request27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request28 = restAdapter10.logAndReplaceRequest(request27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNull(provider26);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.gethttpExecutor();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(log14);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server14 = restAdapter10.server;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable16, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter28.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server31 = serializedObjectSupporter30.deserializeObjectServer1();
        retrofit.client.Response response32 = serializedObjectSupporter30.deserializeObjectResponse7();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString9();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter28.logLevel = logLevel35;
        restAdapter10.setLogLevel(logLevel35);
        int int38 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler39 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4000 + "'", int38 == 4000);
        org.junit.Assert.assertNull(profiler39);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.Profiler profiler6 = builder0.profiler;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = profiler6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Response response17 = serializedObjectSupporter12.deserializeObjectResponse4();
        java.lang.Class class18 = serializedObjectSupporter12.deserializeObjectClass1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(response17);
        org.junit.Assert.assertNotNull(class18);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.Server server15 = restAdapter10.server;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        retrofit.client.Response response19 = serializedObjectSupporter12.deserializeObjectResponse1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter5();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        java.util.concurrent.Executor executor25 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel26 = restAdapter10.logLevel;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor27);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString10();
        java.lang.String str22 = serializedObjectSupporter16.deserializeObjectString9();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server15 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.client.Response response16 = serializedObjectSupporter14.deserializeObjectResponse7();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder20.build();
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        builder13.sethttpExecutor(executor25);
        java.util.concurrent.Executor executor27 = builder13.getcallbackExecutor();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter28 = builder13.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(executor27);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        java.util.concurrent.Executor executor14 = builder9.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer(server17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        java.util.concurrent.Executor executor24 = builder19.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.RestAdapter.Log log28 = null;
        builder25.log = log28;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder19.setLogLevel(logLevel30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server34 = serializedObjectSupporter33.deserializeObjectServer1();
        retrofit.client.Response response35 = serializedObjectSupporter33.deserializeObjectResponse7();
        java.lang.String str36 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        builder32.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server41 = serializedObjectSupporter40.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer(server41);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        java.util.concurrent.Executor executor44 = builder39.getcallbackExecutor();
        builder32.sethttpExecutor(executor44);
        builder15.sethttpExecutor(executor44);
        builder9.httpExecutor = executor44;
        builder0.callbackExecutor = executor44;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(response35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(executor44);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        int int18 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4000 + "'", int18 == 4000);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter19 = restAdapter10.converter;
        retrofit.client.Client.Provider provider20 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter10.getLogLevel();
        boolean boolean22 = logLevel21.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        java.util.concurrent.Executor executor6 = builder0.callbackExecutor;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(executor6);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString1();
        retrofit.client.Response response18 = serializedObjectSupporter12.deserializeObjectResponse4();
        java.util.List<retrofit.client.Header> headerList19 = response18.headers;
        java.lang.String str20 = response18.reason;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "OK" + "'", str20, "OK");
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString10();
        java.lang.String str22 = serializedObjectSupporter16.deserializeObjectString3();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString9();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor17 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = builder0.getclientProvider();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider2);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString10();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString8();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter12.deserializeObjectConverter1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter18);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.Server server14 = restAdapter10.server;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter4.deserializeObjectResponse7();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        java.util.concurrent.Executor executor10 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor11 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor11);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.callbackExecutor;
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler16 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(profiler16);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Response response17 = serializedObjectSupporter12.deserializeObjectResponse3();
        java.lang.String str18 = response17.getReason();
        java.lang.String str19 = response17.reason;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(response17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OK" + "'", str18, "OK");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OK" + "'", str19, "OK");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = restAdapter10.server;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.callbackExecutor;
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString10();
        retrofit.Server server22 = serializedObjectSupporter16.deserializeObjectServer1();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-" + "'", str23, "Retrofit-");
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Response response17 = serializedObjectSupporter12.deserializeObjectResponse3();
        java.util.List<retrofit.client.Header> headerList18 = response17.getHeaders();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(response17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        java.util.concurrent.Executor executor8 = builder0.callbackExecutor;
        retrofit.RequestInterceptor requestInterceptor9 = builder0.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server11 = serializedObjectSupporter10.deserializeObjectServer1();
        java.lang.String str12 = serializedObjectSupporter10.deserializeObjectString6();
        java.lang.String str13 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter10.deserializeObjectConverter4();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "http://example.com/" + "'", str13, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter28.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server31 = serializedObjectSupporter30.deserializeObjectServer1();
        retrofit.client.Response response32 = serializedObjectSupporter30.deserializeObjectResponse7();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString9();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.ErrorHandler errorHandler35 = restAdapter28.geterrorHandler();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = restAdapter46.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server49 = serializedObjectSupporter48.deserializeObjectServer1();
        retrofit.client.Response response50 = serializedObjectSupporter48.deserializeObjectResponse7();
        java.lang.String str51 = serializedObjectSupporter48.deserializeObjectString9();
        restAdapter46.serializedObjectSupporter = serializedObjectSupporter48;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter46.logLevel = logLevel53;
        restAdapter28.setLogLevel(logLevel53);
        restAdapter10.logLevel = logLevel53;
        java.util.concurrent.Executor executor57 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter47);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(response50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "http://example.com/" + "'", str51, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor57);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str4 = response3.reason;
        retrofit.mime.TypedInput typedInput5 = response3.getBody();
        java.util.List<retrofit.client.Header> headerList6 = response3.getHeaders();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertNotNull(typedInput5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString1();
        java.lang.Class<?> wildcardClass20 = serializedObjectSupporter12.getClass();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-" + "'", str19, "Retrofit-");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.Server server18 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.getrequestInterceptor();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(errorHandler14);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString4();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter12.deserializeObjectConverter4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter23.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.client.Response response27 = serializedObjectSupporter25.deserializeObjectResponse7();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString9();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter25;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.ErrorHandler errorHandler31 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler31);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder11.setServer(server13);
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server13);
        retrofit.Server server16 = builder8.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server19 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder17.build();
        java.util.concurrent.Executor executor22 = builder17.getcallbackExecutor();
        builder8.setcallbackExecutor(executor22);
        builder0.sethttpExecutor(executor22);
        retrofit.RestAdapter.Log log25 = builder0.log;
        retrofit.RestAdapter.Log log26 = builder0.log;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(log26);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server9 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer(server9);
        retrofit.RestAdapter restAdapter11 = builder7.build();
        java.util.concurrent.Executor executor12 = builder7.getcallbackExecutor();
        builder0.setcallbackExecutor(executor12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.RestAdapter.Builder builder17 = builder14.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder19 = builder17.setLogLevel(logLevel18);
        boolean boolean20 = logLevel18.log();
        retrofit.RestAdapter.Builder builder21 = builder0.setLogLevel(logLevel18);
        java.util.concurrent.Executor executor22 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor22);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.client.Request request17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request18 = restAdapter10.logAndReplaceRequest(request17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(log16);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter10.logLevel = logLevel15;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        java.util.concurrent.Executor executor31 = restAdapter27.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor32 = restAdapter27.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler33 = restAdapter27.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter27.setLogLevel(logLevel34);
        restAdapter10.logLevel = logLevel34;
        retrofit.Server server37 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(requestInterceptor32);
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server37);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server14 = restAdapter10.server;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler18 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(errorHandler18);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.ErrorHandler errorHandler9 = builder0.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(log8);
        org.junit.Assert.assertNull(errorHandler9);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = null;
        builder0.setcallbackExecutor(executor5);
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server9 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer(server9);
        builder0.server = server9;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server4 = serializedObjectSupporter3.deserializeObjectServer1();
        retrofit.client.Response response5 = serializedObjectSupporter3.deserializeObjectResponse7();
        java.lang.String str6 = serializedObjectSupporter3.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter3.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter3.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter3.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter11 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        java.util.concurrent.Executor executor8 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        builder9.logLevel = logLevel14;
        retrofit.RestAdapter.Log log16 = builder9.log;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = builder17.setServer(server22);
        retrofit.Server server25 = builder17.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        java.util.concurrent.Executor executor31 = builder26.getcallbackExecutor();
        builder17.setcallbackExecutor(executor31);
        builder9.sethttpExecutor(executor31);
        java.util.concurrent.Executor executor34 = builder9.httpExecutor;
        builder0.sethttpExecutor(executor34);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(executor34);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.Server server18 = restAdapter10.getserver();
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler20 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter restAdapter4 = builder0.build();
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = builder0.clientProvider;
        retrofit.Profiler profiler7 = null;
        builder0.profiler = profiler7;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(restAdapter4);
        org.junit.Assert.assertNotNull(executor5);
        org.junit.Assert.assertNotNull(provider6);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.Server server16 = restAdapter10.server;
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Log log9 = builder0.log;
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(log9);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter12.deserializeObjectConverter4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel17);
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler20 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        retrofit.client.Request request15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = restAdapter10.logAndReplaceRequest(request15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        java.lang.String str16 = restAdapter15.getTHREAD_PREFIX();
        java.lang.String str17 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        restAdapter15.logLevel = logLevel27;
        java.util.concurrent.Executor executor30 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter15.logLevel;
        builder0.logLevel = logLevel31;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server15 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.client.Response response16 = serializedObjectSupporter14.deserializeObjectResponse7();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder20.build();
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        builder13.sethttpExecutor(executor25);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter27 = builder13.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        builder3.ensureSaneDefaults();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.converter.Converter converter16 = restAdapter15.converter;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        java.util.concurrent.Executor executor19 = restAdapter15.getcallbackExecutor();
        int int20 = restAdapter15.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        java.lang.String str22 = restAdapter15.getTHREAD_PREFIX();
        retrofit.Profiler profiler23 = restAdapter15.getprofiler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter15.getLogLevel();
        builder3.logLevel = logLevel24;
        retrofit.RestAdapter restAdapter26 = builder3.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server29 = serializedObjectSupporter28.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer(server29);
        retrofit.client.Client.Provider provider31 = null;
        builder27.clientProvider = provider31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.RestAdapter.Log log36 = null;
        builder33.log = log36;
        java.util.concurrent.Executor executor38 = builder33.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.RestAdapter.Log log42 = null;
        builder39.log = log42;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.FULL;
        builder39.logLevel = logLevel44;
        retrofit.RestAdapter.Builder builder46 = builder33.setLogLevel(logLevel44);
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server48 = serializedObjectSupporter47.deserializeObjectServer1();
        retrofit.client.Response response49 = serializedObjectSupporter47.deserializeObjectResponse7();
        java.lang.String str50 = serializedObjectSupporter47.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter47.deserializeObjectErrorHandler1();
        builder46.errorHandler = errorHandler51;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server55 = serializedObjectSupporter54.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder56 = builder53.setServer(server55);
        retrofit.RestAdapter restAdapter57 = builder53.build();
        java.util.concurrent.Executor executor58 = builder53.getcallbackExecutor();
        builder46.sethttpExecutor(executor58);
        builder27.callbackExecutor = executor58;
        builder3.sethttpExecutor(executor58);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-" + "'", str22, "Retrofit-");
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(server55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(executor58);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server3 = serializedObjectSupporter2.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder4 = builder1.setServer(server3);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server6 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.client.Response response7 = serializedObjectSupporter5.deserializeObjectResponse7();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler9 = serializedObjectSupporter5.deserializeObjectErrorHandler1();
        builder1.errorHandler = errorHandler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder1.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder0.setLogLevel(logLevel11);
        retrofit.client.Client.Provider provider13 = null;
        builder0.clientProvider = provider13;
        org.junit.Assert.assertNotNull(server3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        retrofit.client.Response response23 = serializedObjectSupporter16.deserializeObjectResponse1();
        retrofit.mime.TypedInput typedInput24 = response23.body;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertNotNull(response23);
        org.junit.Assert.assertNotNull(typedInput24);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString8();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler19);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.Converter converter17 = restAdapter10.getconverter();
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable18, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter12.deserializeObjectConverter6();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString6();
        retrofit.client.Response response20 = serializedObjectSupporter12.deserializeObjectResponse7();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(response20);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter1();
        retrofit.client.Response response21 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str22 = response21.getReason();
        java.util.List<retrofit.client.Header> headerList23 = response21.getHeaders();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(response21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Internal Server Error" + "'", str22, "Internal Server Error");
        org.junit.Assert.assertNotNull(headerList23);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        java.util.concurrent.Executor executor15 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log18 = restAdapter10.log;
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(log18);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        retrofit.Server server17 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server33 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider36 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider36);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Response response4 = serializedObjectSupporter0.deserializeObjectResponse4();
        retrofit.mime.TypedInput typedInput5 = response4.getBody();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(response4);
        org.junit.Assert.assertNull(typedInput5);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = restAdapter10.server;
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.Profiler profiler6 = builder0.profiler;
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.RestAdapter.Log log8 = builder0.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(log8);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class3 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(class3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server33 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor34 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter10.getLogLevel();
        retrofit.client.Request request36 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request37 = restAdapter10.logAndReplaceRequest(request36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.RestAdapter.Log log7 = builder0.log;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder14 = builder11.setServer(server13);
        retrofit.RestAdapter.Builder builder15 = builder8.setServer(server13);
        retrofit.Server server16 = builder8.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server19 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder20 = builder17.setServer(server19);
        retrofit.RestAdapter restAdapter21 = builder17.build();
        java.util.concurrent.Executor executor22 = builder17.getcallbackExecutor();
        builder8.setcallbackExecutor(executor22);
        builder0.sethttpExecutor(executor22);
        retrofit.RestAdapter.Log log25 = builder0.log;
        java.util.concurrent.Executor executor26 = builder0.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log7);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(executor22);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter23 = serializedObjectSupporter16.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.Server server18 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.Server server16 = restAdapter10.server;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.Server server19 = restAdapter10.server;
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(requestInterceptor20);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        restAdapter10.logLevel = logLevel17;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.logLevel;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.converter.Converter converter22 = restAdapter10.converter;
        java.util.concurrent.Executor executor23 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter41.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server44 = serializedObjectSupporter43.deserializeObjectServer1();
        retrofit.client.Response response45 = serializedObjectSupporter43.deserializeObjectResponse7();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString9();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter43;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = restAdapter27.serializedObjectSupporter;
        retrofit.Server server50 = restAdapter27.getserver();
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.sethttpExecutor(executor52);
        retrofit.RestAdapter.Log log54 = null;
        builder51.log = log54;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.FULL;
        builder51.logLevel = logLevel56;
        restAdapter27.logLevel = logLevel56;
        restAdapter10.logLevel = logLevel56;
        retrofit.client.Client.Provider provider60 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler61 = restAdapter10.errorHandler;
        java.lang.Throwable throwable62 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable62, "http://example.com/");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(response45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNull(errorHandler61);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.RestAdapter restAdapter7 = builder3.build();
        retrofit.RestAdapter.LogLevel logLevel8 = restAdapter7.logLevel;
        retrofit.ErrorHandler errorHandler9 = restAdapter7.geterrorHandler();
        retrofit.RestAdapter.Log log10 = restAdapter7.log;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertNotNull(log10);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter4.deserializeObjectResponse7();
        java.lang.String str7 = serializedObjectSupporter4.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.LogLevel logLevel10 = builder0.logLevel;
        retrofit.RestAdapter.Log log11 = builder0.log;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        retrofit.RestAdapter.Log log19 = builder12.log;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server25 = serializedObjectSupporter24.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder26 = builder23.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server25);
        retrofit.Server server28 = builder20.server;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server31 = serializedObjectSupporter30.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder32 = builder29.setServer(server31);
        retrofit.RestAdapter restAdapter33 = builder29.build();
        java.util.concurrent.Executor executor34 = builder29.getcallbackExecutor();
        builder20.setcallbackExecutor(executor34);
        builder12.sethttpExecutor(executor34);
        builder0.setcallbackExecutor(executor34);
        java.util.concurrent.Executor executor38 = builder0.getcallbackExecutor();
        retrofit.RestAdapter restAdapter39 = builder0.build();
        java.util.concurrent.Executor executor40 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNotNull(executor40);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.mime.TypedInput typedInput9 = response8.body;
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(typedInput9);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter19 = serializedObjectSupporter12.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor18);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
        org.junit.Assert.assertNull(provider18);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        retrofit.RestAdapter.Log log12 = restAdapter10.log;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNull(log13);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str32 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        java.lang.String str44 = restAdapter43.getTHREAD_PREFIX();
        java.lang.String str45 = restAdapter43.getIDLE_THREAD_NAME();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        restAdapter43.logLevel = logLevel55;
        restAdapter10.logLevel = logLevel55;
        retrofit.client.Request request59 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request60 = restAdapter10.logAndReplaceRequest(request59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-" + "'", str44, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restHandler25.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        retrofit.RestAdapter.Log log8 = builder0.log;
        retrofit.Profiler profiler9 = null;
        builder0.profiler = profiler9;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.RestAdapter.Log log8 = null;
        builder5.log = log8;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        builder5.logLevel = logLevel10;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server14 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder15 = builder12.setServer(server14);
        retrofit.RestAdapter restAdapter16 = builder12.build();
        java.util.concurrent.Executor executor17 = builder12.getcallbackExecutor();
        builder5.httpExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        java.util.concurrent.Executor executor31 = builder26.getcallbackExecutor();
        builder19.httpExecutor = executor31;
        retrofit.RestAdapter.Builder builder33 = builder0.setExecutors(executor17, executor31);
        retrofit.RestAdapter.LogLevel logLevel34 = null;
        builder33.logLevel = logLevel34;
        java.lang.Class<?> wildcardClass36 = builder33.getClass();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server11 = serializedObjectSupporter10.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer(server11);
        retrofit.RestAdapter restAdapter13 = builder9.build();
        java.util.concurrent.Executor executor14 = builder9.getcallbackExecutor();
        builder0.setcallbackExecutor(executor14);
        retrofit.RestAdapter.LogLevel logLevel16 = builder0.logLevel;
        java.util.concurrent.Executor executor17 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNotNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.Server server22 = serializedObjectSupporter16.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter23 = serializedObjectSupporter16.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(server22);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = builder0.getclientProvider();
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server6 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer(server6);
        retrofit.RestAdapter restAdapter8 = builder4.build();
        java.util.concurrent.Executor executor9 = builder4.getcallbackExecutor();
        builder0.setcallbackExecutor(executor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.converter.Converter converter22 = restAdapter21.converter;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        java.util.concurrent.Executor executor25 = restAdapter21.getcallbackExecutor();
        int int26 = restAdapter21.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor27 = restAdapter21.callbackExecutor;
        java.lang.String str28 = restAdapter21.getIDLE_THREAD_NAME();
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = null;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = restAdapter39.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server42 = serializedObjectSupporter41.deserializeObjectServer1();
        retrofit.client.Response response43 = serializedObjectSupporter41.deserializeObjectResponse7();
        java.lang.String str44 = serializedObjectSupporter41.deserializeObjectString9();
        restAdapter39.serializedObjectSupporter = serializedObjectSupporter41;
        retrofit.ErrorHandler errorHandler46 = restAdapter39.geterrorHandler();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = restAdapter57.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server60 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.client.Response response61 = serializedObjectSupporter59.deserializeObjectResponse7();
        java.lang.String str62 = serializedObjectSupporter59.deserializeObjectString9();
        restAdapter57.serializedObjectSupporter = serializedObjectSupporter59;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter57.logLevel = logLevel64;
        restAdapter39.setLogLevel(logLevel64);
        restAdapter21.logLevel = logLevel64;
        builder0.logLevel = logLevel64;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server71 = serializedObjectSupporter70.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder72 = builder69.setServer(server71);
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server74 = serializedObjectSupporter73.deserializeObjectServer1();
        retrofit.client.Response response75 = serializedObjectSupporter73.deserializeObjectResponse7();
        java.lang.String str76 = serializedObjectSupporter73.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler77 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        builder69.errorHandler = errorHandler77;
        retrofit.RestAdapter.Builder builder79 = builder0.setErrorHandler(errorHandler77);
        retrofit.Profiler profiler80 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder81 = builder0.setProfiler(profiler80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter40);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "http://example.com/" + "'", str44, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter58);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(response61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "http://example.com/" + "'", str62, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(server71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(response75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "http://example.com/" + "'", str76, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.Server server17 = restAdapter10.server;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter3 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server4 = serializedObjectSupporter3.deserializeObjectServer1();
        retrofit.client.Response response5 = serializedObjectSupporter3.deserializeObjectResponse7();
        java.lang.String str6 = serializedObjectSupporter3.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter3.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter3.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter3.deserializeObjectConverter3();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        log13.log("hi!");
        retrofit.RestAdapter.Builder builder16 = builder11.setLog(log13);
        retrofit.RestAdapter.Log log17 = builder11.log;
        retrofit.RestAdapter.Builder builder18 = builder10.setLog(log17);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.client.Request request16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request17 = restAdapter10.logAndReplaceRequest(request16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(errorHandler15);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider27 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(provider27);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        restAdapter10.logLevel = logLevel17;
        retrofit.Server server20 = restAdapter10.server;
        retrofit.client.Request request21 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = restAdapter10.logAndReplaceRequest(request21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server20);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("OK");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        builder9.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = builder9.getclientProvider();
        java.util.concurrent.Executor executor17 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.RestAdapter.Log log21 = null;
        builder18.log = log21;
        java.util.concurrent.Executor executor23 = builder18.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.RestAdapter.Log log27 = null;
        builder24.log = log27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        builder24.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLogLevel(logLevel29);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server33 = serializedObjectSupporter32.deserializeObjectServer1();
        retrofit.client.Response response34 = serializedObjectSupporter32.deserializeObjectResponse7();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        builder31.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server40 = serializedObjectSupporter39.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer(server40);
        retrofit.RestAdapter restAdapter42 = builder38.build();
        java.util.concurrent.Executor executor43 = builder38.getcallbackExecutor();
        builder31.sethttpExecutor(executor43);
        builder9.setcallbackExecutor(executor43);
        builder0.httpExecutor = executor43;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.sethttpExecutor(executor48);
        retrofit.RestAdapter.Log log50 = null;
        builder47.log = log50;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.FULL;
        builder47.logLevel = logLevel52;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server56 = serializedObjectSupporter55.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder57 = builder54.setServer(server56);
        retrofit.RestAdapter restAdapter58 = builder54.build();
        java.util.concurrent.Executor executor59 = builder54.getcallbackExecutor();
        builder47.httpExecutor = executor59;
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor62 = null;
        builder61.sethttpExecutor(executor62);
        retrofit.RestAdapter.Log log64 = null;
        builder61.log = log64;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        builder61.logLevel = logLevel66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter69 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server70 = serializedObjectSupporter69.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder71 = builder68.setServer(server70);
        retrofit.RestAdapter restAdapter72 = builder68.build();
        java.util.concurrent.Executor executor73 = builder68.getcallbackExecutor();
        builder61.httpExecutor = executor73;
        builder47.callbackExecutor = executor73;
        builder0.sethttpExecutor(executor73);
        java.util.concurrent.Executor executor77 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNotNull(executor73);
        org.junit.Assert.assertNotNull(executor77);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Response response17 = serializedObjectSupporter12.deserializeObjectResponse4();
        retrofit.mime.TypedInput typedInput18 = response17.body;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(response17);
        org.junit.Assert.assertNull(typedInput18);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.Server server6 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server9 = serializedObjectSupporter8.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder10 = builder7.setServer(server9);
        retrofit.RestAdapter restAdapter11 = builder7.build();
        java.util.concurrent.Executor executor12 = builder7.getcallbackExecutor();
        builder0.setcallbackExecutor(executor12);
        retrofit.RestAdapter.Log log14 = builder0.log;
        builder0.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server6);
        org.junit.Assert.assertNotNull(server9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter11);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNull(log14);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.Class class6 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler12 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.Server server14 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        java.lang.String str29 = restAdapter28.getTHREAD_PREFIX();
        java.lang.String str30 = restAdapter28.getIDLE_THREAD_NAME();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter28.logLevel = logLevel40;
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter53.setLogLevel(logLevel54);
        restAdapter28.setLogLevel(logLevel54);
        restAdapter10.logLevel = logLevel54;
        int int58 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-" + "'", str29, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4000 + "'", int58 == 4000);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Response response9 = serializedObjectSupporter0.deserializeObjectResponse1();
        java.lang.String str10 = response9.getReason();
        retrofit.mime.TypedInput typedInput11 = response9.getBody();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(response9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OK" + "'", str10, "OK");
        org.junit.Assert.assertNotNull(typedInput11);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler18 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter10.logLevel;
        retrofit.RestAdapter.Log log20 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log20);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        java.lang.String str19 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.client.Client client2 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder3 = builder0.setClient(client2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        retrofit.client.Response response23 = serializedObjectSupporter16.deserializeObjectResponse1();
        java.lang.String str24 = response23.getReason();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertNotNull(response23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "OK" + "'", str24, "OK");
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        retrofit.client.Request request13 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request14 = restAdapter10.logAndReplaceRequest(request13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider19 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter20 = restAdapter10.getconverter();
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        boolean boolean14 = logLevel11.log();
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        retrofit.client.Response response19 = serializedObjectSupporter12.deserializeObjectResponse7();
        retrofit.mime.TypedInput typedInput20 = response19.getBody();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertNull(typedInput20);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str18 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider19 = restAdapter10.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(serializedObjectSupporter20);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        java.lang.String str22 = serializedObjectSupporter16.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter16.deserializeObjectConverter8();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(provider14);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        builder3.ensureSaneDefaults();
        retrofit.Server server5 = builder3.server;
        retrofit.RestAdapter.Log log6 = builder3.log;
        retrofit.RestAdapter.Log log7 = builder3.log;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(log7);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.Server server16 = restAdapter10.server;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.Server server19 = restAdapter10.server;
        retrofit.client.Client.Provider provider20 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter19 = restAdapter10.converter;
        retrofit.client.Client.Provider provider20 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter10.getLogLevel();
        java.lang.String str22 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean24 = logLevel23.log();
        restAdapter10.setLogLevel(logLevel23);
        boolean boolean26 = logLevel23.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-" + "'", str22, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter7 = builder0.converter;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
        org.junit.Assert.assertNull(converter7);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.RestAdapter.Log log16 = null;
        builder13.log = log16;
        java.util.concurrent.Executor executor18 = builder13.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.FULL;
        builder19.logLevel = logLevel24;
        retrofit.RestAdapter.Builder builder26 = builder13.setLogLevel(logLevel24);
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.client.Response response29 = serializedObjectSupporter27.deserializeObjectResponse7();
        java.lang.String str30 = serializedObjectSupporter27.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter27.deserializeObjectErrorHandler1();
        builder26.errorHandler = errorHandler31;
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server35 = serializedObjectSupporter34.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder36 = builder33.setServer(server35);
        retrofit.RestAdapter restAdapter37 = builder33.build();
        java.util.concurrent.Executor executor38 = builder33.getcallbackExecutor();
        builder26.sethttpExecutor(executor38);
        java.util.concurrent.Executor executor40 = builder26.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter42 = builder41.converter;
        retrofit.RestAdapter.Builder builder44 = builder41.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder46 = builder44.setLogLevel(logLevel45);
        boolean boolean47 = logLevel45.log();
        retrofit.RestAdapter.Builder builder48 = builder26.setLogLevel(logLevel45);
        restAdapter10.setLogLevel(logLevel45);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(response29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "http://example.com/" + "'", str30, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(server35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(converter17);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.LogLevel logLevel2 = builder0.logLevel;
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.Profiler profiler4 = builder0.profiler;
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertTrue("'" + logLevel2 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel2.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.Class class6 = serializedObjectSupporter0.deserializeObjectClass1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(class6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = builder0.getclientProvider();
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.RestAdapter.Log log7 = null;
        builder4.log = log7;
        java.util.concurrent.Executor executor9 = builder4.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server12 = serializedObjectSupporter11.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder13 = builder10.setServer(server12);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.RestAdapter.Log log17 = null;
        builder14.log = log17;
        java.util.concurrent.Executor executor19 = builder14.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.RestAdapter.Log log23 = null;
        builder20.log = log23;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.FULL;
        builder20.logLevel = logLevel25;
        retrofit.RestAdapter.Builder builder27 = builder14.setLogLevel(logLevel25);
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server29 = serializedObjectSupporter28.deserializeObjectServer1();
        retrofit.client.Response response30 = serializedObjectSupporter28.deserializeObjectResponse7();
        java.lang.String str31 = serializedObjectSupporter28.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        builder27.errorHandler = errorHandler32;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server36 = serializedObjectSupporter35.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder37 = builder34.setServer(server36);
        retrofit.RestAdapter restAdapter38 = builder34.build();
        java.util.concurrent.Executor executor39 = builder34.getcallbackExecutor();
        builder27.sethttpExecutor(executor39);
        builder10.sethttpExecutor(executor39);
        builder4.httpExecutor = executor39;
        builder0.httpExecutor = executor39;
        retrofit.Profiler profiler44 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder45 = builder0.setProfiler(profiler44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(response30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://example.com/" + "'", str31, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNotNull(executor39);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.Converter converter33 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(converter33);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = restAdapter10.server;
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        restAdapter10.logLevel = logLevel17;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.logLevel;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.converter.Converter converter22 = restAdapter10.converter;
        retrofit.RequestInterceptor requestInterceptor23 = restAdapter10.getrequestInterceptor();
        java.lang.Throwable throwable24 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable24, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(requestInterceptor23);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter23.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.client.Response response27 = serializedObjectSupporter25.deserializeObjectResponse7();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString9();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter25;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter25;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = serializedObjectSupporter25.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        retrofit.Profiler profiler19 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertNull(profiler19);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter16.deserializeObjectConverter5();
        java.lang.String str25 = serializedObjectSupporter16.deserializeObjectString7();
        java.lang.String str26 = serializedObjectSupporter16.deserializeObjectString9();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "http://example.com/" + "'", str25, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "http://example.com/" + "'", str26, "http://example.com/");
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter7 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor3 = builder0.requestInterceptor;
        retrofit.Profiler profiler4 = builder0.profiler;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter6 = builder5.converter;
        retrofit.RestAdapter.Builder builder8 = builder5.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder10 = builder5.setLogLevel(logLevel9);
        retrofit.Profiler profiler11 = null;
        builder10.profiler = profiler11;
        java.util.concurrent.Executor executor13 = builder10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor14 = builder10.requestInterceptor;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.RestAdapter.Log log18 = null;
        builder15.log = log18;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.FULL;
        builder15.logLevel = logLevel20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server24 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer(server24);
        retrofit.RestAdapter restAdapter26 = builder22.build();
        java.util.concurrent.Executor executor27 = builder22.getcallbackExecutor();
        builder15.httpExecutor = executor27;
        builder10.sethttpExecutor(executor27);
        builder0.callbackExecutor = executor27;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(requestInterceptor3);
        org.junit.Assert.assertNull(profiler4);
        org.junit.Assert.assertNull(converter6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNotNull(executor27);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter23.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.client.Response response27 = serializedObjectSupporter25.deserializeObjectResponse7();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString9();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter25;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.client.Response response32 = serializedObjectSupporter25.deserializeObjectResponse1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(response32);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder8 = builder0.setServer("OK");
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.FULL;
        builder9.logLevel = logLevel14;
        retrofit.client.Client.Provider provider16 = builder9.getclientProvider();
        java.util.concurrent.Executor executor17 = builder9.callbackExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.RestAdapter.Log log21 = null;
        builder18.log = log21;
        java.util.concurrent.Executor executor23 = builder18.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.RestAdapter.Log log27 = null;
        builder24.log = log27;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.FULL;
        builder24.logLevel = logLevel29;
        retrofit.RestAdapter.Builder builder31 = builder18.setLogLevel(logLevel29);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server33 = serializedObjectSupporter32.deserializeObjectServer1();
        retrofit.client.Response response34 = serializedObjectSupporter32.deserializeObjectResponse7();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        builder31.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server40 = serializedObjectSupporter39.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder41 = builder38.setServer(server40);
        retrofit.RestAdapter restAdapter42 = builder38.build();
        java.util.concurrent.Executor executor43 = builder38.getcallbackExecutor();
        builder31.sethttpExecutor(executor43);
        builder9.setcallbackExecutor(executor43);
        builder0.httpExecutor = executor43;
        retrofit.RestAdapter.Log log47 = builder0.log;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(response34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(server40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(log47);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(log17);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.Profiler profiler6 = builder0.profiler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.RestAdapter.Log log10 = null;
        builder7.log = log10;
        java.util.concurrent.Executor executor12 = builder7.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.RestAdapter.Log log16 = null;
        builder13.log = log16;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.FULL;
        builder13.logLevel = logLevel18;
        retrofit.RestAdapter.Builder builder20 = builder7.setLogLevel(logLevel18);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.client.Response response23 = serializedObjectSupporter21.deserializeObjectResponse7();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter21.deserializeObjectErrorHandler1();
        builder20.errorHandler = errorHandler25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server29 = serializedObjectSupporter28.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder30 = builder27.setServer(server29);
        retrofit.RestAdapter restAdapter31 = builder27.build();
        java.util.concurrent.Executor executor32 = builder27.getcallbackExecutor();
        builder20.sethttpExecutor(executor32);
        builder0.callbackExecutor = executor32;
        retrofit.client.Client.Provider provider35 = builder0.getclientProvider();
        retrofit.RestAdapter.Log log36 = builder0.log;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(profiler6);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(response23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(executor32);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNotNull(log36);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        java.util.concurrent.Executor executor6 = builder5.getcallbackExecutor();
        retrofit.converter.Converter converter7 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString1();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString4();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        builder5.requestInterceptor = requestInterceptor11;
        java.util.concurrent.Executor executor13 = builder5.gethttpExecutor();
        retrofit.client.Client.Provider provider14 = builder5.getclientProvider();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-" + "'", str9, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(provider14);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.Profiler profiler9 = builder0.profiler;
        retrofit.Profiler profiler10 = null;
        builder0.profiler = profiler10;
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(profiler9);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = response3.getReason();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Response response17 = serializedObjectSupporter12.deserializeObjectResponse3();
        int int18 = response17.getStatus();
        int int19 = response17.status;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNotNull(response17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 200 + "'", int18 == 200);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 200 + "'", int19 == 200);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        java.lang.Class<?> wildcardClass17 = restAdapter10.getClass();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server15 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.client.Response response16 = serializedObjectSupporter14.deserializeObjectResponse7();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder20.build();
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        builder13.sethttpExecutor(executor25);
        retrofit.ErrorHandler errorHandler27 = builder13.errorHandler;
        retrofit.Server server28 = builder13.server;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertNull(server28);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server5 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder6 = builder3.setServer(server5);
        retrofit.RestAdapter.Builder builder7 = builder0.setServer(server5);
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        java.util.concurrent.Executor executor9 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log10 = null;
        builder0.log = log10;
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertNull(executor9);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler33 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertNull(errorHandler33);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor19 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler20 = restAdapter10.errorHandler;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.converter.Converter converter32 = restAdapter31.converter;
        java.util.concurrent.Executor executor33 = restAdapter31.callbackExecutor;
        retrofit.RestAdapter.Log log34 = restAdapter31.log;
        java.util.concurrent.Executor executor35 = restAdapter31.getcallbackExecutor();
        int int36 = restAdapter31.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel37 = restAdapter31.logLevel;
        restAdapter10.logLevel = logLevel37;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4000 + "'", int36 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter12.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter12.deserializeObjectConverter1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = builder0.getclientProvider();
        java.util.concurrent.Executor executor3 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server6 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder7 = builder4.setServer(server6);
        retrofit.RestAdapter restAdapter8 = builder4.build();
        java.util.concurrent.Executor executor9 = builder4.getcallbackExecutor();
        builder0.setcallbackExecutor(executor9);
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.converter.Converter converter22 = restAdapter21.converter;
        java.util.concurrent.Executor executor23 = restAdapter21.callbackExecutor;
        retrofit.RestAdapter.Log log24 = restAdapter21.log;
        java.util.concurrent.Executor executor25 = restAdapter21.getcallbackExecutor();
        int int26 = restAdapter21.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor27 = restAdapter21.callbackExecutor;
        java.lang.String str28 = restAdapter21.getIDLE_THREAD_NAME();
        retrofit.Server server29 = null;
        retrofit.client.Client.Provider provider30 = null;
        java.util.concurrent.Executor executor31 = null;
        java.util.concurrent.Executor executor32 = null;
        retrofit.RequestInterceptor requestInterceptor33 = null;
        retrofit.converter.Converter converter34 = null;
        retrofit.Profiler profiler35 = null;
        retrofit.ErrorHandler errorHandler36 = null;
        retrofit.RestAdapter.Log log37 = null;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter39 = new retrofit.RestAdapter(server29, provider30, executor31, executor32, requestInterceptor33, converter34, profiler35, errorHandler36, log37, logLevel38);
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = restAdapter39.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server42 = serializedObjectSupporter41.deserializeObjectServer1();
        retrofit.client.Response response43 = serializedObjectSupporter41.deserializeObjectResponse7();
        java.lang.String str44 = serializedObjectSupporter41.deserializeObjectString9();
        restAdapter39.serializedObjectSupporter = serializedObjectSupporter41;
        retrofit.ErrorHandler errorHandler46 = restAdapter39.geterrorHandler();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = restAdapter57.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server60 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.client.Response response61 = serializedObjectSupporter59.deserializeObjectResponse7();
        java.lang.String str62 = serializedObjectSupporter59.deserializeObjectString9();
        restAdapter57.serializedObjectSupporter = serializedObjectSupporter59;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter57.logLevel = logLevel64;
        restAdapter39.setLogLevel(logLevel64);
        restAdapter21.logLevel = logLevel64;
        builder0.logLevel = logLevel64;
        java.util.concurrent.Executor executor69 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(restAdapter8);
        org.junit.Assert.assertNotNull(executor9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter40);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "http://example.com/" + "'", str44, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter58);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(response61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "http://example.com/" + "'", str62, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor69);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Profiler profiler14 = restAdapter10.profiler;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.Server server16 = restAdapter10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        boolean boolean15 = logLevel14.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder1 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server3 = serializedObjectSupporter2.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder4 = builder1.setServer(server3);
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server6 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.client.Response response7 = serializedObjectSupporter5.deserializeObjectResponse7();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler9 = serializedObjectSupporter5.deserializeObjectErrorHandler1();
        builder1.errorHandler = errorHandler9;
        retrofit.RestAdapter.LogLevel logLevel11 = builder1.logLevel;
        retrofit.RestAdapter.Builder builder12 = builder0.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter14 = builder13.converter;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        log15.log("hi!");
        retrofit.RestAdapter.Builder builder18 = builder13.setLog(log15);
        retrofit.RestAdapter.Log log19 = builder13.log;
        log19.log("http://example.com/");
        retrofit.RestAdapter.Builder builder22 = builder0.setLog(log19);
        retrofit.client.Client.Provider provider23 = builder22.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel24 = builder22.logLevel;
        org.junit.Assert.assertNotNull(server3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        java.lang.Class class19 = serializedObjectSupporter12.deserializeObjectClass1();
        retrofit.client.Response response20 = serializedObjectSupporter12.deserializeObjectResponse1();
        retrofit.client.Response response21 = serializedObjectSupporter12.deserializeObjectResponse3();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(class19);
        org.junit.Assert.assertNotNull(response20);
        org.junit.Assert.assertNotNull(response21);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str32 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter10.logLevel = logLevel33;
        retrofit.ErrorHandler errorHandler35 = restAdapter10.errorHandler;
        int int36 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4000 + "'", int36 == 4000);
        org.junit.Assert.assertNotNull(serializedObjectSupporter37);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str19 = serializedObjectSupporter12.deserializeObjectString10();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter12.deserializeObjectConverter8();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter28.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server31 = serializedObjectSupporter30.deserializeObjectServer1();
        retrofit.client.Response response32 = serializedObjectSupporter30.deserializeObjectResponse7();
        java.lang.String str33 = serializedObjectSupporter30.deserializeObjectString9();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.ErrorHandler errorHandler35 = restAdapter28.geterrorHandler();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = restAdapter46.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server49 = serializedObjectSupporter48.deserializeObjectServer1();
        retrofit.client.Response response50 = serializedObjectSupporter48.deserializeObjectResponse7();
        java.lang.String str51 = serializedObjectSupporter48.deserializeObjectString9();
        restAdapter46.serializedObjectSupporter = serializedObjectSupporter48;
        retrofit.RestAdapter.LogLevel logLevel53 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter46.logLevel = logLevel53;
        restAdapter28.setLogLevel(logLevel53);
        restAdapter10.logLevel = logLevel53;
        retrofit.converter.Converter converter57 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(response32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter47);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(response50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "http://example.com/" + "'", str51, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter57);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter restAdapter4 = builder0.build();
        retrofit.Profiler profiler5 = restAdapter4.getprofiler();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(restAdapter4);
        org.junit.Assert.assertNull(profiler5);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = response3.reason;
        java.lang.String str5 = response3.reason;
        retrofit.mime.TypedInput typedInput6 = response3.body;
        retrofit.mime.TypedInput typedInput7 = response3.getBody();
        java.lang.String str8 = response3.getReason();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertNull(typedInput6);
        org.junit.Assert.assertNull(typedInput7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OK" + "'", str8, "OK");
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter18 = serializedObjectSupporter12.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.ErrorHandler errorHandler4 = builder0.errorHandler;
        java.util.concurrent.Executor executor5 = builder0.httpExecutor;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(errorHandler4);
        org.junit.Assert.assertNull(executor5);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.RestAdapter.RestHandler restHandler15 = restAdapter10.new RestHandler();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor17);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str32 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server33 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Retrofit-Idle" + "'", str32, "Retrofit-Idle");
        org.junit.Assert.assertNull(server33);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = restAdapter10.server;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler16);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.Server server17 = restAdapter10.server;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.geterrorHandler();
        int int20 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server15 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.client.Response response16 = serializedObjectSupporter14.deserializeObjectResponse7();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder20.build();
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        builder13.sethttpExecutor(executor25);
        retrofit.converter.Converter converter27 = builder13.converter;
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNull(converter27);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor26 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler27 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNull(requestInterceptor26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(requestInterceptor28);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        java.lang.Throwable throwable17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable17, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.client.Client.Provider provider4 = null;
        builder0.clientProvider = provider4;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        java.util.concurrent.Executor executor11 = builder6.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder19 = builder6.setLogLevel(logLevel17);
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server21 = serializedObjectSupporter20.deserializeObjectServer1();
        retrofit.client.Response response22 = serializedObjectSupporter20.deserializeObjectResponse7();
        java.lang.String str23 = serializedObjectSupporter20.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler24 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        builder19.errorHandler = errorHandler24;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        java.util.concurrent.Executor executor31 = builder26.getcallbackExecutor();
        builder19.sethttpExecutor(executor31);
        builder0.callbackExecutor = executor31;
        java.util.concurrent.Executor executor34 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler24);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(executor34);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter10.logLevel = logLevel15;
        retrofit.RestAdapter.LogLevel logLevel17 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.setLogLevel(logLevel17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log level may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter16.deserializeObjectConverter2();
        retrofit.client.Response response24 = serializedObjectSupporter16.deserializeObjectResponse1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(response24);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.Profiler profiler5 = null;
        builder0.profiler = profiler5;
        java.util.concurrent.Executor executor7 = builder0.httpExecutor;
        org.junit.Assert.assertNull(executor7);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.Profiler profiler21 = restAdapter10.getprofiler();
        retrofit.ErrorHandler errorHandler22 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNull(profiler21);
        org.junit.Assert.assertNull(errorHandler22);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        boolean boolean27 = logLevel25.log();
        restAdapter10.logLevel = logLevel25;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(errorHandler5);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(profiler14);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.errorHandler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.RestAdapter.Log log10 = null;
        builder7.log = log10;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.FULL;
        builder7.logLevel = logLevel12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server16 = serializedObjectSupporter15.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder17 = builder14.setServer(server16);
        retrofit.RestAdapter restAdapter18 = builder14.build();
        java.util.concurrent.Executor executor19 = builder14.getcallbackExecutor();
        builder7.httpExecutor = executor19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.RestAdapter.Log log24 = null;
        builder21.log = log24;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        builder21.logLevel = logLevel26;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server30 = serializedObjectSupporter29.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder31 = builder28.setServer(server30);
        retrofit.RestAdapter restAdapter32 = builder28.build();
        java.util.concurrent.Executor executor33 = builder28.getcallbackExecutor();
        builder21.httpExecutor = executor33;
        builder7.callbackExecutor = executor33;
        builder3.sethttpExecutor(executor33);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNotNull(executor33);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter10.logLevel = logLevel24;
        retrofit.client.Client.Provider provider27 = restAdapter10.clientProvider;
        retrofit.Profiler profiler28 = restAdapter10.getprofiler();
        retrofit.client.Response response30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response32 = restAdapter10.logAndReplaceResponse("Retrofit-Idle", response30, (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(profiler28);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.RestAdapter.Log log9 = null;
        builder6.log = log9;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.FULL;
        builder6.logLevel = logLevel11;
        retrofit.RestAdapter.Builder builder13 = builder0.setLogLevel(logLevel11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server15 = serializedObjectSupporter14.deserializeObjectServer1();
        retrofit.client.Response response16 = serializedObjectSupporter14.deserializeObjectResponse7();
        java.lang.String str17 = serializedObjectSupporter14.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder13.errorHandler = errorHandler18;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server22 = serializedObjectSupporter21.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder20.setServer(server22);
        retrofit.RestAdapter restAdapter24 = builder20.build();
        java.util.concurrent.Executor executor25 = builder20.getcallbackExecutor();
        builder13.sethttpExecutor(executor25);
        retrofit.ErrorHandler errorHandler27 = builder13.errorHandler;
        retrofit.RestAdapter.Log log28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder29 = builder13.setLog(log28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(server15);
        org.junit.Assert.assertNotNull(response16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter24);
        org.junit.Assert.assertNotNull(executor25);
        org.junit.Assert.assertNotNull(errorHandler27);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter23.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.client.Response response27 = serializedObjectSupporter25.deserializeObjectResponse7();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString9();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter25;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.client.Response response31 = serializedObjectSupporter25.deserializeObjectResponse7();
        retrofit.mime.TypedInput typedInput32 = response31.body;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNotNull(response31);
        org.junit.Assert.assertNull(typedInput32);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = response3.reason;
        java.lang.String str5 = response3.reason;
        java.lang.String str6 = response3.getReason();
        retrofit.mime.TypedInput typedInput7 = response3.body;
        java.util.List<retrofit.client.Header> headerList8 = response3.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = response3.headers;
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
        org.junit.Assert.assertNull(typedInput7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        restAdapter10.logLevel = logLevel17;
        retrofit.Server server20 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel21 = restAdapter10.getLogLevel();
        java.util.concurrent.Executor executor22 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.Log log23 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log23);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter restAdapter4 = builder0.build();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.RestAdapter.Log log8 = null;
        builder5.log = log8;
        retrofit.RestAdapter.LogLevel logLevel10 = retrofit.RestAdapter.LogLevel.FULL;
        builder5.logLevel = logLevel10;
        restAdapter4.setLogLevel(logLevel10);
        retrofit.ErrorHandler errorHandler13 = restAdapter4.errorHandler;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        java.lang.String str31 = serializedObjectSupporter26.deserializeObjectString2();
        java.lang.String str32 = serializedObjectSupporter26.deserializeObjectString7();
        java.lang.String str33 = serializedObjectSupporter26.deserializeObjectString4();
        java.lang.String str34 = serializedObjectSupporter26.deserializeObjectString5();
        restAdapter4.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter26.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(restAdapter4);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "http://example.com/" + "'", str32, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "http://example.com/" + "'", str33, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = null;
        builder0.setcallbackExecutor(executor5);
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server11 = serializedObjectSupporter10.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer(server11);
        builder12.ensureSaneDefaults();
        retrofit.Server server14 = builder12.server;
        retrofit.RestAdapter.Log log15 = builder12.log;
        retrofit.RestAdapter.Builder builder16 = builder0.setLog(log15);
        log15.log("Retrofit-");
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString2();
        java.lang.String str18 = serializedObjectSupporter12.deserializeObjectString7();
        retrofit.client.Response response19 = serializedObjectSupporter12.deserializeObjectResponse7();
        int int20 = response19.getStatus();
        java.util.List<retrofit.client.Header> headerList21 = response19.getHeaders();
        int int22 = response19.status;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(response19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 500 + "'", int20 == 500);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 500 + "'", int22 == 500);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = restAdapter10.clientProvider;
        retrofit.client.Request request14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request15 = restAdapter10.logAndReplaceRequest(request14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(provider13);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.client.Response response21 = serializedObjectSupporter16.deserializeObjectResponse4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertNotNull(response21);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Response response10 = serializedObjectSupporter0.deserializeObjectResponse3();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "http://example.com/" + "'", str9, "http://example.com/");
        org.junit.Assert.assertNotNull(response10);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.client.Client.Provider provider2 = builder0.getclientProvider();
        retrofit.ErrorHandler errorHandler3 = builder0.errorHandler;
        retrofit.Profiler profiler4 = null;
        builder0.profiler = profiler4;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(provider2);
        org.junit.Assert.assertNull(errorHandler3);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        retrofit.Server server17 = restAdapter10.server;
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.RestAdapter restAdapter4 = builder0.build();
        java.util.concurrent.Executor executor5 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider6 = builder0.getclientProvider();
        retrofit.Profiler profiler7 = builder0.profiler;
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(restAdapter4);
        org.junit.Assert.assertNotNull(executor5);
        org.junit.Assert.assertNotNull(provider6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(executor8);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.Server server13 = restAdapter10.server;
        retrofit.Server server14 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.Server server16 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(server16);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(serializedObjectSupporter6);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        java.lang.String str19 = restAdapter10.getTHREAD_PREFIX();
        retrofit.ErrorHandler errorHandler20 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-" + "'", str19, "Retrofit-");
        org.junit.Assert.assertNull(errorHandler20);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.client.Response response9 = serializedObjectSupporter0.deserializeObjectResponse4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter10 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(response9);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log18 = restAdapter10.log;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        java.util.concurrent.Executor executor24 = builder19.getcallbackExecutor();
        retrofit.Server server25 = builder19.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server28 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder29 = builder26.setServer(server28);
        retrofit.RestAdapter restAdapter30 = builder26.build();
        java.util.concurrent.Executor executor31 = builder26.getcallbackExecutor();
        builder19.setcallbackExecutor(executor31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter34 = builder33.converter;
        retrofit.RestAdapter.Builder builder36 = builder33.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder38 = builder36.setLogLevel(logLevel37);
        boolean boolean39 = logLevel37.log();
        retrofit.RestAdapter.Builder builder40 = builder19.setLogLevel(logLevel37);
        restAdapter10.logLevel = logLevel37;
        retrofit.RestAdapter.RestHandler restHandler42 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor43 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(server28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter30);
        org.junit.Assert.assertNotNull(executor31);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor43);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = restAdapter23.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server26 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.client.Response response27 = serializedObjectSupporter25.deserializeObjectResponse7();
        java.lang.String str28 = serializedObjectSupporter25.deserializeObjectString9();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter25;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.RestAdapter.Log log31 = restAdapter10.log;
        retrofit.client.Client.Provider provider32 = restAdapter10.clientProvider;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.converter.Converter converter44 = restAdapter43.converter;
        java.util.concurrent.Executor executor45 = restAdapter43.callbackExecutor;
        retrofit.ErrorHandler errorHandler46 = restAdapter43.errorHandler;
        retrofit.client.Client.Provider provider47 = restAdapter43.getclientProvider();
        retrofit.ErrorHandler errorHandler48 = restAdapter43.errorHandler;
        retrofit.Server server49 = null;
        retrofit.client.Client.Provider provider50 = null;
        java.util.concurrent.Executor executor51 = null;
        java.util.concurrent.Executor executor52 = null;
        retrofit.RequestInterceptor requestInterceptor53 = null;
        retrofit.converter.Converter converter54 = null;
        retrofit.Profiler profiler55 = null;
        retrofit.ErrorHandler errorHandler56 = null;
        retrofit.RestAdapter.Log log57 = null;
        retrofit.RestAdapter.LogLevel logLevel58 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter59 = new retrofit.RestAdapter(server49, provider50, executor51, executor52, requestInterceptor53, converter54, profiler55, errorHandler56, log57, logLevel58);
        java.lang.String str60 = restAdapter59.getTHREAD_PREFIX();
        java.lang.String str61 = restAdapter59.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler62 = restAdapter59.errorHandler;
        java.util.concurrent.Executor executor63 = restAdapter59.gethttpExecutor();
        retrofit.Server server64 = restAdapter59.getserver();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter59.logLevel;
        restAdapter43.logLevel = logLevel65;
        restAdapter10.logLevel = logLevel65;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter24);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(response27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "http://example.com/" + "'", str28, "http://example.com/");
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(errorHandler46);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Retrofit-" + "'", str60, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Retrofit-Idle" + "'", str61, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.Server server17 = restAdapter10.server;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        restAdapter10.logLevel = logLevel24;
        retrofit.Server server27 = restAdapter10.getserver();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        java.util.concurrent.Executor executor42 = restAdapter38.gethttpExecutor();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        restAdapter38.logLevel = logLevel52;
        boolean boolean55 = logLevel52.log();
        restAdapter10.setLogLevel(logLevel52);
        retrofit.Profiler profiler57 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(profiler57);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.lang.String str15 = restAdapter10.getTHREAD_PREFIX();
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter24.setLogLevel(logLevel25);
        restAdapter10.setLogLevel(logLevel25);
        java.lang.String str28 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-" + "'", str28, "Retrofit-");
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable15, "Internal Server Error");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
        org.junit.Assert.assertNull(executor14);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Log log2 = retrofit.RestAdapter.Log.NONE;
        log2.log("hi!");
        retrofit.RestAdapter.Builder builder5 = builder0.setLog(log2);
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = null;
        builder5.serializedObjectSupporter = serializedObjectSupporter6;
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(log2);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter8 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(requestInterceptor19);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.Profiler profiler17 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString2();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        java.lang.Class class35 = serializedObjectSupporter32.deserializeObjectClass1();
        java.lang.Class class36 = serializedObjectSupporter32.deserializeObjectClass1();
        java.lang.String str37 = serializedObjectSupporter32.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(class36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "http://example.com/" + "'", str37, "http://example.com/");
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        java.util.concurrent.Executor executor2 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider3 = null;
        builder0.setclientProvider(provider3);
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("http://example.com/");
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNull(executor2);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.FULL;
        builder0.logLevel = logLevel5;
        retrofit.client.Client.Provider provider7 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.RestAdapter.Log log12 = null;
        builder9.log = log12;
        java.util.concurrent.Executor executor14 = builder9.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder18 = builder15.setServer(server17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.RestAdapter.Log log22 = null;
        builder19.log = log22;
        java.util.concurrent.Executor executor24 = builder19.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.RestAdapter.Log log28 = null;
        builder25.log = log28;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = builder19.setLogLevel(logLevel30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server34 = serializedObjectSupporter33.deserializeObjectServer1();
        retrofit.client.Response response35 = serializedObjectSupporter33.deserializeObjectResponse7();
        java.lang.String str36 = serializedObjectSupporter33.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        builder32.errorHandler = errorHandler37;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server41 = serializedObjectSupporter40.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder42 = builder39.setServer(server41);
        retrofit.RestAdapter restAdapter43 = builder39.build();
        java.util.concurrent.Executor executor44 = builder39.getcallbackExecutor();
        builder32.sethttpExecutor(executor44);
        builder15.sethttpExecutor(executor44);
        builder9.httpExecutor = executor44;
        builder0.sethttpExecutor(executor44);
        retrofit.client.Client.Provider provider49 = builder0.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(response35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(server41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNull(provider49);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.converter.Converter converter28 = restAdapter27.converter;
        java.util.concurrent.Executor executor29 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.Log log30 = restAdapter27.log;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter41.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server44 = serializedObjectSupporter43.deserializeObjectServer1();
        retrofit.client.Response response45 = serializedObjectSupporter43.deserializeObjectResponse7();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString9();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter43;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.client.Response response49 = serializedObjectSupporter43.deserializeObjectResponse4();
        java.lang.String str50 = serializedObjectSupporter43.deserializeObjectString4();
        java.lang.String str51 = serializedObjectSupporter43.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter43;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(response45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertNotNull(response49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "http://example.com/" + "'", str51, "http://example.com/");
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.gethttpExecutor();
        retrofit.Profiler profiler2 = builder0.profiler;
        retrofit.converter.Converter converter3 = builder0.converter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(profiler2);
        org.junit.Assert.assertNull(converter3);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.util.List<retrofit.client.Header> headerList4 = response3.headers;
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertNotNull(headerList4);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.Log log11 = restAdapter10.log;
        retrofit.Server server12 = restAdapter10.getserver();
        retrofit.Profiler profiler13 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertNull(profiler13);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.Server server14 = restAdapter10.server;
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable15, "Retrofit-Idle");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler18 = restAdapter10.profiler;
        java.lang.String str19 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler20 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.NONE;
        retrofit.RestAdapter.Builder builder5 = builder3.setLogLevel(logLevel4);
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        java.lang.String str17 = restAdapter16.getTHREAD_PREFIX();
        java.lang.String str18 = restAdapter16.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler19 = restAdapter16.errorHandler;
        retrofit.RestAdapter.Log log20 = restAdapter16.log;
        retrofit.RestAdapter.LogLevel logLevel21 = null;
        restAdapter16.logLevel = logLevel21;
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = null;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        retrofit.converter.Converter converter34 = restAdapter33.converter;
        java.util.concurrent.Executor executor35 = restAdapter33.callbackExecutor;
        retrofit.RestAdapter.Log log36 = restAdapter33.log;
        java.util.concurrent.Executor executor37 = restAdapter33.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor38 = restAdapter33.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler39 = restAdapter33.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter33.setLogLevel(logLevel40);
        restAdapter16.logLevel = logLevel40;
        retrofit.RestAdapter.Builder builder43 = builder5.setLogLevel(logLevel40);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(log36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(requestInterceptor38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = response3.getReason();
        java.lang.String str5 = response3.reason;
        java.lang.String str6 = response3.getReason();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "OK" + "'", str4, "OK");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OK" + "'", str5, "OK");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OK" + "'", str6, "OK");
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.Server server14 = restAdapter10.getserver();
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter18 = builder17.converter;
        retrofit.client.Client.Provider provider19 = builder17.getclientProvider();
        java.util.concurrent.Executor executor20 = builder17.gethttpExecutor();
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server23 = serializedObjectSupporter22.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder24 = builder21.setServer(server23);
        retrofit.RestAdapter restAdapter25 = builder21.build();
        java.util.concurrent.Executor executor26 = builder21.getcallbackExecutor();
        builder17.setcallbackExecutor(executor26);
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.converter.Converter converter39 = restAdapter38.converter;
        java.util.concurrent.Executor executor40 = restAdapter38.callbackExecutor;
        retrofit.RestAdapter.Log log41 = restAdapter38.log;
        java.util.concurrent.Executor executor42 = restAdapter38.getcallbackExecutor();
        int int43 = restAdapter38.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor44 = restAdapter38.callbackExecutor;
        java.lang.String str45 = restAdapter38.getIDLE_THREAD_NAME();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = restAdapter56.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server59 = serializedObjectSupporter58.deserializeObjectServer1();
        retrofit.client.Response response60 = serializedObjectSupporter58.deserializeObjectResponse7();
        java.lang.String str61 = serializedObjectSupporter58.deserializeObjectString9();
        restAdapter56.serializedObjectSupporter = serializedObjectSupporter58;
        retrofit.ErrorHandler errorHandler63 = restAdapter56.geterrorHandler();
        retrofit.Server server64 = null;
        retrofit.client.Client.Provider provider65 = null;
        java.util.concurrent.Executor executor66 = null;
        java.util.concurrent.Executor executor67 = null;
        retrofit.RequestInterceptor requestInterceptor68 = null;
        retrofit.converter.Converter converter69 = null;
        retrofit.Profiler profiler70 = null;
        retrofit.ErrorHandler errorHandler71 = null;
        retrofit.RestAdapter.Log log72 = null;
        retrofit.RestAdapter.LogLevel logLevel73 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter74 = new retrofit.RestAdapter(server64, provider65, executor66, executor67, requestInterceptor68, converter69, profiler70, errorHandler71, log72, logLevel73);
        retrofit.SerializedObjectSupporter serializedObjectSupporter75 = restAdapter74.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server77 = serializedObjectSupporter76.deserializeObjectServer1();
        retrofit.client.Response response78 = serializedObjectSupporter76.deserializeObjectResponse7();
        java.lang.String str79 = serializedObjectSupporter76.deserializeObjectString9();
        restAdapter74.serializedObjectSupporter = serializedObjectSupporter76;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter74.logLevel = logLevel81;
        restAdapter56.setLogLevel(logLevel81);
        restAdapter38.logLevel = logLevel81;
        builder17.logLevel = logLevel81;
        restAdapter10.setLogLevel(logLevel81);
        boolean boolean87 = logLevel81.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(executor26);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(log41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4000 + "'", int43 == 4000);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter57);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(response60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "http://example.com/" + "'", str61, "http://example.com/");
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter75);
        org.junit.Assert.assertNotNull(server77);
        org.junit.Assert.assertNotNull(response78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "http://example.com/" + "'", str79, "http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.RequestInterceptor requestInterceptor7 = builder3.requestInterceptor;
        retrofit.RestAdapter.Log log8 = builder3.log;
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNull(requestInterceptor7);
        org.junit.Assert.assertNull(log8);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(response5);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.RestAdapter.Log log15 = null;
        builder12.log = log15;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.FULL;
        builder12.logLevel = logLevel17;
        restAdapter10.logLevel = logLevel17;
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.logLevel;
        java.lang.String str21 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel22 = null;
        restAdapter10.logLevel = logLevel22;
        retrofit.RequestInterceptor requestInterceptor24 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor24);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        int int19 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4000 + "'", int19 == 4000);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = restAdapter10.server;
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor17 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(provider14);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Builder builder4 = builder0.setServer("Retrofit-Idle");
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        int int17 = restAdapter16.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.RestAdapter.Log log21 = null;
        builder18.log = log21;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.FULL;
        builder18.logLevel = logLevel23;
        restAdapter16.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter16.server;
        retrofit.RestAdapter.LogLevel logLevel27 = restAdapter16.getLogLevel();
        boolean boolean28 = logLevel27.log();
        retrofit.RestAdapter.Builder builder29 = builder0.setLogLevel(logLevel27);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server17 = serializedObjectSupporter16.deserializeObjectServer1();
        retrofit.client.Response response18 = serializedObjectSupporter16.deserializeObjectResponse7();
        java.lang.String str19 = serializedObjectSupporter16.deserializeObjectString4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str21 = serializedObjectSupporter16.deserializeObjectString5();
        retrofit.client.Response response22 = serializedObjectSupporter16.deserializeObjectResponse3();
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString9();
        java.lang.String str24 = serializedObjectSupporter16.deserializeObjectString10();
        java.lang.String str25 = serializedObjectSupporter16.deserializeObjectString1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(response18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(response22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "http://example.com/" + "'", str24, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-" + "'", str25, "Retrofit-");
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString6();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString10();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString8();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        int int13 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server14 = restAdapter10.server;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4000 + "'", int13 == 4000);
        org.junit.Assert.assertNull(server14);
        org.junit.Assert.assertNull(converter15);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Profiler profiler18 = restAdapter10.getprofiler();
        java.lang.String str19 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor20 = restAdapter10.getrequestInterceptor();
        retrofit.Server server21 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-" + "'", str19, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor20);
        org.junit.Assert.assertNull(server21);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        java.lang.String str15 = restAdapter14.getTHREAD_PREFIX();
        java.lang.String str16 = restAdapter14.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter14.logLevel = logLevel26;
        builder3.logLevel = logLevel26;
        builder3.ensureSaneDefaults();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter41.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server44 = serializedObjectSupporter43.deserializeObjectServer1();
        retrofit.client.Response response45 = serializedObjectSupporter43.deserializeObjectResponse7();
        java.lang.String str46 = serializedObjectSupporter43.deserializeObjectString9();
        restAdapter41.serializedObjectSupporter = serializedObjectSupporter43;
        java.lang.String str48 = serializedObjectSupporter43.deserializeObjectString2();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter43.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder3.setRequestInterceptor(requestInterceptor49);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(response45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "http://example.com/" + "'", str46, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Retrofit-Idle" + "'", str48, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.converter.Converter converter27 = restAdapter26.converter;
        java.util.concurrent.Executor executor28 = restAdapter26.callbackExecutor;
        retrofit.RestAdapter.Log log29 = restAdapter26.log;
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = restAdapter40.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server43 = serializedObjectSupporter42.deserializeObjectServer1();
        retrofit.client.Response response44 = serializedObjectSupporter42.deserializeObjectResponse7();
        java.lang.String str45 = serializedObjectSupporter42.deserializeObjectString9();
        restAdapter40.serializedObjectSupporter = serializedObjectSupporter42;
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = restAdapter26.serializedObjectSupporter;
        java.lang.String str49 = serializedObjectSupporter48.deserializeObjectString2();
        java.lang.String str50 = serializedObjectSupporter48.deserializeObjectString10();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter48.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter48;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter41);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNotNull(response44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "http://example.com/" + "'", str45, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "http://example.com/" + "'", str50, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter51);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        retrofit.Server server17 = restAdapter10.server;
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        java.lang.String str19 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.client.Client.Provider provider20 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertNull(provider20);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider14 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        retrofit.converter.Converter converter4 = builder3.converter;
        retrofit.Profiler profiler5 = null;
        builder3.profiler = profiler5;
        retrofit.RestAdapter restAdapter7 = builder3.build();
        retrofit.Profiler profiler8 = restAdapter7.getprofiler();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(restAdapter7);
        org.junit.Assert.assertNull(profiler8);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = null;
        builder0.setcallbackExecutor(executor5);
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server10 = serializedObjectSupporter9.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder11 = builder8.setServer(server10);
        retrofit.converter.Converter converter12 = builder11.converter;
        retrofit.Profiler profiler13 = null;
        builder11.profiler = profiler13;
        retrofit.RestAdapter restAdapter15 = builder11.build();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter15.logLevel;
        retrofit.ErrorHandler errorHandler17 = restAdapter15.geterrorHandler();
        retrofit.Server server18 = restAdapter15.server;
        builder0.server = server18;
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(server10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(errorHandler17);
        org.junit.Assert.assertNotNull(server18);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server19 = serializedObjectSupporter18.deserializeObjectServer1();
        java.lang.Class class20 = serializedObjectSupporter18.deserializeObjectClass1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter18;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNotNull(server19);
        org.junit.Assert.assertNotNull(class20);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server2 = serializedObjectSupporter1.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder3 = builder0.setServer(server2);
        builder3.ensureSaneDefaults();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.converter.Converter converter16 = restAdapter15.converter;
        java.util.concurrent.Executor executor17 = restAdapter15.callbackExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter15.log;
        java.util.concurrent.Executor executor19 = restAdapter15.getcallbackExecutor();
        int int20 = restAdapter15.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor21 = restAdapter15.callbackExecutor;
        java.lang.String str22 = restAdapter15.getTHREAD_PREFIX();
        retrofit.Profiler profiler23 = restAdapter15.getprofiler();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter15.getLogLevel();
        builder3.logLevel = logLevel24;
        boolean boolean26 = logLevel24.log();
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4000 + "'", int20 == 4000);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-" + "'", str22, "Retrofit-");
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.Server server18 = restAdapter10.getserver();
        retrofit.converter.Converter converter19 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(converter19);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler18 = restAdapter10.geterrorHandler();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler20 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Log log14 = restAdapter10.log;
        retrofit.Server server15 = restAdapter10.server;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.RestHandler restHandler19 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(log14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter5();
        java.lang.String str35 = serializedObjectSupporter32.deserializeObjectString9();
        java.lang.Class class36 = serializedObjectSupporter32.deserializeObjectClass1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(class36);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        int int11 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Profiler profiler12 = restAdapter10.getprofiler();
        retrofit.converter.Converter converter13 = restAdapter10.converter;
        retrofit.Profiler profiler14 = restAdapter10.getprofiler();
        retrofit.ErrorHandler errorHandler15 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4000 + "'", int11 == 4000);
        org.junit.Assert.assertNull(profiler12);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(profiler14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(requestInterceptor16);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler14 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse1();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Server server12 = restAdapter10.server;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(server12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.BASIC));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter1 = builder0.converter;
        retrofit.RestAdapter.Builder builder3 = builder0.setServer("Retrofit-");
        retrofit.RestAdapter.LogLevel logLevel4 = retrofit.RestAdapter.LogLevel.FULL;
        retrofit.RestAdapter.Builder builder5 = builder0.setLogLevel(logLevel4);
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.converter.Converter converter7 = builder6.converter;
        java.util.concurrent.Executor executor8 = builder6.gethttpExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder6.setclientProvider(provider9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.RestAdapter.Log log14 = null;
        builder11.log = log14;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.FULL;
        builder11.logLevel = logLevel16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server20 = serializedObjectSupporter19.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder21 = builder18.setServer(server20);
        retrofit.RestAdapter restAdapter22 = builder18.build();
        java.util.concurrent.Executor executor23 = builder18.getcallbackExecutor();
        builder11.httpExecutor = executor23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.RestAdapter.Log log28 = null;
        builder25.log = log28;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.FULL;
        builder25.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server34 = serializedObjectSupporter33.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder35 = builder32.setServer(server34);
        retrofit.RestAdapter restAdapter36 = builder32.build();
        java.util.concurrent.Executor executor37 = builder32.getcallbackExecutor();
        builder25.httpExecutor = executor37;
        retrofit.RestAdapter.Builder builder39 = builder6.setExecutors(executor23, executor37);
        builder5.sethttpExecutor(executor37);
        org.junit.Assert.assertNull(converter1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + logLevel4 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel4.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(converter7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(server34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = restAdapter24.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server27 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.client.Response response28 = serializedObjectSupporter26.deserializeObjectResponse7();
        java.lang.String str29 = serializedObjectSupporter26.deserializeObjectString9();
        restAdapter24.serializedObjectSupporter = serializedObjectSupporter26;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = restAdapter10.serializedObjectSupporter;
        java.lang.String str33 = serializedObjectSupporter32.deserializeObjectString2();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        java.lang.Class class35 = serializedObjectSupporter32.deserializeObjectClass1();
        java.lang.Class class36 = serializedObjectSupporter32.deserializeObjectClass1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter37 = serializedObjectSupporter32.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter25);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(response28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "http://example.com/" + "'", str29, "http://example.com/");
        org.junit.Assert.assertNotNull(serializedObjectSupporter32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(class35);
        org.junit.Assert.assertNotNull(class36);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString9();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse3();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString10();
        retrofit.client.Response response8 = serializedObjectSupporter0.deserializeObjectResponse2();
        retrofit.client.Response response9 = serializedObjectSupporter0.deserializeObjectResponse4();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = serializedObjectSupporter0.deserializeObjectComparator1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(response9);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.Class class2 = serializedObjectSupporter0.deserializeObjectClass1();
        retrofit.client.Response response3 = serializedObjectSupporter0.deserializeObjectResponse4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString7();
        retrofit.client.Response response5 = serializedObjectSupporter0.deserializeObjectResponse7();
        retrofit.client.Response response6 = serializedObjectSupporter0.deserializeObjectResponse1();
        java.util.List<retrofit.client.Header> headerList7 = response6.getHeaders();
        int int8 = response6.status;
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-" + "'", str1, "Retrofit-");
        org.junit.Assert.assertNotNull(class2);
        org.junit.Assert.assertNotNull(response3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertNotNull(response6);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 200 + "'", int8 == 200);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.RestAdapter.Log log3 = null;
        builder0.log = log3;
        java.util.concurrent.Executor executor5 = null;
        builder0.setcallbackExecutor(executor5);
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.Server server8 = builder0.server;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server11 = serializedObjectSupporter10.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder12 = builder9.setServer(server11);
        builder12.ensureSaneDefaults();
        retrofit.Server server14 = builder12.server;
        retrofit.RestAdapter.Log log15 = builder12.log;
        retrofit.RestAdapter.Builder builder16 = builder0.setLog(log15);
        log15.log("Internal Server Error");
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(server8);
        org.junit.Assert.assertNotNull(server11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server1 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Response response2 = serializedObjectSupporter0.deserializeObjectResponse7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(server1);
        org.junit.Assert.assertNotNull(response2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler15 = restAdapter10.getprofiler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server13 = serializedObjectSupporter12.deserializeObjectServer1();
        retrofit.client.Response response14 = serializedObjectSupporter12.deserializeObjectResponse7();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString9();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter12;
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.client.Response response19 = serializedObjectSupporter12.deserializeObjectResponse4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNotNull(server13);
        org.junit.Assert.assertNotNull(response14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(response19);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler13 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.getLogLevel();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.converter.Converter converter29 = restAdapter28.converter;
        java.util.concurrent.Executor executor30 = restAdapter28.callbackExecutor;
        retrofit.RestAdapter.Log log31 = restAdapter28.log;
        java.util.concurrent.Executor executor32 = restAdapter28.getcallbackExecutor();
        int int33 = restAdapter28.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor34 = restAdapter28.callbackExecutor;
        java.lang.String str35 = restAdapter28.getTHREAD_PREFIX();
        retrofit.Profiler profiler36 = restAdapter28.getprofiler();
        retrofit.converter.Converter converter37 = restAdapter28.converter;
        retrofit.client.Client.Provider provider38 = restAdapter28.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter28.getLogLevel();
        java.lang.String str40 = restAdapter28.getTHREAD_PREFIX();
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean42 = logLevel41.log();
        restAdapter28.setLogLevel(logLevel41);
        restAdapter10.logLevel = logLevel41;
        retrofit.Server server45 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4000 + "'", int33 == 4000);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-" + "'", str35, "Retrofit-");
        org.junit.Assert.assertNull(profiler36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-" + "'", str40, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(server45);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = restAdapter10.server;
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        retrofit.Profiler profiler17 = restAdapter10.profiler;
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable18, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        java.lang.String str3 = serializedObjectSupporter2.deserializeObjectString1();
        java.lang.Class class4 = serializedObjectSupporter2.deserializeObjectClass1();
        retrofit.client.Response response5 = serializedObjectSupporter2.deserializeObjectResponse4();
        java.lang.String str6 = serializedObjectSupporter2.deserializeObjectString7();
        retrofit.client.Response response7 = serializedObjectSupporter2.deserializeObjectResponse7();
        retrofit.client.Response response8 = serializedObjectSupporter2.deserializeObjectResponse1();
        java.util.List<retrofit.client.Header> headerList9 = response8.getHeaders();
        retrofit.Server server10 = null;
        retrofit.client.Client.Provider provider11 = null;
        java.util.concurrent.Executor executor12 = null;
        java.util.concurrent.Executor executor13 = null;
        retrofit.RequestInterceptor requestInterceptor14 = null;
        retrofit.converter.Converter converter15 = null;
        retrofit.Profiler profiler16 = null;
        retrofit.ErrorHandler errorHandler17 = null;
        retrofit.RestAdapter.Log log18 = null;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter20 = new retrofit.RestAdapter(server10, provider11, executor12, executor13, requestInterceptor14, converter15, profiler16, errorHandler17, log18, logLevel19);
        retrofit.converter.Converter converter21 = restAdapter20.converter;
        java.util.concurrent.Executor executor22 = restAdapter20.callbackExecutor;
        retrofit.RestAdapter.Log log23 = restAdapter20.log;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = restAdapter34.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.Server server37 = serializedObjectSupporter36.deserializeObjectServer1();
        retrofit.client.Response response38 = serializedObjectSupporter36.deserializeObjectResponse7();
        java.lang.String str39 = serializedObjectSupporter36.deserializeObjectString9();
        restAdapter34.serializedObjectSupporter = serializedObjectSupporter36;
        restAdapter20.serializedObjectSupporter = serializedObjectSupporter36;
        retrofit.client.Response response42 = serializedObjectSupporter36.deserializeObjectResponse4();
        retrofit.client.Response response43 = serializedObjectSupporter36.deserializeObjectResponse1();
        retrofit.mime.TypedInput typedInput44 = response43.body;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response45 = new retrofit.client.Response((-1), "", headerList9, typedInput44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid status code: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(class4);
        org.junit.Assert.assertNotNull(response5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertNotNull(response7);
        org.junit.Assert.assertNotNull(response8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter35);
        org.junit.Assert.assertNotNull(server37);
        org.junit.Assert.assertNotNull(response38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "http://example.com/" + "'", str39, "http://example.com/");
        org.junit.Assert.assertNotNull(response42);
        org.junit.Assert.assertNotNull(response43);
        org.junit.Assert.assertNotNull(typedInput44);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = restHandler17.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(serializedObjectSupporter18);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor12 = restAdapter10.gethttpExecutor();
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.client.Request request14 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request15 = restAdapter10.logAndReplaceRequest(request14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        restAdapter10.logLevel = logLevel22;
        java.util.concurrent.Executor executor25 = restAdapter10.callbackExecutor;
        retrofit.client.Client.Provider provider26 = restAdapter10.clientProvider;
        retrofit.RestAdapter.RestHandler restHandler27 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(provider26);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.converter.Converter converter11 = restAdapter10.converter;
        java.util.concurrent.Executor executor12 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        java.lang.String str17 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str18 = restAdapter10.getTHREAD_PREFIX();
        retrofit.client.Client.Provider provider19 = restAdapter10.clientProvider;
        retrofit.Profiler profiler20 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-" + "'", str17, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(profiler20);
    }
}

