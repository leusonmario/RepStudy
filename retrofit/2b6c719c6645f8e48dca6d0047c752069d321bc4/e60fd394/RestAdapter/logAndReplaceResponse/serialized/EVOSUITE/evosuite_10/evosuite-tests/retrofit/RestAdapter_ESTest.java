/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 23:17:16 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.graphics.Rect;
import com.google.gson.Gson;
import com.google.gson.JsonNull;
import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.OkHttpClient;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.http.HttpResponseInterceptor;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpOptions;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.BasicHttpProcessor;
import org.apache.http.protocol.HttpContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.Server;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.Request;
import retrofit.client.Response;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedFile;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "propbou";
      gsonConverter0.setencoding(string1);
      assertEquals("propbou", gsonConverter0.getencoding());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "HTTP executor may not be null.";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      String string3 = serializedObjectSupporter0.deserializeObjectString4();
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("http://example.com/", string3);
      assertNotNull(string3);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor1);
      
      String string4 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-", string4);
      assertNotNull(string4);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      restAdapter_Log0.log(string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      
      String string5 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-Idle", string5);
      assertNotNull(string5);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertTrue(restAdapter_LogLevel1.log());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel1);
      
      Server server1 = restAdapter0.getserver();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertEquals("!Zk!w<,E", server1.getapiUrl());
      assertEquals("!Zk!w<,E", server1.getUrl());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertSame(server1, server0);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(server1);
      
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(delayed0);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string6 = "~T4!X6E=<mUp:`bl;\\";
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TypedOutput typedOutput0 = null;
      Request request0 = new Request(string6, server0.apiUrl, linkedList0, typedOutput0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(0, linkedList0.size());
      assertEquals("~T4!X6E=<mUp:`bl;\\", request0.getMethod());
      assertEquals("!Zk!w<,E", request0.getUrl());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(0, linkedList0.size());
      assertEquals("~T4!X6E=<mUp:`bl;\\", request0.getMethod());
      assertEquals("!Zk!w<,E", request0.getUrl());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("!Zk!w<,E", request1.getUrl());
      assertEquals("~T4!X6E=<mUp:`bl;\\", request1.getMethod());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      Request request2 = restAdapter0.logAndReplaceRequest(request1);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(0, linkedList0.size());
      assertEquals("~T4!X6E=<mUp:`bl;\\", request0.getMethod());
      assertEquals("!Zk!w<,E", request0.getUrl());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals("!Zk!w<,E", request1.getUrl());
      assertEquals("~T4!X6E=<mUp:`bl;\\", request1.getMethod());
      assertEquals("~T4!X6E=<mUp:`bl;\\", request2.getMethod());
      assertEquals("!Zk!w<,E", request2.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(server0, server1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertSame(request0, request1);
      assertSame(request0, request2);
      assertSame(request1, request0);
      assertSame(request1, request2);
      assertSame(request2, request0);
      assertSame(request2, request1);
      assertSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request2);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = null;
      long long0 = (-1L);
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "Log may not be null.";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertEquals("Log may not be null.", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("Log may not be null.", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertEquals("Log may not be null.", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "hOUP8+ 25OOq0340hJ";
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient();
      assertNotNull(defaultHttpClient0);
      
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(restAdapter_Builder0.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Z|^pG ieOtZuuJnuk";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(restAdapter_Builder1.httpExecutor, restAdapter_Builder0.callbackExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setConverter(restAdapter_Builder0.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "KqF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(server0.DEFAULT_NAME);
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setExecutors(restAdapter_Builder2.httpExecutor, restAdapter_Builder2.callbackExecutor);
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setLog(restAdapter_Builder1.log);
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertNotNull(restAdapter_Builder5);
      
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      
      Response response0 = null;
      long long0 = (-2588L);
      int int0 = restAdapter0.getLOG_CHUNK_SIZE();
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(restAdapter0, restAdapter1);
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, int0);
      
      // Undeclared exception!
      try { 
        restAdapter1.logAndReplaceResponse(server0.apiUrl, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      InputStream inputStream0 = typedString0.in();
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, inputStream0.available());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(inputStream0);
      
      InputStream inputStream1 = typedString0.in();
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, inputStream1.available());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(inputStream1, inputStream0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(inputStream1.equals((Object)inputStream0));
      assertNotNull(inputStream1);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Header header0 = new Header(string1, restAdapter0.IDLE_THREAD_NAME);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("", header0.getName());
      assertEquals("Retrofit-Idle", header0.getValue());
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(header0);
      
      boolean boolean0 = arrayList0.add(header0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", header0.getName());
      assertEquals("Retrofit-Idle", header0.getValue());
      assertTrue(arrayList0.contains(header0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertTrue(boolean0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertTrue(arrayList0.contains(header0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      InputStream inputStream0 = typedString0.in();
      assertEquals(1, inputStream0.available());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(inputStream0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertTrue(arrayList0.contains(header0));
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      InputStream inputStream0 = typedString0.in();
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, inputStream0.available());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(inputStream0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      restAdapter_Builder2.sethttpExecutor(restAdapter_Builder0.callbackExecutor);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1L, typedString0.length());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      restAdapter_Builder0.ensureSaneDefaults();
      Server server0 = new Server(string0, string0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      
      String string1 = "L1#:*q4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockFile mockFile0 = new MockFile(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("L1#:*q4;d/AS", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("AS", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("L1#:*q4;d", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, typedFile0.length());
      assertEquals("AS", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      String string3 = typedFile0.toString();
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("L1#:*q4;d/AS", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("AS", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("L1#:*q4;d", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, typedFile0.length());
      assertEquals("AS", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_10/L1#:*q4;d/AS (Retrofit-Idle)", string3);
      assertNotNull(string3);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("L1#:*q4;d/AS", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("AS", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("L1#:*q4;d", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, typedFile0.length());
      assertEquals("AS", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string2, response0, response0.status);
      assertEquals(4000, response1.getStatus());
      assertEquals("Retrofit-Idle", response1.getReason());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("L1#:*q4;d/AS", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("AS", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("L1#:*q4;d", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, typedFile0.length());
      assertEquals("AS", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertEquals(4000, response1.status);
      assertNotNull(response1);
      
      Class<Object> class0 = Object.class;
      Response response2 = restAdapter0.logAndReplaceResponse(string2, response1, response0.status);
      assertEquals(4000, response1.getStatus());
      assertEquals("Retrofit-Idle", response1.getReason());
      assertEquals(4000, response2.getStatus());
      assertEquals("Retrofit-Idle", response2.getReason());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("L1#:*q4;d/AS", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertEquals("AS", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("L1#:*q4;d", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, typedFile0.length());
      assertEquals("AS", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(response0, response2);
      assertSame(response0, response1);
      assertSame(response1, response2);
      assertSame(response1, response0);
      assertSame(response2, response1);
      assertSame(response2, response0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertEquals(4000, response1.status);
      assertEquals(4000, response2.status);
      assertNotNull(response2);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setLog(restAdapter_Builder1.log);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder4.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder0.setServer(server0.DEFAULT_NAME);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder5, restAdapter_Builder3);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder5.equals((Object)restAdapter_Builder3));
      assertNotNull(restAdapter_Builder5);
      
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      
      Response response3 = null;
      long long0 = (-2588L);
      // Undeclared exception!
      try { 
        restAdapter1.logAndReplaceResponse(string1, response3, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      restAdapter_Builder0.ensureSaneDefaults();
      Server server0 = new Server(string0, string0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      
      String string1 = "L1#:*q4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string3 = "Content-Type: ";
      MockFile mockFile0 = new MockFile(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(mockFile0.exists());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      String string4 = typedFile0.toString();
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(mockFile0.exists());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_10/Content-Type:  (Retrofit-Idle)", string4);
      assertNotNull(string4);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertEquals(4000, response0.getStatus());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(mockFile0.exists());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string2, response0, response0.status);
      assertEquals(4000, response0.getStatus());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response1.getStatus());
      assertEquals("Retrofit-Idle", response1.getReason());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(mockFile0.exists());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertEquals(4000, response1.status);
      assertNotNull(response1);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("default", gsonConverter1.getencoding());
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(gsonConverter1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      Class<Runnable> class0 = Runnable.class;
      Proxy proxy0 = (Proxy)restAdapter0.create(class0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(proxy0);
      
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ErrorHandler errorHandler1 = restAdapter0.geterrorHandler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(errorHandler1, errorHandler0);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(errorHandler0, errorHandler1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(errorHandler1);
      
      ErrorHandler errorHandler2 = restAdapter0.geterrorHandler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(errorHandler2, errorHandler0);
      assertSame(errorHandler2, errorHandler1);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(errorHandler0, errorHandler1);
      assertSame(errorHandler0, errorHandler2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(errorHandler2);
      
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      Class<Runnable> class0 = Runnable.class;
      Class<Integer> class1 = Integer.class;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(forkJoinPool0, restAdapter_Builder0.callbackExecutor);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(server0.DEFAULT_NAME);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotNull(restAdapter_Builder3);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder1.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 101;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      assertNull(thread_UncaughtExceptionHandler0);
      
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter4();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      gsonConverter0.setencoding(restAdapter0.IDLE_THREAD_NAME);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-Idle", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-Idle", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      Map<Method, RestMethodInfo> map0 = restAdapter_RestHandler0.getmethodDetailsCache();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("Retrofit-Idle", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(map0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(restAdapter0.clientProvider);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", server0.getUrl());
      assertEquals("Retrofit-Idle", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<BasicHttpProcessor> profiler0 = (Profiler<BasicHttpProcessor>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = null;
      long long0 = (-1L);
      long long1 = 1450L;
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder1.logLevel);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(scheduledThreadPoolExecutor0, executor0);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(executor0, scheduledThreadPoolExecutor0);
      assertNotNull(executor0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn(server0.apiUrl).when(client_Provider0).toString();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "$V@pdYeo$$E#cS";
      String string2 = "dropbox";
      gsonConverter0.setencoding(string2);
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "HTTP executor may not be null.";
      MockIOException mockIOException0 = new MockIOException(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException(string1, mockIOException0);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockIOException1);
      
      restAdapter0.logException(mockIOException1, string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(client_Provider1, client_Provider0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor1);
      
      Executor executor2 = restAdapter0.getcallbackExecutor();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor2);
      
      Response response0 = null;
      long long0 = (-84L);
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(server0.name, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      Class<Integer> class0 = Integer.class;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      Method method0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) restAdapter_Builder0;
      objectArray0[3] = (Object) okClient0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) restAdapter_RestHandler0;
      objectArray0[7] = (Object) method0;
      objectArray0[8] = (Object) restAdapter0;
      try { 
        restAdapter_RestHandler0.invoke(okClient0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.apache.http.params.HttpProtocolParams", 184);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      String string0 = "";
      RestMethodInfo restMethodInfo0 = null;
      String string1 = "7N9~x&K(7&)^ipH8@";
      List<Header> list0 = null;
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertNotNull(multipartTypedOutput0);
      
      Request request0 = new Request(string0, string1, list0, multipartTypedOutput0);
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals("", request0.getMethod());
      assertEquals("7N9~x&K(7&)^ipH8@", request0.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      long long0 = 1796L;
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okClient0);
      
      String string0 = "";
      Server server0 = new Server(string0, string0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("", server0.getUrl());
      assertEquals("", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter_Builder0.logLevel = restAdapter_LogLevel0;
      assertTrue(restAdapter_Builder0.logLevel.log());
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) restMethodInfo0;
      objectArray0[1] = (Object) okClient0;
      objectArray0[2] = (Object) okHttpClient0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptorTape0, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNull(gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      String string1 = "L*1";
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Throwable throwable0 = null;
      String string2 = "android.app.TabActivity";
      restAdapter0.logException(throwable0, string2);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      JsonNull jsonNull0 = (JsonNull)gson0.toJsonTree((Object) requestInterceptor0, (Type) class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(jsonNull0.isJsonObject());
      assertFalse(jsonNull0.isJsonPrimitive());
      assertFalse(jsonNull0.isJsonArray());
      assertTrue(jsonNull0.isJsonNull());
      assertNotNull(jsonNull0);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(profiler1);
      
      String string3 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-Idle", string3);
      assertNotNull(string3);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter0.log);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder1);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      restAdapter_Builder1.serializedObjectSupporter = serializedObjectSupporter1;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor0);
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder0.clientProvider);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Response response0 = serializedObjectSupporter0.deserializeObjectResponse2();
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(server0.name, response0, response0.status);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      assertNotNull(response1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(response1.reason);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      assertNotNull(restAdapter_Builder2);
      
      Random.setNextRandom(response0.status);
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(response0, response1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertEquals(200, response0.status);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "Unexpected type. Expected one of: ";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Profiler<String> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_Builder0.logLevel);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setErrorHandler(restAdapter_Builder0.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder0.clientProvider);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setProfiler(restAdapter_Builder0.profiler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "}cw";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(restAdapter_Builder2.server);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertNotNull(restAdapter_Builder4);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setConverter(restAdapter_Builder3.converter);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "---> END HTTP (%s-byte body)";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setClient(restAdapter_Builder0.clientProvider);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setExecutors(restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      String string0 = "Connection not obtained from this manager.";
      restAdapter_Log0.log(string0);
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Header> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Server server1 = restAdapter0.getserver();
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("http://example.com", server1.getapiUrl());
      assertEquals("http://example.com", server1.getUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("default", server1.getName());
      assertSame(server0, server1);
      assertSame(server1, server0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(server1);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "SSLv2";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("SSLv2", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("SSLv2", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("SSLv2", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("SSLv2", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(restAdapter_Builder0.server);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("SSLv2", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("SSLv2", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("SSLv2", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("SSLv2", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Method method0 = null;
      RestMethodInfo restMethodInfo0 = null;
      try {
        restMethodInfo0 = new RestMethodInfo(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestMethodInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      String string0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 3913;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setLog(restAdapter_Builder0.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      ForkJoinPool forkJoinPool1 = ForkJoinPool.commonPool();
      assertSame(forkJoinPool1, forkJoinPool0);
      assertNotNull(forkJoinPool1);
      
      restAdapter_Builder0.setcallbackExecutor(forkJoinPool0);
      assertSame(forkJoinPool0, forkJoinPool1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(client_Provider0).toString();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "$V@pdYeo$$E#cS";
      String string2 = "dropbox";
      gsonConverter0.setencoding(string2);
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "HTTP executor may not be null.";
      MockIOException mockIOException0 = new MockIOException(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException(string1, mockIOException0);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockIOException1);
      
      restAdapter0.logException(mockIOException1, string1);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(client_Provider1, client_Provider0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor1);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      assertTrue(restAdapter_LogLevel0.log());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter_LogLevel0);
      
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertTrue(restAdapter_LogLevel0.log());
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      int int0 = 0;
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(client_Provider0).toString();
      restAdapter_Builder0.setclientProvider(client_Provider0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder1.setcallbackExecutor(scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      Client.Provider client_Provider1 = restAdapter_Builder1.getclientProvider();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(client_Provider1, client_Provider0);
      assertNotNull(client_Provider1);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(restAdapter_Builder1.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = ")+";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(restAdapter_Builder0.server);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder4);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder4.setErrorHandler(restAdapter_Builder1.errorHandler);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(client_Provider0).toString();
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = null;
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(client_Provider1, client_Provider0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNull(gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(profiler0).toString();
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Throwable throwable0 = null;
      String string1 = "android.app.TabActivity";
      restAdapter0.logException(throwable0, string1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      Class<Object> class0 = Object.class;
      TypeToken<Object> typeToken0 = TypeToken.get(class0);
      assertNotNull(typeToken0);
      
      Class class1 = (Class)typeToken0.getType();
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      JsonNull jsonNull0 = (JsonNull)gson0.toJsonTree((Object) requestInterceptor0, (Type) class1);
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(jsonNull0.isJsonObject());
      assertFalse(jsonNull0.isJsonArray());
      assertTrue(jsonNull0.isJsonNull());
      assertFalse(jsonNull0.isJsonPrimitive());
      assertNotNull(jsonNull0);
      
      Profiler profiler1 = restAdapter0.getprofiler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(profiler1);
      
      String string2 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-Idle", string2);
      assertNotNull(string2);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter0.log);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_Builder1);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      restAdapter_Builder1.serializedObjectSupporter = serializedObjectSupporter1;
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      
      Executor executor0 = restAdapter_Builder1.getcallbackExecutor();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor0);
      
      restAdapter_Builder1.setclientProvider(restAdapter_Builder0.clientProvider);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "Profiler may not be null.";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Profiler may not be null.", server0.getapiUrl());
      assertEquals("Profiler may not be null.", server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptor requestInterceptor0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = null;
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNull(gsonConverter1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Profiler may not be null.", server0.getapiUrl());
      assertEquals("Profiler may not be null.", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "ur~Iw&kvP/";
      gsonConverter0.encoding = string1;
      assertEquals("ur~Iw&kvP/", gsonConverter0.getencoding());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = null;
      RestMethodInfo restMethodInfo0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        RestAdapter.getRequestInfo(string0, restMethodInfo0, request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "LaM,F+d`L-y/oF]";
      Server server0 = new Server(string0);
      assertEquals("LaM,F+d`L-y/oF]", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("LaM,F+d`L-y/oF]", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("LaM,F+d`L-y/oF]", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("LaM,F+d`L-y/oF]", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      OkHttpClient okHttpClient0 = null;
      restAdapter_Builder0.sethttpExecutor(restAdapter_Builder1.httpExecutor);
      assertEquals("LaM,F+d`L-y/oF]", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("LaM,F+d`L-y/oF]", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      assertEquals("LaM,F+d`L-y/oF]", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("LaM,F+d`L-y/oF]", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setLog(restAdapter_Builder1.log);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLog(restAdapter_Log0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      int int0 = 4000;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0);
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setExecutors(forkJoinPool0, restAdapter_Builder0.httpExecutor);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setServer(restAdapter_Builder2.server);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      String string0 = "}cw";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(restAdapter_Builder2.server);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertNotNull(restAdapter_Builder4);
      
      restAdapter_Builder4.ensureSaneDefaults();
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setConverter(restAdapter_Builder3.converter);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder5);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder5);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder5);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder5);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder2);
      assertSame(restAdapter_Builder5, restAdapter_Builder1);
      assertSame(restAdapter_Builder5, restAdapter_Builder0);
      assertSame(restAdapter_Builder5, restAdapter_Builder4);
      assertSame(restAdapter_Builder5, restAdapter_Builder3);
      assertNotNull(restAdapter_Builder5);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string3 = "Content-Type: ";
      MockFile mockFile0 = new MockFile(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals(4000, response0.getStatus());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string2, response0, response0.status);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      String string0 = "P |uW|dOsx@$,LaV\\i";
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string1 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string1);
      assertNull(gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertNull(gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      assertNull(gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      // Undeclared exception!
      try { 
        gsonConverter0.toBody(restAdapter_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class sun.misc.Launcher$AppClassLoader declares multiple JSON fields named ucp
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "Error handler returned null for wrapped exception.";
      Server server0 = new Server(string0);
      assertEquals("Error handler returned null for wrapped exception.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Error handler returned null for wrapped exception.", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      assertNotNull(threadPoolExecutor_CallerRunsPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_CallerRunsPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter7();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<TypedByteArray> profiler0 = null;
      ErrorHandler errorHandler0 = null;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("Error handler returned null for wrapped exception.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Error handler returned null for wrapped exception.", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = null;
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(throwable0);
      assertNotNull(mockThrowable0);
      
      MockThrowable mockThrowable1 = new MockThrowable(string1, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      restAdapter0.logException(mockThrowable1, server0.apiUrl);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
      assertNull(mockThrowable1.getMessage());
      assertEquals("Error handler returned null for wrapped exception.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Error handler returned null for wrapped exception.", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(mockThrowable0, mockThrowable1);
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable0.equals((Object)mockThrowable1));
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      int int1 = restAdapter0.getLOG_CHUNK_SIZE();
      assertEquals("Error handler returned null for wrapped exception.", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Error handler returned null for wrapped exception.", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertFalse(int1 == int0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, int1);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      boolean boolean0 = restAdapter_LogLevel0.log();
      assertFalse(boolean0);
      
      String string0 = "yyyy-MM-dd'T'HH:mmX";
      long long0 = (-2L);
      String string1 = "qm,$TFp Nu{wQSu84Ve";
      int int0 = (-1204);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "KqF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setLog(restAdapter_Builder1.log);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder0.setServer(server0.DEFAULT_NAME);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      
      Response response0 = null;
      long long0 = (-2588L);
      // Undeclared exception!
      try { 
        restAdapter1.logAndReplaceResponse(string1, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      String string1 = "Log level may not be null.";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(client_Provider0).toString();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = "$V@pdYeo$$E#cS";
      String string3 = "dropbox";
      gsonConverter0.setencoding(string3);
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "HTTP executor may not be null.";
      MockIOException mockIOException0 = new MockIOException(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException(string2, mockIOException0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(mockIOException1);
      
      restAdapter0.logException(mockIOException1, string2);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(client_Provider1, client_Provider0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(client_Provider0).toString();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "$V@pdYeo$$E#cS";
      String string2 = "dropbox";
      gsonConverter0.setencoding(string2);
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "HTTP executor may not be null.";
      MockIOException mockIOException0 = new MockIOException(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException(string1, mockIOException0);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(mockIOException1);
      
      mockIOException1.addSuppressed(mockIOException0);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      restAdapter0.logException(mockIOException1, string1);
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(client_Provider1, client_Provider0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor1);
      
      String string4 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Executor executor0 = restAdapter0.getcallbackExecutor();
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(executor0);
      
      TypedString typedString0 = new TypedString(string2);
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertSame(request0, request1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(request1, request0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("default", gsonConverter1.getencoding());
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(gsonConverter1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel2);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      ErrorHandler errorHandler1 = restAdapter0.geterrorHandler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(errorHandler1, errorHandler0);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(errorHandler0, errorHandler1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(errorHandler1);
      
      ErrorHandler errorHandler2 = restAdapter0.geterrorHandler();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(errorHandler2, errorHandler0);
      assertSame(errorHandler2, errorHandler1);
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(errorHandler0, errorHandler1);
      assertSame(errorHandler0, errorHandler2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(errorHandler2);
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "KqF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setLog(restAdapter_Builder1.log);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      
      restAdapter_Builder4.sethttpExecutor(restAdapter_Builder3.callbackExecutor);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getName());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertSame(restAdapter_Builder3, restAdapter_Builder4);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertFalse(string0.equals((Object)string1));
      
      Response response0 = null;
      long long0 = (-2588L);
      // Undeclared exception!
      try { 
        restAdapter1.logAndReplaceResponse(string1, response0, long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string3 = "Content-Type: ";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, typedFile0.length());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(requestInterceptor0);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, typedFile0.length());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string2, response0, response0.status);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      restAdapter_Builder0.ensureSaneDefaults();
      int int0 = forkJoinPool0.getPoolSize();
      assertEquals(0, int0);
      
      boolean boolean0 = forkJoinPool0.getAsyncMode();
      assertFalse(boolean0);
      
      restAdapter_Builder0.sethttpExecutor(forkJoinPool0);
      // Undeclared exception!
      try { 
        restAdapter_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertNotNull(server0);
      
      String string1 = "jF_B/\"S7k!gp:c4";
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(client_Provider0).toString();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = "$V@pdYeo$$E#cS";
      String string3 = "dropbox";
      gsonConverter0.setencoding(string3);
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "HTTP executor may not be null.";
      MockIOException mockIOException0 = new MockIOException(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException(string2, mockIOException0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertNotNull(mockIOException1);
      
      restAdapter0.logException(mockIOException1, string2);
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(client_Provider1, client_Provider0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("dropbox", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(forkJoinPool0, executor1);
      assertSame(executor1, forkJoinPool0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(executor1);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "KqF P6>=w~~K";
      Server server0 = new Server(string0);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RequestInterceptor requestInterceptor0 = restAdapter0.getrequestInterceptor();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(requestInterceptor0);
      
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder0.setLog(restAdapter_Builder1.log);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder3, restAdapter_Builder0);
      assertSame(restAdapter_Builder3, restAdapter_Builder1);
      assertSame(restAdapter_Builder3, restAdapter_Builder2);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setErrorHandler(restAdapter_Builder1.errorHandler);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder3);
      assertSame(restAdapter_Builder4, restAdapter_Builder2);
      assertSame(restAdapter_Builder4, restAdapter_Builder0);
      assertSame(restAdapter_Builder4, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(restAdapter_Builder4);
      
      RestAdapter restAdapter1 = restAdapter_Builder2.build();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter1);
      
      Response response0 = null;
      long long0 = (-2588L);
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter1.new RestHandler();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      Server server1 = restAdapter0.getserver();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("L1#:*qE4;d/AS", server1.getapiUrl());
      assertEquals("default", server1.getDEFAULT_NAME());
      assertEquals("L1#:*qE4;d/AS", server1.getUrl());
      assertEquals("default", server1.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(restAdapter0, restAdapter1);
      assertNotSame(server1, server0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter0.equals((Object)restAdapter1));
      assertFalse(server1.equals((Object)server0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(server1);
      
      restAdapter1.setLogLevel(restAdapter_Builder0.logLevel);
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      String string2 = restAdapter1.getIDLE_THREAD_NAME();
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter1.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter1.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter1.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter1.getTHREAD_PREFIX());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder4);
      assertSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter1, restAdapter0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(server0.equals((Object)server1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter1.equals((Object)restAdapter0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-Idle", string2);
      assertNotNull(string2);
      
      RestAdapter restAdapter2 = restAdapter_Builder1.build();
      assertEquals(4000, restAdapter2.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter2.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter2.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter2.getTHREAD_PREFIX());
      assertEquals("KqF P6>=w~~K", server0.getapiUrl());
      assertEquals("KqF P6>=w~~K", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("default", server0.getName());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder4);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(restAdapter2, restAdapter1);
      assertNotSame(restAdapter2, restAdapter0);
      assertNotSame(server0, server1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(restAdapter2.equals((Object)restAdapter1));
      assertFalse(restAdapter2.equals((Object)restAdapter0));
      assertFalse(server0.equals((Object)server1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter2);
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.L1#:*qE4;d/AS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      Executor executor0 = restAdapter0.gethttpExecutor();
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(executor0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("", request1.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(1L, typedString0.length());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-", request0.getMethod());
      assertSame(request1, request0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(request0, request1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      int int0 = 2635;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder0.clientProvider, restAdapter_Builder1.callbackExecutor, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder1.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder1.log, restAdapter_LogLevel0);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Profiler profiler0 = restAdapter0.getprofiler();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(profiler0);
      
      boolean boolean0 = false;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int0, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, boolean0);
      assertNotNull(forkJoinPool0);
      
      restAdapter_Builder0.setcallbackExecutor(forkJoinPool0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      
      restAdapter_Builder1.setcallbackExecutor(restAdapter_Builder0.callbackExecutor);
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      
      restAdapter_Builder1.logLevel = restAdapter_Builder0.logLevel;
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertFalse(restAdapter_Builder1.logLevel.log());
      
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(gsonConverter0.encoding);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "(T9d5^b;1w";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string3 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string4 = "Content-Type: ";
      MockFile mockFile0 = new MockFile(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(mockFile0);
      
      Client.Provider client_Provider0 = restAdapter0.getclientProvider();
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(client_Provider0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string3, response0, response0.status);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "hOUP8+ 25OOq0340hJ";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string1 = "&V";
      long long0 = (-1364L);
      System.setCurrentTimeMillis(long0);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.NONE;
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder1.clientProvider, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.callbackExecutor, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Log0, restAdapter_LogLevel2);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      ErrorHandler errorHandler0 = restAdapter0.geterrorHandler();
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(errorHandler0);
      
      RestMethodInfo restMethodInfo0 = null;
      String string2 = "6%s\\~N,>vB~&#";
      HttpOptions httpOptions0 = null;
      try {
        httpOptions0 = new HttpOptions(string2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed escape pair at index 1: 6%s\\~N,>vB~&#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ApacheClient apacheClient0 = new ApacheClient();
      assertNotNull(apacheClient0);
      
      ErrorHandler errorHandler0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, errorHandler0, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      List<Header> list0 = null;
      MultipartTypedOutput multipartTypedOutput0 = new MultipartTypedOutput();
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertNotNull(multipartTypedOutput0);
      
      Request request0 = new Request(restAdapter0.IDLE_THREAD_NAME, restAdapter0.THREAD_PREFIX, list0, multipartTypedOutput0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNull(multipartTypedOutput0.fileName());
      assertEquals(0, multipartTypedOutput0.getPartCount());
      assertEquals(42L, multipartTypedOutput0.length());
      assertEquals("Retrofit-", request0.getUrl());
      assertEquals("Retrofit-Idle", request0.getMethod());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceRequest(request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, server0.name);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      GsonConverter gsonConverter1 = (GsonConverter)restAdapter0.getconverter();
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("default", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("default", gsonConverter1.getencoding());
      assertSame(gsonConverter0, gsonConverter1);
      assertSame(gsonConverter1, gsonConverter0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(gsonConverter1);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      String string0 = "";
      gsonConverter0.encoding = string0;
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", gsonConverter0.getencoding());
      
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("default", server0.getName());
      assertEquals("", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(gsonConverter0, gsonConverter1);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      Class<Runnable> class0 = Runnable.class;
      Class<Runnable> class1 = null;
      // Undeclared exception!
      try { 
        restAdapter0.create(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      assertNotNull(forkJoinPool0);
      
      Gson gson0 = null;
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = null;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      Class<Integer> class0 = Integer.class;
      Server server0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Converter converter0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptorTape0, converter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel1);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      MockThrowable mockThrowable0 = new MockThrowable(restAdapter0.IDLE_THREAD_NAME);
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel2));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(mockThrowable0);
      
      String string0 = "x*TpYzXlVsi7+wnsEAG";
      // Undeclared exception!
      try { 
        restAdapter0.logException(mockThrowable0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "hOUP8+ 25OOq0340hJ";
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.LogLevel restAdapter_LogLevel1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter_LogLevel1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      assertNotNull(forkJoinPool0);
      
      int int0 = 0;
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      assertNotNull(threadPoolExecutor_DiscardPolicy0);
      
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      assertNotNull(scheduledThreadPoolExecutor0);
      
      ThreadGroup threadGroup0 = null;
      long long0 = (-1L);
      long long1 = 1450L;
      boolean boolean0 = restAdapter_Builder0.logLevel.log();
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setExecutors(forkJoinPool0, scheduledThreadPoolExecutor0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      Runnable runnable0 = null;
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(executor0, forkJoinPool0);
      assertNotNull(executor0);
      
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(runnable0, scheduledThreadPoolExecutor0);
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(restAdapter_Builder0.requestInterceptor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      String string0 = "!Zk!w<,E";
      Server server0 = new Server(string0);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      doReturn(server0.apiUrl).when(client_Provider0).toString();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      assertNull(forkJoinPool0);
      
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      assertNotNull(requestInterceptor0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Integer> profiler0 = (Profiler<Integer>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, forkJoinPool0, forkJoinPool0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "$V@pdYeo$$E#cS";
      String string2 = "propbou";
      gsonConverter0.setencoding(string2);
      assertEquals("propbou", gsonConverter0.getencoding());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "HTTP executor may not be null.";
      MockIOException mockIOException0 = new MockIOException(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockIOException0);
      
      MockIOException mockIOException1 = new MockIOException(string1, mockIOException0);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockIOException1);
      
      restAdapter0.logException(mockIOException1, string1);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException1, mockIOException0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Client.Provider client_Provider1 = restAdapter0.getclientProvider();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(client_Provider1, client_Provider0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(client_Provider1);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Executor executor0 = restAdapter_Builder0.gethttpExecutor();
      assertNull(executor0);
      
      Executor executor1 = restAdapter0.gethttpExecutor();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(executor1);
      
      String string4 = restAdapter0.getTHREAD_PREFIX();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-", string4);
      assertNotNull(string4);
      
      restAdapter_Log0.log(string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      
      String string5 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-Idle", string5);
      assertNotNull(string5);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel1, restAdapter_LogLevel0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertFalse(restAdapter_LogLevel1.equals((Object)restAdapter_LogLevel0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      RestAdapter.LogLevel restAdapter_LogLevel2 = restAdapter0.getLogLevel();
      assertTrue(restAdapter_LogLevel2.log());
      assertEquals("!Zk!w<,E", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("!Zk!w<,E", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("propbou", gsonConverter0.getencoding());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertSame(restAdapter_LogLevel2, restAdapter_LogLevel1);
      assertNotSame(restAdapter_LogLevel2, restAdapter_LogLevel0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel2);
      assertNotSame(restAdapter_LogLevel0, restAdapter_LogLevel1);
      assertFalse(restAdapter_LogLevel2.equals((Object)restAdapter_LogLevel0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_LogLevel0.equals((Object)restAdapter_LogLevel1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter_LogLevel2);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = (-589);
      BlockingQueue<Runnable> blockingQueue0 = null;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      assertNotNull(urlConnectionClient0);
      
      String string1 = "retrofit.RestAdapter$RestHandler";
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      assertEquals(4, restAdapter_LogLevelArray0.length);
      assertNotNull(restAdapter_LogLevelArray0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      restAdapter_Log0.log(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = 240;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      assertNotNull(forkJoinPool_ForkJoinWorkerThreadFactory0);
      
      MockThread mockThread0 = new MockThread(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockThread0);
      
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(threadGroup0);
      
      boolean boolean1 = true;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(int1, forkJoinPool_ForkJoinWorkerThreadFactory0, threadGroup0, boolean1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(forkJoinPool0);
      
      RestAdapter.Log restAdapter_Log1 = RestAdapter.Log.NONE;
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotNull(restAdapter_Log1);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder1.server, restAdapter_Builder1.clientProvider, restAdapter_Builder1.callbackExecutor, forkJoinPool0, restAdapter_Builder1.requestInterceptor, restAdapter_Builder1.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Log1, restAdapter_LogLevel0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      Server server0 = restAdapter0.getserver();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals("Test_Execution_Group", threadGroup0.getName());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Log1, restAdapter_Log0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(server0);
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)3;
      byteArray0[0] = byte0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertFalse(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      Server server0 = new Server(string0, string0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = restAdapter0.getLogLevel();
      assertFalse(restAdapter_LogLevel0.log());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter_LogLevel0);
      
      String string3 = "Content-Type: ";
      MockFile mockFile0 = new MockFile(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, typedFile0.length());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, typedFile0.length());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      // Undeclared exception!
      try { 
        restAdapter0.logAndReplaceResponse(string2, response0, response0.status);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      Class<Integer> class0 = Integer.class;
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_LogLevel0);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      Method method0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) method0;
      objectArray0[1] = (Object) restAdapter_Builder0;
      objectArray0[2] = (Object) restAdapter_Builder0;
      objectArray0[3] = (Object) okClient0;
      objectArray0[4] = (Object) okClient0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) restAdapter_RestHandler0;
      objectArray0[7] = (Object) method0;
      objectArray0[8] = (Object) restAdapter0;
      try { 
        restAdapter_RestHandler0.invoke(okClient0, method0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      Gson gson0 = null;
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder0.clientProvider, restAdapter_Builder0.callbackExecutor, restAdapter_Builder0.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder0.converter, restAdapter_Builder0.profiler, restAdapter_Builder0.errorHandler, restAdapter_Builder0.log, restAdapter_Builder0.logLevel);
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string0 = restAdapter0.getIDLE_THREAD_NAME();
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("Retrofit-Idle", string0);
      assertNotNull(string0);
      
      Converter converter0 = restAdapter0.getconverter();
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNull(converter0);
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      long long0 = 2048L;
      long long1 = 0L;
      String string0 = null;
      Server server0 = new Server(string0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      Executor executor0 = null;
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      assertNotNull(requestInterceptorTape0);
      
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      assertNull(gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, executor0, executor0, requestInterceptorTape0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotNull(serializedObjectSupporter1);
      
      Response response0 = serializedObjectSupporter1.deserializeObjectResponse4();
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertEquals(200, response0.status);
      assertNotNull(response0);
      
      long long2 = (-1L);
      Response response1 = restAdapter0.logAndReplaceResponse(string0, response0, long2);
      assertEquals("OK", response0.getReason());
      assertEquals(200, response0.getStatus());
      assertEquals("OK", response1.getReason());
      assertEquals(200, response1.getStatus());
      assertEquals("default", server0.getName());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertNull(server0.getapiUrl());
      assertNull(server0.getUrl());
      assertNull(gsonConverter0.getencoding());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertEquals(200, response0.status);
      assertEquals(200, response1.status);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(response1);
      
      long long3 = (-939L);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.HEADERS;
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      String string0 = "qF P6>=w~~K";
      restAdapter_Builder0.ensureSaneDefaults();
      Server server0 = new Server(string0, string0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertNotNull(server0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      restAdapter_Builder0.serializedObjectSupporter = restAdapter_Builder1.serializedObjectSupporter;
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      
      String string1 = "L1#:*qE4;d/AS";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string1);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string0, string1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string0);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter.Builder restAdapter_Builder3 = new RestAdapter.Builder();
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertNotNull(restAdapter_Builder3);
      
      RestAdapter restAdapter0 = new RestAdapter(restAdapter_Builder0.server, restAdapter_Builder2.clientProvider, restAdapter_Builder1.httpExecutor, restAdapter_Builder2.httpExecutor, restAdapter_Builder0.requestInterceptor, restAdapter_Builder2.converter, restAdapter_Builder0.profiler, restAdapter_Builder1.errorHandler, restAdapter_Builder2.log, restAdapter_Builder3.logLevel);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string2 = null;
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string3 = "Content-Type: ";
      MockFile mockFile0 = new MockFile(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(mockFile0);
      
      TypedFile typedFile0 = new TypedFile(restAdapter0.IDLE_THREAD_NAME, mockFile0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(typedFile0);
      
      String string4 = typedFile0.toString();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/retrofit/2b6c719c6645f8e48dca6d0047c752069d321bc4/evosuite_10/Content-Type:  (Retrofit-Idle)", string4);
      assertNotNull(string4);
      
      Response response0 = new Response(restAdapter0.LOG_CHUNK_SIZE, restAdapter0.IDLE_THREAD_NAME, arrayList0, typedFile0);
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertNotNull(response0);
      
      Response response1 = restAdapter0.logAndReplaceResponse(string2, response0, response0.status);
      assertEquals("Retrofit-Idle", response0.getReason());
      assertEquals(4000, response0.getStatus());
      assertEquals("Retrofit-Idle", response1.getReason());
      assertEquals(4000, response1.getStatus());
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("qF P6>=w~~K", server0.getName());
      assertEquals("qF P6>=w~~K", server0.getUrl());
      assertEquals("qF P6>=w~~K", server0.getapiUrl());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("Content-Type: ", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("Content-Type: ", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, typedFile0.length());
      assertEquals("Retrofit-Idle", typedFile0.mimeType());
      assertEquals("Content-Type: ", typedFile0.fileName());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder0, restAdapter_Builder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder1, restAdapter_Builder3);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotSame(restAdapter_Builder2, restAdapter_Builder3);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder2);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder1);
      assertNotSame(restAdapter_Builder3, restAdapter_Builder0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(response0, response1);
      assertSame(response1, response0);
      assertFalse(restAdapter_Builder0.equals((Object)restAdapter_Builder3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(restAdapter_Builder1.equals((Object)restAdapter_Builder3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(restAdapter_Builder2.equals((Object)restAdapter_Builder3));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder2));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder1));
      assertFalse(restAdapter_Builder3.equals((Object)restAdapter_Builder0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertEquals(4000, response0.status);
      assertEquals(4000, response1.status);
      assertNotNull(response1);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient();
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(typedString0);
      
      Request request0 = new Request(restAdapter0.THREAD_PREFIX, string1, arrayList0, typedString0);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      InputStream inputStream0 = typedString0.in();
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals(1, inputStream0.available());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(inputStream0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.FULL, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertEquals("Retrofit-", request0.getMethod());
      assertEquals("", request0.getUrl());
      assertEquals("", request1.getUrl());
      assertEquals("Retrofit-", request1.getMethod());
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(request0, request1);
      assertSame(request1, request0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Server server0 = serializedObjectSupporter0.deserializeObjectServer1();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertNotNull(server0);
      
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      int int0 = 3;
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      assertNotNull(priorityBlockingQueue0);
      
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, priorityBlockingQueue0, threadFactory0);
      assertNotNull(threadPoolExecutor0);
      
      RequestInterceptor requestInterceptor0 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
      assertNotNull(requestInterceptor0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter2();
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertNotNull(gsonConverter0);
      
      Profiler<Callable<String>> profiler0 = (Profiler<Callable<String>>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      ErrorHandler errorHandler0 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
      assertNotNull(errorHandler0);
      
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      assertNotNull(restAdapter_Log0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter restAdapter0 = new RestAdapter(server0, client_Provider0, threadPoolExecutor0, threadPoolExecutor0, requestInterceptor0, gsonConverter0, profiler0, errorHandler0, restAdapter_Log0, restAdapter_LogLevel0);
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      RestAdapter.RestHandler restAdapter_RestHandler0 = restAdapter0.new RestHandler();
      assertEquals("default", server0.getDEFAULT_NAME());
      assertEquals("http://example.com", server0.getapiUrl());
      assertEquals("http://example.com", server0.getUrl());
      assertEquals("default", server0.getName());
      assertEquals("UTF-8", gsonConverter0.getencoding());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals(RestAdapter.LogLevel.BASIC, restAdapter0.getLogLevel());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter_RestHandler0);
      
      RestMethodInfo restMethodInfo0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) threadFactory0;
      objectArray0[1] = (Object) gsonConverter0;
      // Undeclared exception!
      try { 
        restAdapter_RestHandler0.invokeRequest(requestInterceptor0, restMethodInfo0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestAdapter$RestHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("java.lang.String", 240);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      assertNotNull(restAdapter_Builder0);
      
      OkHttpClient okHttpClient0 = new OkHttpClient();
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okHttpClient0);
      
      OkClient okClient0 = new OkClient(okHttpClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertNotNull(okClient0);
      
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder1);
      
      String string0 = "retrofit.RestAdapter$RestHandler$1";
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setServer(string0);
      assertEquals(0, okHttpClient0.getConnectTimeout());
      assertEquals(0, okHttpClient0.getReadTimeout());
      assertTrue(okHttpClient0.getFollowProtocolRedirects());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder2);
      assertSame(restAdapter_Builder1, restAdapter_Builder0);
      assertSame(restAdapter_Builder2, restAdapter_Builder1);
      assertSame(restAdapter_Builder2, restAdapter_Builder0);
      assertNotNull(restAdapter_Builder2);
      
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(restAdapter0);
      
      String string1 = "";
      ArrayList<Header> arrayList0 = new ArrayList<Header>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = "#";
      TypedString typedString0 = new TypedString(string2);
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(typedString0);
      
      ArrayList<Header> arrayList1 = null;
      TypedString typedString1 = null;
      Request request0 = new Request(restAdapter0.IDLE_THREAD_NAME, string1, arrayList1, typedString1);
      assertEquals(RestAdapter.LogLevel.NONE, restAdapter0.getLogLevel());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-Idle", request0.getMethod());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request0);
      
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      
      InputStream inputStream0 = typedString0.in();
      assertEquals(1, inputStream0.available());
      assertEquals(1L, typedString0.length());
      assertNull(typedString0.fileName());
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(inputStream0);
      
      Request request1 = restAdapter0.logAndReplaceRequest(request0);
      assertEquals("Retrofit-Idle", request1.getMethod());
      assertEquals("", request1.getUrl());
      assertEquals("Retrofit-Idle", restAdapter0.getIDLE_THREAD_NAME());
      assertEquals("Retrofit-", restAdapter0.getTHREAD_PREFIX());
      assertEquals(4000, restAdapter0.getLOG_CHUNK_SIZE());
      assertEquals(RestAdapter.LogLevel.HEADERS, restAdapter0.getLogLevel());
      assertEquals("", request0.getUrl());
      assertEquals("Retrofit-Idle", request0.getMethod());
      assertSame(restAdapter_Builder0, restAdapter_Builder1);
      assertSame(restAdapter_Builder0, restAdapter_Builder2);
      assertSame(request1, request0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(request0, request1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(4000, RestAdapter.LOG_CHUNK_SIZE);
      assertNotNull(request1);
      
      try { 
        okClient0.execute(request1);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }
}
