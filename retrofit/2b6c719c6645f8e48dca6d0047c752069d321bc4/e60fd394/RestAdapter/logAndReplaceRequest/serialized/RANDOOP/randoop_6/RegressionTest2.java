import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        retrofit.client.Client.Provider provider10 = builder7.clientProvider;
        retrofit.client.Client.Provider provider11 = null;
        builder7.setclientProvider(provider11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.getcallbackExecutor();
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.RestAdapter.Log log18 = builder13.log;
        retrofit.ErrorHandler errorHandler19 = builder13.errorHandler;
        retrofit.Profiler profiler20 = builder13.profiler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.client.Client.Provider provider24 = builder21.getclientProvider();
        retrofit.client.Client.Provider provider25 = builder21.getclientProvider();
        retrofit.Server server26 = builder21.server;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.Server server32 = builder27.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter7();
        retrofit.client.Request request36 = serializedObjectSupporter33.deserializeObjectRequest1();
        builder27.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.client.Request request38 = serializedObjectSupporter33.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString39 = serializedObjectSupporter33.deserializeObjectTypedOutput2();
        builder21.serializedObjectSupporter = serializedObjectSupporter33;
        java.util.concurrent.Executor executor41 = builder21.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString45 = serializedObjectSupporter42.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        builder21.errorHandler = errorHandler46;
        retrofit.RestAdapter.Builder builder48 = builder13.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.converter.Converter converter52 = builder49.converter;
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor54 = null;
        builder53.sethttpExecutor(executor54);
        retrofit.converter.Converter converter56 = builder53.converter;
        java.util.concurrent.Executor executor57 = builder53.getcallbackExecutor();
        retrofit.client.Client.Provider provider58 = builder53.getclientProvider();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        java.util.concurrent.Executor executor62 = null;
        builder61.callbackExecutor = executor62;
        retrofit.RestAdapter restAdapter64 = builder61.build();
        retrofit.RestAdapter.Log log65 = restAdapter64.log;
        java.util.concurrent.Executor executor66 = restAdapter64.gethttpExecutor();
        retrofit.client.Client.Provider provider67 = restAdapter64.getclientProvider();
        builder53.setclientProvider(provider67);
        retrofit.RestAdapter.Builder builder69 = builder49.setClient(provider67);
        builder48.clientProvider = provider67;
        builder7.clientProvider = provider67;
        builder0.clientProvider = provider67;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(profiler20);
        org.junit.Assert.assertNull(provider24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(typedString39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(typedString45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(converter56);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(executor66);
        org.junit.Assert.assertNotNull(provider67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedOutput typedOutput2 = request1.body;
        java.lang.String str3 = request1.url;
        java.lang.String str4 = request1.url;
        java.lang.String str5 = request1.method;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNull(typedOutput2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.client.Client.Provider provider10 = builder9.getclientProvider();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(provider10);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.client.Request request7 = serializedObjectSupporter4.deserializeObjectRequest2();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString4();
        builder2.serializedObjectSupporter = serializedObjectSupporter4;
        java.util.concurrent.Executor executor10 = builder2.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder2.serializedObjectSupporter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter12 = serializedObjectSupporter11.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(serializedObjectSupporter11);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections3 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter10.deserializeObjectConverter7();
        retrofit.Server server14 = serializedObjectSupporter10.deserializeObjectServer1();
        retrofit.Server server15 = serializedObjectSupporter10.deserializeObjectServer1();
        builder0.server = server15;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(server14);
        org.junit.Assert.assertNotNull(server15);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        retrofit.Profiler profiler19 = restAdapter10.profiler;
        retrofit.converter.Converter converter20 = restAdapter10.getconverter();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = restAdapter10.serializedObjectSupporter;
        java.lang.Throwable throwable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable22, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(serializedObjectSupporter21);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.RestAdapter.LogLevel logLevel10 = null;
        builder0.logLevel = logLevel10;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        java.lang.String str6 = request4.getUrl();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.Server server4 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.mime.TypedOutput typedOutput7 = request6.getBody();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(server4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNull(typedOutput7);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.client.Client client1 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder2 = builder0.setClient(client1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.client.Request request27 = serializedObjectSupporter20.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter20.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter20.deserializeObjectConverter3();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor37 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter36);
        org.junit.Assert.assertNull(requestInterceptor37);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str10 = request9.getUrl();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel15 = null;
        restAdapter10.logLevel = logLevel15;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.Server server5 = builder2.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter12.deserializeObjectConverter8();
        retrofit.RestAdapter.Builder builder18 = builder2.setConverter((retrofit.converter.Converter) gsonConverter17);
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        int int31 = restAdapter29.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = null;
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.client.Client.Provider provider34 = restAdapter29.getclientProvider();
        retrofit.ErrorHandler errorHandler35 = restAdapter29.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        boolean boolean37 = logLevel36.log();
        builder2.logLevel = logLevel36;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4000 + "'", int31 == 4000);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.client.Client.Provider provider17 = builder16.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.Profiler profiler16 = restAdapter10.getprofiler();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.RestAdapter restAdapter26 = builder23.build();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.Log log32 = builder27.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder27.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder23.setErrorHandler(errorHandler34);
        java.util.concurrent.Executor executor37 = builder36.callbackExecutor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.Server server43 = builder38.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter44.deserializeObjectConverter7();
        retrofit.client.Request request47 = serializedObjectSupporter44.deserializeObjectRequest1();
        builder38.serializedObjectSupporter = serializedObjectSupporter44;
        java.lang.String str49 = serializedObjectSupporter44.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler50 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        builder36.errorHandler = errorHandler50;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        retrofit.client.Client.Provider provider55 = builder52.clientProvider;
        retrofit.RestAdapter.Log log56 = null;
        builder52.log = log56;
        java.util.concurrent.Executor executor58 = builder52.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = builder59.getcallbackExecutor();
        retrofit.client.Client.Provider provider61 = null;
        builder59.clientProvider = provider61;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.client.Request request67 = serializedObjectSupporter63.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter63.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter63.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder70 = builder59.setConverter((retrofit.converter.Converter) gsonConverter69);
        builder52.converter = gsonConverter69;
        retrofit.ErrorHandler errorHandler72 = builder52.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.Server server75 = serializedObjectSupporter73.deserializeObjectServer1();
        builder52.server = server75;
        retrofit.RestAdapter.Builder builder77 = builder36.setServer(server75);
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = builder78.getcallbackExecutor();
        retrofit.client.Client.Provider provider80 = null;
        builder78.clientProvider = provider80;
        retrofit.Server server82 = null;
        builder78.server = server82;
        retrofit.RestAdapter.Log log84 = retrofit.RestAdapter.Log.NONE;
        builder78.log = log84;
        log84.log("hi!");
        builder36.log = log84;
        java.util.concurrent.Executor executor89 = builder36.callbackExecutor;
        builder0.setcallbackExecutor(executor89);
        retrofit.SerializedObjectSupporter serializedObjectSupporter91 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor92 = serializedObjectSupporter91.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter93 = serializedObjectSupporter91.deserializeObjectConverter5();
        retrofit.client.Request request94 = serializedObjectSupporter91.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter95 = serializedObjectSupporter91.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter96 = serializedObjectSupporter91.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder97 = builder0.setConverter((retrofit.converter.Converter) gsonConverter96);
        retrofit.Profiler profiler98 = builder97.profiler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(restAdapter26);
        org.junit.Assert.assertNull(log32);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Retrofit-Idle" + "'", str49, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(request67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(errorHandler72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(server75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(executor79);
        org.junit.Assert.assertNotNull(log84);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(requestInterceptor92);
        org.junit.Assert.assertNotNull(gsonConverter93);
        org.junit.Assert.assertNotNull(request94);
        org.junit.Assert.assertNotNull(gsonConverter95);
        org.junit.Assert.assertNotNull(gsonConverter96);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNull(profiler98);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = null;
        restAdapter27.serializedObjectSupporter = serializedObjectSupporter30;
        java.util.concurrent.Executor executor32 = restAdapter27.callbackExecutor;
        java.util.concurrent.Executor executor33 = restAdapter27.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter27.logLevel = logLevel34;
        restAdapter10.setLogLevel(logLevel34);
        retrofit.RestAdapter.RestHandler restHandler37 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Log log38 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log38);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.getrequestInterceptor();
        int int23 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.getLogLevel();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter25.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request30 = restAdapter10.logAndReplaceRequest(request29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = request4.getUrl();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        retrofit.converter.Converter converter17 = restAdapter10.converter;
        retrofit.Server server18 = restAdapter10.server;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor20 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter2.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter2.deserializeObjectConverter7();
        retrofit.client.Request request5 = serializedObjectSupporter2.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList6 = request5.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request8 = serializedObjectSupporter7.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler9 = serializedObjectSupporter7.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString10 = serializedObjectSupporter7.deserializeObjectTypedOutput2();
        retrofit.client.Request request11 = new retrofit.client.Request("GET", "Retrofit-Idle", headerList6, (retrofit.mime.TypedOutput) typedString10);
        retrofit.mime.TypedOutput typedOutput12 = request11.body;
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(errorHandler9);
        org.junit.Assert.assertNotNull(typedString10);
        org.junit.Assert.assertNotNull(typedOutput12);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder7.setRequestInterceptor(requestInterceptor13);
        builder14.ensureSaneDefaults();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        retrofit.RequestInterceptor requestInterceptor8 = restAdapter5.requestInterceptor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Server server3 = null;
        retrofit.client.Client.Provider provider4 = null;
        java.util.concurrent.Executor executor5 = null;
        java.util.concurrent.Executor executor6 = null;
        retrofit.RequestInterceptor requestInterceptor7 = null;
        retrofit.converter.Converter converter8 = null;
        retrofit.Profiler profiler9 = null;
        retrofit.ErrorHandler errorHandler10 = null;
        retrofit.RestAdapter.Log log11 = null;
        retrofit.RestAdapter.LogLevel logLevel12 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter13 = new retrofit.RestAdapter(server3, provider4, executor5, executor6, requestInterceptor7, converter8, profiler9, errorHandler10, log11, logLevel12);
        retrofit.ErrorHandler errorHandler14 = restAdapter13.errorHandler;
        int int15 = restAdapter13.getLOG_CHUNK_SIZE();
        retrofit.Server server16 = restAdapter13.getserver();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter13.logLevel = logLevel26;
        builder0.logLevel = logLevel26;
        retrofit.ErrorHandler errorHandler30 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler33;
        retrofit.RequestInterceptor requestInterceptor35 = builder0.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor37 = serializedObjectSupporter36.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter36.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter36.deserializeObjectConverter5();
        retrofit.client.Request request40 = serializedObjectSupporter36.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        builder0.serializedObjectSupporter = serializedObjectSupporter36;
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(errorHandler41);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.Log log37 = builder32.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = builder32.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder41 = builder28.setErrorHandler(errorHandler39);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        builder14.setcallbackExecutor(executor42);
        builder13.callbackExecutor = executor42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder13.setErrorHandler(errorHandler46);
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = builder47.serializedObjectSupporter;
        java.util.concurrent.Executor executor49 = builder47.getcallbackExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(serializedObjectSupporter48);
        org.junit.Assert.assertNotNull(executor49);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str22 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder0.setErrorHandler(errorHandler23);
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter26.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter26.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter26.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter26.deserializeObjectConverter2();
        builder0.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request35 = serializedObjectSupporter26.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections36 = serializedObjectSupporter26.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(request35);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.Server server6 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter9 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(server6);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.Server server8 = builder0.server;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter9 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(server8);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter7();
        restHandler20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter6();
        restHandler20.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        java.lang.String str35 = serializedObjectSupporter34.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter3();
        restHandler20.serializedObjectSupporter = serializedObjectSupporter34;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "http://example.com/" + "'", str35, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = builder22.logLevel;
        java.util.concurrent.Executor executor28 = null;
        builder22.sethttpExecutor(executor28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder37 = builder32.setRequestInterceptor(requestInterceptor36);
        retrofit.RestAdapter.Builder builder38 = builder22.setRequestInterceptor(requestInterceptor36);
        java.util.concurrent.Executor executor39 = builder38.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.Server server44 = serializedObjectSupporter40.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder45 = builder38.setServer(server44);
        java.util.concurrent.Executor executor46 = null;
        builder45.sethttpExecutor(executor46);
        retrofit.Server server48 = builder45.server;
        builder17.server = server48;
        retrofit.RestAdapter.Builder builder50 = builder16.setServer(server48);
        retrofit.Profiler profiler51 = builder50.profiler;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNull(profiler51);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.getcallbackExecutor();
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        retrofit.Server server17 = null;
        builder13.server = server17;
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        builder13.log = log19;
        retrofit.converter.Converter converter21 = builder13.converter;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.converter.Converter converter25 = builder22.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.Server server30 = serializedObjectSupporter26.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter26.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder33 = builder22.setErrorHandler(errorHandler32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.converter.Converter converter37 = builder34.converter;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.converter.Converter converter41 = builder38.converter;
        java.util.concurrent.Executor executor42 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider43 = builder38.getclientProvider();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        java.util.concurrent.Executor executor47 = null;
        builder46.callbackExecutor = executor47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.gethttpExecutor();
        retrofit.client.Client.Provider provider52 = restAdapter49.getclientProvider();
        builder38.setclientProvider(provider52);
        retrofit.RestAdapter.Builder builder54 = builder34.setClient(provider52);
        builder33.clientProvider = provider52;
        retrofit.RestAdapter.Builder builder56 = builder13.setClient(provider52);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = builder57.getcallbackExecutor();
        retrofit.client.Client.Provider provider59 = null;
        builder57.clientProvider = provider59;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        java.lang.String str63 = serializedObjectSupporter62.deserializeObjectString2();
        java.lang.String str64 = serializedObjectSupporter62.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter62.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder66 = builder57.setRequestInterceptor(requestInterceptor65);
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        retrofit.client.Client.Provider provider70 = builder67.clientProvider;
        retrofit.RequestInterceptor requestInterceptor71 = builder67.requestInterceptor;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.client.Client.Provider provider75 = builder72.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder72.setcallbackExecutor(executor76);
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder72.setLog(log78);
        retrofit.RestAdapter.Builder builder80 = builder67.setLog(log78);
        builder57.log = log78;
        retrofit.RestAdapter.Builder builder82 = builder13.setLog(log78);
        builder0.log = log78;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(errorHandler32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNull(executor42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(executor51);
        org.junit.Assert.assertNotNull(provider52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Retrofit-Idle" + "'", str63, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Retrofit-" + "'", str64, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.lang.String str12 = restAdapter10.getTHREAD_PREFIX();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-" + "'", str12, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter6.deserializeObjectConverter1();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter6.deserializeObjectConverter2();
        retrofit.client.Request request15 = serializedObjectSupporter6.deserializeObjectRequest6();
        java.lang.String str16 = request15.url;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "http://example.com/" + "'", str16, "http://example.com/");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder7.setRequestInterceptor(requestInterceptor13);
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder17 = builder15.setServer("hi!");
        retrofit.client.Client.Provider provider18 = builder15.clientProvider;
        retrofit.RequestInterceptor requestInterceptor19 = builder15.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean21 = logLevel20.log();
        retrofit.RestAdapter.Builder builder22 = builder15.setLogLevel(logLevel20);
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.sethttpExecutor(executor24);
        retrofit.converter.Converter converter26 = builder23.converter;
        java.util.concurrent.Executor executor27 = builder23.getcallbackExecutor();
        retrofit.client.Client.Provider provider28 = builder23.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder23.errorHandler = errorHandler31;
        retrofit.converter.Converter converter33 = builder23.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        java.lang.String str35 = serializedObjectSupporter34.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder38 = builder23.setConverter((retrofit.converter.Converter) gsonConverter37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = builder39.getcallbackExecutor();
        retrofit.client.Client.Provider provider41 = null;
        builder39.clientProvider = provider41;
        retrofit.Server server43 = null;
        builder39.server = server43;
        java.util.concurrent.Executor executor45 = builder39.gethttpExecutor();
        java.util.concurrent.Executor executor46 = builder39.gethttpExecutor();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = builder47.getcallbackExecutor();
        retrofit.client.Client.Provider provider49 = null;
        builder47.clientProvider = provider49;
        retrofit.Server server51 = null;
        builder47.server = server51;
        retrofit.RestAdapter.Log log53 = retrofit.RestAdapter.Log.NONE;
        builder47.log = log53;
        builder39.log = log53;
        builder38.log = log53;
        builder22.log = log53;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        java.util.concurrent.Executor executor61 = null;
        builder60.callbackExecutor = executor61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.sethttpExecutor(executor65);
        retrofit.Profiler profiler67 = null;
        builder64.profiler = profiler67;
        retrofit.RestAdapter.Log log69 = builder64.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler71 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder72 = builder64.setErrorHandler(errorHandler71);
        retrofit.RestAdapter.Builder builder73 = builder60.setErrorHandler(errorHandler71);
        java.util.concurrent.Executor executor74 = builder73.callbackExecutor;
        builder22.sethttpExecutor(executor74);
        builder7.sethttpExecutor(executor74);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(requestInterceptor19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Retrofit-Idle" + "'", str35, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(log53);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(executor74);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        java.util.concurrent.Executor executor34 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        builder16.logLevel = logLevel35;
        restAdapter10.logLevel = logLevel35;
        retrofit.client.Client.Provider provider38 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor39 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNull(executor39);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str22 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder0.setErrorHandler(errorHandler23);
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter26.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter26.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter26.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter26.deserializeObjectConverter2();
        builder0.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request35 = serializedObjectSupporter26.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput36 = request35.body;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNull(typedOutput36);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter16.deserializeObjectConverter3();
        retrofit.client.Request request22 = serializedObjectSupporter16.deserializeObjectRequest4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str24 = serializedObjectSupporter16.deserializeObjectString1();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-" + "'", str24, "Retrofit-");
        org.junit.Assert.assertNotNull(errorHandler25);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str8 = request7.url;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler18 = builder17.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request20 = serializedObjectSupporter19.deserializeObjectRequest6();
        builder17.serializedObjectSupporter = serializedObjectSupporter19;
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.ErrorHandler errorHandler24 = restAdapter10.geterrorHandler();
        java.lang.String str25 = restAdapter10.getIDLE_THREAD_NAME();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.client.Request request19 = serializedObjectSupporter17.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        builder0.requestInterceptor = requestInterceptor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter8();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter23.deserializeObjectConverter1();
        retrofit.client.Request request28 = serializedObjectSupporter23.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        retrofit.client.Client.Provider provider33 = builder30.clientProvider;
        retrofit.RestAdapter.Log log34 = null;
        builder30.log = log34;
        java.util.concurrent.Executor executor36 = builder30.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = builder37.getcallbackExecutor();
        retrofit.client.Client.Provider provider39 = null;
        builder37.clientProvider = provider39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter41.deserializeObjectConverter5();
        retrofit.client.Request request45 = serializedObjectSupporter41.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter41.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter41.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder48 = builder37.setConverter((retrofit.converter.Converter) gsonConverter47);
        builder30.converter = gsonConverter47;
        retrofit.ErrorHandler errorHandler50 = builder30.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler52 = serializedObjectSupporter51.deserializeObjectErrorHandler1();
        retrofit.Server server53 = serializedObjectSupporter51.deserializeObjectServer1();
        builder30.server = server53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        retrofit.client.Client.Provider provider58 = builder55.clientProvider;
        retrofit.RequestInterceptor requestInterceptor59 = builder55.requestInterceptor;
        retrofit.Server server60 = null;
        builder55.server = server60;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.converter.Converter converter65 = builder62.converter;
        java.util.concurrent.Executor executor66 = builder62.getcallbackExecutor();
        retrofit.client.Client.Provider provider67 = builder62.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request69 = serializedObjectSupporter68.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler70 = serializedObjectSupporter68.deserializeObjectErrorHandler1();
        builder62.errorHandler = errorHandler70;
        retrofit.converter.Converter converter72 = builder62.converter;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("hi!");
        java.util.concurrent.Executor executor76 = null;
        builder75.callbackExecutor = executor76;
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor79 = serializedObjectSupporter78.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder80 = builder75.setRequestInterceptor(requestInterceptor79);
        retrofit.RestAdapter.Builder builder81 = builder62.setRequestInterceptor(requestInterceptor79);
        builder55.requestInterceptor = requestInterceptor79;
        retrofit.RestAdapter.Builder builder83 = builder30.setRequestInterceptor(requestInterceptor79);
        java.util.concurrent.Executor executor84 = builder30.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter86 = serializedObjectSupporter85.deserializeObjectConverter2();
        retrofit.client.Request request87 = serializedObjectSupporter85.deserializeObjectRequest7();
        retrofit.client.Request request88 = serializedObjectSupporter85.deserializeObjectRequest2();
        retrofit.client.Request request89 = serializedObjectSupporter85.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter90 = serializedObjectSupporter85.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor91 = serializedObjectSupporter85.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter92 = serializedObjectSupporter85.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter93 = serializedObjectSupporter85.deserializeObjectConverter7();
        builder30.converter = gsonConverter93;
        builder0.converter = gsonConverter93;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(server53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNull(requestInterceptor59);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNull(executor84);
        org.junit.Assert.assertNotNull(gsonConverter86);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertNotNull(request88);
        org.junit.Assert.assertNotNull(request89);
        org.junit.Assert.assertNotNull(gsonConverter90);
        org.junit.Assert.assertNotNull(requestInterceptor91);
        org.junit.Assert.assertNotNull(gsonConverter92);
        org.junit.Assert.assertNotNull(gsonConverter93);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request29 = serializedObjectSupporter28.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString31 = serializedObjectSupporter28.deserializeObjectTypedOutput2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter28;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter28.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter28.deserializeObjectConverter7();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(typedString31);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.Log log37 = builder32.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = builder32.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder41 = builder28.setErrorHandler(errorHandler39);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        builder14.setcallbackExecutor(executor42);
        builder13.callbackExecutor = executor42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder13.setErrorHandler(errorHandler46);
        retrofit.client.Client client48 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder49 = builder47.setClient(client48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.converter.Converter converter9 = builder6.converter;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.client.Client.Provider provider11 = builder6.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request13 = serializedObjectSupporter12.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler14 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        builder6.errorHandler = errorHandler14;
        retrofit.converter.Converter converter16 = builder6.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder21 = builder6.setConverter((retrofit.converter.Converter) gsonConverter20);
        retrofit.client.Client.Provider provider22 = null;
        builder21.setclientProvider(provider22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = null;
        builder24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.RestAdapter.LogLevel logLevel32 = builder27.logLevel;
        java.util.concurrent.Executor executor33 = null;
        builder27.sethttpExecutor(executor33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        java.util.concurrent.Executor executor38 = null;
        builder37.callbackExecutor = executor38;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder42 = builder37.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder43 = builder27.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder44 = builder24.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder45 = builder21.setRequestInterceptor(requestInterceptor41);
        builder2.requestInterceptor = requestInterceptor41;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.sethttpExecutor(executor48);
        retrofit.converter.Converter converter50 = builder47.converter;
        java.util.concurrent.Executor executor51 = builder47.getcallbackExecutor();
        retrofit.client.Client.Provider provider52 = builder47.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request54 = serializedObjectSupporter53.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler55 = serializedObjectSupporter53.deserializeObjectErrorHandler1();
        builder47.errorHandler = errorHandler55;
        retrofit.converter.Converter converter57 = builder47.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        java.lang.String str59 = serializedObjectSupporter58.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter58.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter58.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder62 = builder47.setConverter((retrofit.converter.Converter) gsonConverter61);
        retrofit.client.Client.Provider provider63 = null;
        builder62.setclientProvider(provider63);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = null;
        builder65.serializedObjectSupporter = serializedObjectSupporter66;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor69 = null;
        builder68.sethttpExecutor(executor69);
        retrofit.Profiler profiler71 = null;
        builder68.profiler = profiler71;
        retrofit.RestAdapter.LogLevel logLevel73 = builder68.logLevel;
        java.util.concurrent.Executor executor74 = null;
        builder68.sethttpExecutor(executor74);
        retrofit.RestAdapter.Builder builder76 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder78 = builder76.setServer("hi!");
        java.util.concurrent.Executor executor79 = null;
        builder78.callbackExecutor = executor79;
        retrofit.SerializedObjectSupporter serializedObjectSupporter81 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor82 = serializedObjectSupporter81.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder83 = builder78.setRequestInterceptor(requestInterceptor82);
        retrofit.RestAdapter.Builder builder84 = builder68.setRequestInterceptor(requestInterceptor82);
        retrofit.RestAdapter.Builder builder85 = builder65.setRequestInterceptor(requestInterceptor82);
        retrofit.RestAdapter.Builder builder86 = builder62.setRequestInterceptor(requestInterceptor82);
        builder2.requestInterceptor = requestInterceptor82;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNotNull(request54);
        org.junit.Assert.assertNotNull(errorHandler55);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Retrofit-Idle" + "'", str59, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + logLevel73 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel73.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(requestInterceptor82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.util.List<retrofit.client.Header> headerList8 = request7.headers;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.client.Request request21 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.client.Request request23 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.client.Request request24 = serializedObjectSupporter17.deserializeObjectRequest2();
        java.lang.String str25 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder28 = builder15.setConverter((retrofit.converter.Converter) gsonConverter27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = builder15.serializedObjectSupporter;
        retrofit.client.Client.Provider provider30 = builder15.clientProvider;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNull(provider30);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        java.lang.Class<?> wildcardClass9 = builder0.getClass();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.RestAdapter.LogLevel logLevel9 = builder4.logLevel;
        java.util.concurrent.Executor executor10 = null;
        builder4.sethttpExecutor(executor10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder19 = builder14.setRequestInterceptor(requestInterceptor18);
        retrofit.RestAdapter.Builder builder20 = builder4.setRequestInterceptor(requestInterceptor18);
        java.util.concurrent.Executor executor21 = builder20.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.Server server26 = serializedObjectSupporter22.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.RestAdapter restAdapter33 = builder30.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.RestAdapter.Log log39 = builder34.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = builder34.setErrorHandler(errorHandler41);
        retrofit.RestAdapter.Builder builder43 = builder30.setErrorHandler(errorHandler41);
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        builder27.sethttpExecutor(executor44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        retrofit.RequestInterceptor requestInterceptor50 = builder46.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.client.Client.Provider provider54 = builder51.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder51.setcallbackExecutor(executor55);
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder51.setLog(log57);
        retrofit.RestAdapter.Builder builder59 = builder46.setLog(log57);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.sethttpExecutor(executor61);
        retrofit.Profiler profiler63 = null;
        builder60.profiler = profiler63;
        retrofit.Server server65 = builder60.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.client.Request request69 = serializedObjectSupporter66.deserializeObjectRequest1();
        builder60.serializedObjectSupporter = serializedObjectSupporter66;
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        java.util.concurrent.Executor executor75 = null;
        builder74.callbackExecutor = executor75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.sethttpExecutor(executor79);
        retrofit.Profiler profiler81 = null;
        builder78.profiler = profiler81;
        retrofit.RestAdapter.Log log83 = builder78.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler85 = serializedObjectSupporter84.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder86 = builder78.setErrorHandler(errorHandler85);
        retrofit.RestAdapter.Builder builder87 = builder74.setErrorHandler(errorHandler85);
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        builder60.setcallbackExecutor(executor88);
        builder59.callbackExecutor = executor88;
        retrofit.RestAdapter.Builder builder91 = builder0.setExecutors(executor44, executor88);
        java.util.concurrent.Executor executor92 = builder91.gethttpExecutor();
        retrofit.RestAdapter restAdapter93 = builder91.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNotNull(restAdapter93);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor5 = builder0.requestInterceptor;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        int int18 = restAdapter16.getLOG_CHUNK_SIZE();
        retrofit.Server server19 = restAdapter16.getserver();
        retrofit.client.Client.Provider provider20 = restAdapter16.clientProvider;
        retrofit.client.Client.Provider provider21 = restAdapter16.getclientProvider();
        java.lang.String str22 = restAdapter16.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler23 = restAdapter16.getprofiler();
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        int int36 = restAdapter34.getLOG_CHUNK_SIZE();
        retrofit.Server server37 = restAdapter34.getserver();
        java.util.concurrent.Executor executor38 = restAdapter34.getcallbackExecutor();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        int int51 = restAdapter49.getLOG_CHUNK_SIZE();
        retrofit.Server server52 = restAdapter49.getserver();
        retrofit.client.Client.Provider provider53 = restAdapter49.clientProvider;
        retrofit.client.Client.Provider provider54 = restAdapter49.getclientProvider();
        java.lang.String str55 = restAdapter49.getIDLE_THREAD_NAME();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = null;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        retrofit.RestAdapter.LogLevel logLevel67 = restAdapter66.logLevel;
        retrofit.ErrorHandler errorHandler68 = restAdapter66.geterrorHandler();
        java.util.concurrent.Executor executor69 = restAdapter66.getcallbackExecutor();
        retrofit.converter.Converter converter70 = restAdapter66.converter;
        retrofit.Server server71 = restAdapter66.getserver();
        retrofit.RestAdapter.LogLevel logLevel72 = restAdapter66.getLogLevel();
        restAdapter49.setLogLevel(logLevel72);
        restAdapter34.logLevel = logLevel72;
        retrofit.client.Client.Provider provider75 = restAdapter34.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel76 = restAdapter34.getLogLevel();
        restAdapter16.setLogLevel(logLevel76);
        retrofit.RestAdapter.Builder builder78 = builder0.setLogLevel(logLevel76);
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = builder78.serializedObjectSupporter;
        retrofit.client.Client.Provider provider80 = builder78.clientProvider;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(requestInterceptor5);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4000 + "'", int18 == 4000);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4000 + "'", int36 == 4000);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4000 + "'", int51 == 4000);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-Idle" + "'", str55, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNull(server71);
        org.junit.Assert.assertTrue("'" + logLevel72 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel72.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNull(serializedObjectSupporter79);
        org.junit.Assert.assertNull(provider80);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.client.Client client5 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder6 = builder0.setClient(client5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList3 = request2.getHeaders();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(headerList3);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.client.Request request12 = serializedObjectSupporter6.deserializeObjectRequest5();
        java.util.List<retrofit.client.Header> headerList13 = request12.headers;
        retrofit.mime.TypedOutput typedOutput14 = request12.body;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter21.deserializeObjectErrorHandler1();
        retrofit.Server server23 = serializedObjectSupporter21.deserializeObjectServer1();
        builder0.server = server23;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder27 = builder25.setServer("hi!");
        retrofit.client.Client.Provider provider28 = builder25.clientProvider;
        retrofit.RequestInterceptor requestInterceptor29 = builder25.requestInterceptor;
        retrofit.Server server30 = null;
        builder25.server = server30;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.converter.Converter converter35 = builder32.converter;
        java.util.concurrent.Executor executor36 = builder32.getcallbackExecutor();
        retrofit.client.Client.Provider provider37 = builder32.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request39 = serializedObjectSupporter38.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        builder32.errorHandler = errorHandler40;
        retrofit.converter.Converter converter42 = builder32.converter;
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder45.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = builder32.setRequestInterceptor(requestInterceptor49);
        builder25.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder53 = builder0.setRequestInterceptor(requestInterceptor49);
        retrofit.ErrorHandler errorHandler54 = null;
        builder53.errorHandler = errorHandler54;
        retrofit.Server server56 = builder53.server;
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.sethttpExecutor(executor58);
        retrofit.converter.Converter converter60 = builder57.converter;
        java.util.concurrent.Executor executor61 = builder57.getcallbackExecutor();
        retrofit.client.Client.Provider provider62 = builder57.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request64 = serializedObjectSupporter63.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        builder57.errorHandler = errorHandler65;
        retrofit.Server server67 = builder57.server;
        builder57.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor69 = builder57.requestInterceptor;
        retrofit.RestAdapter.Builder builder70 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder72 = builder70.setServer("hi!");
        java.util.concurrent.Executor executor73 = null;
        builder72.callbackExecutor = executor73;
        retrofit.RestAdapter restAdapter75 = builder72.build();
        retrofit.RestAdapter.Log log76 = restAdapter75.log;
        builder57.log = log76;
        builder53.log = log76;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNotNull(server23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(server56);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertNotNull(requestInterceptor69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(restAdapter75);
        org.junit.Assert.assertNotNull(log76);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        java.lang.String str12 = request11.url;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "http://example.com/" + "'", str12, "http://example.com/");
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder11 = builder0.setConverter((retrofit.converter.Converter) gsonConverter10);
        java.util.concurrent.Executor executor12 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        boolean boolean18 = logLevel17.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter10.deserializeObjectConverter4();
        java.lang.String str14 = serializedObjectSupporter10.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter10.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter10.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter10.deserializeObjectConverter8();
        retrofit.RestAdapter.Builder builder18 = builder0.setConverter((retrofit.converter.Converter) gsonConverter17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder24.logLevel;
        java.util.concurrent.Executor executor30 = null;
        builder24.sethttpExecutor(executor30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder39 = builder34.setRequestInterceptor(requestInterceptor38);
        retrofit.RestAdapter.Builder builder40 = builder24.setRequestInterceptor(requestInterceptor38);
        java.util.concurrent.Executor executor41 = builder40.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.Server server46 = serializedObjectSupporter42.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        java.util.concurrent.Executor executor48 = null;
        builder47.sethttpExecutor(executor48);
        retrofit.Server server50 = builder47.server;
        builder19.server = server50;
        retrofit.RestAdapter.Builder builder52 = builder18.setServer(server50);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "POST" + "'", str14, "POST");
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.Server server8 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(profiler17);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.RestAdapter.LogLevel logLevel9 = builder4.logLevel;
        java.util.concurrent.Executor executor10 = null;
        builder4.sethttpExecutor(executor10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder19 = builder14.setRequestInterceptor(requestInterceptor18);
        retrofit.RestAdapter.Builder builder20 = builder4.setRequestInterceptor(requestInterceptor18);
        java.util.concurrent.Executor executor21 = builder20.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.Server server26 = serializedObjectSupporter22.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder27 = builder20.setServer(server26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.RestAdapter restAdapter33 = builder30.build();
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.RestAdapter.Log log39 = builder34.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = builder34.setErrorHandler(errorHandler41);
        retrofit.RestAdapter.Builder builder43 = builder30.setErrorHandler(errorHandler41);
        java.util.concurrent.Executor executor44 = builder43.callbackExecutor;
        builder27.sethttpExecutor(executor44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        retrofit.RequestInterceptor requestInterceptor50 = builder46.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.client.Client.Provider provider54 = builder51.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder51.setcallbackExecutor(executor55);
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder51.setLog(log57);
        retrofit.RestAdapter.Builder builder59 = builder46.setLog(log57);
        retrofit.RestAdapter.Builder builder60 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor61 = null;
        builder60.sethttpExecutor(executor61);
        retrofit.Profiler profiler63 = null;
        builder60.profiler = profiler63;
        retrofit.Server server65 = builder60.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.client.Request request69 = serializedObjectSupporter66.deserializeObjectRequest1();
        builder60.serializedObjectSupporter = serializedObjectSupporter66;
        builder60.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        java.util.concurrent.Executor executor75 = null;
        builder74.callbackExecutor = executor75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Builder builder78 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor79 = null;
        builder78.sethttpExecutor(executor79);
        retrofit.Profiler profiler81 = null;
        builder78.profiler = profiler81;
        retrofit.RestAdapter.Log log83 = builder78.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler85 = serializedObjectSupporter84.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder86 = builder78.setErrorHandler(errorHandler85);
        retrofit.RestAdapter.Builder builder87 = builder74.setErrorHandler(errorHandler85);
        java.util.concurrent.Executor executor88 = builder87.callbackExecutor;
        builder60.setcallbackExecutor(executor88);
        builder59.callbackExecutor = executor88;
        retrofit.RestAdapter.Builder builder91 = builder0.setExecutors(executor44, executor88);
        java.util.concurrent.Executor executor92 = builder91.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter93 = new retrofit.SerializedObjectSupporter();
        java.lang.String str94 = serializedObjectSupporter93.deserializeObjectString2();
        java.lang.String str95 = serializedObjectSupporter93.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor96 = serializedObjectSupporter93.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request97 = serializedObjectSupporter93.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter98 = serializedObjectSupporter93.deserializeObjectConverter4();
        builder91.converter = gsonConverter98;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(server26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(executor44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(server65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNull(log83);
        org.junit.Assert.assertNotNull(errorHandler85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(executor88);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Retrofit-Idle" + "'", str94, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Retrofit-" + "'", str95, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor96);
        org.junit.Assert.assertNotNull(request97);
        org.junit.Assert.assertNotNull(gsonConverter98);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        java.lang.String str12 = request11.method;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GET" + "'", str12, "GET");
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.lang.String str11 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-" + "'", str11, "Retrofit-");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = builder0.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.Profiler profiler10 = null;
        builder7.profiler = profiler10;
        retrofit.RestAdapter.Log log12 = builder7.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler14 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder15 = builder7.setErrorHandler(errorHandler14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.Server server21 = builder16.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.client.Request request25 = serializedObjectSupporter22.deserializeObjectRequest1();
        builder16.serializedObjectSupporter = serializedObjectSupporter22;
        builder16.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.RestAdapter restAdapter33 = builder30.build();
        retrofit.RestAdapter.Log log34 = restAdapter33.log;
        java.util.concurrent.Executor executor35 = restAdapter33.gethttpExecutor();
        retrofit.client.Client.Provider provider36 = restAdapter33.getclientProvider();
        builder16.setclientProvider(provider36);
        builder15.setclientProvider(provider36);
        retrofit.RestAdapter.Builder builder39 = builder6.setClient(provider36);
        java.util.concurrent.Executor executor40 = builder6.getcallbackExecutor();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(log12);
        org.junit.Assert.assertNotNull(errorHandler14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(restAdapter33);
        org.junit.Assert.assertNotNull(log34);
        org.junit.Assert.assertNotNull(executor35);
        org.junit.Assert.assertNotNull(provider36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor40);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        retrofit.client.Client.Provider provider21 = builder18.clientProvider;
        retrofit.RequestInterceptor requestInterceptor22 = builder18.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean24 = logLevel23.log();
        retrofit.RestAdapter.Builder builder25 = builder18.setLogLevel(logLevel23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.Server server30 = serializedObjectSupporter26.deserializeObjectServer1();
        builder18.server = server30;
        builder15.server = server30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter33.deserializeObjectConverter2();
        retrofit.client.Request request35 = serializedObjectSupporter33.deserializeObjectRequest7();
        retrofit.client.Request request36 = serializedObjectSupporter33.deserializeObjectRequest2();
        retrofit.client.Request request37 = serializedObjectSupporter33.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter33.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter33.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder41 = builder15.setErrorHandler(errorHandler40);
        retrofit.RestAdapter restAdapter42 = builder15.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(server30);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter42);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler17 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter6();
        retrofit.client.Request request22 = serializedObjectSupporter19.deserializeObjectRequest6();
        java.lang.reflect.Method method23 = null;
        retrofit.Server server24 = null;
        retrofit.client.Client.Provider provider25 = null;
        java.util.concurrent.Executor executor26 = null;
        java.util.concurrent.Executor executor27 = null;
        retrofit.RequestInterceptor requestInterceptor28 = null;
        retrofit.converter.Converter converter29 = null;
        retrofit.Profiler profiler30 = null;
        retrofit.ErrorHandler errorHandler31 = null;
        retrofit.RestAdapter.Log log32 = null;
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter34 = new retrofit.RestAdapter(server24, provider25, executor26, executor27, requestInterceptor28, converter29, profiler30, errorHandler31, log32, logLevel33);
        retrofit.ErrorHandler errorHandler35 = restAdapter34.errorHandler;
        java.util.concurrent.Executor executor36 = restAdapter34.httpExecutor;
        java.lang.String str37 = restAdapter34.getIDLE_THREAD_NAME();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = null;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        retrofit.ErrorHandler errorHandler49 = restAdapter48.errorHandler;
        int int50 = restAdapter48.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log51 = restAdapter48.log;
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter48.getLogLevel();
        restAdapter34.logLevel = logLevel52;
        retrofit.ErrorHandler errorHandler54 = restAdapter34.errorHandler;
        retrofit.client.Client.Provider provider55 = restAdapter34.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter34.logLevel;
        java.lang.Object[] objArray57 = new java.lang.Object[] { logLevel56 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = restHandler18.invoke((java.lang.Object) serializedObjectSupporter19, method23, objArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4000 + "'", int50 == 4000);
        org.junit.Assert.assertNull(log51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[HEADERS]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[HEADERS]");
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = builder12.getcallbackExecutor();
        retrofit.client.Client.Provider provider14 = null;
        builder12.clientProvider = provider14;
        retrofit.Server server16 = null;
        builder12.server = server16;
        retrofit.RestAdapter.Log log18 = retrofit.RestAdapter.Log.NONE;
        builder12.log = log18;
        retrofit.converter.Converter converter20 = builder12.converter;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.Server server29 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter25.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder21.setErrorHandler(errorHandler31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.converter.Converter converter36 = builder33.converter;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.converter.Converter converter40 = builder37.converter;
        java.util.concurrent.Executor executor41 = builder37.getcallbackExecutor();
        retrofit.client.Client.Provider provider42 = builder37.getclientProvider();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.RestAdapter restAdapter48 = builder45.build();
        retrofit.RestAdapter.Log log49 = restAdapter48.log;
        java.util.concurrent.Executor executor50 = restAdapter48.gethttpExecutor();
        retrofit.client.Client.Provider provider51 = restAdapter48.getclientProvider();
        builder37.setclientProvider(provider51);
        retrofit.RestAdapter.Builder builder53 = builder33.setClient(provider51);
        builder32.clientProvider = provider51;
        retrofit.RestAdapter.Builder builder55 = builder12.setClient(provider51);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = builder56.getcallbackExecutor();
        retrofit.client.Client.Provider provider58 = null;
        builder56.clientProvider = provider58;
        java.util.concurrent.Executor executor60 = builder56.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        java.lang.String str62 = serializedObjectSupporter61.deserializeObjectString2();
        java.lang.String str63 = serializedObjectSupporter61.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder65 = builder56.setRequestInterceptor(requestInterceptor64);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("hi!");
        retrofit.client.Client.Provider provider69 = builder66.clientProvider;
        retrofit.RequestInterceptor requestInterceptor70 = builder66.requestInterceptor;
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("hi!");
        retrofit.client.Client.Provider provider74 = builder71.clientProvider;
        java.util.concurrent.Executor executor75 = null;
        builder71.setcallbackExecutor(executor75);
        retrofit.RestAdapter.Log log77 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder78 = builder71.setLog(log77);
        retrofit.RestAdapter.Builder builder79 = builder66.setLog(log77);
        builder56.log = log77;
        retrofit.RestAdapter.Builder builder81 = builder12.setLog(log77);
        retrofit.RestAdapter.Builder builder82 = builder0.setLog(log77);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNotNull(log18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(restAdapter48);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNotNull(provider51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNull(executor57);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Retrofit-Idle" + "'", str62, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Retrofit-" + "'", str63, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter15.deserializeObjectConverter2();
        retrofit.client.Request request17 = serializedObjectSupporter15.deserializeObjectRequest7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest2();
        retrofit.client.Request request19 = serializedObjectSupporter15.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter15.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter15.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString22 = serializedObjectSupporter15.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter15.deserializeObjectConverter6();
        retrofit.client.Request request24 = serializedObjectSupporter15.deserializeObjectRequest6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request25 = restAdapter10.logAndReplaceRequest(request24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(typedString22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server16 = restAdapter10.server;
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        retrofit.Server server18 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        java.util.concurrent.Executor executor48 = builder44.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString2();
        java.lang.String str51 = serializedObjectSupporter49.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder53 = builder44.setRequestInterceptor(requestInterceptor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder59.setcallbackExecutor(executor63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder59.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder54.setLog(log65);
        builder44.log = log65;
        retrofit.RestAdapter.Builder builder69 = builder0.setLog(log65);
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor71 = serializedObjectSupporter70.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter70.deserializeObjectConverter8();
        java.lang.String str73 = serializedObjectSupporter70.deserializeObjectString1();
        java.lang.String str74 = serializedObjectSupporter70.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler75 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter70.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder77 = builder0.setConverter((retrofit.converter.Converter) gsonConverter76);
        retrofit.RestAdapter.Builder builder79 = builder77.setServer("http://example.com/");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Retrofit-" + "'", str51, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(requestInterceptor71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Retrofit-" + "'", str73, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "http://example.com/" + "'", str74, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.Server server8 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder11 = builder0.setErrorHandler(errorHandler10);
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter13.deserializeObjectConverter2();
        retrofit.client.Request request15 = serializedObjectSupporter13.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        builder0.requestInterceptor = requestInterceptor17;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(requestInterceptor17);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(serializedObjectSupporter18);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(errorHandler5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder9 = builder7.setServer("hi!");
        retrofit.converter.Converter converter10 = builder9.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.Server server27 = restAdapter24.getserver();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        restAdapter24.logLevel = logLevel37;
        builder11.logLevel = logLevel37;
        retrofit.RestAdapter.Builder builder41 = builder9.setLogLevel(logLevel37);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = builder42.getcallbackExecutor();
        retrofit.client.Client.Provider provider44 = null;
        builder42.clientProvider = provider44;
        java.util.concurrent.Executor executor46 = builder42.gethttpExecutor();
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder49 = builder47.setServer("hi!");
        java.util.concurrent.Executor executor50 = null;
        builder49.callbackExecutor = executor50;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter52.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder54 = builder49.setRequestInterceptor(requestInterceptor53);
        retrofit.RestAdapter.Builder builder55 = builder42.setRequestInterceptor(requestInterceptor53);
        builder41.requestInterceptor = requestInterceptor53;
        retrofit.RestAdapter.Builder builder57 = builder0.setRequestInterceptor(requestInterceptor53);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(executor46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.lang.String str23 = restAdapter21.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler24 = restAdapter21.geterrorHandler();
        retrofit.client.Client.Provider provider25 = restAdapter21.getclientProvider();
        builder10.setclientProvider(provider25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = builder27.getcallbackExecutor();
        retrofit.client.Client.Provider provider29 = null;
        builder27.clientProvider = provider29;
        retrofit.Server server31 = null;
        builder27.server = server31;
        retrofit.RestAdapter.Log log33 = retrofit.RestAdapter.Log.NONE;
        builder27.log = log33;
        retrofit.converter.Converter converter35 = builder27.converter;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.Server server44 = serializedObjectSupporter40.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder36.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.sethttpExecutor(executor49);
        retrofit.converter.Converter converter51 = builder48.converter;
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor53 = null;
        builder52.sethttpExecutor(executor53);
        retrofit.converter.Converter converter55 = builder52.converter;
        java.util.concurrent.Executor executor56 = builder52.getcallbackExecutor();
        retrofit.client.Client.Provider provider57 = builder52.getclientProvider();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        java.util.concurrent.Executor executor61 = null;
        builder60.callbackExecutor = executor61;
        retrofit.RestAdapter restAdapter63 = builder60.build();
        retrofit.RestAdapter.Log log64 = restAdapter63.log;
        java.util.concurrent.Executor executor65 = restAdapter63.gethttpExecutor();
        retrofit.client.Client.Provider provider66 = restAdapter63.getclientProvider();
        builder52.setclientProvider(provider66);
        retrofit.RestAdapter.Builder builder68 = builder48.setClient(provider66);
        builder47.clientProvider = provider66;
        retrofit.RestAdapter.Builder builder70 = builder27.setClient(provider66);
        builder10.setclientProvider(provider66);
        retrofit.RestAdapter.Builder builder72 = builder7.setClient(provider66);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Retrofit-Idle" + "'", str23, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler24);
        org.junit.Assert.assertNotNull(provider25);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(log33);
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(server44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(converter51);
        org.junit.Assert.assertNull(converter55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(restAdapter63);
        org.junit.Assert.assertNotNull(log64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.lang.String str7 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler8 = restAdapter5.geterrorHandler();
        retrofit.client.Client.Provider provider9 = restAdapter5.getclientProvider();
        retrofit.ErrorHandler errorHandler10 = restAdapter5.errorHandler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(provider9);
        org.junit.Assert.assertNotNull(errorHandler10);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        java.lang.Throwable throwable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable15, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        java.lang.String str12 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Response response15 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response17 = restAdapter10.logAndReplaceResponse("", response15, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNull(server13);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = builder16.logLevel;
        java.util.concurrent.Executor executor22 = null;
        builder16.sethttpExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder31 = builder26.setRequestInterceptor(requestInterceptor30);
        retrofit.RestAdapter.Builder builder32 = builder16.setRequestInterceptor(requestInterceptor30);
        java.util.concurrent.Executor executor33 = null;
        builder16.setcallbackExecutor(executor33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        java.util.concurrent.Executor executor38 = null;
        builder37.callbackExecutor = executor38;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder42 = builder37.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder45.setRequestInterceptor(requestInterceptor49);
        builder42.requestInterceptor = requestInterceptor49;
        retrofit.RestAdapter.Builder builder52 = builder16.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("hi!");
        java.util.concurrent.Executor executor56 = null;
        builder55.callbackExecutor = executor56;
        retrofit.RestAdapter restAdapter58 = builder55.build();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        retrofit.RequestInterceptor requestInterceptor63 = builder59.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean65 = logLevel64.log();
        retrofit.RestAdapter.Builder builder66 = builder59.setLogLevel(logLevel64);
        builder55.logLevel = logLevel64;
        builder16.logLevel = logLevel64;
        restAdapter10.setLogLevel(logLevel64);
        java.lang.Class<?> wildcardClass70 = restAdapter10.getClass();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(restAdapter58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNull(requestInterceptor63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.gethttpExecutor();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        int int28 = restAdapter26.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = null;
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter29;
        retrofit.client.Client.Provider provider31 = restAdapter26.getclientProvider();
        retrofit.ErrorHandler errorHandler32 = restAdapter26.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter26.logLevel;
        restAdapter10.setLogLevel(logLevel33);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4000 + "'", int28 == 4000);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.RestHandler restHandler20 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter21.deserializeObjectConverter7();
        restHandler20.serializedObjectSupporter = serializedObjectSupporter21;
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter21.deserializeObjectConverter4();
        retrofit.client.Request request31 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.client.Request request32 = serializedObjectSupporter21.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput33 = request32.body;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNull(typedOutput33);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.Log log37 = builder32.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = builder32.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder41 = builder28.setErrorHandler(errorHandler39);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        builder14.setcallbackExecutor(executor42);
        builder13.callbackExecutor = executor42;
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.sethttpExecutor(executor46);
        retrofit.Profiler profiler48 = null;
        builder45.profiler = profiler48;
        retrofit.converter.Converter converter50 = builder45.converter;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.sethttpExecutor(executor52);
        retrofit.converter.Converter converter54 = builder51.converter;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter.Log log60 = builder55.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler62 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder63 = builder55.setErrorHandler(errorHandler62);
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder66 = builder64.setServer("hi!");
        retrofit.client.Client.Provider provider67 = builder64.clientProvider;
        retrofit.RequestInterceptor requestInterceptor68 = builder64.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean70 = logLevel69.log();
        retrofit.RestAdapter.Builder builder71 = builder64.setLogLevel(logLevel69);
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = builder72.getcallbackExecutor();
        retrofit.client.Client.Provider provider74 = null;
        builder72.clientProvider = provider74;
        retrofit.Server server76 = null;
        builder72.server = server76;
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        builder72.log = log78;
        builder64.log = log78;
        retrofit.RestAdapter.Builder builder81 = builder63.setLog(log78);
        retrofit.RestAdapter.Builder builder82 = builder51.setLog(log78);
        retrofit.RestAdapter.Builder builder83 = builder45.setLog(log78);
        builder13.log = log78;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNull(converter50);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList7 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput8 = request6.getBody();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request31 = serializedObjectSupporter26.deserializeObjectRequest2();
        retrofit.client.Request request32 = serializedObjectSupporter26.deserializeObjectRequest5();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter26.deserializeObjectConverter1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter34);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        retrofit.converter.Converter converter15 = builder14.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.client.Request request19 = serializedObjectSupporter16.deserializeObjectRequest2();
        java.lang.String str20 = serializedObjectSupporter16.deserializeObjectString4();
        builder14.serializedObjectSupporter = serializedObjectSupporter16;
        java.util.concurrent.Executor executor22 = builder14.gethttpExecutor();
        retrofit.Server server23 = null;
        retrofit.client.Client.Provider provider24 = null;
        java.util.concurrent.Executor executor25 = null;
        java.util.concurrent.Executor executor26 = null;
        retrofit.RequestInterceptor requestInterceptor27 = null;
        retrofit.converter.Converter converter28 = null;
        retrofit.Profiler profiler29 = null;
        retrofit.ErrorHandler errorHandler30 = null;
        retrofit.RestAdapter.Log log31 = null;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter33 = new retrofit.RestAdapter(server23, provider24, executor25, executor26, requestInterceptor27, converter28, profiler29, errorHandler30, log31, logLevel32);
        retrofit.ErrorHandler errorHandler34 = restAdapter33.errorHandler;
        int int35 = restAdapter33.getLOG_CHUNK_SIZE();
        retrofit.Server server36 = restAdapter33.getserver();
        java.util.concurrent.Executor executor37 = restAdapter33.getcallbackExecutor();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = null;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        retrofit.ErrorHandler errorHandler49 = restAdapter48.errorHandler;
        int int50 = restAdapter48.getLOG_CHUNK_SIZE();
        retrofit.Server server51 = restAdapter48.getserver();
        retrofit.client.Client.Provider provider52 = restAdapter48.clientProvider;
        retrofit.client.Client.Provider provider53 = restAdapter48.getclientProvider();
        java.lang.String str54 = restAdapter48.getIDLE_THREAD_NAME();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = null;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        retrofit.RestAdapter.LogLevel logLevel66 = restAdapter65.logLevel;
        retrofit.ErrorHandler errorHandler67 = restAdapter65.geterrorHandler();
        java.util.concurrent.Executor executor68 = restAdapter65.getcallbackExecutor();
        retrofit.converter.Converter converter69 = restAdapter65.converter;
        retrofit.Server server70 = restAdapter65.getserver();
        retrofit.RestAdapter.LogLevel logLevel71 = restAdapter65.getLogLevel();
        restAdapter48.setLogLevel(logLevel71);
        restAdapter33.logLevel = logLevel71;
        retrofit.client.Client.Provider provider74 = restAdapter33.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel75 = restAdapter33.logLevel;
        retrofit.RestAdapter.Builder builder76 = builder14.setLogLevel(logLevel75);
        restAdapter10.setLogLevel(logLevel75);
        retrofit.RestAdapter.LogLevel logLevel78 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "http://example.com/" + "'", str20, "http://example.com/");
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4000 + "'", int35 == 4000);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4000 + "'", int50 == 4000);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-Idle" + "'", str54, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertNull(executor68);
        org.junit.Assert.assertNull(converter69);
        org.junit.Assert.assertNull(server70);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertTrue("'" + logLevel75 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel75.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        java.lang.String str15 = serializedObjectSupporter14.deserializeObjectString2();
        java.lang.String str16 = serializedObjectSupporter14.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request18 = serializedObjectSupporter14.deserializeObjectRequest4();
        retrofit.client.Request request19 = serializedObjectSupporter14.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter14.deserializeObjectConverter7();
        builder0.serializedObjectSupporter = serializedObjectSupporter14;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter4 = serializedObjectSupporter0.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(request3);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        java.util.concurrent.Executor executor23 = restAdapter21.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter21.getLogLevel();
        retrofit.client.Client.Provider provider25 = restAdapter21.clientProvider;
        retrofit.Profiler profiler26 = restAdapter21.profiler;
        retrofit.converter.Converter converter27 = restAdapter21.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter4();
        restAdapter21.serializedObjectSupporter = serializedObjectSupporter28;
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder35 = builder0.setRequestInterceptor(requestInterceptor34);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(executor23);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNull(profiler26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.client.Response response31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response33 = restAdapter10.logAndReplaceResponse("GET", response31, (long) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(serializedObjectSupporter16);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.RestAdapter restAdapter22 = builder19.build();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        java.lang.String str24 = restAdapter22.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler25 = restAdapter22.geterrorHandler();
        retrofit.client.Client.Provider provider26 = restAdapter22.getclientProvider();
        retrofit.RestAdapter.Builder builder27 = builder16.setClient(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.LogLevel logLevel33 = builder28.logLevel;
        java.util.concurrent.Executor executor34 = null;
        builder28.sethttpExecutor(executor34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor39 = null;
        builder38.callbackExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder43 = builder38.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder44 = builder28.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder45 = builder27.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.converter.Converter converter49 = builder46.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.Server server54 = serializedObjectSupporter50.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter50.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder57 = builder46.setErrorHandler(errorHandler56);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.converter.Converter converter61 = builder58.converter;
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.converter.Converter converter65 = builder62.converter;
        java.util.concurrent.Executor executor66 = builder62.getcallbackExecutor();
        retrofit.client.Client.Provider provider67 = builder62.getclientProvider();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("hi!");
        java.util.concurrent.Executor executor71 = null;
        builder70.callbackExecutor = executor71;
        retrofit.RestAdapter restAdapter73 = builder70.build();
        retrofit.RestAdapter.Log log74 = restAdapter73.log;
        java.util.concurrent.Executor executor75 = restAdapter73.gethttpExecutor();
        retrofit.client.Client.Provider provider76 = restAdapter73.getclientProvider();
        builder62.setclientProvider(provider76);
        retrofit.RestAdapter.Builder builder78 = builder58.setClient(provider76);
        builder57.clientProvider = provider76;
        builder45.clientProvider = provider76;
        retrofit.client.Client client81 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder82 = builder45.setClient(client81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(converter65);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(provider76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        retrofit.mime.TypedOutput typedOutput7 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(typedOutput7);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter30.deserializeObjectConverter4();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString4();
        retrofit.client.Request request35 = serializedObjectSupporter30.deserializeObjectRequest7();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(request35);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.ErrorHandler errorHandler10 = builder9.errorHandler;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.RestAdapter restAdapter16 = builder13.build();
        retrofit.RestAdapter.Log log17 = restAdapter16.log;
        java.util.concurrent.Executor executor18 = restAdapter16.gethttpExecutor();
        java.lang.String str19 = restAdapter16.getIDLE_THREAD_NAME();
        retrofit.Server server20 = null;
        retrofit.client.Client.Provider provider21 = null;
        java.util.concurrent.Executor executor22 = null;
        java.util.concurrent.Executor executor23 = null;
        retrofit.RequestInterceptor requestInterceptor24 = null;
        retrofit.converter.Converter converter25 = null;
        retrofit.Profiler profiler26 = null;
        retrofit.ErrorHandler errorHandler27 = null;
        retrofit.RestAdapter.Log log28 = null;
        retrofit.RestAdapter.LogLevel logLevel29 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter30 = new retrofit.RestAdapter(server20, provider21, executor22, executor23, requestInterceptor24, converter25, profiler26, errorHandler27, log28, logLevel29);
        retrofit.ErrorHandler errorHandler31 = restAdapter30.errorHandler;
        java.util.concurrent.Executor executor32 = restAdapter30.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter30.getLogLevel();
        restAdapter16.logLevel = logLevel33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        restAdapter16.serializedObjectSupporter = serializedObjectSupporter35;
        builder9.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter35.deserializeObjectConverter2();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(restAdapter16);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Retrofit-Idle" + "'", str19, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNull(executor32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter39);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter27.logLevel;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.geterrorHandler();
        java.util.concurrent.Executor executor30 = restAdapter27.getcallbackExecutor();
        retrofit.converter.Converter converter31 = restAdapter27.converter;
        retrofit.Server server32 = restAdapter27.getserver();
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel33);
        retrofit.RestAdapter.RestHandler restHandler35 = restAdapter10.new RestHandler();
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        int int48 = restAdapter46.getLOG_CHUNK_SIZE();
        retrofit.Server server49 = restAdapter46.getserver();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.logLevel = logLevel59;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter46.setLogLevel(logLevel62);
        restAdapter10.setLogLevel(logLevel62);
        retrofit.ErrorHandler errorHandler65 = restAdapter10.geterrorHandler();
        java.lang.String str66 = restAdapter10.getIDLE_THREAD_NAME();
        int int67 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = null;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        retrofit.RestAdapter.LogLevel logLevel79 = restAdapter78.logLevel;
        retrofit.ErrorHandler errorHandler80 = restAdapter78.geterrorHandler();
        java.util.concurrent.Executor executor81 = restAdapter78.getcallbackExecutor();
        retrofit.converter.Converter converter82 = restAdapter78.converter;
        retrofit.Server server83 = restAdapter78.getserver();
        retrofit.RestAdapter.LogLevel logLevel84 = restAdapter78.getLogLevel();
        retrofit.ErrorHandler errorHandler85 = restAdapter78.geterrorHandler();
        java.util.concurrent.Executor executor86 = restAdapter78.gethttpExecutor();
        retrofit.ErrorHandler errorHandler87 = restAdapter78.errorHandler;
        retrofit.Profiler profiler88 = restAdapter78.profiler;
        retrofit.RestAdapter.LogLevel logLevel89 = restAdapter78.getLogLevel();
        restAdapter10.logLevel = logLevel89;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4000 + "'", int48 == 4000);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Retrofit-Idle" + "'", str66, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4000 + "'", int67 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel79 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel79.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNull(converter82);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertTrue("'" + logLevel84 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel84.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler85);
        org.junit.Assert.assertNull(executor86);
        org.junit.Assert.assertNull(errorHandler87);
        org.junit.Assert.assertNull(profiler88);
        org.junit.Assert.assertTrue("'" + logLevel89 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel89.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = builder9.getcallbackExecutor();
        retrofit.client.Client.Provider provider11 = null;
        builder9.clientProvider = provider11;
        retrofit.Server server13 = null;
        builder9.server = server13;
        retrofit.RestAdapter.Log log15 = retrofit.RestAdapter.Log.NONE;
        builder9.log = log15;
        retrofit.converter.Converter converter17 = builder9.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.Server server23 = builder18.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.client.Request request27 = serializedObjectSupporter24.deserializeObjectRequest1();
        builder18.serializedObjectSupporter = serializedObjectSupporter24;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.sethttpExecutor(executor30);
        retrofit.Profiler profiler32 = null;
        builder29.profiler = profiler32;
        retrofit.Server server34 = builder29.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter7();
        retrofit.client.Request request38 = serializedObjectSupporter35.deserializeObjectRequest1();
        builder29.serializedObjectSupporter = serializedObjectSupporter35;
        java.lang.String str40 = serializedObjectSupporter35.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler41 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder42 = builder18.setErrorHandler(errorHandler41);
        builder9.errorHandler = errorHandler41;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder46 = builder44.setServer("hi!");
        java.util.concurrent.Executor executor47 = null;
        builder46.callbackExecutor = executor47;
        retrofit.RestAdapter restAdapter49 = builder46.build();
        retrofit.RestAdapter.Log log50 = restAdapter49.log;
        java.util.concurrent.Executor executor51 = restAdapter49.gethttpExecutor();
        builder9.callbackExecutor = executor51;
        builder7.callbackExecutor = executor51;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNotNull(log15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Retrofit-Idle" + "'", str40, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(restAdapter49);
        org.junit.Assert.assertNotNull(log50);
        org.junit.Assert.assertNotNull(executor51);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.Server server12 = null;
        retrofit.client.Client.Provider provider13 = null;
        java.util.concurrent.Executor executor14 = null;
        java.util.concurrent.Executor executor15 = null;
        retrofit.RequestInterceptor requestInterceptor16 = null;
        retrofit.converter.Converter converter17 = null;
        retrofit.Profiler profiler18 = null;
        retrofit.ErrorHandler errorHandler19 = null;
        retrofit.RestAdapter.Log log20 = null;
        retrofit.RestAdapter.LogLevel logLevel21 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter22 = new retrofit.RestAdapter(server12, provider13, executor14, executor15, requestInterceptor16, converter17, profiler18, errorHandler19, log20, logLevel21);
        retrofit.ErrorHandler errorHandler23 = restAdapter22.errorHandler;
        int int24 = restAdapter22.getLOG_CHUNK_SIZE();
        retrofit.Server server25 = restAdapter22.getserver();
        retrofit.converter.Converter converter26 = restAdapter22.getconverter();
        retrofit.converter.Converter converter27 = restAdapter22.converter;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter22.logLevel;
        retrofit.RestAdapter.Builder builder29 = builder10.setLogLevel(logLevel28);
        retrofit.RestAdapter.LogLevel logLevel30 = builder10.logLevel;
        retrofit.RestAdapter.Log log31 = builder10.log;
        java.util.concurrent.Executor executor32 = builder10.getcallbackExecutor();
        retrofit.RestAdapter.Log log33 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder34 = builder10.setLog(log33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Log may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4000 + "'", int24 == 4000);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNull(converter26);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNull(executor32);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        log22.log("hi!");
        builder0.log = log22;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder41 = builder33.setErrorHandler(errorHandler40);
        retrofit.RestAdapter.Builder builder42 = builder29.setErrorHandler(errorHandler40);
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.sethttpExecutor(executor45);
        retrofit.Profiler profiler47 = null;
        builder44.profiler = profiler47;
        retrofit.Server server49 = builder44.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.client.Request request53 = serializedObjectSupporter50.deserializeObjectRequest1();
        builder44.serializedObjectSupporter = serializedObjectSupporter50;
        java.lang.String str55 = serializedObjectSupporter50.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter50.deserializeObjectErrorHandler1();
        builder42.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = builder0.setErrorHandler(errorHandler56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = builder0.serializedObjectSupporter;
        retrofit.Server server60 = builder0.server;
        retrofit.client.Client client61 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder62 = builder0.setClient(client61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-Idle" + "'", str55, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(serializedObjectSupporter59);
        org.junit.Assert.assertNull(server60);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", headerList4, typedOutput5);
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNull(typedOutput7);
        org.junit.Assert.assertNotNull(headerList8);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.geterrorHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter35.converter;
        retrofit.Server server40 = restAdapter35.getserver();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.logLevel = logLevel41;
        java.util.concurrent.Executor executor43 = restAdapter10.callbackExecutor;
        retrofit.client.Client.Provider provider44 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(provider44);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-" + "'", str4, "Retrofit-");
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-Idle" + "'", str5, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList6 = request5.getHeaders();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNull(typedOutput7);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.client.Client.Provider provider12 = builder10.getclientProvider();
        retrofit.Server server13 = builder10.server;
        retrofit.RestAdapter.Builder builder15 = builder10.setServer("Retrofit-");
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        int int28 = restAdapter26.getLOG_CHUNK_SIZE();
        retrofit.Server server29 = restAdapter26.getserver();
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        restAdapter26.logLevel = logLevel39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = restAdapter26.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter43.deserializeObjectConverter2();
        retrofit.client.Request request45 = serializedObjectSupporter43.deserializeObjectRequest7();
        retrofit.client.Request request46 = serializedObjectSupporter43.deserializeObjectRequest2();
        retrofit.client.Request request47 = serializedObjectSupporter43.deserializeObjectRequest3();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.Server server49 = serializedObjectSupporter43.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder50 = builder10.setServer(server49);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4000 + "'", int28 == 4000);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter42);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(server49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.ErrorHandler errorHandler5 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(errorHandler5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter8();
        java.lang.String str24 = serializedObjectSupporter21.deserializeObjectString2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter21;
        java.util.concurrent.Executor executor26 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor26);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter25.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter31.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter7();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest5();
        java.lang.reflect.Method method36 = null;
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        java.util.concurrent.Executor executor49 = restAdapter47.httpExecutor;
        java.lang.String str50 = restAdapter47.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor51 = restAdapter47.httpExecutor;
        java.lang.String str52 = restAdapter47.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = restAdapter47.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        java.lang.String str55 = serializedObjectSupporter54.deserializeObjectString3();
        restAdapter47.serializedObjectSupporter = serializedObjectSupporter54;
        retrofit.Server server57 = serializedObjectSupporter54.deserializeObjectServer1();
        retrofit.client.Request request58 = serializedObjectSupporter54.deserializeObjectRequest3();
        java.lang.String str59 = request58.getMethod();
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        int int72 = restAdapter70.getLOG_CHUNK_SIZE();
        retrofit.Server server73 = restAdapter70.getserver();
        retrofit.converter.Converter converter74 = restAdapter70.getconverter();
        retrofit.RequestInterceptor requestInterceptor75 = restAdapter70.getrequestInterceptor();
        java.lang.Object[] objArray76 = new java.lang.Object[] { str59, requestInterceptor75 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = restHandler13.invoke((java.lang.Object) request35, method36, objArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertNull(executor49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-Idle" + "'", str52, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "GET" + "'", str55, "GET");
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "POST" + "'", str59, "POST");
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4000 + "'", int72 == 4000);
        org.junit.Assert.assertNull(server73);
        org.junit.Assert.assertNull(converter74);
        org.junit.Assert.assertNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[POST, null]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[POST, null]");
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.ErrorHandler errorHandler32 = restAdapter31.errorHandler;
        int int33 = restAdapter31.getLOG_CHUNK_SIZE();
        retrofit.Server server34 = restAdapter31.getserver();
        retrofit.client.Client.Provider provider35 = restAdapter31.clientProvider;
        retrofit.client.Client.Provider provider36 = restAdapter31.getclientProvider();
        java.lang.String str37 = restAdapter31.getIDLE_THREAD_NAME();
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = null;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        retrofit.RestAdapter.LogLevel logLevel49 = restAdapter48.logLevel;
        retrofit.ErrorHandler errorHandler50 = restAdapter48.geterrorHandler();
        java.util.concurrent.Executor executor51 = restAdapter48.getcallbackExecutor();
        retrofit.converter.Converter converter52 = restAdapter48.converter;
        retrofit.Server server53 = restAdapter48.getserver();
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter48.getLogLevel();
        restAdapter31.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder56 = builder16.setLogLevel(logLevel54);
        restAdapter10.setLogLevel(logLevel54);
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        retrofit.RestAdapter.Log log62 = null;
        builder58.log = log62;
        java.util.concurrent.Executor executor64 = builder58.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = builder65.getcallbackExecutor();
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.SerializedObjectSupporter serializedObjectSupporter69 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter69.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter69.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter69.deserializeObjectConverter5();
        retrofit.client.Request request73 = serializedObjectSupporter69.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter69.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter69.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder76 = builder65.setConverter((retrofit.converter.Converter) gsonConverter75);
        builder58.converter = gsonConverter75;
        retrofit.ErrorHandler errorHandler78 = builder58.errorHandler;
        retrofit.Server server79 = null;
        retrofit.client.Client.Provider provider80 = null;
        java.util.concurrent.Executor executor81 = null;
        java.util.concurrent.Executor executor82 = null;
        retrofit.RequestInterceptor requestInterceptor83 = null;
        retrofit.converter.Converter converter84 = null;
        retrofit.Profiler profiler85 = null;
        retrofit.ErrorHandler errorHandler86 = null;
        retrofit.RestAdapter.Log log87 = null;
        retrofit.RestAdapter.LogLevel logLevel88 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter89 = new retrofit.RestAdapter(server79, provider80, executor81, executor82, requestInterceptor83, converter84, profiler85, errorHandler86, log87, logLevel88);
        retrofit.RestAdapter.Builder builder90 = builder58.setLogLevel(logLevel88);
        restAdapter10.setLogLevel(logLevel88);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4000 + "'", int33 == 4000);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(provider35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Retrofit-Idle" + "'", str37, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertNull(executor51);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        java.util.concurrent.Executor executor16 = builder15.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        java.lang.String str28 = serializedObjectSupporter23.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter23.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler29;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        retrofit.RestAdapter.Log log35 = null;
        builder31.log = log35;
        java.util.concurrent.Executor executor37 = builder31.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter42.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder49 = builder38.setConverter((retrofit.converter.Converter) gsonConverter48);
        builder31.converter = gsonConverter48;
        retrofit.ErrorHandler errorHandler51 = builder31.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter52.deserializeObjectErrorHandler1();
        retrofit.Server server54 = serializedObjectSupporter52.deserializeObjectServer1();
        builder31.server = server54;
        retrofit.RestAdapter.Builder builder56 = builder15.setServer(server54);
        retrofit.RequestInterceptor requestInterceptor57 = builder15.requestInterceptor;
        retrofit.RestAdapter.Log log58 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder59 = builder15.setLog(log58);
        java.util.concurrent.Executor executor60 = builder15.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter61.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter64 = serializedObjectSupporter61.deserializeObjectConverter4();
        retrofit.client.Request request65 = serializedObjectSupporter61.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler66 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        builder15.errorHandler = errorHandler66;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(server54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(executor60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(gsonConverter64);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(errorHandler66);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList3 = request2.headers;
        retrofit.mime.TypedOutput typedOutput4 = request2.body;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(headerList3);
        org.junit.Assert.assertNull(typedOutput4);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.Profiler profiler12 = null;
        builder7.profiler = profiler12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        java.util.concurrent.Executor executor19 = builder14.callbackExecutor;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        builder20.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Log log43 = builder38.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder46 = builder38.setErrorHandler(errorHandler45);
        retrofit.RestAdapter.Builder builder47 = builder34.setErrorHandler(errorHandler45);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        builder20.setcallbackExecutor(executor48);
        builder14.httpExecutor = executor48;
        builder7.setcallbackExecutor(executor48);
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        java.lang.String str53 = serializedObjectSupporter52.deserializeObjectString2();
        java.lang.String str54 = serializedObjectSupporter52.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter52.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request56 = serializedObjectSupporter52.deserializeObjectRequest4();
        retrofit.Server server57 = serializedObjectSupporter52.deserializeObjectServer1();
        builder7.server = server57;
        java.util.concurrent.Executor executor59 = builder7.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Retrofit-Idle" + "'", str53, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Retrofit-" + "'", str54, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(server57);
        org.junit.Assert.assertNull(executor59);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter15.deserializeObjectConverter2();
        retrofit.client.Request request17 = serializedObjectSupporter15.deserializeObjectRequest7();
        retrofit.client.Request request18 = serializedObjectSupporter15.deserializeObjectRequest2();
        retrofit.client.Request request19 = serializedObjectSupporter15.deserializeObjectRequest3();
        retrofit.client.Request request20 = serializedObjectSupporter15.deserializeObjectRequest6();
        java.lang.String str21 = request20.getMethod();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = restAdapter10.logAndReplaceRequest(request20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GET" + "'", str21, "GET");
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "POST" + "'", str7, "POST");
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        java.lang.String str10 = serializedObjectSupporter9.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter8();
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList13 = request12.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.client.Request request17 = serializedObjectSupporter14.deserializeObjectRequest1();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter14.deserializeObjectTypedOutput2();
        retrofit.client.Request request19 = new retrofit.client.Request("GET", "GET", headerList13, (retrofit.mime.TypedOutput) typedString18);
        retrofit.client.Request request20 = new retrofit.client.Request("Retrofit-", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList5, (retrofit.mime.TypedOutput) typedString18);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString28 = serializedObjectSupporter21.deserializeObjectTypedOutput2();
        retrofit.client.Request request29 = new retrofit.client.Request("POST", "POST", (java.util.List<retrofit.client.Header>) headerList5, (retrofit.mime.TypedOutput) typedString28);
        java.lang.String str30 = request29.method;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(typedString28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "POST" + "'", str30, "POST");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor6 = null;
        builder0.requestInterceptor = requestInterceptor6;
        builder0.ensureSaneDefaults();
        retrofit.Server server9 = builder0.server;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNull(server9);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter2.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter2.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter2.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter2.deserializeObjectRequest3();
        java.lang.String str7 = request6.method;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder9.logLevel;
        java.util.concurrent.Executor executor15 = null;
        builder9.sethttpExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder24 = builder19.setRequestInterceptor(requestInterceptor23);
        retrofit.RestAdapter.Builder builder25 = builder9.setRequestInterceptor(requestInterceptor23);
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter26.deserializeObjectConverter2();
        retrofit.client.Request request28 = serializedObjectSupporter26.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        builder9.requestInterceptor = requestInterceptor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter8();
        retrofit.client.Request request35 = serializedObjectSupporter32.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter32.deserializeObjectConverter1();
        retrofit.client.Request request37 = serializedObjectSupporter32.deserializeObjectRequest2();
        builder9.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.mime.TypedString typedString39 = serializedObjectSupporter32.deserializeObjectTypedOutput2();
        retrofit.client.Request request40 = new retrofit.client.Request("GET", "Retrofit-Idle", headerList8, (retrofit.mime.TypedOutput) typedString39);
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "POST" + "'", str7, "POST");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(typedString39);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request29 = serializedObjectSupporter28.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString31 = serializedObjectSupporter28.deserializeObjectTypedOutput2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter28;
        retrofit.RestAdapter.RestHandler restHandler33 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor34 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(typedString31);
        org.junit.Assert.assertNull(executor34);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        builder2.converter = gsonConverter7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        int int21 = restAdapter19.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = null;
        restAdapter19.serializedObjectSupporter = serializedObjectSupporter22;
        java.util.concurrent.Executor executor24 = restAdapter19.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.client.Request request29 = serializedObjectSupporter25.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter25.deserializeObjectConverter3();
        retrofit.client.Request request31 = serializedObjectSupporter25.deserializeObjectRequest4();
        restAdapter19.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str33 = serializedObjectSupporter25.deserializeObjectString1();
        builder2.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.converter.Converter converter38 = builder35.converter;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.Server server44 = builder39.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor46 = serializedObjectSupporter45.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter7();
        retrofit.client.Request request48 = serializedObjectSupporter45.deserializeObjectRequest1();
        builder39.serializedObjectSupporter = serializedObjectSupporter45;
        java.lang.String str50 = serializedObjectSupporter45.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        java.lang.String str52 = serializedObjectSupporter45.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter45.deserializeObjectConverter7();
        builder35.converter = gsonConverter53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        java.util.concurrent.Executor executor58 = null;
        builder57.callbackExecutor = executor58;
        retrofit.RestAdapter restAdapter60 = builder57.build();
        retrofit.RestAdapter.Log log61 = restAdapter60.log;
        builder35.log = log61;
        retrofit.RestAdapter.Builder builder63 = builder2.setLog(log61);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4000 + "'", int21 == 4000);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-" + "'", str52, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter2.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter2.deserializeObjectTypedOutput2();
        retrofit.client.Request request6 = serializedObjectSupporter2.deserializeObjectRequest1();
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter8();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList21 = request20.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter8();
        retrofit.client.Request request25 = serializedObjectSupporter22.deserializeObjectRequest1();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter22.deserializeObjectTypedOutput2();
        retrofit.client.Request request27 = new retrofit.client.Request("GET", "GET", headerList21, (retrofit.mime.TypedOutput) typedString26);
        retrofit.client.Request request28 = new retrofit.client.Request("Retrofit-", "Retrofit-Idle", (java.util.List<retrofit.client.Header>) headerList13, (retrofit.mime.TypedOutput) typedString26);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter29.deserializeObjectConverter2();
        retrofit.client.Request request31 = serializedObjectSupporter29.deserializeObjectRequest7();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest2();
        retrofit.client.Request request33 = serializedObjectSupporter29.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter29.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString36 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.client.Request request37 = new retrofit.client.Request("POST", "POST", (java.util.List<retrofit.client.Header>) headerList13, (retrofit.mime.TypedOutput) typedString36);
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", headerList7, (retrofit.mime.TypedOutput) typedString36);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "http://example.com/" + "'", str18, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(typedString36);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        java.lang.String str20 = serializedObjectSupporter19.deserializeObjectString5();
        retrofit.mime.TypedString typedString21 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str22 = serializedObjectSupporter19.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter3();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "POST" + "'", str20, "POST");
        org.junit.Assert.assertNotNull(typedString21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.client.Request request11 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString12 = serializedObjectSupporter6.deserializeObjectTypedOutput2();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter6.deserializeObjectConverter2();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(request11);
        org.junit.Assert.assertNotNull(typedString12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "POST" + "'", str13, "POST");
        org.junit.Assert.assertNotNull(gsonConverter14);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.Server server6 = serializedObjectSupporter0.deserializeObjectServer1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections7 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(server6);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        java.util.concurrent.Executor executor15 = builder11.gethttpExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder23 = builder18.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder24 = builder11.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        builder25.errorHandler = errorHandler33;
        retrofit.Server server35 = builder25.server;
        builder25.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("hi!");
        java.util.concurrent.Executor executor41 = null;
        builder40.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = builder40.build();
        retrofit.RestAdapter.Log log44 = restAdapter43.log;
        builder25.log = log44;
        log44.log("Retrofit-");
        builder24.log = log44;
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log44);
        retrofit.RestAdapter.LogLevel logLevel50 = builder0.logLevel;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider18 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor20 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(executor20);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter14.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections20 = serializedObjectSupporter14.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter19);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.ErrorHandler errorHandler8 = builder7.errorHandler;
        retrofit.RestAdapter restAdapter9 = builder7.build();
        builder7.ensureSaneDefaults();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(errorHandler8);
        org.junit.Assert.assertNotNull(restAdapter9);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.Profiler profiler8 = builder0.profiler;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.BASIC;
        builder0.logLevel = logLevel9;
        retrofit.client.Client.Provider provider11 = builder0.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel12 = builder0.logLevel;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.converter.Converter converter16 = builder13.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.Server server21 = serializedObjectSupporter17.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder13.setErrorHandler(errorHandler23);
        retrofit.converter.Converter converter25 = builder13.converter;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.sethttpExecutor(executor27);
        retrofit.Profiler profiler29 = builder26.profiler;
        retrofit.client.Client.Provider provider30 = builder26.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter31.deserializeObjectConverter2();
        retrofit.client.Request request33 = serializedObjectSupporter31.deserializeObjectRequest7();
        retrofit.client.Request request34 = serializedObjectSupporter31.deserializeObjectRequest2();
        retrofit.client.Request request35 = serializedObjectSupporter31.deserializeObjectRequest3();
        java.lang.String str36 = serializedObjectSupporter31.deserializeObjectString4();
        builder26.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.Server server38 = serializedObjectSupporter31.deserializeObjectServer1();
        builder13.server = server38;
        retrofit.RestAdapter.Builder builder40 = builder0.setServer(server38);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(profiler8);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.BASIC + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.BASIC));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(profiler29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        log23.log("Retrofit-Idle");
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor14 = restAdapter10.gethttpExecutor();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler16 = restAdapter10.new RestHandler();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        retrofit.ErrorHandler errorHandler29 = restAdapter27.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler30 = restAdapter27.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter31.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter31.deserializeObjectConverter1();
        restHandler30.serializedObjectSupporter = serializedObjectSupporter31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = restHandler30.serializedObjectSupporter;
        java.lang.String str37 = serializedObjectSupporter36.deserializeObjectString5();
        restHandler16.serializedObjectSupporter = serializedObjectSupporter36;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter39.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter39.deserializeObjectConverter8();
        java.lang.String str44 = serializedObjectSupporter39.deserializeObjectString4();
        java.lang.String str45 = serializedObjectSupporter39.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter39.deserializeObjectConverter6();
        restHandler16.serializedObjectSupporter = serializedObjectSupporter39;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(serializedObjectSupporter36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "POST" + "'", str37, "POST");
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "http://example.com/" + "'", str44, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "GET" + "'", str45, "GET");
        org.junit.Assert.assertNotNull(gsonConverter46);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.RestHandler restHandler14 = restAdapter10.new RestHandler();
        java.lang.String str15 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        retrofit.client.Client.Provider provider19 = builder16.clientProvider;
        java.util.concurrent.Executor executor20 = null;
        builder16.setcallbackExecutor(executor20);
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder23 = builder16.setLog(log22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder24.logLevel;
        builder16.logLevel = logLevel29;
        restAdapter10.setLogLevel(logLevel29);
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.ErrorHandler errorHandler43 = restAdapter42.errorHandler;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.errorHandler;
        retrofit.ErrorHandler errorHandler45 = restAdapter42.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor46 = restAdapter42.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = restAdapter42.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.sethttpExecutor(executor49);
        retrofit.Profiler profiler51 = null;
        builder48.profiler = profiler51;
        retrofit.RestAdapter.LogLevel logLevel53 = builder48.logLevel;
        restAdapter42.setLogLevel(logLevel53);
        restAdapter10.logLevel = logLevel53;
        retrofit.Server server56 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler43);
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(errorHandler45);
        org.junit.Assert.assertNull(requestInterceptor46);
        org.junit.Assert.assertNull(serializedObjectSupporter47);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(server56);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        java.util.concurrent.Executor executor48 = builder44.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString2();
        java.lang.String str51 = serializedObjectSupporter49.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder53 = builder44.setRequestInterceptor(requestInterceptor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder59.setcallbackExecutor(executor63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder59.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder54.setLog(log65);
        builder44.log = log65;
        retrofit.RestAdapter.Builder builder69 = builder0.setLog(log65);
        java.util.concurrent.Executor executor70 = builder69.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Retrofit-" + "'", str51, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNull(executor70);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.client.Client.Provider provider31 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter10.logLevel;
        boolean boolean33 = logLevel32.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(typedString4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel22);
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.logLevel;
        java.lang.String str25 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.client.Client.Provider provider26 = restAdapter10.getclientProvider();
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter10.requestInterceptor;
        java.lang.String str28 = restAdapter10.getTHREAD_PREFIX();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNull(requestInterceptor27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-" + "'", str28, "Retrofit-");
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.Server server16 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(server16);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(converter15);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(requestInterceptor23);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider15 = restAdapter10.clientProvider;
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        retrofit.ErrorHandler errorHandler28 = restAdapter27.errorHandler;
        int int29 = restAdapter27.getLOG_CHUNK_SIZE();
        retrofit.Server server30 = restAdapter27.getserver();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        restAdapter27.logLevel = logLevel40;
        retrofit.RestAdapter.LogLevel logLevel43 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter27.setLogLevel(logLevel43);
        retrofit.RequestInterceptor requestInterceptor45 = restAdapter27.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter27.getLogLevel();
        restAdapter10.setLogLevel(logLevel46);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4000 + "'", int29 == 4000);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.FULL));
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.client.Client.Provider provider23 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter24 = restAdapter10.getconverter();
        java.util.concurrent.Executor executor25 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter25.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.client.Request request31 = serializedObjectSupporter25.deserializeObjectRequest8();
        retrofit.ErrorHandler errorHandler32 = serializedObjectSupporter25.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(errorHandler32);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        int int17 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder12.callbackExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        java.util.concurrent.Executor executor17 = restAdapter15.gethttpExecutor();
        retrofit.client.Client.Provider provider18 = restAdapter15.getclientProvider();
        builder0.setclientProvider(provider18);
        retrofit.RestAdapter.Builder builder21 = builder0.setServer("POST");
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(provider18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        retrofit.client.Client.Provider provider16 = null;
        builder15.setclientProvider(provider16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = null;
        builder18.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.Profiler profiler24 = null;
        builder21.profiler = profiler24;
        retrofit.RestAdapter.LogLevel logLevel26 = builder21.logLevel;
        java.util.concurrent.Executor executor27 = null;
        builder21.sethttpExecutor(executor27);
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor32 = null;
        builder31.callbackExecutor = executor32;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder36 = builder31.setRequestInterceptor(requestInterceptor35);
        retrofit.RestAdapter.Builder builder37 = builder21.setRequestInterceptor(requestInterceptor35);
        retrofit.RestAdapter.Builder builder38 = builder18.setRequestInterceptor(requestInterceptor35);
        retrofit.RestAdapter.Builder builder39 = builder15.setRequestInterceptor(requestInterceptor35);
        retrofit.ErrorHandler errorHandler40 = builder39.errorHandler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(errorHandler40);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Retrofit-Idle" + "'", str4, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        builder13.converter = gsonConverter17;
        retrofit.RestAdapter.Builder builder19 = builder0.setConverter((retrofit.converter.Converter) gsonConverter17);
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = builder20.getcallbackExecutor();
        retrofit.client.Client.Provider provider22 = null;
        builder20.clientProvider = provider22;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        retrofit.RestAdapter.Log log25 = builder20.log;
        retrofit.ErrorHandler errorHandler26 = builder20.errorHandler;
        retrofit.Profiler profiler27 = builder20.profiler;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.client.Client.Provider provider31 = builder28.getclientProvider();
        retrofit.client.Client.Provider provider32 = builder28.getclientProvider();
        retrofit.Server server33 = builder28.server;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        retrofit.client.Request request45 = serializedObjectSupporter40.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString46 = serializedObjectSupporter40.deserializeObjectTypedOutput2();
        builder28.serializedObjectSupporter = serializedObjectSupporter40;
        java.util.concurrent.Executor executor48 = builder28.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request50 = serializedObjectSupporter49.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString52 = serializedObjectSupporter49.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        builder28.errorHandler = errorHandler53;
        retrofit.RestAdapter.Builder builder55 = builder20.setErrorHandler(errorHandler53);
        retrofit.RestAdapter.Builder builder56 = builder0.setErrorHandler(errorHandler53);
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder59 = builder57.setServer("hi!");
        retrofit.client.Client.Provider provider60 = builder57.clientProvider;
        retrofit.RequestInterceptor requestInterceptor61 = builder57.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean63 = logLevel62.log();
        retrofit.RestAdapter.Builder builder64 = builder57.setLogLevel(logLevel62);
        retrofit.RestAdapter.Builder builder66 = builder57.setServer("http://example.com/");
        retrofit.client.Client.Provider provider67 = builder66.getclientProvider();
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("hi!");
        java.util.concurrent.Executor executor71 = null;
        builder70.callbackExecutor = executor71;
        retrofit.RestAdapter restAdapter73 = builder70.build();
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor75 = null;
        builder74.sethttpExecutor(executor75);
        retrofit.Profiler profiler77 = null;
        builder74.profiler = profiler77;
        retrofit.RestAdapter.Log log79 = builder74.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler81 = serializedObjectSupporter80.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder82 = builder74.setErrorHandler(errorHandler81);
        retrofit.RestAdapter.Builder builder83 = builder70.setErrorHandler(errorHandler81);
        java.util.concurrent.Executor executor84 = builder83.callbackExecutor;
        builder66.sethttpExecutor(executor84);
        builder56.sethttpExecutor(executor84);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(executor21);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(profiler27);
        org.junit.Assert.assertNull(provider31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(typedString46);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(typedString52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNull(requestInterceptor61);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(restAdapter73);
        org.junit.Assert.assertNull(log79);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor21 = builder16.requestInterceptor;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        int int34 = restAdapter32.getLOG_CHUNK_SIZE();
        retrofit.Server server35 = restAdapter32.getserver();
        retrofit.client.Client.Provider provider36 = restAdapter32.clientProvider;
        retrofit.client.Client.Provider provider37 = restAdapter32.getclientProvider();
        java.lang.String str38 = restAdapter32.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler39 = restAdapter32.getprofiler();
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = null;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        int int52 = restAdapter50.getLOG_CHUNK_SIZE();
        retrofit.Server server53 = restAdapter50.getserver();
        java.util.concurrent.Executor executor54 = restAdapter50.getcallbackExecutor();
        retrofit.Server server55 = null;
        retrofit.client.Client.Provider provider56 = null;
        java.util.concurrent.Executor executor57 = null;
        java.util.concurrent.Executor executor58 = null;
        retrofit.RequestInterceptor requestInterceptor59 = null;
        retrofit.converter.Converter converter60 = null;
        retrofit.Profiler profiler61 = null;
        retrofit.ErrorHandler errorHandler62 = null;
        retrofit.RestAdapter.Log log63 = null;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter65 = new retrofit.RestAdapter(server55, provider56, executor57, executor58, requestInterceptor59, converter60, profiler61, errorHandler62, log63, logLevel64);
        retrofit.ErrorHandler errorHandler66 = restAdapter65.errorHandler;
        int int67 = restAdapter65.getLOG_CHUNK_SIZE();
        retrofit.Server server68 = restAdapter65.getserver();
        retrofit.client.Client.Provider provider69 = restAdapter65.clientProvider;
        retrofit.client.Client.Provider provider70 = restAdapter65.getclientProvider();
        java.lang.String str71 = restAdapter65.getIDLE_THREAD_NAME();
        retrofit.Server server72 = null;
        retrofit.client.Client.Provider provider73 = null;
        java.util.concurrent.Executor executor74 = null;
        java.util.concurrent.Executor executor75 = null;
        retrofit.RequestInterceptor requestInterceptor76 = null;
        retrofit.converter.Converter converter77 = null;
        retrofit.Profiler profiler78 = null;
        retrofit.ErrorHandler errorHandler79 = null;
        retrofit.RestAdapter.Log log80 = null;
        retrofit.RestAdapter.LogLevel logLevel81 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter82 = new retrofit.RestAdapter(server72, provider73, executor74, executor75, requestInterceptor76, converter77, profiler78, errorHandler79, log80, logLevel81);
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter82.logLevel;
        retrofit.ErrorHandler errorHandler84 = restAdapter82.geterrorHandler();
        java.util.concurrent.Executor executor85 = restAdapter82.getcallbackExecutor();
        retrofit.converter.Converter converter86 = restAdapter82.converter;
        retrofit.Server server87 = restAdapter82.getserver();
        retrofit.RestAdapter.LogLevel logLevel88 = restAdapter82.getLogLevel();
        restAdapter65.setLogLevel(logLevel88);
        restAdapter50.logLevel = logLevel88;
        retrofit.client.Client.Provider provider91 = restAdapter50.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel92 = restAdapter50.getLogLevel();
        restAdapter32.setLogLevel(logLevel92);
        retrofit.RestAdapter.Builder builder94 = builder16.setLogLevel(logLevel92);
        restAdapter10.logLevel = logLevel92;
        retrofit.Profiler profiler96 = restAdapter10.getprofiler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(requestInterceptor21);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4000 + "'", int34 == 4000);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Retrofit-Idle" + "'", str38, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler39);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4000 + "'", int52 == 4000);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4000 + "'", int67 == 4000);
        org.junit.Assert.assertNull(server68);
        org.junit.Assert.assertNull(provider69);
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Retrofit-Idle" + "'", str71, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler84);
        org.junit.Assert.assertNull(executor85);
        org.junit.Assert.assertNull(converter86);
        org.junit.Assert.assertNull(server87);
        org.junit.Assert.assertTrue("'" + logLevel88 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel88.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider91);
        org.junit.Assert.assertTrue("'" + logLevel92 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel92.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNull(profiler96);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.client.Request request13 = serializedObjectSupporter6.deserializeObjectRequest3();
        retrofit.client.Request request14 = serializedObjectSupporter6.deserializeObjectRequest7();
        retrofit.mime.TypedString typedString15 = serializedObjectSupporter6.deserializeObjectTypedOutput2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter16 = serializedObjectSupporter6.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(typedString15);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder27.clientProvider;
        retrofit.client.Client.Provider provider31 = null;
        builder27.setclientProvider(provider31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = builder33.getcallbackExecutor();
        retrofit.client.Client.Provider provider35 = null;
        builder33.clientProvider = provider35;
        java.util.concurrent.Executor executor37 = builder33.getcallbackExecutor();
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.ErrorHandler errorHandler39 = builder33.errorHandler;
        retrofit.Profiler profiler40 = builder33.profiler;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.sethttpExecutor(executor42);
        retrofit.client.Client.Provider provider44 = builder41.getclientProvider();
        retrofit.client.Client.Provider provider45 = builder41.getclientProvider();
        retrofit.Server server46 = builder41.server;
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.sethttpExecutor(executor48);
        retrofit.Profiler profiler50 = null;
        builder47.profiler = profiler50;
        retrofit.Server server52 = builder47.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor54 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter53.deserializeObjectConverter7();
        retrofit.client.Request request56 = serializedObjectSupporter53.deserializeObjectRequest1();
        builder47.serializedObjectSupporter = serializedObjectSupporter53;
        retrofit.client.Request request58 = serializedObjectSupporter53.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString59 = serializedObjectSupporter53.deserializeObjectTypedOutput2();
        builder41.serializedObjectSupporter = serializedObjectSupporter53;
        java.util.concurrent.Executor executor61 = builder41.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request63 = serializedObjectSupporter62.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler64 = serializedObjectSupporter62.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString65 = serializedObjectSupporter62.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler66 = serializedObjectSupporter62.deserializeObjectErrorHandler1();
        builder41.errorHandler = errorHandler66;
        retrofit.RestAdapter.Builder builder68 = builder33.setErrorHandler(errorHandler66);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.sethttpExecutor(executor70);
        retrofit.converter.Converter converter72 = builder69.converter;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.sethttpExecutor(executor74);
        retrofit.converter.Converter converter76 = builder73.converter;
        java.util.concurrent.Executor executor77 = builder73.getcallbackExecutor();
        retrofit.client.Client.Provider provider78 = builder73.getclientProvider();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder81 = builder79.setServer("hi!");
        java.util.concurrent.Executor executor82 = null;
        builder81.callbackExecutor = executor82;
        retrofit.RestAdapter restAdapter84 = builder81.build();
        retrofit.RestAdapter.Log log85 = restAdapter84.log;
        java.util.concurrent.Executor executor86 = restAdapter84.gethttpExecutor();
        retrofit.client.Client.Provider provider87 = restAdapter84.getclientProvider();
        builder73.setclientProvider(provider87);
        retrofit.RestAdapter.Builder builder89 = builder69.setClient(provider87);
        builder68.clientProvider = provider87;
        builder27.clientProvider = provider87;
        builder8.setclientProvider(provider87);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(profiler40);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertNotNull(typedString59);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(typedString65);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(restAdapter84);
        org.junit.Assert.assertNotNull(log85);
        org.junit.Assert.assertNotNull(executor86);
        org.junit.Assert.assertNotNull(provider87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.Log log18 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler19 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel20 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(log18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.ErrorHandler errorHandler27 = builder8.errorHandler;
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        java.util.concurrent.Executor executor40 = restAdapter38.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter38.getLogLevel();
        retrofit.client.Client.Provider provider42 = restAdapter38.clientProvider;
        retrofit.Profiler profiler43 = restAdapter38.profiler;
        retrofit.converter.Converter converter44 = restAdapter38.converter;
        java.util.concurrent.Executor executor45 = restAdapter38.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter38.getLogLevel();
        builder8.logLevel = logLevel46;
        java.util.concurrent.Executor executor48 = builder8.getcallbackExecutor();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(errorHandler27);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(profiler43);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor48);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.Server server3 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.lang.String str5 = request4.getMethod();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(server3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Server server7 = null;
        retrofit.client.Client.Provider provider8 = null;
        java.util.concurrent.Executor executor9 = null;
        java.util.concurrent.Executor executor10 = null;
        retrofit.RequestInterceptor requestInterceptor11 = null;
        retrofit.converter.Converter converter12 = null;
        retrofit.Profiler profiler13 = null;
        retrofit.ErrorHandler errorHandler14 = null;
        retrofit.RestAdapter.Log log15 = null;
        retrofit.RestAdapter.LogLevel logLevel16 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter17 = new retrofit.RestAdapter(server7, provider8, executor9, executor10, requestInterceptor11, converter12, profiler13, errorHandler14, log15, logLevel16);
        retrofit.ErrorHandler errorHandler18 = restAdapter17.errorHandler;
        int int19 = restAdapter17.getLOG_CHUNK_SIZE();
        retrofit.Server server20 = restAdapter17.getserver();
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        restAdapter17.logLevel = logLevel30;
        builder4.logLevel = logLevel30;
        retrofit.RestAdapter.Builder builder34 = builder2.setLogLevel(logLevel30);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = builder2.serializedObjectSupporter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4000 + "'", int19 == 4000);
        org.junit.Assert.assertNull(server20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(serializedObjectSupporter35);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        java.util.concurrent.Executor executor8 = builder0.httpExecutor;
        java.util.concurrent.Executor executor9 = builder0.httpExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.client.Client.Provider provider13 = builder10.getclientProvider();
        retrofit.client.Client.Provider provider14 = builder10.getclientProvider();
        retrofit.Server server15 = builder10.server;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.Server server21 = builder16.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.client.Request request25 = serializedObjectSupporter22.deserializeObjectRequest1();
        builder16.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.client.Request request27 = serializedObjectSupporter22.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString28 = serializedObjectSupporter22.deserializeObjectTypedOutput2();
        builder10.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter22.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter22.deserializeObjectErrorHandler1();
        retrofit.client.Request request32 = serializedObjectSupporter22.deserializeObjectRequest6();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder0.setRequestInterceptor(requestInterceptor33);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNull(server21);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(typedString28);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Server server15 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(server15);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.converter.Converter converter5 = builder0.converter;
        retrofit.Profiler profiler6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setProfiler(profiler6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter5);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        java.util.concurrent.Executor executor30 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter28.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter28.clientProvider;
        retrofit.Profiler profiler33 = restAdapter28.profiler;
        retrofit.converter.Converter converter34 = restAdapter28.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter4();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter28.setLogLevel(logLevel40);
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter28.logLevel;
        java.lang.String str43 = restAdapter28.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter28.getLogLevel();
        restAdapter10.setLogLevel(logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.LogLevel logLevel47 = restAdapter10.getLogLevel();
        boolean boolean48 = logLevel47.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.Profiler profiler19 = builder16.profiler;
        retrofit.RestAdapter.Log log20 = builder16.log;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(profiler19);
        org.junit.Assert.assertNull(log20);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor13 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor13);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        int int28 = restAdapter26.getLOG_CHUNK_SIZE();
        retrofit.Server server29 = restAdapter26.getserver();
        java.util.concurrent.Executor executor30 = restAdapter26.getcallbackExecutor();
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        int int43 = restAdapter41.getLOG_CHUNK_SIZE();
        retrofit.Server server44 = restAdapter41.getserver();
        retrofit.client.Client.Provider provider45 = restAdapter41.clientProvider;
        retrofit.client.Client.Provider provider46 = restAdapter41.getclientProvider();
        java.lang.String str47 = restAdapter41.getIDLE_THREAD_NAME();
        retrofit.Server server48 = null;
        retrofit.client.Client.Provider provider49 = null;
        java.util.concurrent.Executor executor50 = null;
        java.util.concurrent.Executor executor51 = null;
        retrofit.RequestInterceptor requestInterceptor52 = null;
        retrofit.converter.Converter converter53 = null;
        retrofit.Profiler profiler54 = null;
        retrofit.ErrorHandler errorHandler55 = null;
        retrofit.RestAdapter.Log log56 = null;
        retrofit.RestAdapter.LogLevel logLevel57 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter58 = new retrofit.RestAdapter(server48, provider49, executor50, executor51, requestInterceptor52, converter53, profiler54, errorHandler55, log56, logLevel57);
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter58.logLevel;
        retrofit.ErrorHandler errorHandler60 = restAdapter58.geterrorHandler();
        java.util.concurrent.Executor executor61 = restAdapter58.getcallbackExecutor();
        retrofit.converter.Converter converter62 = restAdapter58.converter;
        retrofit.Server server63 = restAdapter58.getserver();
        retrofit.RestAdapter.LogLevel logLevel64 = restAdapter58.getLogLevel();
        restAdapter41.setLogLevel(logLevel64);
        restAdapter26.logLevel = logLevel64;
        retrofit.client.Client.Provider provider67 = restAdapter26.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel68 = restAdapter26.logLevel;
        restAdapter10.setLogLevel(logLevel68);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4000 + "'", int28 == 4000);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4000 + "'", int43 == 4000);
        org.junit.Assert.assertNull(server44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Retrofit-Idle" + "'", str47, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(converter62);
        org.junit.Assert.assertNull(server63);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertTrue("'" + logLevel68 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel68.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.setcallbackExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.getcallbackExecutor();
        org.junit.Assert.assertNull(executor3);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.Server server28 = restAdapter10.getserver();
        retrofit.ErrorHandler errorHandler29 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(errorHandler29);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        builder23.sethttpExecutor(executor40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter8();
        builder23.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.Profiler profiler49 = null;
        builder46.profiler = profiler49;
        retrofit.RestAdapter.LogLevel logLevel51 = builder46.logLevel;
        java.util.concurrent.Executor executor52 = null;
        builder46.sethttpExecutor(executor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder56.callbackExecutor = executor57;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder61 = builder56.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder62 = builder46.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder63 = builder23.setRequestInterceptor(requestInterceptor60);
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.client.Request request68 = serializedObjectSupporter64.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter64.deserializeObjectConverter3();
        retrofit.client.Request request70 = serializedObjectSupporter64.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter64.deserializeObjectConverter5();
        builder23.serializedObjectSupporter = serializedObjectSupporter64;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.sethttpExecutor(executor74);
        retrofit.converter.Converter converter76 = builder73.converter;
        java.util.concurrent.Executor executor77 = builder73.getcallbackExecutor();
        retrofit.client.Client.Provider provider78 = builder73.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request80 = serializedObjectSupporter79.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler81 = serializedObjectSupporter79.deserializeObjectErrorHandler1();
        builder73.errorHandler = errorHandler81;
        retrofit.Server server83 = builder73.server;
        builder73.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor85 = builder73.requestInterceptor;
        retrofit.RestAdapter.Builder builder86 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder88 = builder86.setServer("hi!");
        java.util.concurrent.Executor executor89 = null;
        builder88.callbackExecutor = executor89;
        retrofit.RestAdapter restAdapter91 = builder88.build();
        retrofit.RestAdapter.Log log92 = restAdapter91.log;
        builder73.log = log92;
        log92.log("Retrofit-");
        log92.log("");
        retrofit.RestAdapter.Builder builder98 = builder23.setLog(log92);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNull(executor77);
        org.junit.Assert.assertNull(provider78);
        org.junit.Assert.assertNotNull(request80);
        org.junit.Assert.assertNotNull(errorHandler81);
        org.junit.Assert.assertNull(server83);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(restAdapter91);
        org.junit.Assert.assertNotNull(log92);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.Server server8 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder11 = builder0.setErrorHandler(errorHandler10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.converter.Converter converter15 = builder12.converter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.gethttpExecutor();
        retrofit.client.Client.Provider provider30 = restAdapter27.getclientProvider();
        builder16.setclientProvider(provider30);
        retrofit.RestAdapter.Builder builder32 = builder12.setClient(provider30);
        builder11.clientProvider = provider30;
        retrofit.RestAdapter.LogLevel logLevel34 = builder11.logLevel;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        java.util.concurrent.Executor executor8 = null;
        builder7.setcallbackExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        retrofit.client.Client client11 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder12 = builder7.setClient(client11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter10);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter10.logLevel;
        retrofit.client.Client.Provider provider53 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor54 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider53);
        org.junit.Assert.assertNull(requestInterceptor54);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter17.deserializeObjectConverter6();
        java.lang.String str25 = serializedObjectSupporter17.deserializeObjectString3();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GET" + "'", str25, "GET");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str8 = request7.url;
        java.lang.String str9 = request7.getMethod();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.logLevel;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter8();
        java.lang.String str21 = serializedObjectSupporter18.deserializeObjectString1();
        java.lang.String str22 = serializedObjectSupporter18.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter18.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter18.deserializeObjectConverter1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter18;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-" + "'", str21, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "http://example.com/" + "'", str22, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(gsonConverter24);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str4 = request3.getMethod();
        retrofit.mime.TypedOutput typedOutput5 = request3.getBody();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNull(typedOutput5);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        java.lang.String str5 = request4.getMethod();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GET" + "'", str5, "GET");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder0.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        java.util.concurrent.Executor executor22 = null;
        builder21.callbackExecutor = executor22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder26 = builder21.setRequestInterceptor(requestInterceptor25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder29.setRequestInterceptor(requestInterceptor33);
        builder26.requestInterceptor = requestInterceptor33;
        retrofit.RestAdapter.Builder builder36 = builder0.setRequestInterceptor(requestInterceptor33);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        java.util.concurrent.Executor executor40 = null;
        builder39.callbackExecutor = executor40;
        retrofit.RestAdapter restAdapter42 = builder39.build();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        retrofit.client.Client.Provider provider46 = builder43.clientProvider;
        retrofit.RequestInterceptor requestInterceptor47 = builder43.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean49 = logLevel48.log();
        retrofit.RestAdapter.Builder builder50 = builder43.setLogLevel(logLevel48);
        builder39.logLevel = logLevel48;
        builder0.logLevel = logLevel48;
        boolean boolean53 = logLevel48.log();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(restAdapter42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(provider46);
        org.junit.Assert.assertNull(requestInterceptor47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        java.util.concurrent.Executor executor13 = null;
        builder12.callbackExecutor = executor13;
        retrofit.RestAdapter restAdapter15 = builder12.build();
        retrofit.RestAdapter.Log log16 = restAdapter15.log;
        java.util.concurrent.Executor executor17 = restAdapter15.gethttpExecutor();
        retrofit.client.Client.Provider provider18 = restAdapter15.getclientProvider();
        builder0.setclientProvider(provider18);
        retrofit.Server server20 = null;
        builder0.server = server20;
        retrofit.RestAdapter.Builder builder23 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor42 = null;
        builder41.sethttpExecutor(executor42);
        retrofit.Profiler profiler44 = null;
        builder41.profiler = profiler44;
        retrofit.Server server46 = builder41.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter47 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor48 = serializedObjectSupporter47.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter49 = serializedObjectSupporter47.deserializeObjectConverter7();
        retrofit.client.Request request50 = serializedObjectSupporter47.deserializeObjectRequest1();
        builder41.serializedObjectSupporter = serializedObjectSupporter47;
        java.lang.String str52 = serializedObjectSupporter47.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter47.deserializeObjectErrorHandler1();
        builder39.errorHandler = errorHandler53;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        retrofit.client.Client.Provider provider58 = builder55.clientProvider;
        retrofit.RestAdapter.Log log59 = null;
        builder55.log = log59;
        java.util.concurrent.Executor executor61 = builder55.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.getcallbackExecutor();
        retrofit.client.Client.Provider provider64 = null;
        builder62.clientProvider = provider64;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter66.deserializeObjectConverter5();
        retrofit.client.Request request70 = serializedObjectSupporter66.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter66.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter66.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder73 = builder62.setConverter((retrofit.converter.Converter) gsonConverter72);
        builder55.converter = gsonConverter72;
        retrofit.ErrorHandler errorHandler75 = builder55.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter76 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler77 = serializedObjectSupporter76.deserializeObjectErrorHandler1();
        retrofit.Server server78 = serializedObjectSupporter76.deserializeObjectServer1();
        builder55.server = server78;
        retrofit.RestAdapter.Builder builder80 = builder39.setServer(server78);
        retrofit.RequestInterceptor requestInterceptor81 = builder39.requestInterceptor;
        retrofit.RestAdapter.Log log82 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder83 = builder39.setLog(log82);
        java.util.concurrent.Executor executor84 = builder39.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = builder39.serializedObjectSupporter;
        retrofit.client.Client.Provider provider86 = builder39.getclientProvider();
        retrofit.RestAdapter.Builder builder87 = builder23.setClient(provider86);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(restAdapter15);
        org.junit.Assert.assertNotNull(log16);
        org.junit.Assert.assertNotNull(executor17);
        org.junit.Assert.assertNotNull(provider18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNull(server46);
        org.junit.Assert.assertNotNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(gsonConverter49);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Retrofit-Idle" + "'", str52, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(errorHandler75);
        org.junit.Assert.assertNotNull(errorHandler77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(log82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor84);
        org.junit.Assert.assertNull(serializedObjectSupporter85);
        org.junit.Assert.assertNotNull(provider86);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.Server server8 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder11 = builder0.setErrorHandler(errorHandler10);
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.converter.Converter converter15 = builder12.converter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.converter.Converter converter19 = builder16.converter;
        java.util.concurrent.Executor executor20 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider21 = builder16.getclientProvider();
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.RestAdapter restAdapter27 = builder24.build();
        retrofit.RestAdapter.Log log28 = restAdapter27.log;
        java.util.concurrent.Executor executor29 = restAdapter27.gethttpExecutor();
        retrofit.client.Client.Provider provider30 = restAdapter27.getclientProvider();
        builder16.setclientProvider(provider30);
        retrofit.RestAdapter.Builder builder32 = builder12.setClient(provider30);
        builder11.clientProvider = provider30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter34.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter34.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder40 = builder11.setConverter((retrofit.converter.Converter) gsonConverter39);
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter41.deserializeObjectConverter2();
        retrofit.client.Request request43 = serializedObjectSupporter41.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter41.deserializeObjectConverter7();
        builder11.converter = gsonConverter44;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertNotNull(log28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(provider30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.client.Request request7 = serializedObjectSupporter4.deserializeObjectRequest2();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString4();
        builder2.serializedObjectSupporter = serializedObjectSupporter4;
        retrofit.client.Request request10 = serializedObjectSupporter4.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(request10);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList8 = request7.headers;
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", headerList8, typedOutput9);
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter11.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString14 = serializedObjectSupporter11.deserializeObjectTypedOutput2();
        retrofit.client.Request request15 = new retrofit.client.Request("http://example.com/", "", headerList8, (retrofit.mime.TypedOutput) typedString14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        retrofit.mime.TypedOutput typedOutput17 = request15.getBody();
        java.util.List<retrofit.client.Header> headerList18 = request15.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter23.deserializeObjectConverter2();
        retrofit.client.Request request25 = serializedObjectSupporter23.deserializeObjectRequest7();
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter27.deserializeObjectConverter2();
        retrofit.client.Request request29 = serializedObjectSupporter27.deserializeObjectRequest7();
        retrofit.client.Request request30 = serializedObjectSupporter27.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString31 = serializedObjectSupporter27.deserializeObjectTypedOutput2();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter27.deserializeObjectTypedOutput2();
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", headerList26, (retrofit.mime.TypedOutput) typedString32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.Profiler profiler37 = null;
        builder34.profiler = profiler37;
        retrofit.Server server39 = builder34.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter40 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter40.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter40.deserializeObjectConverter7();
        retrofit.client.Request request43 = serializedObjectSupporter40.deserializeObjectRequest1();
        builder34.serializedObjectSupporter = serializedObjectSupporter40;
        java.lang.String str45 = serializedObjectSupporter40.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter40.deserializeObjectErrorHandler1();
        retrofit.client.Request request47 = serializedObjectSupporter40.deserializeObjectRequest3();
        retrofit.client.Request request48 = serializedObjectSupporter40.deserializeObjectRequest7();
        retrofit.mime.TypedString typedString49 = serializedObjectSupporter40.deserializeObjectTypedOutput2();
        retrofit.client.Request request50 = new retrofit.client.Request("http://example.com/", "Retrofit-Idle", headerList26, (retrofit.mime.TypedOutput) typedString49);
        retrofit.client.Request request51 = new retrofit.client.Request("", "http://example.com/", headerList18, (retrofit.mime.TypedOutput) typedString49);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(typedString14);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(typedString31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(typedString49);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel29 = restAdapter26.getLogLevel();
        retrofit.client.Client.Provider provider30 = restAdapter26.clientProvider;
        retrofit.Profiler profiler31 = restAdapter26.profiler;
        retrofit.converter.Converter converter32 = restAdapter26.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        restAdapter26.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.RestAdapter.LogLevel logLevel38 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter26.setLogLevel(logLevel38);
        restAdapter10.setLogLevel(logLevel38);
        java.lang.String str41 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server42 = null;
        retrofit.client.Client.Provider provider43 = null;
        java.util.concurrent.Executor executor44 = null;
        java.util.concurrent.Executor executor45 = null;
        retrofit.RequestInterceptor requestInterceptor46 = null;
        retrofit.converter.Converter converter47 = null;
        retrofit.Profiler profiler48 = null;
        retrofit.ErrorHandler errorHandler49 = null;
        retrofit.RestAdapter.Log log50 = null;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter52 = new retrofit.RestAdapter(server42, provider43, executor44, executor45, requestInterceptor46, converter47, profiler48, errorHandler49, log50, logLevel51);
        retrofit.ErrorHandler errorHandler53 = restAdapter52.errorHandler;
        java.util.concurrent.Executor executor54 = restAdapter52.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel55 = restAdapter52.getLogLevel();
        retrofit.client.Client.Provider provider56 = restAdapter52.clientProvider;
        retrofit.Profiler profiler57 = restAdapter52.profiler;
        retrofit.converter.Converter converter58 = restAdapter52.converter;
        java.util.concurrent.Executor executor59 = restAdapter52.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel60 = restAdapter52.getLogLevel();
        restAdapter10.setLogLevel(logLevel60);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Retrofit-Idle" + "'", str41, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider56);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertTrue("'" + logLevel60 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel60.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        java.lang.String str12 = serializedObjectSupporter11.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder15 = builder0.setConverter((retrofit.converter.Converter) gsonConverter14);
        java.util.concurrent.Executor executor16 = builder15.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.client.Request request21 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.client.Request request23 = serializedObjectSupporter17.deserializeObjectRequest4();
        retrofit.client.Request request24 = serializedObjectSupporter17.deserializeObjectRequest2();
        java.lang.String str25 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder28 = builder15.setConverter((retrofit.converter.Converter) gsonConverter27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = builder15.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.converter.Converter converter33 = builder30.converter;
        java.util.concurrent.Executor executor34 = builder30.getcallbackExecutor();
        java.util.concurrent.Executor executor35 = builder30.callbackExecutor;
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.Profiler profiler39 = null;
        builder36.profiler = profiler39;
        retrofit.Server server41 = builder36.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.client.Request request45 = serializedObjectSupporter42.deserializeObjectRequest1();
        builder36.serializedObjectSupporter = serializedObjectSupporter42;
        builder36.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder50 = builder48.setServer("hi!");
        java.util.concurrent.Executor executor51 = null;
        builder50.callbackExecutor = executor51;
        retrofit.RestAdapter restAdapter53 = builder50.build();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.sethttpExecutor(executor55);
        retrofit.Profiler profiler57 = null;
        builder54.profiler = profiler57;
        retrofit.RestAdapter.Log log59 = builder54.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder62 = builder54.setErrorHandler(errorHandler61);
        retrofit.RestAdapter.Builder builder63 = builder50.setErrorHandler(errorHandler61);
        java.util.concurrent.Executor executor64 = builder63.callbackExecutor;
        builder36.setcallbackExecutor(executor64);
        builder30.httpExecutor = executor64;
        builder15.setcallbackExecutor(executor64);
        retrofit.RestAdapter.Builder builder69 = builder15.setServer("POST");
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Retrofit-Idle" + "'", str12, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(restAdapter53);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(executor64);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter18 = restAdapter10.converter;
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(provider19);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        builder6.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.RestAdapter restAdapter23 = builder20.build();
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.Log log29 = builder24.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter30.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder32 = builder24.setErrorHandler(errorHandler31);
        retrofit.RestAdapter.Builder builder33 = builder20.setErrorHandler(errorHandler31);
        java.util.concurrent.Executor executor34 = builder33.callbackExecutor;
        builder6.setcallbackExecutor(executor34);
        builder0.httpExecutor = executor34;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter37.deserializeObjectConverter8();
        retrofit.client.Request request42 = serializedObjectSupporter37.deserializeObjectRequest5();
        retrofit.Server server43 = serializedObjectSupporter37.deserializeObjectServer1();
        builder0.server = server43;
        java.util.concurrent.Executor executor45 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor46 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(restAdapter23);
        org.junit.Assert.assertNull(log29);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(executor34);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(server43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(executor46);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.client.Client.Provider provider27 = builder26.clientProvider;
        retrofit.Profiler profiler28 = builder26.profiler;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(profiler28);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.Server server23 = builder18.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter24.deserializeObjectConverter7();
        retrofit.client.Request request27 = serializedObjectSupporter24.deserializeObjectRequest1();
        builder18.serializedObjectSupporter = serializedObjectSupporter24;
        retrofit.client.Request request29 = serializedObjectSupporter24.deserializeObjectRequest2();
        retrofit.client.Request request30 = serializedObjectSupporter24.deserializeObjectRequest5();
        retrofit.client.Request request31 = serializedObjectSupporter24.deserializeObjectRequest8();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request32 = restAdapter10.logAndReplaceRequest(request31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(server23);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(request31);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.client.Response response16 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response18 = restAdapter10.logAndReplaceResponse("Retrofit-Idle", response16, (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertNull(converter14);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.ErrorHandler errorHandler27 = restAdapter24.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter24.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter24.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = builder30.logLevel;
        restAdapter24.setLogLevel(logLevel35);
        restAdapter10.setLogLevel(logLevel35);
        java.util.concurrent.Executor executor38 = restAdapter10.gethttpExecutor();
        retrofit.Server server39 = null;
        retrofit.client.Client.Provider provider40 = null;
        java.util.concurrent.Executor executor41 = null;
        java.util.concurrent.Executor executor42 = null;
        retrofit.RequestInterceptor requestInterceptor43 = null;
        retrofit.converter.Converter converter44 = null;
        retrofit.Profiler profiler45 = null;
        retrofit.ErrorHandler errorHandler46 = null;
        retrofit.RestAdapter.Log log47 = null;
        retrofit.RestAdapter.LogLevel logLevel48 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter49 = new retrofit.RestAdapter(server39, provider40, executor41, executor42, requestInterceptor43, converter44, profiler45, errorHandler46, log47, logLevel48);
        retrofit.ErrorHandler errorHandler50 = restAdapter49.errorHandler;
        int int51 = restAdapter49.getLOG_CHUNK_SIZE();
        retrofit.Server server52 = restAdapter49.getserver();
        retrofit.Server server53 = null;
        retrofit.client.Client.Provider provider54 = null;
        java.util.concurrent.Executor executor55 = null;
        java.util.concurrent.Executor executor56 = null;
        retrofit.RequestInterceptor requestInterceptor57 = null;
        retrofit.converter.Converter converter58 = null;
        retrofit.Profiler profiler59 = null;
        retrofit.ErrorHandler errorHandler60 = null;
        retrofit.RestAdapter.Log log61 = null;
        retrofit.RestAdapter.LogLevel logLevel62 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter63 = new retrofit.RestAdapter(server53, provider54, executor55, executor56, requestInterceptor57, converter58, profiler59, errorHandler60, log61, logLevel62);
        restAdapter49.logLevel = logLevel62;
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = restAdapter49.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter66.deserializeObjectConverter2();
        retrofit.client.Request request68 = serializedObjectSupporter66.deserializeObjectRequest7();
        retrofit.client.Request request69 = serializedObjectSupporter66.deserializeObjectRequest2();
        retrofit.client.Request request70 = serializedObjectSupporter66.deserializeObjectRequest3();
        restAdapter49.serializedObjectSupporter = serializedObjectSupporter66;
        retrofit.Server server72 = serializedObjectSupporter66.deserializeObjectServer1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter66;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4000 + "'", int51 == 4000);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertTrue("'" + logLevel62 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel62.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter65);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(server72);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(request2);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.client.Client.Provider provider23 = restAdapter10.clientProvider;
        java.util.concurrent.Executor executor24 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor25 = restAdapter10.httpExecutor;
        retrofit.client.Response response27 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response29 = restAdapter10.logAndReplaceResponse("GET", response27, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        retrofit.converter.Converter converter8 = builder0.converter;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.converter.Converter converter12 = builder9.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter13.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.Server server17 = serializedObjectSupporter13.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter13.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler19 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder20 = builder9.setErrorHandler(errorHandler19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Log log37 = restAdapter36.log;
        java.util.concurrent.Executor executor38 = restAdapter36.gethttpExecutor();
        retrofit.client.Client.Provider provider39 = restAdapter36.getclientProvider();
        builder25.setclientProvider(provider39);
        retrofit.RestAdapter.Builder builder41 = builder21.setClient(provider39);
        builder20.clientProvider = provider39;
        retrofit.RestAdapter.Builder builder43 = builder0.setClient(provider39);
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = builder44.getcallbackExecutor();
        retrofit.client.Client.Provider provider46 = null;
        builder44.clientProvider = provider46;
        java.util.concurrent.Executor executor48 = builder44.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        java.lang.String str50 = serializedObjectSupporter49.deserializeObjectString2();
        java.lang.String str51 = serializedObjectSupporter49.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder53 = builder44.setRequestInterceptor(requestInterceptor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        retrofit.RequestInterceptor requestInterceptor58 = builder54.requestInterceptor;
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        retrofit.client.Client.Provider provider62 = builder59.clientProvider;
        java.util.concurrent.Executor executor63 = null;
        builder59.setcallbackExecutor(executor63);
        retrofit.RestAdapter.Log log65 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder66 = builder59.setLog(log65);
        retrofit.RestAdapter.Builder builder67 = builder54.setLog(log65);
        builder44.log = log65;
        retrofit.RestAdapter.Builder builder69 = builder0.setLog(log65);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter70 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Server may not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(server17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(errorHandler19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(executor38);
        org.junit.Assert.assertNotNull(provider39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Retrofit-Idle" + "'", str50, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Retrofit-" + "'", str51, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertNotNull(log65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.Server server16 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(server16);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.Profiler profiler12 = null;
        builder7.profiler = profiler12;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter14.deserializeObjectConverter8();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str20 = serializedObjectSupporter14.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter14.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder22 = builder7.setConverter((retrofit.converter.Converter) gsonConverter21);
        retrofit.client.Client.Provider provider23 = builder7.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.geterrorHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter35.converter;
        retrofit.Server server40 = restAdapter35.getserver();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.logLevel = logLevel41;
        java.util.concurrent.Executor executor43 = restAdapter10.gethttpExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        java.lang.String str45 = serializedObjectSupporter44.deserializeObjectString2();
        java.lang.String str46 = serializedObjectSupporter44.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request48 = serializedObjectSupporter44.deserializeObjectRequest4();
        retrofit.client.Request request49 = serializedObjectSupporter44.deserializeObjectRequest2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter44;
        retrofit.ErrorHandler errorHandler51 = restAdapter10.geterrorHandler();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        retrofit.ErrorHandler errorHandler63 = restAdapter62.errorHandler;
        int int64 = restAdapter62.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = null;
        restAdapter62.serializedObjectSupporter = serializedObjectSupporter65;
        retrofit.client.Client.Provider provider67 = restAdapter62.getclientProvider();
        retrofit.ErrorHandler errorHandler68 = restAdapter62.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel69 = restAdapter62.logLevel;
        boolean boolean70 = logLevel69.log();
        restAdapter10.setLogLevel(logLevel69);
        boolean boolean72 = logLevel69.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Retrofit-Idle" + "'", str45, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-" + "'", str46, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4000 + "'", int64 == 4000);
        org.junit.Assert.assertNull(provider67);
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        builder0.serializedObjectSupporter = serializedObjectSupporter2;
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString2();
        retrofit.client.Request request6 = serializedObjectSupporter2.deserializeObjectRequest2();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-Idle" + "'", str5, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.Profiler profiler12 = null;
        builder7.profiler = profiler12;
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor15 = serializedObjectSupporter14.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter14.deserializeObjectConverter8();
        java.lang.String str19 = serializedObjectSupporter14.deserializeObjectString4();
        java.lang.String str20 = serializedObjectSupporter14.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter14.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder22 = builder7.setConverter((retrofit.converter.Converter) gsonConverter21);
        retrofit.client.Client.Provider provider23 = builder22.getclientProvider();
        retrofit.RestAdapter.Builder builder25 = builder22.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.sethttpExecutor(executor27);
        retrofit.Profiler profiler29 = null;
        builder26.profiler = profiler29;
        retrofit.RestAdapter.LogLevel logLevel31 = builder26.logLevel;
        java.util.concurrent.Executor executor32 = null;
        builder26.sethttpExecutor(executor32);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder36.callbackExecutor = executor37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor40 = serializedObjectSupporter39.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder41 = builder36.setRequestInterceptor(requestInterceptor40);
        retrofit.RestAdapter.Builder builder42 = builder26.setRequestInterceptor(requestInterceptor40);
        java.util.concurrent.Executor executor43 = null;
        builder26.setcallbackExecutor(executor43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        retrofit.client.Client.Provider provider48 = builder45.clientProvider;
        retrofit.RequestInterceptor requestInterceptor49 = builder45.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel50 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean51 = logLevel50.log();
        retrofit.RestAdapter.Builder builder52 = builder45.setLogLevel(logLevel50);
        retrofit.RestAdapter.Builder builder54 = builder45.setServer("http://example.com/");
        java.util.concurrent.Executor executor55 = builder45.httpExecutor;
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor57 = null;
        builder56.sethttpExecutor(executor57);
        retrofit.converter.Converter converter59 = builder56.converter;
        java.util.concurrent.Executor executor60 = builder56.getcallbackExecutor();
        retrofit.client.Client.Provider provider61 = builder56.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter62 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request63 = serializedObjectSupporter62.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler64 = serializedObjectSupporter62.deserializeObjectErrorHandler1();
        builder56.errorHandler = errorHandler64;
        retrofit.Server server66 = builder56.server;
        builder56.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor68 = builder56.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("hi!");
        java.util.concurrent.Executor executor72 = null;
        builder71.callbackExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = builder71.build();
        retrofit.RestAdapter.Log log75 = restAdapter74.log;
        builder56.log = log75;
        log75.log("Retrofit-");
        builder45.log = log75;
        builder26.log = log75;
        retrofit.RestAdapter.Builder builder81 = builder22.setLog(log75);
        java.util.concurrent.Executor executor82 = builder22.getcallbackExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(requestInterceptor15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "http://example.com/" + "'", str19, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GET" + "'", str20, "GET");
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(requestInterceptor40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNull(requestInterceptor49);
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(executor55);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNull(server66);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNull(executor82);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.client.Request request22 = serializedObjectSupporter16.deserializeObjectRequest8();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request22);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.Profiler profiler18 = builder16.profiler;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        int int31 = restAdapter29.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = null;
        restAdapter29.serializedObjectSupporter = serializedObjectSupporter32;
        retrofit.client.Client.Provider provider34 = restAdapter29.getclientProvider();
        retrofit.ErrorHandler errorHandler35 = restAdapter29.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter29.logLevel;
        int int37 = restAdapter29.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter29.getLogLevel();
        retrofit.RestAdapter.Log log39 = restAdapter29.log;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = null;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter50.logLevel;
        retrofit.ErrorHandler errorHandler52 = restAdapter50.geterrorHandler();
        java.util.concurrent.Executor executor53 = restAdapter50.getcallbackExecutor();
        retrofit.converter.Converter converter54 = restAdapter50.converter;
        retrofit.Server server55 = restAdapter50.getserver();
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter50.getLogLevel();
        retrofit.ErrorHandler errorHandler57 = restAdapter50.geterrorHandler();
        java.util.concurrent.Executor executor58 = restAdapter50.gethttpExecutor();
        retrofit.ErrorHandler errorHandler59 = restAdapter50.errorHandler;
        retrofit.Profiler profiler60 = restAdapter50.profiler;
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter50.getLogLevel();
        restAdapter29.logLevel = logLevel61;
        retrofit.RestAdapter.Builder builder63 = builder16.setLogLevel(logLevel61);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4000 + "'", int31 == 4000);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNull(errorHandler35);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4000 + "'", int37 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log39);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(converter54);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(profiler60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        java.util.concurrent.Executor executor10 = builder0.callbackExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        retrofit.Server server15 = null;
        builder11.server = server15;
        retrofit.RestAdapter.Log log17 = retrofit.RestAdapter.Log.NONE;
        builder11.log = log17;
        log17.log("hi!");
        retrofit.RestAdapter.Builder builder21 = builder0.setLog(log17);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.converter.Converter converter25 = builder22.converter;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor27 = null;
        builder26.sethttpExecutor(executor27);
        retrofit.Profiler profiler29 = null;
        builder26.profiler = profiler29;
        retrofit.RestAdapter.Log log31 = builder26.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder34 = builder26.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder37 = builder35.setServer("hi!");
        retrofit.client.Client.Provider provider38 = builder35.clientProvider;
        retrofit.RequestInterceptor requestInterceptor39 = builder35.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean41 = logLevel40.log();
        retrofit.RestAdapter.Builder builder42 = builder35.setLogLevel(logLevel40);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = builder43.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = null;
        builder43.clientProvider = provider45;
        retrofit.Server server47 = null;
        builder43.server = server47;
        retrofit.RestAdapter.Log log49 = retrofit.RestAdapter.Log.NONE;
        builder43.log = log49;
        builder35.log = log49;
        retrofit.RestAdapter.Builder builder52 = builder34.setLog(log49);
        retrofit.RestAdapter.Builder builder53 = builder22.setLog(log49);
        retrofit.SerializedObjectSupporter serializedObjectSupporter54 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor55 = serializedObjectSupporter54.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter56 = serializedObjectSupporter54.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter54.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter54.deserializeObjectConverter8();
        retrofit.client.Request request59 = serializedObjectSupporter54.deserializeObjectRequest5();
        retrofit.Server server60 = serializedObjectSupporter54.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder61 = builder22.setServer(server60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = builder62.getcallbackExecutor();
        retrofit.client.Client.Provider provider64 = null;
        builder62.clientProvider = provider64;
        retrofit.Server server66 = null;
        builder62.server = server66;
        retrofit.RestAdapter.Log log68 = retrofit.RestAdapter.Log.NONE;
        builder62.log = log68;
        retrofit.converter.Converter converter70 = builder62.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter71 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request72 = serializedObjectSupporter71.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler73 = serializedObjectSupporter71.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString74 = serializedObjectSupporter71.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler75 = serializedObjectSupporter71.deserializeObjectErrorHandler1();
        builder62.errorHandler = errorHandler75;
        builder61.errorHandler = errorHandler75;
        retrofit.RestAdapter.Builder builder78 = builder21.setErrorHandler(errorHandler75);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNotNull(log17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(log31);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNull(requestInterceptor39);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNotNull(log49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(requestInterceptor55);
        org.junit.Assert.assertNotNull(gsonConverter56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(server60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNotNull(log68);
        org.junit.Assert.assertNull(converter70);
        org.junit.Assert.assertNotNull(request72);
        org.junit.Assert.assertNotNull(errorHandler73);
        org.junit.Assert.assertNotNull(typedString74);
        org.junit.Assert.assertNotNull(errorHandler75);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = builder0.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.converter.Converter converter8 = builder5.converter;
        java.util.concurrent.Executor executor9 = builder5.getcallbackExecutor();
        retrofit.client.Client.Provider provider10 = builder5.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request12 = serializedObjectSupporter11.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter11.deserializeObjectErrorHandler1();
        builder5.errorHandler = errorHandler13;
        retrofit.converter.Converter converter15 = builder5.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        java.lang.String str17 = serializedObjectSupporter16.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder20 = builder5.setConverter((retrofit.converter.Converter) gsonConverter19);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.getcallbackExecutor();
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server25 = null;
        builder21.server = server25;
        java.util.concurrent.Executor executor27 = builder21.gethttpExecutor();
        java.util.concurrent.Executor executor28 = builder21.gethttpExecutor();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = builder29.getcallbackExecutor();
        retrofit.client.Client.Provider provider31 = null;
        builder29.clientProvider = provider31;
        retrofit.Server server33 = null;
        builder29.server = server33;
        retrofit.RestAdapter.Log log35 = retrofit.RestAdapter.Log.NONE;
        builder29.log = log35;
        builder21.log = log35;
        builder20.log = log35;
        log35.log("hi!");
        log35.log("Retrofit-");
        builder0.log = log35;
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(serializedObjectSupporter4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(provider10);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertNotNull(log35);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(log19);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor9 = serializedObjectSupporter8.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.Server server12 = serializedObjectSupporter8.deserializeObjectServer1();
        builder0.server = server12;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder16 = builder14.setServer("hi!");
        retrofit.client.Client.Provider provider17 = builder14.clientProvider;
        retrofit.RequestInterceptor requestInterceptor18 = builder14.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel19 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean20 = logLevel19.log();
        retrofit.RestAdapter.Builder builder21 = builder14.setLogLevel(logLevel19);
        java.util.concurrent.Executor executor22 = null;
        builder21.setcallbackExecutor(executor22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.Server server29 = builder24.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor31 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter7();
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest1();
        builder24.serializedObjectSupporter = serializedObjectSupporter30;
        builder24.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor39 = null;
        builder38.callbackExecutor = executor39;
        retrofit.RestAdapter restAdapter41 = builder38.build();
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.Profiler profiler45 = null;
        builder42.profiler = profiler45;
        retrofit.RestAdapter.Log log47 = builder42.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler49 = serializedObjectSupporter48.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder50 = builder42.setErrorHandler(errorHandler49);
        retrofit.RestAdapter.Builder builder51 = builder38.setErrorHandler(errorHandler49);
        java.util.concurrent.Executor executor52 = builder51.callbackExecutor;
        builder24.setcallbackExecutor(executor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.sethttpExecutor(executor55);
        retrofit.Profiler profiler57 = null;
        builder54.profiler = profiler57;
        retrofit.Server server59 = builder54.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor61 = serializedObjectSupporter60.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter60.deserializeObjectConverter7();
        retrofit.client.Request request63 = serializedObjectSupporter60.deserializeObjectRequest1();
        builder54.serializedObjectSupporter = serializedObjectSupporter60;
        builder54.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder68 = builder66.setServer("hi!");
        java.util.concurrent.Executor executor69 = null;
        builder68.callbackExecutor = executor69;
        retrofit.RestAdapter restAdapter71 = builder68.build();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.sethttpExecutor(executor73);
        retrofit.Profiler profiler75 = null;
        builder72.profiler = profiler75;
        retrofit.RestAdapter.Log log77 = builder72.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler79 = serializedObjectSupporter78.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder80 = builder72.setErrorHandler(errorHandler79);
        retrofit.RestAdapter.Builder builder81 = builder68.setErrorHandler(errorHandler79);
        java.util.concurrent.Executor executor82 = builder81.callbackExecutor;
        builder54.setcallbackExecutor(executor82);
        retrofit.RestAdapter.Builder builder84 = builder21.setExecutors(executor52, executor82);
        builder0.callbackExecutor = executor52;
        java.util.concurrent.Executor executor86 = builder0.httpExecutor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(requestInterceptor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(restAdapter41);
        org.junit.Assert.assertNull(log47);
        org.junit.Assert.assertNotNull(errorHandler49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(executor52);
        org.junit.Assert.assertNull(server59);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(restAdapter71);
        org.junit.Assert.assertNull(log77);
        org.junit.Assert.assertNotNull(errorHandler79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNull(executor86);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString1();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-" + "'", str3, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.converter.Converter converter9 = builder6.converter;
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.converter.Converter converter13 = builder10.converter;
        java.util.concurrent.Executor executor14 = builder10.getcallbackExecutor();
        retrofit.client.Client.Provider provider15 = builder10.getclientProvider();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.RestAdapter restAdapter21 = builder18.build();
        retrofit.RestAdapter.Log log22 = restAdapter21.log;
        java.util.concurrent.Executor executor23 = restAdapter21.gethttpExecutor();
        retrofit.client.Client.Provider provider24 = restAdapter21.getclientProvider();
        builder10.setclientProvider(provider24);
        retrofit.RestAdapter.Builder builder26 = builder6.setClient(provider24);
        builder0.clientProvider = provider24;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(converter13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(restAdapter21);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(executor23);
        org.junit.Assert.assertNotNull(provider24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = restAdapter10.logLevel;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.converter.Converter converter24 = restAdapter10.getconverter();
        retrofit.client.Response response26 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response28 = restAdapter10.logAndReplaceResponse("", response26, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter24);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.RestAdapter.LogLevel logLevel7 = builder0.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString3();
        java.lang.String str10 = serializedObjectSupporter8.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter2();
        builder0.serializedObjectSupporter = serializedObjectSupporter8;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean19 = logLevel18.log();
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter7();
        retrofit.Server server25 = serializedObjectSupporter21.deserializeObjectServer1();
        builder13.server = server25;
        java.util.concurrent.Executor executor27 = builder13.httpExecutor;
        retrofit.RestAdapter restAdapter28 = builder13.build();
        retrofit.RestAdapter.Log log29 = restAdapter28.log;
        retrofit.RestAdapter.Builder builder30 = builder0.setLog(log29);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertTrue("'" + logLevel7 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel7.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GET" + "'", str9, "GET");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter29.deserializeObjectConverter2();
        retrofit.RestAdapter.Builder builder34 = builder28.setConverter((retrofit.converter.Converter) gsonConverter33);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.RestAdapter.LogLevel logLevel40 = builder35.logLevel;
        java.util.concurrent.Executor executor41 = null;
        builder35.sethttpExecutor(executor41);
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder45 = builder43.setServer("hi!");
        java.util.concurrent.Executor executor46 = null;
        builder45.callbackExecutor = executor46;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder50 = builder45.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.Builder builder51 = builder35.setRequestInterceptor(requestInterceptor49);
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean53 = logLevel52.log();
        builder35.logLevel = logLevel52;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter55.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter55.deserializeObjectConverter5();
        retrofit.client.Request request59 = serializedObjectSupporter55.deserializeObjectRequest2();
        retrofit.ErrorHandler errorHandler60 = serializedObjectSupporter55.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder61 = builder35.setErrorHandler(errorHandler60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor63 = null;
        builder62.sethttpExecutor(executor63);
        retrofit.Profiler profiler65 = null;
        builder62.profiler = profiler65;
        retrofit.RestAdapter.LogLevel logLevel67 = builder62.logLevel;
        java.util.concurrent.Executor executor68 = null;
        builder62.sethttpExecutor(executor68);
        retrofit.client.Client.Provider provider70 = builder62.clientProvider;
        java.util.concurrent.Executor executor71 = builder62.callbackExecutor;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        java.util.concurrent.Executor executor75 = null;
        builder74.callbackExecutor = executor75;
        retrofit.RestAdapter restAdapter77 = builder74.build();
        retrofit.RestAdapter.Log log78 = restAdapter77.log;
        java.util.concurrent.Executor executor79 = restAdapter77.gethttpExecutor();
        retrofit.client.Client.Provider provider80 = restAdapter77.getclientProvider();
        builder62.setclientProvider(provider80);
        builder35.setclientProvider(provider80);
        builder34.setclientProvider(provider80);
        retrofit.RestAdapter.Builder builder85 = builder34.setServer("Retrofit-Idle");
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(errorHandler60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + logLevel67 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel67.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(restAdapter77);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNotNull(provider80);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = null;
        builder0.log = log17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString24 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str25 = serializedObjectSupporter19.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.client.Request request27 = serializedObjectSupporter19.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter19.deserializeObjectConverter1();
        retrofit.client.Request request29 = serializedObjectSupporter19.deserializeObjectRequest4();
        retrofit.mime.TypedOutput typedOutput30 = request29.body;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(typedString24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNull(typedOutput30);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString3();
        builder0.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.converter.Converter converter17 = builder0.converter;
        retrofit.RequestInterceptor requestInterceptor18 = builder0.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        retrofit.RequestInterceptor requestInterceptor62 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("hi!");
        retrofit.client.Client.Provider provider66 = builder63.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder63.setcallbackExecutor(executor67);
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder63.setLog(log69);
        retrofit.RestAdapter.Builder builder71 = builder58.setLog(log69);
        log69.log("");
        log69.log("");
        retrofit.RestAdapter.Builder builder76 = builder35.setLog(log69);
        java.lang.Class<?> wildcardClass77 = builder35.getClass();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        java.lang.String str8 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter8();
        builder0.converter = gsonConverter9;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.converter.Converter converter14 = builder11.converter;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor32 = null;
        builder31.callbackExecutor = executor32;
        retrofit.RestAdapter restAdapter34 = builder31.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.RestAdapter.Log log40 = builder35.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler42 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder43 = builder35.setErrorHandler(errorHandler42);
        retrofit.RestAdapter.Builder builder44 = builder31.setErrorHandler(errorHandler42);
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        builder17.setcallbackExecutor(executor45);
        builder11.httpExecutor = executor45;
        builder0.callbackExecutor = executor45;
        retrofit.RestAdapter.Builder builder50 = builder0.setServer("hi!");
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.sethttpExecutor(executor52);
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = null;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        retrofit.ErrorHandler errorHandler65 = restAdapter64.errorHandler;
        int int66 = restAdapter64.getLOG_CHUNK_SIZE();
        retrofit.Server server67 = restAdapter64.getserver();
        retrofit.Server server68 = null;
        retrofit.client.Client.Provider provider69 = null;
        java.util.concurrent.Executor executor70 = null;
        java.util.concurrent.Executor executor71 = null;
        retrofit.RequestInterceptor requestInterceptor72 = null;
        retrofit.converter.Converter converter73 = null;
        retrofit.Profiler profiler74 = null;
        retrofit.ErrorHandler errorHandler75 = null;
        retrofit.RestAdapter.Log log76 = null;
        retrofit.RestAdapter.LogLevel logLevel77 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter78 = new retrofit.RestAdapter(server68, provider69, executor70, executor71, requestInterceptor72, converter73, profiler74, errorHandler75, log76, logLevel77);
        restAdapter64.logLevel = logLevel77;
        builder51.logLevel = logLevel77;
        retrofit.ErrorHandler errorHandler81 = builder51.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter82 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request83 = serializedObjectSupporter82.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler84 = serializedObjectSupporter82.deserializeObjectErrorHandler1();
        builder51.errorHandler = errorHandler84;
        retrofit.ErrorHandler errorHandler86 = builder51.errorHandler;
        retrofit.RestAdapter.Builder builder87 = builder0.setErrorHandler(errorHandler86);
        java.lang.Class<?> wildcardClass88 = builder87.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4000 + "'", int66 == 4000);
        org.junit.Assert.assertNull(server67);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler81);
        org.junit.Assert.assertNotNull(request83);
        org.junit.Assert.assertNotNull(errorHandler84);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor4 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter3();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest8();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        retrofit.mime.TypedOutput typedOutput6 = request4.getBody();
        java.util.List<retrofit.client.Header> headerList7 = request4.headers;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNull(typedOutput5);
        org.junit.Assert.assertNull(typedOutput6);
        org.junit.Assert.assertNotNull(headerList7);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.Server server21 = null;
        retrofit.client.Client.Provider provider22 = null;
        java.util.concurrent.Executor executor23 = null;
        java.util.concurrent.Executor executor24 = null;
        retrofit.RequestInterceptor requestInterceptor25 = null;
        retrofit.converter.Converter converter26 = null;
        retrofit.Profiler profiler27 = null;
        retrofit.ErrorHandler errorHandler28 = null;
        retrofit.RestAdapter.Log log29 = null;
        retrofit.RestAdapter.LogLevel logLevel30 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter31 = new retrofit.RestAdapter(server21, provider22, executor23, executor24, requestInterceptor25, converter26, profiler27, errorHandler28, log29, logLevel30);
        retrofit.RestAdapter.Builder builder32 = builder0.setLogLevel(logLevel30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Server server36 = null;
        retrofit.client.Client.Provider provider37 = null;
        java.util.concurrent.Executor executor38 = null;
        java.util.concurrent.Executor executor39 = null;
        retrofit.RequestInterceptor requestInterceptor40 = null;
        retrofit.converter.Converter converter41 = null;
        retrofit.Profiler profiler42 = null;
        retrofit.ErrorHandler errorHandler43 = null;
        retrofit.RestAdapter.Log log44 = null;
        retrofit.RestAdapter.LogLevel logLevel45 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter46 = new retrofit.RestAdapter(server36, provider37, executor38, executor39, requestInterceptor40, converter41, profiler42, errorHandler43, log44, logLevel45);
        retrofit.ErrorHandler errorHandler47 = restAdapter46.errorHandler;
        int int48 = restAdapter46.getLOG_CHUNK_SIZE();
        retrofit.Server server49 = restAdapter46.getserver();
        retrofit.Server server50 = null;
        retrofit.client.Client.Provider provider51 = null;
        java.util.concurrent.Executor executor52 = null;
        java.util.concurrent.Executor executor53 = null;
        retrofit.RequestInterceptor requestInterceptor54 = null;
        retrofit.converter.Converter converter55 = null;
        retrofit.Profiler profiler56 = null;
        retrofit.ErrorHandler errorHandler57 = null;
        retrofit.RestAdapter.Log log58 = null;
        retrofit.RestAdapter.LogLevel logLevel59 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter60 = new retrofit.RestAdapter(server50, provider51, executor52, executor53, requestInterceptor54, converter55, profiler56, errorHandler57, log58, logLevel59);
        restAdapter46.logLevel = logLevel59;
        builder33.logLevel = logLevel59;
        retrofit.ErrorHandler errorHandler63 = builder33.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request65 = serializedObjectSupporter64.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler66 = serializedObjectSupporter64.deserializeObjectErrorHandler1();
        builder33.errorHandler = errorHandler66;
        retrofit.ErrorHandler errorHandler68 = builder33.errorHandler;
        retrofit.RestAdapter.Builder builder69 = builder0.setErrorHandler(errorHandler68);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4000 + "'", int48 == 4000);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler63);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(errorHandler66);
        org.junit.Assert.assertNotNull(errorHandler68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        retrofit.client.Request request8 = serializedObjectSupporter5.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter5.deserializeObjectRequest3();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.Server server12 = serializedObjectSupporter5.deserializeObjectServer1();
        retrofit.client.Request request13 = serializedObjectSupporter5.deserializeObjectRequest7();
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(server12);
        org.junit.Assert.assertNotNull(request13);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.client.Request request10 = serializedObjectSupporter0.deserializeObjectRequest1();
        java.lang.String str11 = request10.method;
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GET" + "'", str11, "GET");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter11.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter11.deserializeObjectConverter5();
        retrofit.client.Request request15 = serializedObjectSupporter11.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter11.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter11.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder18 = builder7.setConverter((retrofit.converter.Converter) gsonConverter17);
        builder0.converter = gsonConverter17;
        retrofit.ErrorHandler errorHandler20 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter21.deserializeObjectConverter2();
        retrofit.client.Request request23 = serializedObjectSupporter21.deserializeObjectRequest7();
        retrofit.client.Request request24 = serializedObjectSupporter21.deserializeObjectRequest2();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder0.setRequestInterceptor(requestInterceptor27);
        java.util.concurrent.Executor executor29 = builder0.gethttpExecutor();
        retrofit.client.Client client30 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder31 = builder0.setClient(client30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(executor29);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter3 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(request2);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel22);
        retrofit.RestAdapter.LogLevel logLevel24 = restAdapter10.logLevel;
        retrofit.converter.Converter converter25 = restAdapter10.getconverter();
        retrofit.ErrorHandler errorHandler26 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(errorHandler26);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.client.Client.Provider provider4 = null;
        builder0.setclientProvider(provider4);
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = builder6.getcallbackExecutor();
        retrofit.client.Client.Provider provider8 = null;
        builder6.clientProvider = provider8;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.ErrorHandler errorHandler12 = builder6.errorHandler;
        retrofit.Profiler profiler13 = builder6.profiler;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.client.Client.Provider provider17 = builder14.getclientProvider();
        retrofit.client.Client.Provider provider18 = builder14.getclientProvider();
        retrofit.Server server19 = builder14.server;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request31 = serializedObjectSupporter26.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter26.deserializeObjectTypedOutput2();
        builder14.serializedObjectSupporter = serializedObjectSupporter26;
        java.util.concurrent.Executor executor34 = builder14.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString38 = serializedObjectSupporter35.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler39;
        retrofit.RestAdapter.Builder builder41 = builder6.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder42 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor43 = null;
        builder42.sethttpExecutor(executor43);
        retrofit.converter.Converter converter45 = builder42.converter;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.converter.Converter converter49 = builder46.converter;
        java.util.concurrent.Executor executor50 = builder46.getcallbackExecutor();
        retrofit.client.Client.Provider provider51 = builder46.getclientProvider();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor55 = null;
        builder54.callbackExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Log log58 = restAdapter57.log;
        java.util.concurrent.Executor executor59 = restAdapter57.gethttpExecutor();
        retrofit.client.Client.Provider provider60 = restAdapter57.getclientProvider();
        builder46.setclientProvider(provider60);
        retrofit.RestAdapter.Builder builder62 = builder42.setClient(provider60);
        builder41.clientProvider = provider60;
        builder0.clientProvider = provider60;
        java.util.concurrent.Executor executor65 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter66.deserializeObjectConverter2();
        retrofit.client.Request request68 = serializedObjectSupporter66.deserializeObjectRequest7();
        retrofit.client.Request request69 = serializedObjectSupporter66.deserializeObjectRequest2();
        retrofit.client.Request request70 = serializedObjectSupporter66.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter66.deserializeObjectConverter6();
        retrofit.RequestInterceptor requestInterceptor72 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter66.deserializeObjectConverter4();
        retrofit.client.Request request75 = serializedObjectSupporter66.deserializeObjectRequest3();
        builder0.serializedObjectSupporter = serializedObjectSupporter66;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(profiler13);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(typedString38);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(converter45);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNotNull(log58);
        org.junit.Assert.assertNotNull(executor59);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(requestInterceptor72);
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(request75);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest6();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(request8);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler7 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder8 = builder0.setErrorHandler(errorHandler7);
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder11 = builder9.setServer("hi!");
        retrofit.client.Client.Provider provider12 = builder9.clientProvider;
        retrofit.RequestInterceptor requestInterceptor13 = builder9.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean15 = logLevel14.log();
        retrofit.RestAdapter.Builder builder16 = builder9.setLogLevel(logLevel14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = builder17.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = null;
        builder17.clientProvider = provider19;
        retrofit.Server server21 = null;
        builder17.server = server21;
        retrofit.RestAdapter.Log log23 = retrofit.RestAdapter.Log.NONE;
        builder17.log = log23;
        builder9.log = log23;
        retrofit.RestAdapter.Builder builder26 = builder8.setLog(log23);
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("Retrofit-Idle");
        retrofit.RestAdapter.Builder builder30 = builder26.setServer("POST");
        retrofit.client.Client client31 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder32 = builder30.setClient(client31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(errorHandler7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.client.Request request8 = serializedObjectSupporter4.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter4.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder11 = builder0.setConverter((retrofit.converter.Converter) gsonConverter10);
        retrofit.client.Client.Provider provider12 = builder11.getclientProvider();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(provider12);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str22 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder0.setErrorHandler(errorHandler23);
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter26.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter26.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter26.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter33 = serializedObjectSupporter26.deserializeObjectConverter2();
        builder0.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request35 = serializedObjectSupporter26.deserializeObjectRequest6();
        retrofit.client.Request request36 = serializedObjectSupporter26.deserializeObjectRequest6();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(gsonConverter33);
        org.junit.Assert.assertNotNull(request35);
        org.junit.Assert.assertNotNull(request36);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        builder14.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.Log log37 = builder32.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler39 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder40 = builder32.setErrorHandler(errorHandler39);
        retrofit.RestAdapter.Builder builder41 = builder28.setErrorHandler(errorHandler39);
        java.util.concurrent.Executor executor42 = builder41.callbackExecutor;
        builder14.setcallbackExecutor(executor42);
        builder13.callbackExecutor = executor42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder13.setErrorHandler(errorHandler46);
        java.util.concurrent.Executor executor48 = builder47.gethttpExecutor();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNull(log37);
        org.junit.Assert.assertNotNull(errorHandler39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(executor42);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor48);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor7 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.RestAdapter restAdapter13 = builder10.build();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.RestAdapter.Log log19 = builder14.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder22 = builder14.setErrorHandler(errorHandler21);
        retrofit.RestAdapter.Builder builder23 = builder10.setErrorHandler(errorHandler21);
        java.util.concurrent.Executor executor24 = builder23.callbackExecutor;
        builder0.callbackExecutor = executor24;
        retrofit.RestAdapter.Builder builder27 = builder0.setServer("POST");
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(restAdapter13);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(executor24);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        java.lang.String str21 = serializedObjectSupporter17.deserializeObjectString4();
        retrofit.mime.TypedString typedString22 = serializedObjectSupporter17.deserializeObjectTypedOutput2();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter24 = serializedObjectSupporter17.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-Idle" + "'", str18, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertNotNull(typedString22);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        java.lang.String str18 = restAdapter10.getTHREAD_PREFIX();
        java.util.concurrent.Executor executor19 = restAdapter10.getcallbackExecutor();
        java.lang.Throwable throwable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable20, "GET");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Retrofit-" + "'", str18, "Retrofit-");
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = null;
        builder16.callbackExecutor = executor17;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        java.util.concurrent.Executor executor22 = null;
        builder21.callbackExecutor = executor22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder26 = builder21.setRequestInterceptor(requestInterceptor25);
        retrofit.Server server27 = builder26.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler29 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        builder26.serializedObjectSupporter = serializedObjectSupporter28;
        retrofit.Profiler profiler31 = null;
        builder26.profiler = profiler31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter33.deserializeObjectConverter8();
        java.lang.String str38 = serializedObjectSupporter33.deserializeObjectString4();
        java.lang.String str39 = serializedObjectSupporter33.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter33.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder41 = builder26.setConverter((retrofit.converter.Converter) gsonConverter40);
        retrofit.client.Client.Provider provider42 = builder41.getclientProvider();
        retrofit.RestAdapter.Builder builder43 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor44 = null;
        builder43.sethttpExecutor(executor44);
        retrofit.Profiler profiler46 = null;
        builder43.profiler = profiler46;
        retrofit.Server server48 = builder43.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor50 = serializedObjectSupporter49.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter49.deserializeObjectConverter7();
        retrofit.client.Request request52 = serializedObjectSupporter49.deserializeObjectRequest1();
        builder43.serializedObjectSupporter = serializedObjectSupporter49;
        builder43.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder57 = builder55.setServer("hi!");
        java.util.concurrent.Executor executor58 = null;
        builder57.callbackExecutor = executor58;
        retrofit.RestAdapter restAdapter60 = builder57.build();
        retrofit.RestAdapter.Log log61 = restAdapter60.log;
        java.util.concurrent.Executor executor62 = restAdapter60.gethttpExecutor();
        retrofit.client.Client.Provider provider63 = restAdapter60.getclientProvider();
        builder43.setclientProvider(provider63);
        builder41.setclientProvider(provider63);
        builder16.setclientProvider(provider63);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(errorHandler29);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "http://example.com/" + "'", str38, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "GET" + "'", str39, "GET");
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(server48);
        org.junit.Assert.assertNotNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(restAdapter60);
        org.junit.Assert.assertNotNull(log61);
        org.junit.Assert.assertNotNull(executor62);
        org.junit.Assert.assertNotNull(provider63);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel5 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean6 = logLevel5.log();
        retrofit.RestAdapter.Builder builder7 = builder0.setLogLevel(logLevel5);
        retrofit.RestAdapter.Builder builder9 = builder0.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor11 = null;
        builder10.sethttpExecutor(executor11);
        retrofit.Profiler profiler13 = null;
        builder10.profiler = profiler13;
        retrofit.RestAdapter.LogLevel logLevel15 = builder10.logLevel;
        java.util.concurrent.Executor executor16 = null;
        builder10.sethttpExecutor(executor16);
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder10.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder27 = builder9.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.Server server33 = builder28.server;
        retrofit.RestAdapter.Builder builder35 = builder28.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider36 = builder35.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request38 = serializedObjectSupporter37.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter37.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor41 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder42 = builder35.setRequestInterceptor(requestInterceptor41);
        retrofit.RestAdapter.Builder builder43 = builder27.setRequestInterceptor(requestInterceptor41);
        retrofit.client.Client.Provider provider44 = builder43.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(requestInterceptor41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.Server server5 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Retrofit-Idle" + "'", str3, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(server5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.RestAdapter restAdapter22 = builder19.build();
        retrofit.RestAdapter.Log log23 = restAdapter22.log;
        java.lang.String str24 = restAdapter22.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler25 = restAdapter22.geterrorHandler();
        retrofit.client.Client.Provider provider26 = restAdapter22.getclientProvider();
        retrofit.RestAdapter.Builder builder27 = builder16.setClient(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = builder28.profiler;
        retrofit.client.Client.Provider provider32 = builder28.clientProvider;
        retrofit.Server server33 = builder28.server;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder36 = builder34.setServer("hi!");
        java.util.concurrent.Executor executor37 = null;
        builder36.callbackExecutor = executor37;
        retrofit.RestAdapter restAdapter39 = builder36.build();
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.RestAdapter.Log log45 = builder40.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler47 = serializedObjectSupporter46.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder48 = builder40.setErrorHandler(errorHandler47);
        retrofit.RestAdapter.Builder builder49 = builder36.setErrorHandler(errorHandler47);
        java.util.concurrent.Executor executor50 = builder49.callbackExecutor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = null;
        builder51.sethttpExecutor(executor52);
        retrofit.Profiler profiler54 = null;
        builder51.profiler = profiler54;
        retrofit.Server server56 = builder51.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter57 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor58 = serializedObjectSupporter57.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter59 = serializedObjectSupporter57.deserializeObjectConverter7();
        retrofit.client.Request request60 = serializedObjectSupporter57.deserializeObjectRequest1();
        builder51.serializedObjectSupporter = serializedObjectSupporter57;
        java.lang.String str62 = serializedObjectSupporter57.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler63 = serializedObjectSupporter57.deserializeObjectErrorHandler1();
        builder49.errorHandler = errorHandler63;
        builder28.errorHandler = errorHandler63;
        retrofit.RestAdapter.LogLevel logLevel66 = builder28.logLevel;
        builder16.logLevel = logLevel66;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(restAdapter22);
        org.junit.Assert.assertNotNull(log23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(provider26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNull(profiler31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(server33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(restAdapter39);
        org.junit.Assert.assertNull(log45);
        org.junit.Assert.assertNotNull(errorHandler47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(executor50);
        org.junit.Assert.assertNull(server56);
        org.junit.Assert.assertNotNull(requestInterceptor58);
        org.junit.Assert.assertNotNull(gsonConverter59);
        org.junit.Assert.assertNotNull(request60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Retrofit-Idle" + "'", str62, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler63);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        retrofit.RequestInterceptor requestInterceptor44 = restAdapter43.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel45 = restAdapter43.logLevel;
        retrofit.RestAdapter.Builder builder46 = builder0.setLogLevel(logLevel45);
        retrofit.converter.Converter converter47 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor49 = serializedObjectSupporter48.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter50 = serializedObjectSupporter48.deserializeObjectConverter7();
        retrofit.client.Request request51 = serializedObjectSupporter48.deserializeObjectRequest1();
        retrofit.client.Request request52 = serializedObjectSupporter48.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter48.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter54 = serializedObjectSupporter48.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder55 = builder0.setConverter((retrofit.converter.Converter) gsonConverter54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("hi!");
        java.util.concurrent.Executor executor59 = null;
        builder58.callbackExecutor = executor59;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder63 = builder58.setRequestInterceptor(requestInterceptor62);
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request65 = serializedObjectSupporter64.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter64.deserializeObjectConverter1();
        builder63.converter = gsonConverter67;
        retrofit.RestAdapter.Builder builder69 = builder55.setConverter((retrofit.converter.Converter) gsonConverter67);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor44);
        org.junit.Assert.assertTrue("'" + logLevel45 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel45.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(converter47);
        org.junit.Assert.assertNotNull(requestInterceptor49);
        org.junit.Assert.assertNotNull(gsonConverter50);
        org.junit.Assert.assertNotNull(request51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(gsonConverter54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(request65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest2();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(gsonConverter7);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.client.Request request7 = serializedObjectSupporter4.deserializeObjectRequest2();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString4();
        builder2.serializedObjectSupporter = serializedObjectSupporter4;
        java.util.concurrent.Executor executor10 = builder2.gethttpExecutor();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        int int23 = restAdapter21.getLOG_CHUNK_SIZE();
        retrofit.Server server24 = restAdapter21.getserver();
        java.util.concurrent.Executor executor25 = restAdapter21.getcallbackExecutor();
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = null;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        int int38 = restAdapter36.getLOG_CHUNK_SIZE();
        retrofit.Server server39 = restAdapter36.getserver();
        retrofit.client.Client.Provider provider40 = restAdapter36.clientProvider;
        retrofit.client.Client.Provider provider41 = restAdapter36.getclientProvider();
        java.lang.String str42 = restAdapter36.getIDLE_THREAD_NAME();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.logLevel;
        retrofit.ErrorHandler errorHandler55 = restAdapter53.geterrorHandler();
        java.util.concurrent.Executor executor56 = restAdapter53.getcallbackExecutor();
        retrofit.converter.Converter converter57 = restAdapter53.converter;
        retrofit.Server server58 = restAdapter53.getserver();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter53.getLogLevel();
        restAdapter36.setLogLevel(logLevel59);
        restAdapter21.logLevel = logLevel59;
        retrofit.client.Client.Provider provider62 = restAdapter21.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter21.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder2.setLogLevel(logLevel63);
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor66 = serializedObjectSupporter65.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter65.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter65.deserializeObjectConverter5();
        retrofit.client.Request request69 = serializedObjectSupporter65.deserializeObjectRequest2();
        retrofit.ErrorHandler errorHandler70 = serializedObjectSupporter65.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder71 = builder64.setErrorHandler(errorHandler70);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4000 + "'", int38 == 4000);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-Idle" + "'", str42, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(request69);
        org.junit.Assert.assertNotNull(errorHandler70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder2.logLevel;
        retrofit.Profiler profiler9 = null;
        builder2.profiler = profiler9;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = builder14.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler22;
        retrofit.RestAdapter.Log log24 = builder14.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter39.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter1();
        restHandler38.serializedObjectSupporter = serializedObjectSupporter39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = restHandler38.serializedObjectSupporter;
        java.lang.String str45 = serializedObjectSupporter44.deserializeObjectString5();
        builder14.serializedObjectSupporter = serializedObjectSupporter44;
        restHandler13.serializedObjectSupporter = serializedObjectSupporter44;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter48 = serializedObjectSupporter44.deserializeObjectLogLevel1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(serializedObjectSupporter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "POST" + "'", str45, "POST");
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.converter.Converter converter8 = builder5.converter;
        java.util.concurrent.Executor executor9 = builder5.getcallbackExecutor();
        java.util.concurrent.Executor executor10 = builder5.callbackExecutor;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        builder11.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        java.util.concurrent.Executor executor26 = null;
        builder25.callbackExecutor = executor26;
        retrofit.RestAdapter restAdapter28 = builder25.build();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.sethttpExecutor(executor30);
        retrofit.Profiler profiler32 = null;
        builder29.profiler = profiler32;
        retrofit.RestAdapter.Log log34 = builder29.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter35.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder37 = builder29.setErrorHandler(errorHandler36);
        retrofit.RestAdapter.Builder builder38 = builder25.setErrorHandler(errorHandler36);
        java.util.concurrent.Executor executor39 = builder38.callbackExecutor;
        builder11.setcallbackExecutor(executor39);
        builder5.httpExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter42.deserializeObjectConverter8();
        retrofit.client.Request request47 = serializedObjectSupporter42.deserializeObjectRequest5();
        retrofit.Server server48 = serializedObjectSupporter42.deserializeObjectServer1();
        builder5.server = server48;
        builder0.server = server48;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        java.util.concurrent.Executor executor54 = null;
        builder53.callbackExecutor = executor54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Log log57 = restAdapter56.log;
        java.lang.String str58 = restAdapter56.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler59 = restAdapter56.geterrorHandler();
        retrofit.client.Client.Provider provider60 = restAdapter56.getclientProvider();
        retrofit.Server server61 = restAdapter56.server;
        retrofit.RestAdapter.Builder builder62 = builder0.setServer(server61);
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor64 = serializedObjectSupporter63.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter63.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter63.deserializeObjectConverter7();
        retrofit.Server server67 = serializedObjectSupporter63.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder68 = builder62.setServer(server67);
        java.util.concurrent.Executor executor69 = builder68.getcallbackExecutor();
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(restAdapter28);
        org.junit.Assert.assertNull(log34);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(executor39);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(gsonConverter46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertNotNull(server48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Retrofit-Idle" + "'", str58, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler59);
        org.junit.Assert.assertNotNull(provider60);
        org.junit.Assert.assertNotNull(server61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(requestInterceptor64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(server67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(executor69);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server16 = restAdapter10.server;
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        retrofit.client.Request request18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = restAdapter10.logAndReplaceRequest(request18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel15 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.client.Response response18 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response20 = restAdapter10.logAndReplaceResponse("POST", response18, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log16);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        int int26 = restAdapter24.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log27 = restAdapter24.log;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter24.getLogLevel();
        restAdapter10.logLevel = logLevel28;
        retrofit.ErrorHandler errorHandler30 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler31 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Log log43 = builder38.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder46 = builder38.setErrorHandler(errorHandler45);
        retrofit.RestAdapter.Builder builder47 = builder34.setErrorHandler(errorHandler45);
        retrofit.converter.Converter converter48 = null;
        builder47.converter = converter48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter50.deserializeObjectConverter2();
        retrofit.client.Request request52 = serializedObjectSupporter50.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.mime.TypedString typedString54 = serializedObjectSupporter50.deserializeObjectTypedOutput2();
        builder47.serializedObjectSupporter = serializedObjectSupporter50;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter50;
        retrofit.converter.Converter converter57 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4000 + "'", int26 == 4000);
        org.junit.Assert.assertNull(log27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertNull(errorHandler31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(typedString54);
        org.junit.Assert.assertNull(converter57);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        builder0.log = log6;
        java.util.concurrent.Executor executor8 = builder0.gethttpExecutor();
        java.util.concurrent.Executor executor9 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(serializedObjectSupporter10);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.Server server29 = builder24.server;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        retrofit.client.Client.Provider provider33 = builder30.clientProvider;
        retrofit.RequestInterceptor requestInterceptor34 = builder30.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server42 = null;
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        builder30.log = log44;
        builder24.log = log44;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.sethttpExecutor(executor49);
        retrofit.Profiler profiler51 = null;
        builder48.profiler = profiler51;
        retrofit.RestAdapter.LogLevel logLevel53 = builder48.logLevel;
        java.util.concurrent.Executor executor54 = null;
        builder48.sethttpExecutor(executor54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("hi!");
        java.util.concurrent.Executor executor59 = null;
        builder58.callbackExecutor = executor59;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder63 = builder58.setRequestInterceptor(requestInterceptor62);
        retrofit.RestAdapter.Builder builder64 = builder48.setRequestInterceptor(requestInterceptor62);
        java.util.concurrent.Executor executor65 = builder64.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.Server server70 = serializedObjectSupporter66.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        java.util.concurrent.Executor executor72 = null;
        builder71.sethttpExecutor(executor72);
        retrofit.Server server74 = builder71.server;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("hi!");
        java.util.concurrent.Executor executor78 = null;
        builder77.callbackExecutor = executor78;
        retrofit.RestAdapter restAdapter80 = builder77.build();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.sethttpExecutor(executor82);
        retrofit.Profiler profiler84 = null;
        builder81.profiler = profiler84;
        retrofit.RestAdapter.Log log86 = builder81.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter87 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler88 = serializedObjectSupporter87.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder89 = builder81.setErrorHandler(errorHandler88);
        retrofit.RestAdapter.Builder builder90 = builder77.setErrorHandler(errorHandler88);
        java.util.concurrent.Executor executor91 = builder90.callbackExecutor;
        builder71.callbackExecutor = executor91;
        java.util.concurrent.Executor executor93 = builder71.gethttpExecutor();
        java.util.concurrent.Executor executor94 = builder71.callbackExecutor;
        builder24.setcallbackExecutor(executor94);
        builder0.setcallbackExecutor(executor94);
        retrofit.RestAdapter.Builder builder98 = builder0.setServer("GET");
        retrofit.converter.Converter converter99 = builder0.converter;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(executor94);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNull(converter99);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.util.concurrent.Executor executor7 = restAdapter5.gethttpExecutor();
        java.lang.String str8 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log9 = restAdapter5.log;
        retrofit.Profiler profiler10 = restAdapter5.getprofiler();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        int int23 = restAdapter21.getLOG_CHUNK_SIZE();
        retrofit.Server server24 = restAdapter21.getserver();
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        restAdapter21.logLevel = logLevel34;
        retrofit.Server server37 = restAdapter21.getserver();
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter21.new RestHandler();
        retrofit.RestAdapter.LogLevel logLevel39 = restAdapter21.logLevel;
        retrofit.Server server40 = null;
        retrofit.client.Client.Provider provider41 = null;
        java.util.concurrent.Executor executor42 = null;
        java.util.concurrent.Executor executor43 = null;
        retrofit.RequestInterceptor requestInterceptor44 = null;
        retrofit.converter.Converter converter45 = null;
        retrofit.Profiler profiler46 = null;
        retrofit.ErrorHandler errorHandler47 = null;
        retrofit.RestAdapter.Log log48 = null;
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter50 = new retrofit.RestAdapter(server40, provider41, executor42, executor43, requestInterceptor44, converter45, profiler46, errorHandler47, log48, logLevel49);
        retrofit.ErrorHandler errorHandler51 = restAdapter50.errorHandler;
        int int52 = restAdapter50.getLOG_CHUNK_SIZE();
        retrofit.Server server53 = restAdapter50.getserver();
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = null;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        restAdapter50.logLevel = logLevel63;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter50.setLogLevel(logLevel66);
        boolean boolean68 = logLevel66.log();
        restAdapter21.setLogLevel(logLevel66);
        restAdapter5.setLogLevel(logLevel66);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(executor7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(log9);
        org.junit.Assert.assertNull(profiler10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4000 + "'", int52 == 4000);
        org.junit.Assert.assertNull(server53);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder12 = builder7.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder13 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.client.Request request7 = serializedObjectSupporter4.deserializeObjectRequest2();
        java.lang.String str8 = serializedObjectSupporter4.deserializeObjectString4();
        builder2.serializedObjectSupporter = serializedObjectSupporter4;
        java.util.concurrent.Executor executor10 = builder2.gethttpExecutor();
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        int int23 = restAdapter21.getLOG_CHUNK_SIZE();
        retrofit.Server server24 = restAdapter21.getserver();
        java.util.concurrent.Executor executor25 = restAdapter21.getcallbackExecutor();
        retrofit.Server server26 = null;
        retrofit.client.Client.Provider provider27 = null;
        java.util.concurrent.Executor executor28 = null;
        java.util.concurrent.Executor executor29 = null;
        retrofit.RequestInterceptor requestInterceptor30 = null;
        retrofit.converter.Converter converter31 = null;
        retrofit.Profiler profiler32 = null;
        retrofit.ErrorHandler errorHandler33 = null;
        retrofit.RestAdapter.Log log34 = null;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter36 = new retrofit.RestAdapter(server26, provider27, executor28, executor29, requestInterceptor30, converter31, profiler32, errorHandler33, log34, logLevel35);
        retrofit.ErrorHandler errorHandler37 = restAdapter36.errorHandler;
        int int38 = restAdapter36.getLOG_CHUNK_SIZE();
        retrofit.Server server39 = restAdapter36.getserver();
        retrofit.client.Client.Provider provider40 = restAdapter36.clientProvider;
        retrofit.client.Client.Provider provider41 = restAdapter36.getclientProvider();
        java.lang.String str42 = restAdapter36.getIDLE_THREAD_NAME();
        retrofit.Server server43 = null;
        retrofit.client.Client.Provider provider44 = null;
        java.util.concurrent.Executor executor45 = null;
        java.util.concurrent.Executor executor46 = null;
        retrofit.RequestInterceptor requestInterceptor47 = null;
        retrofit.converter.Converter converter48 = null;
        retrofit.Profiler profiler49 = null;
        retrofit.ErrorHandler errorHandler50 = null;
        retrofit.RestAdapter.Log log51 = null;
        retrofit.RestAdapter.LogLevel logLevel52 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter53 = new retrofit.RestAdapter(server43, provider44, executor45, executor46, requestInterceptor47, converter48, profiler49, errorHandler50, log51, logLevel52);
        retrofit.RestAdapter.LogLevel logLevel54 = restAdapter53.logLevel;
        retrofit.ErrorHandler errorHandler55 = restAdapter53.geterrorHandler();
        java.util.concurrent.Executor executor56 = restAdapter53.getcallbackExecutor();
        retrofit.converter.Converter converter57 = restAdapter53.converter;
        retrofit.Server server58 = restAdapter53.getserver();
        retrofit.RestAdapter.LogLevel logLevel59 = restAdapter53.getLogLevel();
        restAdapter36.setLogLevel(logLevel59);
        restAdapter21.logLevel = logLevel59;
        retrofit.client.Client.Provider provider62 = restAdapter21.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter21.logLevel;
        retrofit.RestAdapter.Builder builder64 = builder2.setLogLevel(logLevel63);
        retrofit.converter.Converter converter65 = builder64.converter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4000 + "'", int23 == 4000);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4000 + "'", int38 == 4000);
        org.junit.Assert.assertNull(server39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Retrofit-Idle" + "'", str42, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler55);
        org.junit.Assert.assertNull(executor56);
        org.junit.Assert.assertNull(converter57);
        org.junit.Assert.assertNull(server58);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(converter65);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(requestInterceptor5);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.RestAdapter.LogLevel logLevel25 = restAdapter24.logLevel;
        restAdapter10.logLevel = logLevel25;
        retrofit.client.Response response28 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Response response30 = restAdapter10.logAndReplaceResponse("hi!", response28, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.mime.TypedOutput typedOutput6 = request5.body;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(typedOutput6);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter3();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(errorHandler21);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.mime.TypedOutput typedOutput5 = request4.getBody();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(typedOutput5);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(typedString5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        java.util.concurrent.Executor executor24 = builder0.gethttpExecutor();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(executor24);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str5 = request4.getUrl();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter4();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        java.util.concurrent.Executor executor3 = builder0.httpExecutor;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter5.deserializeObjectConverter8();
        java.lang.String str8 = serializedObjectSupporter5.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter10.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter10.deserializeObjectConverter5();
        retrofit.client.Request request14 = serializedObjectSupporter10.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter10.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter10.deserializeObjectConverter6();
        builder0.converter = gsonConverter16;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder19 = builder0.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Retrofit-Idle" + "'", str8, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(gsonConverter16);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.geterrorHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter35.converter;
        retrofit.Server server40 = restAdapter35.getserver();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.logLevel = logLevel41;
        java.util.concurrent.Executor executor43 = restAdapter10.gethttpExecutor();
        retrofit.Profiler profiler44 = restAdapter10.profiler;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(profiler44);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString5();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "POST" + "'", str5, "POST");
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel14 = restAdapter10.getLogLevel();
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest6();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        retrofit.RequestInterceptor requestInterceptor22 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter23 = restAdapter10.getconverter();
        java.util.concurrent.Executor executor24 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler25 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restHandler25.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(log13);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(serializedObjectSupporter26);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        java.util.concurrent.Executor executor15 = builder11.gethttpExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder23 = builder18.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder24 = builder11.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        builder25.errorHandler = errorHandler33;
        retrofit.Server server35 = builder25.server;
        builder25.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("hi!");
        java.util.concurrent.Executor executor41 = null;
        builder40.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = builder40.build();
        retrofit.RestAdapter.Log log44 = restAdapter43.log;
        builder25.log = log44;
        log44.log("Retrofit-");
        builder24.log = log44;
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log44);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder51 = builder49.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.Server server5 = null;
        retrofit.client.Client.Provider provider6 = null;
        java.util.concurrent.Executor executor7 = null;
        java.util.concurrent.Executor executor8 = null;
        retrofit.RequestInterceptor requestInterceptor9 = null;
        retrofit.converter.Converter converter10 = null;
        retrofit.Profiler profiler11 = null;
        retrofit.ErrorHandler errorHandler12 = null;
        retrofit.RestAdapter.Log log13 = null;
        retrofit.RestAdapter.LogLevel logLevel14 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter15 = new retrofit.RestAdapter(server5, provider6, executor7, executor8, requestInterceptor9, converter10, profiler11, errorHandler12, log13, logLevel14);
        retrofit.ErrorHandler errorHandler16 = restAdapter15.errorHandler;
        int int17 = restAdapter15.getLOG_CHUNK_SIZE();
        retrofit.Server server18 = restAdapter15.getserver();
        retrofit.client.Client.Provider provider19 = restAdapter15.clientProvider;
        retrofit.client.Client.Provider provider20 = restAdapter15.getclientProvider();
        java.lang.String str21 = restAdapter15.getIDLE_THREAD_NAME();
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.RestAdapter.LogLevel logLevel33 = restAdapter32.logLevel;
        retrofit.ErrorHandler errorHandler34 = restAdapter32.geterrorHandler();
        java.util.concurrent.Executor executor35 = restAdapter32.getcallbackExecutor();
        retrofit.converter.Converter converter36 = restAdapter32.converter;
        retrofit.Server server37 = restAdapter32.getserver();
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter32.getLogLevel();
        restAdapter15.setLogLevel(logLevel38);
        retrofit.RestAdapter.Builder builder40 = builder0.setLogLevel(logLevel38);
        java.util.concurrent.Executor executor41 = builder40.callbackExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4000 + "'", int17 == 4000);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNull(provider20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNull(server37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor41);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RestAdapter.Log log6 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder7 = builder0.setLog(log6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.Profiler profiler9 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder10 = builder0.setProfiler(profiler9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.ErrorHandler errorHandler19 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.client.Request request29 = serializedObjectSupporter26.deserializeObjectRequest1();
        builder20.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Request request31 = serializedObjectSupporter26.deserializeObjectRequest2();
        retrofit.client.Request request32 = serializedObjectSupporter26.deserializeObjectRequest5();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        java.lang.String str35 = serializedObjectSupporter34.deserializeObjectString3();
        java.lang.String str36 = serializedObjectSupporter34.deserializeObjectString4();
        retrofit.client.Request request37 = serializedObjectSupporter34.deserializeObjectRequest2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = restAdapter10.logAndReplaceRequest(request37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(errorHandler19);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "http://example.com/" + "'", str36, "http://example.com/");
        org.junit.Assert.assertNotNull(request37);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder7.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder7.setRequestInterceptor(requestInterceptor24);
        builder0.requestInterceptor = requestInterceptor24;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        java.lang.String str29 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder32 = builder0.setConverter((retrofit.converter.Converter) gsonConverter31);
        java.util.concurrent.Executor executor33 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor34 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.converter.Converter converter38 = builder35.converter;
        java.util.concurrent.Executor executor39 = builder35.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = builder35.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request42 = serializedObjectSupporter41.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler43 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        builder35.errorHandler = errorHandler43;
        retrofit.Server server45 = builder35.server;
        builder35.ensureSaneDefaults();
        java.util.concurrent.Executor executor47 = builder35.gethttpExecutor();
        builder0.httpExecutor = executor47;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor50 = null;
        builder49.sethttpExecutor(executor50);
        retrofit.converter.Converter converter52 = builder49.converter;
        java.util.concurrent.Executor executor53 = builder49.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor54 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.converter.Converter converter58 = builder55.converter;
        java.util.concurrent.Executor executor59 = builder55.getcallbackExecutor();
        retrofit.client.Client.Provider provider60 = builder55.getclientProvider();
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        java.util.concurrent.Executor executor64 = null;
        builder63.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = builder63.build();
        retrofit.RestAdapter.Log log67 = restAdapter66.log;
        java.util.concurrent.Executor executor68 = restAdapter66.gethttpExecutor();
        retrofit.client.Client.Provider provider69 = restAdapter66.getclientProvider();
        builder55.setclientProvider(provider69);
        retrofit.RestAdapter.Builder builder71 = builder49.setClient(provider69);
        builder0.clientProvider = provider69;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(errorHandler43);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNull(converter52);
        org.junit.Assert.assertNull(executor53);
        org.junit.Assert.assertNull(requestInterceptor54);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNull(executor59);
        org.junit.Assert.assertNull(provider60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNotNull(log67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(provider69);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        int int14 = restAdapter10.getLOG_CHUNK_SIZE();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4000 + "'", int14 == 4000);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter6.deserializeObjectConverter3();
        retrofit.client.Request request14 = serializedObjectSupporter6.deserializeObjectRequest3();
        java.lang.String str15 = request14.getUrl();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "http://example.com/" + "'", str15, "http://example.com/");
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel20);
        retrofit.Server server22 = restAdapter10.server;
        retrofit.Profiler profiler23 = restAdapter10.profiler;
        java.lang.String str24 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        java.util.concurrent.Executor executor37 = restAdapter35.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel38 = restAdapter35.getLogLevel();
        retrofit.client.Client.Provider provider39 = restAdapter35.clientProvider;
        java.util.concurrent.Executor executor40 = restAdapter35.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.setLogLevel(logLevel41);
        boolean boolean43 = logLevel41.log();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNull(profiler23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Retrofit-Idle" + "'", str24, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(executor37);
        org.junit.Assert.assertTrue("'" + logLevel38 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel38.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.client.Client.Provider provider23 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter24 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor25 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider26 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertNull(provider23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(requestInterceptor25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNull(requestInterceptor27);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.LogLevel logLevel42 = builder37.logLevel;
        java.util.concurrent.Executor executor43 = null;
        builder37.sethttpExecutor(executor43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        java.util.concurrent.Executor executor48 = null;
        builder47.callbackExecutor = executor48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder52 = builder47.setRequestInterceptor(requestInterceptor51);
        retrofit.RestAdapter.Builder builder53 = builder37.setRequestInterceptor(requestInterceptor51);
        java.util.concurrent.Executor executor54 = builder53.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter55.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter55.deserializeObjectConverter7();
        retrofit.Server server59 = serializedObjectSupporter55.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        java.util.concurrent.Executor executor64 = null;
        builder63.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = builder63.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.sethttpExecutor(executor68);
        retrofit.Profiler profiler70 = null;
        builder67.profiler = profiler70;
        retrofit.RestAdapter.Log log72 = builder67.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder75 = builder67.setErrorHandler(errorHandler74);
        retrofit.RestAdapter.Builder builder76 = builder63.setErrorHandler(errorHandler74);
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        builder60.sethttpExecutor(executor77);
        builder36.sethttpExecutor(executor77);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor81 = serializedObjectSupporter80.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter82 = serializedObjectSupporter80.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter80.deserializeObjectConverter5();
        retrofit.client.Request request84 = serializedObjectSupporter80.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter85 = serializedObjectSupporter80.deserializeObjectConverter3();
        retrofit.client.Request request86 = serializedObjectSupporter80.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter87 = serializedObjectSupporter80.deserializeObjectConverter5();
        builder36.converter = gsonConverter87;
        java.util.concurrent.Executor executor89 = null;
        builder36.callbackExecutor = executor89;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(gsonConverter82);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(request84);
        org.junit.Assert.assertNotNull(gsonConverter85);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(gsonConverter87);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        retrofit.mime.TypedOutput typedOutput6 = request4.getBody();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertNull(typedOutput6);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.mime.TypedOutput typedOutput6 = request5.getBody();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNull(typedOutput6);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        builder0.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.Server server17 = builder7.server;
        builder7.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor19 = builder7.requestInterceptor;
        java.util.concurrent.Executor executor20 = builder7.gethttpExecutor();
        builder0.callbackExecutor = executor20;
        retrofit.Profiler profiler22 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder23 = builder0.setProfiler(profiler22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(executor20);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.RestAdapter.Log log9 = builder4.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder12 = builder4.setErrorHandler(errorHandler11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean19 = logLevel18.log();
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.getcallbackExecutor();
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server25 = null;
        builder21.server = server25;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log27;
        builder13.log = log27;
        retrofit.RestAdapter.Builder builder30 = builder12.setLog(log27);
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log27);
        retrofit.converter.Converter converter32 = builder0.converter;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(converter32);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter18.deserializeObjectConverter2();
        retrofit.client.Request request20 = serializedObjectSupporter18.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.mime.TypedString typedString22 = serializedObjectSupporter18.deserializeObjectTypedOutput2();
        builder15.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.Server server29 = builder24.server;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        retrofit.client.Client.Provider provider33 = builder30.clientProvider;
        retrofit.RequestInterceptor requestInterceptor34 = builder30.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel35 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean36 = logLevel35.log();
        retrofit.RestAdapter.Builder builder37 = builder30.setLogLevel(logLevel35);
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = builder38.getcallbackExecutor();
        retrofit.client.Client.Provider provider40 = null;
        builder38.clientProvider = provider40;
        retrofit.Server server42 = null;
        builder38.server = server42;
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        builder38.log = log44;
        builder30.log = log44;
        builder24.log = log44;
        retrofit.RestAdapter.Builder builder48 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor49 = null;
        builder48.sethttpExecutor(executor49);
        retrofit.Profiler profiler51 = null;
        builder48.profiler = profiler51;
        retrofit.RestAdapter.LogLevel logLevel53 = builder48.logLevel;
        java.util.concurrent.Executor executor54 = null;
        builder48.sethttpExecutor(executor54);
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("hi!");
        java.util.concurrent.Executor executor59 = null;
        builder58.callbackExecutor = executor59;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder63 = builder58.setRequestInterceptor(requestInterceptor62);
        retrofit.RestAdapter.Builder builder64 = builder48.setRequestInterceptor(requestInterceptor62);
        java.util.concurrent.Executor executor65 = builder64.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter66 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor67 = serializedObjectSupporter66.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter68 = serializedObjectSupporter66.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter66.deserializeObjectConverter7();
        retrofit.Server server70 = serializedObjectSupporter66.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder71 = builder64.setServer(server70);
        java.util.concurrent.Executor executor72 = null;
        builder71.sethttpExecutor(executor72);
        retrofit.Server server74 = builder71.server;
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("hi!");
        java.util.concurrent.Executor executor78 = null;
        builder77.callbackExecutor = executor78;
        retrofit.RestAdapter restAdapter80 = builder77.build();
        retrofit.RestAdapter.Builder builder81 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor82 = null;
        builder81.sethttpExecutor(executor82);
        retrofit.Profiler profiler84 = null;
        builder81.profiler = profiler84;
        retrofit.RestAdapter.Log log86 = builder81.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter87 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler88 = serializedObjectSupporter87.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder89 = builder81.setErrorHandler(errorHandler88);
        retrofit.RestAdapter.Builder builder90 = builder77.setErrorHandler(errorHandler88);
        java.util.concurrent.Executor executor91 = builder90.callbackExecutor;
        builder71.callbackExecutor = executor91;
        java.util.concurrent.Executor executor93 = builder71.gethttpExecutor();
        java.util.concurrent.Executor executor94 = builder71.callbackExecutor;
        builder24.setcallbackExecutor(executor94);
        builder15.sethttpExecutor(executor94);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(typedString22);
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(requestInterceptor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertTrue("'" + logLevel53 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel53.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(executor65);
        org.junit.Assert.assertNotNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(gsonConverter68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(server70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(server74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNull(log86);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(executor91);
        org.junit.Assert.assertNull(executor93);
        org.junit.Assert.assertNotNull(executor94);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        builder13.ensureSaneDefaults();
        builder13.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        java.util.concurrent.Executor executor20 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request22 = serializedObjectSupporter21.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter21.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString24 = serializedObjectSupporter21.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter21.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler25;
        retrofit.client.Client.Provider provider27 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Profiler profiler31 = null;
        builder28.profiler = profiler31;
        retrofit.RestAdapter.LogLevel logLevel33 = builder28.logLevel;
        java.util.concurrent.Executor executor34 = null;
        builder28.sethttpExecutor(executor34);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder38 = builder36.setServer("hi!");
        java.util.concurrent.Executor executor39 = null;
        builder38.callbackExecutor = executor39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder43 = builder38.setRequestInterceptor(requestInterceptor42);
        retrofit.RestAdapter.Builder builder44 = builder28.setRequestInterceptor(requestInterceptor42);
        java.util.concurrent.Executor executor45 = builder44.httpExecutor;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        retrofit.RequestInterceptor requestInterceptor50 = builder46.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        retrofit.client.Client.Provider provider54 = builder51.clientProvider;
        java.util.concurrent.Executor executor55 = null;
        builder51.setcallbackExecutor(executor55);
        retrofit.RestAdapter.Log log57 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder58 = builder51.setLog(log57);
        retrofit.RestAdapter.Builder builder59 = builder46.setLog(log57);
        builder44.log = log57;
        log57.log("");
        builder0.log = log57;
        retrofit.RestAdapter.LogLevel logLevel64 = builder0.logLevel;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNull(executor20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(typedString24);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(provider54);
        org.junit.Assert.assertNotNull(log57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.client.Client.Provider provider8 = builder0.clientProvider;
        retrofit.ErrorHandler errorHandler9 = builder0.errorHandler;
        retrofit.client.Client.Provider provider10 = builder0.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNull(errorHandler9);
        org.junit.Assert.assertNull(provider10);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.LogLevel logLevel8 = builder2.logLevel;
        retrofit.converter.Converter converter9 = builder2.converter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter9);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor17 = restAdapter10.httpExecutor;
        retrofit.converter.Converter converter18 = restAdapter10.converter;
        retrofit.Server server19 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(server19);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.LogLevel logLevel18 = restAdapter10.getLogLevel();
        retrofit.RequestInterceptor requestInterceptor19 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor19);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.converter.Converter converter14 = restAdapter10.getconverter();
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider17 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        retrofit.client.Client.Provider provider19 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter10.setLogLevel(logLevel20);
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server23 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter22);
        org.junit.Assert.assertNull(server23);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.util.List<retrofit.client.Header> headerList5 = request4.headers;
        java.lang.String str6 = request4.getUrl();
        java.lang.String str7 = request4.getUrl();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "http://example.com/" + "'", str6, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "http://example.com/" + "'", str7, "http://example.com/");
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = restAdapter10.serializedObjectSupporter;
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        retrofit.ErrorHandler errorHandler25 = restAdapter24.errorHandler;
        retrofit.ErrorHandler errorHandler26 = restAdapter24.errorHandler;
        retrofit.ErrorHandler errorHandler27 = restAdapter24.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor28 = restAdapter24.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = restAdapter24.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = builder30.logLevel;
        restAdapter24.setLogLevel(logLevel35);
        restAdapter10.setLogLevel(logLevel35);
        retrofit.converter.Converter converter38 = restAdapter10.converter;
        retrofit.Server server39 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler25);
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(requestInterceptor28);
        org.junit.Assert.assertNull(serializedObjectSupporter29);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter38);
        org.junit.Assert.assertNull(server39);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = request4.method;
        java.lang.String str6 = request4.method;
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "POST" + "'", str5, "POST");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.Server server18 = restAdapter10.server;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(server18);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        java.util.concurrent.Executor executor18 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor19 = builder15.gethttpExecutor();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler21 = builder20.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request23 = serializedObjectSupporter22.deserializeObjectRequest6();
        builder20.serializedObjectSupporter = serializedObjectSupporter22;
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        retrofit.Server server29 = null;
        builder25.server = server29;
        retrofit.RestAdapter.Log log31 = retrofit.RestAdapter.Log.NONE;
        builder25.log = log31;
        retrofit.converter.Converter converter33 = builder25.converter;
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = null;
        builder34.sethttpExecutor(executor35);
        retrofit.converter.Converter converter37 = builder34.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter38 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor39 = serializedObjectSupporter38.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter40 = serializedObjectSupporter38.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.Server server42 = serializedObjectSupporter38.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter38.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter38.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder45 = builder34.setErrorHandler(errorHandler44);
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.converter.Converter converter49 = builder46.converter;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.sethttpExecutor(executor51);
        retrofit.converter.Converter converter53 = builder50.converter;
        java.util.concurrent.Executor executor54 = builder50.getcallbackExecutor();
        retrofit.client.Client.Provider provider55 = builder50.getclientProvider();
        retrofit.RestAdapter.Builder builder56 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder58 = builder56.setServer("hi!");
        java.util.concurrent.Executor executor59 = null;
        builder58.callbackExecutor = executor59;
        retrofit.RestAdapter restAdapter61 = builder58.build();
        retrofit.RestAdapter.Log log62 = restAdapter61.log;
        java.util.concurrent.Executor executor63 = restAdapter61.gethttpExecutor();
        retrofit.client.Client.Provider provider64 = restAdapter61.getclientProvider();
        builder50.setclientProvider(provider64);
        retrofit.RestAdapter.Builder builder66 = builder46.setClient(provider64);
        builder45.clientProvider = provider64;
        retrofit.RestAdapter.Builder builder68 = builder25.setClient(provider64);
        retrofit.Server server69 = null;
        retrofit.client.Client.Provider provider70 = null;
        java.util.concurrent.Executor executor71 = null;
        java.util.concurrent.Executor executor72 = null;
        retrofit.RequestInterceptor requestInterceptor73 = null;
        retrofit.converter.Converter converter74 = null;
        retrofit.Profiler profiler75 = null;
        retrofit.ErrorHandler errorHandler76 = null;
        retrofit.RestAdapter.Log log77 = null;
        retrofit.RestAdapter.LogLevel logLevel78 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter79 = new retrofit.RestAdapter(server69, provider70, executor71, executor72, requestInterceptor73, converter74, profiler75, errorHandler76, log77, logLevel78);
        retrofit.ErrorHandler errorHandler80 = restAdapter79.errorHandler;
        int int81 = restAdapter79.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log82 = restAdapter79.log;
        retrofit.RestAdapter.LogLevel logLevel83 = restAdapter79.getLogLevel();
        retrofit.RestAdapter.Builder builder84 = builder68.setLogLevel(logLevel83);
        builder20.logLevel = logLevel83;
        builder15.logLevel = logLevel83;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNull(errorHandler21);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(log31);
        org.junit.Assert.assertNull(converter33);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNotNull(requestInterceptor39);
        org.junit.Assert.assertNotNull(gsonConverter40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(server42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(restAdapter61);
        org.junit.Assert.assertNotNull(log62);
        org.junit.Assert.assertNotNull(executor63);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + logLevel78 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel78.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4000 + "'", int81 == 4000);
        org.junit.Assert.assertNull(log82);
        org.junit.Assert.assertTrue("'" + logLevel83 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel83.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder7.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder7.setRequestInterceptor(requestInterceptor24);
        builder0.requestInterceptor = requestInterceptor24;
        retrofit.RequestInterceptor requestInterceptor28 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor30 = null;
        builder29.sethttpExecutor(executor30);
        retrofit.client.Client.Provider provider32 = builder29.getclientProvider();
        retrofit.client.Client.Provider provider33 = builder29.getclientProvider();
        retrofit.Server server34 = builder29.server;
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.Server server40 = builder35.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor42 = serializedObjectSupporter41.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter41.deserializeObjectConverter7();
        retrofit.client.Request request44 = serializedObjectSupporter41.deserializeObjectRequest1();
        builder35.serializedObjectSupporter = serializedObjectSupporter41;
        retrofit.client.Request request46 = serializedObjectSupporter41.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString47 = serializedObjectSupporter41.deserializeObjectTypedOutput2();
        builder29.serializedObjectSupporter = serializedObjectSupporter41;
        builder0.serializedObjectSupporter = serializedObjectSupporter41;
        retrofit.Server server50 = builder0.server;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertNull(server34);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertNotNull(requestInterceptor42);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(request44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(typedString47);
        org.junit.Assert.assertNull(server50);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        java.lang.String str22 = serializedObjectSupporter17.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler23 = serializedObjectSupporter17.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder24 = builder0.setErrorHandler(errorHandler23);
        retrofit.client.Client.Provider provider25 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        java.util.concurrent.Executor executor29 = null;
        builder28.callbackExecutor = executor29;
        retrofit.RestAdapter restAdapter31 = builder28.build();
        retrofit.RestAdapter.Log log32 = restAdapter31.log;
        java.util.concurrent.Executor executor33 = restAdapter31.gethttpExecutor();
        java.lang.String str34 = restAdapter31.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.Log log35 = restAdapter31.log;
        retrofit.RestAdapter.Log log36 = restAdapter31.log;
        retrofit.RestAdapter.Builder builder37 = builder0.setLog(log36);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-Idle" + "'", str22, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(provider25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(restAdapter31);
        org.junit.Assert.assertNotNull(log32);
        org.junit.Assert.assertNotNull(executor33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(log35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler12 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter6.deserializeObjectConverter2();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter14);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections5 = serializedObjectSupporter0.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder12 = builder7.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder13 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.Server server14 = builder0.server;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(server14);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request20 = serializedObjectSupporter12.deserializeObjectRequest4();
        retrofit.client.Request request21 = serializedObjectSupporter12.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter12.deserializeObjectConverter3();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.converter.Converter converter9 = builder6.converter;
        java.util.concurrent.Executor executor10 = builder6.getcallbackExecutor();
        retrofit.client.Client.Provider provider11 = builder6.getclientProvider();
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        java.util.concurrent.Executor executor15 = null;
        builder14.callbackExecutor = executor15;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder19 = builder14.setRequestInterceptor(requestInterceptor18);
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter1();
        builder19.converter = gsonConverter23;
        retrofit.RestAdapter.Builder builder25 = builder6.setConverter((retrofit.converter.Converter) gsonConverter23);
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RequestInterceptor requestInterceptor30 = builder26.requestInterceptor;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        retrofit.client.Client.Provider provider34 = builder31.clientProvider;
        java.util.concurrent.Executor executor35 = null;
        builder31.setcallbackExecutor(executor35);
        retrofit.RestAdapter.Log log37 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder38 = builder31.setLog(log37);
        retrofit.RestAdapter.Builder builder39 = builder26.setLog(log37);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.Profiler profiler43 = null;
        builder40.profiler = profiler43;
        retrofit.Server server45 = builder40.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter46 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor47 = serializedObjectSupporter46.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter46.deserializeObjectConverter7();
        retrofit.client.Request request49 = serializedObjectSupporter46.deserializeObjectRequest1();
        builder40.serializedObjectSupporter = serializedObjectSupporter46;
        builder40.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder52 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder54 = builder52.setServer("hi!");
        java.util.concurrent.Executor executor55 = null;
        builder54.callbackExecutor = executor55;
        retrofit.RestAdapter restAdapter57 = builder54.build();
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor59 = null;
        builder58.sethttpExecutor(executor59);
        retrofit.Profiler profiler61 = null;
        builder58.profiler = profiler61;
        retrofit.RestAdapter.Log log63 = builder58.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler65 = serializedObjectSupporter64.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder66 = builder58.setErrorHandler(errorHandler65);
        retrofit.RestAdapter.Builder builder67 = builder54.setErrorHandler(errorHandler65);
        java.util.concurrent.Executor executor68 = builder67.callbackExecutor;
        builder40.setcallbackExecutor(executor68);
        builder39.callbackExecutor = executor68;
        builder25.httpExecutor = executor68;
        java.util.concurrent.Executor executor72 = builder25.httpExecutor;
        builder0.setcallbackExecutor(executor72);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(provider34);
        org.junit.Assert.assertNotNull(log37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(server45);
        org.junit.Assert.assertNotNull(requestInterceptor47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(restAdapter57);
        org.junit.Assert.assertNull(log63);
        org.junit.Assert.assertNotNull(errorHandler65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(executor68);
        org.junit.Assert.assertNotNull(executor72);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        java.lang.String str13 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-" + "'", str13, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNull(requestInterceptor17);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        builder23.sethttpExecutor(executor40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter8();
        builder23.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.Profiler profiler49 = null;
        builder46.profiler = profiler49;
        retrofit.RestAdapter.LogLevel logLevel51 = builder46.logLevel;
        java.util.concurrent.Executor executor52 = null;
        builder46.sethttpExecutor(executor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder56.callbackExecutor = executor57;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder61 = builder56.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder62 = builder46.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder63 = builder23.setRequestInterceptor(requestInterceptor60);
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.client.Request request68 = serializedObjectSupporter64.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter69 = serializedObjectSupporter64.deserializeObjectConverter3();
        retrofit.client.Request request70 = serializedObjectSupporter64.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter64.deserializeObjectConverter5();
        builder23.serializedObjectSupporter = serializedObjectSupporter64;
        retrofit.RestAdapter.Builder builder74 = builder23.setServer("http://example.com/");
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(gsonConverter69);
        org.junit.Assert.assertNotNull(request70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter17.deserializeObjectConverter6();
        retrofit.client.Request request22 = serializedObjectSupporter17.deserializeObjectRequest8();
        java.lang.String str23 = serializedObjectSupporter17.deserializeObjectString3();
        java.lang.String str24 = serializedObjectSupporter17.deserializeObjectString3();
        builder0.serializedObjectSupporter = serializedObjectSupporter17;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GET" + "'", str24, "GET");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.Server server11 = builder0.server;
        java.util.concurrent.Executor executor12 = builder0.getcallbackExecutor();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        int int25 = restAdapter23.getLOG_CHUNK_SIZE();
        retrofit.Server server26 = restAdapter23.getserver();
        retrofit.client.Client.Provider provider27 = restAdapter23.clientProvider;
        retrofit.converter.Converter converter28 = restAdapter23.getconverter();
        retrofit.RequestInterceptor requestInterceptor29 = restAdapter23.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter2();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        java.lang.String str34 = serializedObjectSupporter30.deserializeObjectString4();
        retrofit.mime.TypedString typedString35 = serializedObjectSupporter30.deserializeObjectTypedOutput2();
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.Server server37 = serializedObjectSupporter30.deserializeObjectServer1();
        builder0.server = server37;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4000 + "'", int25 == 4000);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(requestInterceptor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "http://example.com/" + "'", str34, "http://example.com/");
        org.junit.Assert.assertNotNull(typedString35);
        org.junit.Assert.assertNotNull(server37);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        java.lang.String str15 = restAdapter10.getTHREAD_PREFIX();
        retrofit.converter.Converter converter16 = restAdapter10.getconverter();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-" + "'", str15, "Retrofit-");
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        builder2.converter = gsonConverter7;
        retrofit.Server server9 = null;
        retrofit.client.Client.Provider provider10 = null;
        java.util.concurrent.Executor executor11 = null;
        java.util.concurrent.Executor executor12 = null;
        retrofit.RequestInterceptor requestInterceptor13 = null;
        retrofit.converter.Converter converter14 = null;
        retrofit.Profiler profiler15 = null;
        retrofit.ErrorHandler errorHandler16 = null;
        retrofit.RestAdapter.Log log17 = null;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter19 = new retrofit.RestAdapter(server9, provider10, executor11, executor12, requestInterceptor13, converter14, profiler15, errorHandler16, log17, logLevel18);
        retrofit.ErrorHandler errorHandler20 = restAdapter19.errorHandler;
        int int21 = restAdapter19.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = null;
        restAdapter19.serializedObjectSupporter = serializedObjectSupporter22;
        java.util.concurrent.Executor executor24 = restAdapter19.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.client.Request request29 = serializedObjectSupporter25.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter25.deserializeObjectConverter3();
        retrofit.client.Request request31 = serializedObjectSupporter25.deserializeObjectRequest4();
        restAdapter19.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str33 = serializedObjectSupporter25.deserializeObjectString1();
        builder2.serializedObjectSupporter = serializedObjectSupporter25;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter35 = serializedObjectSupporter25.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4000 + "'", int21 == 4000);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(request29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-" + "'", str33, "Retrofit-");
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        builder0.serializedObjectSupporter = serializedObjectSupporter2;
        java.lang.String str5 = serializedObjectSupporter2.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter2.deserializeObjectConverter1();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-Idle" + "'", str5, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter3();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel2();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor27 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertNull(requestInterceptor27);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.converter.Converter converter58 = builder35.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter59.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter59.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter59.deserializeObjectConverter8();
        retrofit.client.Request request64 = serializedObjectSupporter59.deserializeObjectRequest5();
        retrofit.Server server65 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder66 = builder35.setServer(server65);
        builder35.ensureSaneDefaults();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.RequestInterceptor requestInterceptor16 = builder2.requestInterceptor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.RestAdapter.LogLevel logLevel25 = builder20.logLevel;
        java.util.concurrent.Executor executor26 = null;
        builder20.sethttpExecutor(executor26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder35 = builder30.setRequestInterceptor(requestInterceptor34);
        retrofit.RestAdapter.Builder builder36 = builder20.setRequestInterceptor(requestInterceptor34);
        builder19.requestInterceptor = requestInterceptor34;
        builder2.requestInterceptor = requestInterceptor34;
        retrofit.client.Client client39 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder40 = builder2.setClient(client39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", headerList4, typedOutput5);
        retrofit.mime.TypedOutput typedOutput7 = request6.body;
        java.lang.String str8 = request6.getUrl();
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNull(typedOutput7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider9 = null;
        builder7.clientProvider = provider9;
        retrofit.Server server11 = null;
        builder7.server = server11;
        retrofit.RestAdapter.Log log13 = retrofit.RestAdapter.Log.NONE;
        builder7.log = log13;
        retrofit.converter.Converter converter15 = builder7.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request17 = serializedObjectSupporter16.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString19 = serializedObjectSupporter16.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler20 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler20;
        builder0.errorHandler = errorHandler20;
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(executor8);
        org.junit.Assert.assertNotNull(log13);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(typedString19);
        org.junit.Assert.assertNotNull(errorHandler20);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor15 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor15);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.Profiler profiler16 = null;
        builder15.profiler = profiler16;
        java.util.concurrent.Executor executor18 = builder15.callbackExecutor;
        java.util.concurrent.Executor executor19 = builder15.gethttpExecutor();
        retrofit.RestAdapter.Log log20 = builder15.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(executor18);
        org.junit.Assert.assertNotNull(executor19);
        org.junit.Assert.assertNotNull(log20);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.converter.Converter converter23 = builder20.converter;
        java.util.concurrent.Executor executor24 = builder20.getcallbackExecutor();
        java.util.concurrent.Executor executor25 = builder20.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter26.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter26.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder30 = builder20.setConverter((retrofit.converter.Converter) gsonConverter29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.converter.Converter converter34 = builder31.converter;
        java.util.concurrent.Executor executor35 = builder31.getcallbackExecutor();
        java.util.concurrent.Executor executor36 = builder31.callbackExecutor;
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.Server server42 = builder37.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor44 = serializedObjectSupporter43.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter43.deserializeObjectConverter7();
        retrofit.client.Request request46 = serializedObjectSupporter43.deserializeObjectRequest1();
        builder37.serializedObjectSupporter = serializedObjectSupporter43;
        builder37.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        java.util.concurrent.Executor executor52 = null;
        builder51.callbackExecutor = executor52;
        retrofit.RestAdapter restAdapter54 = builder51.build();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter.Log log60 = builder55.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler62 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder63 = builder55.setErrorHandler(errorHandler62);
        retrofit.RestAdapter.Builder builder64 = builder51.setErrorHandler(errorHandler62);
        java.util.concurrent.Executor executor65 = builder64.callbackExecutor;
        builder37.setcallbackExecutor(executor65);
        builder31.httpExecutor = executor65;
        builder20.sethttpExecutor(executor65);
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder71 = builder69.setServer("hi!");
        java.util.concurrent.Executor executor72 = null;
        builder71.callbackExecutor = executor72;
        retrofit.RestAdapter restAdapter74 = builder71.build();
        retrofit.RestAdapter.Log log75 = restAdapter74.log;
        java.util.concurrent.Executor executor76 = restAdapter74.gethttpExecutor();
        retrofit.RestAdapter.Builder builder77 = builder0.setExecutors(executor65, executor76);
        retrofit.Profiler profiler78 = null;
        builder77.profiler = profiler78;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNull(server42);
        org.junit.Assert.assertNotNull(requestInterceptor44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(restAdapter74);
        org.junit.Assert.assertNotNull(log75);
        org.junit.Assert.assertNotNull(executor76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.getLogLevel();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.RestAdapter.LogLevel logLevel19 = builder14.logLevel;
        java.util.concurrent.Executor executor20 = null;
        builder14.sethttpExecutor(executor20);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder24 = builder22.setServer("hi!");
        java.util.concurrent.Executor executor25 = null;
        builder24.callbackExecutor = executor25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder24.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.Builder builder30 = builder14.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean32 = logLevel31.log();
        builder14.logLevel = logLevel31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor35 = serializedObjectSupporter34.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter34.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter34.deserializeObjectConverter5();
        retrofit.client.Request request38 = serializedObjectSupporter34.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter34.deserializeObjectConverter3();
        retrofit.client.Request request40 = serializedObjectSupporter34.deserializeObjectRequest4();
        retrofit.client.Request request41 = serializedObjectSupporter34.deserializeObjectRequest2();
        builder14.serializedObjectSupporter = serializedObjectSupporter34;
        retrofit.converter.GsonConverter gsonConverter43 = serializedObjectSupporter34.deserializeObjectConverter5();
        builder0.serializedObjectSupporter = serializedObjectSupporter34;
        retrofit.client.Request request45 = serializedObjectSupporter34.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(requestInterceptor35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(request38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(request41);
        org.junit.Assert.assertNotNull(gsonConverter43);
        org.junit.Assert.assertNotNull(request45);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        java.lang.String str5 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Retrofit-" + "'", str5, "Retrofit-");
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        retrofit.client.Client.Provider provider8 = builder5.clientProvider;
        java.util.concurrent.Executor executor9 = null;
        builder5.setcallbackExecutor(executor9);
        retrofit.RestAdapter.Log log11 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder12 = builder5.setLog(log11);
        retrofit.RestAdapter.Builder builder13 = builder0.setLog(log11);
        log11.log("");
        log11.log("hi!");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(log11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.client.Request request22 = serializedObjectSupporter12.deserializeObjectRequest6();
        java.lang.String str23 = serializedObjectSupporter12.deserializeObjectString3();
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GET" + "'", str23, "GET");
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        java.util.concurrent.Executor executor4 = builder2.getcallbackExecutor();
        builder2.ensureSaneDefaults();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter17.deserializeObjectConverter5();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.Profiler profiler3 = builder0.profiler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(profiler3);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.RestAdapter.Log log6 = builder0.log;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(log6);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        java.util.concurrent.Executor executor11 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler18 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(errorHandler18);
        org.junit.Assert.assertNull(log19);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.gethttpExecutor();
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.Profiler profiler8 = null;
        builder5.profiler = profiler8;
        retrofit.RestAdapter.LogLevel logLevel10 = builder5.logLevel;
        java.util.concurrent.Executor executor11 = null;
        builder5.sethttpExecutor(executor11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder15.callbackExecutor = executor16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder20 = builder15.setRequestInterceptor(requestInterceptor19);
        retrofit.RestAdapter.Builder builder21 = builder5.setRequestInterceptor(requestInterceptor19);
        java.util.concurrent.Executor executor22 = builder21.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.Server server27 = serializedObjectSupporter23.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder28 = builder21.setServer(server27);
        java.util.concurrent.Executor executor29 = null;
        builder28.sethttpExecutor(executor29);
        retrofit.Server server31 = builder28.server;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.RestAdapter restAdapter37 = builder34.build();
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = null;
        builder38.profiler = profiler41;
        retrofit.RestAdapter.Log log43 = builder38.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler45 = serializedObjectSupporter44.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder46 = builder38.setErrorHandler(errorHandler45);
        retrofit.RestAdapter.Builder builder47 = builder34.setErrorHandler(errorHandler45);
        java.util.concurrent.Executor executor48 = builder47.callbackExecutor;
        builder28.callbackExecutor = executor48;
        java.util.concurrent.Executor executor50 = builder28.gethttpExecutor();
        java.util.concurrent.Executor executor51 = builder28.callbackExecutor;
        builder0.sethttpExecutor(executor51);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertTrue("'" + logLevel10 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel10.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(server27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(restAdapter37);
        org.junit.Assert.assertNull(log43);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(executor48);
        org.junit.Assert.assertNull(executor50);
        org.junit.Assert.assertNotNull(executor51);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        retrofit.RestAdapter.Builder builder25 = builder0.setServer("GET");
        retrofit.Profiler profiler26 = null;
        builder25.profiler = profiler26;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.Profiler profiler18 = builder16.profiler;
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str30 = serializedObjectSupporter25.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter25.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor32 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        builder16.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str34 = serializedObjectSupporter25.deserializeObjectString1();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(profiler18);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Retrofit-Idle" + "'", str30, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(requestInterceptor32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-" + "'", str34, "Retrofit-");
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.util.concurrent.Executor executor14 = restAdapter10.getcallbackExecutor();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        int int27 = restAdapter25.getLOG_CHUNK_SIZE();
        retrofit.Server server28 = restAdapter25.getserver();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.client.Client.Provider provider30 = restAdapter25.getclientProvider();
        java.lang.String str31 = restAdapter25.getIDLE_THREAD_NAME();
        retrofit.Server server32 = null;
        retrofit.client.Client.Provider provider33 = null;
        java.util.concurrent.Executor executor34 = null;
        java.util.concurrent.Executor executor35 = null;
        retrofit.RequestInterceptor requestInterceptor36 = null;
        retrofit.converter.Converter converter37 = null;
        retrofit.Profiler profiler38 = null;
        retrofit.ErrorHandler errorHandler39 = null;
        retrofit.RestAdapter.Log log40 = null;
        retrofit.RestAdapter.LogLevel logLevel41 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter42 = new retrofit.RestAdapter(server32, provider33, executor34, executor35, requestInterceptor36, converter37, profiler38, errorHandler39, log40, logLevel41);
        retrofit.RestAdapter.LogLevel logLevel43 = restAdapter42.logLevel;
        retrofit.ErrorHandler errorHandler44 = restAdapter42.geterrorHandler();
        java.util.concurrent.Executor executor45 = restAdapter42.getcallbackExecutor();
        retrofit.converter.Converter converter46 = restAdapter42.converter;
        retrofit.Server server47 = restAdapter42.getserver();
        retrofit.RestAdapter.LogLevel logLevel48 = restAdapter42.getLogLevel();
        restAdapter25.setLogLevel(logLevel48);
        restAdapter10.logLevel = logLevel48;
        retrofit.client.Client.Provider provider51 = restAdapter10.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel52 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler53 = restAdapter10.errorHandler;
        retrofit.Profiler profiler54 = restAdapter10.profiler;
        java.lang.String str55 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.Server server56 = null;
        retrofit.client.Client.Provider provider57 = null;
        java.util.concurrent.Executor executor58 = null;
        java.util.concurrent.Executor executor59 = null;
        retrofit.RequestInterceptor requestInterceptor60 = null;
        retrofit.converter.Converter converter61 = null;
        retrofit.Profiler profiler62 = null;
        retrofit.ErrorHandler errorHandler63 = null;
        retrofit.RestAdapter.Log log64 = null;
        retrofit.RestAdapter.LogLevel logLevel65 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter66 = new retrofit.RestAdapter(server56, provider57, executor58, executor59, requestInterceptor60, converter61, profiler62, errorHandler63, log64, logLevel65);
        retrofit.ErrorHandler errorHandler67 = restAdapter66.errorHandler;
        int int68 = restAdapter66.getLOG_CHUNK_SIZE();
        java.lang.String str69 = restAdapter66.getTHREAD_PREFIX();
        retrofit.RestAdapter.RestHandler restHandler70 = restAdapter66.new RestHandler();
        java.lang.String str71 = restAdapter66.getTHREAD_PREFIX();
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder74 = builder72.setServer("hi!");
        retrofit.client.Client.Provider provider75 = builder72.clientProvider;
        java.util.concurrent.Executor executor76 = null;
        builder72.setcallbackExecutor(executor76);
        retrofit.RestAdapter.Log log78 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder79 = builder72.setLog(log78);
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.sethttpExecutor(executor81);
        retrofit.Profiler profiler83 = null;
        builder80.profiler = profiler83;
        retrofit.RestAdapter.LogLevel logLevel85 = builder80.logLevel;
        builder72.logLevel = logLevel85;
        restAdapter66.setLogLevel(logLevel85);
        boolean boolean88 = logLevel85.log();
        restAdapter10.setLogLevel(logLevel85);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4000 + "'", int27 == 4000);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-Idle" + "'", str31, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel43 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel43.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler44);
        org.junit.Assert.assertNull(executor45);
        org.junit.Assert.assertNull(converter46);
        org.junit.Assert.assertNull(server47);
        org.junit.Assert.assertTrue("'" + logLevel48 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel48.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertTrue("'" + logLevel52 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel52.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler53);
        org.junit.Assert.assertNull(profiler54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-Idle" + "'", str55, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4000 + "'", int68 == 4000);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Retrofit-" + "'", str69, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Retrofit-" + "'", str71, "Retrofit-");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(provider75);
        org.junit.Assert.assertNotNull(log78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + logLevel85 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel85.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        java.util.concurrent.Executor executor12 = builder0.gethttpExecutor();
        retrofit.Profiler profiler13 = null;
        builder0.profiler = profiler13;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(executor12);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.RequestInterceptor requestInterceptor20 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        java.util.concurrent.Executor executor25 = builder21.getcallbackExecutor();
        retrofit.client.Client.Provider provider26 = builder21.getclientProvider();
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder34 = builder29.setRequestInterceptor(requestInterceptor33);
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request36 = serializedObjectSupporter35.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter1();
        builder34.converter = gsonConverter38;
        retrofit.RestAdapter.Builder builder40 = builder21.setConverter((retrofit.converter.Converter) gsonConverter38);
        retrofit.RestAdapter.Builder builder41 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder43 = builder41.setServer("hi!");
        retrofit.client.Client.Provider provider44 = builder41.clientProvider;
        retrofit.RequestInterceptor requestInterceptor45 = builder41.requestInterceptor;
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        java.util.concurrent.Executor executor50 = null;
        builder46.setcallbackExecutor(executor50);
        retrofit.RestAdapter.Log log52 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder53 = builder46.setLog(log52);
        retrofit.RestAdapter.Builder builder54 = builder41.setLog(log52);
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.Server server60 = builder55.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor62 = serializedObjectSupporter61.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter61.deserializeObjectConverter7();
        retrofit.client.Request request64 = serializedObjectSupporter61.deserializeObjectRequest1();
        builder55.serializedObjectSupporter = serializedObjectSupporter61;
        builder55.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder69 = builder67.setServer("hi!");
        java.util.concurrent.Executor executor70 = null;
        builder69.callbackExecutor = executor70;
        retrofit.RestAdapter restAdapter72 = builder69.build();
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor74 = null;
        builder73.sethttpExecutor(executor74);
        retrofit.Profiler profiler76 = null;
        builder73.profiler = profiler76;
        retrofit.RestAdapter.Log log78 = builder73.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler80 = serializedObjectSupporter79.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder81 = builder73.setErrorHandler(errorHandler80);
        retrofit.RestAdapter.Builder builder82 = builder69.setErrorHandler(errorHandler80);
        java.util.concurrent.Executor executor83 = builder82.callbackExecutor;
        builder55.setcallbackExecutor(executor83);
        builder54.callbackExecutor = executor83;
        builder40.httpExecutor = executor83;
        java.util.concurrent.Executor executor87 = null;
        retrofit.RestAdapter.Builder builder88 = builder0.setExecutors(executor83, executor87);
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertNotNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(restAdapter72);
        org.junit.Assert.assertNull(log78);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(executor83);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor18 = restAdapter10.httpExecutor;
        retrofit.Server server19 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(server19);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter6();
        java.lang.String str9 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(typedString7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-" + "'", str9, "Retrofit-");
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(typedString5);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request9 = serializedObjectSupporter8.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter1();
        builder7.converter = gsonConverter11;
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        int int25 = restAdapter23.getLOG_CHUNK_SIZE();
        retrofit.Server server26 = restAdapter23.getserver();
        java.util.concurrent.Executor executor27 = restAdapter23.getcallbackExecutor();
        retrofit.Server server28 = null;
        retrofit.client.Client.Provider provider29 = null;
        java.util.concurrent.Executor executor30 = null;
        java.util.concurrent.Executor executor31 = null;
        retrofit.RequestInterceptor requestInterceptor32 = null;
        retrofit.converter.Converter converter33 = null;
        retrofit.Profiler profiler34 = null;
        retrofit.ErrorHandler errorHandler35 = null;
        retrofit.RestAdapter.Log log36 = null;
        retrofit.RestAdapter.LogLevel logLevel37 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter38 = new retrofit.RestAdapter(server28, provider29, executor30, executor31, requestInterceptor32, converter33, profiler34, errorHandler35, log36, logLevel37);
        retrofit.ErrorHandler errorHandler39 = restAdapter38.errorHandler;
        int int40 = restAdapter38.getLOG_CHUNK_SIZE();
        retrofit.Server server41 = restAdapter38.getserver();
        retrofit.client.Client.Provider provider42 = restAdapter38.clientProvider;
        retrofit.client.Client.Provider provider43 = restAdapter38.getclientProvider();
        java.lang.String str44 = restAdapter38.getIDLE_THREAD_NAME();
        retrofit.Server server45 = null;
        retrofit.client.Client.Provider provider46 = null;
        java.util.concurrent.Executor executor47 = null;
        java.util.concurrent.Executor executor48 = null;
        retrofit.RequestInterceptor requestInterceptor49 = null;
        retrofit.converter.Converter converter50 = null;
        retrofit.Profiler profiler51 = null;
        retrofit.ErrorHandler errorHandler52 = null;
        retrofit.RestAdapter.Log log53 = null;
        retrofit.RestAdapter.LogLevel logLevel54 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter55 = new retrofit.RestAdapter(server45, provider46, executor47, executor48, requestInterceptor49, converter50, profiler51, errorHandler52, log53, logLevel54);
        retrofit.RestAdapter.LogLevel logLevel56 = restAdapter55.logLevel;
        retrofit.ErrorHandler errorHandler57 = restAdapter55.geterrorHandler();
        java.util.concurrent.Executor executor58 = restAdapter55.getcallbackExecutor();
        retrofit.converter.Converter converter59 = restAdapter55.converter;
        retrofit.Server server60 = restAdapter55.getserver();
        retrofit.RestAdapter.LogLevel logLevel61 = restAdapter55.getLogLevel();
        restAdapter38.setLogLevel(logLevel61);
        restAdapter23.logLevel = logLevel61;
        retrofit.client.Client.Provider provider64 = restAdapter23.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter23.getLogLevel();
        retrofit.RestAdapter.Builder builder66 = builder7.setLogLevel(logLevel65);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder68 = builder66.setServer("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Server may not be blank.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4000 + "'", int25 == 4000);
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4000 + "'", int40 == 4000);
        org.junit.Assert.assertNull(server41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNull(provider43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Retrofit-Idle" + "'", str44, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel54 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel54.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertNull(converter59);
        org.junit.Assert.assertNull(server60);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider64);
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.Server server6 = restAdapter5.getserver();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(server6);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        retrofit.RestAdapter.Log log22 = retrofit.RestAdapter.Log.NONE;
        builder16.log = log22;
        log22.log("hi!");
        builder0.log = log22;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder41 = builder33.setErrorHandler(errorHandler40);
        retrofit.RestAdapter.Builder builder42 = builder29.setErrorHandler(errorHandler40);
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.sethttpExecutor(executor45);
        retrofit.Profiler profiler47 = null;
        builder44.profiler = profiler47;
        retrofit.Server server49 = builder44.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.client.Request request53 = serializedObjectSupporter50.deserializeObjectRequest1();
        builder44.serializedObjectSupporter = serializedObjectSupporter50;
        java.lang.String str55 = serializedObjectSupporter50.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter50.deserializeObjectErrorHandler1();
        builder42.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = builder0.setErrorHandler(errorHandler56);
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = builder0.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor61 = serializedObjectSupporter60.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter60.deserializeObjectConverter7();
        retrofit.client.Request request63 = serializedObjectSupporter60.deserializeObjectRequest1();
        retrofit.client.Request request64 = serializedObjectSupporter60.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter65 = serializedObjectSupporter60.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter60.deserializeObjectConverter6();
        builder0.converter = gsonConverter66;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(log22);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-Idle" + "'", str55, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(serializedObjectSupporter59);
        org.junit.Assert.assertNotNull(requestInterceptor61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(gsonConverter65);
        org.junit.Assert.assertNotNull(gsonConverter66);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.getrequestInterceptor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.converter.Converter converter11 = builder8.converter;
        java.util.concurrent.Executor executor12 = builder8.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = builder8.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler16 = serializedObjectSupporter14.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler16;
        retrofit.Server server18 = builder8.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = builder8.serializedObjectSupporter;
        retrofit.converter.Converter converter20 = builder8.converter;
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = null;
        builder21.sethttpExecutor(executor22);
        retrofit.converter.Converter converter24 = builder21.converter;
        java.util.concurrent.Executor executor25 = builder21.getcallbackExecutor();
        java.util.concurrent.Executor executor26 = builder21.callbackExecutor;
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor28 = null;
        builder27.sethttpExecutor(executor28);
        retrofit.Profiler profiler30 = null;
        builder27.profiler = profiler30;
        retrofit.Server server32 = builder27.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter7();
        retrofit.client.Request request36 = serializedObjectSupporter33.deserializeObjectRequest1();
        builder27.serializedObjectSupporter = serializedObjectSupporter33;
        builder27.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        java.util.concurrent.Executor executor42 = null;
        builder41.callbackExecutor = executor42;
        retrofit.RestAdapter restAdapter44 = builder41.build();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.sethttpExecutor(executor46);
        retrofit.Profiler profiler48 = null;
        builder45.profiler = profiler48;
        retrofit.RestAdapter.Log log50 = builder45.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler52 = serializedObjectSupporter51.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder53 = builder45.setErrorHandler(errorHandler52);
        retrofit.RestAdapter.Builder builder54 = builder41.setErrorHandler(errorHandler52);
        java.util.concurrent.Executor executor55 = builder54.callbackExecutor;
        builder27.setcallbackExecutor(executor55);
        builder21.httpExecutor = executor55;
        builder8.sethttpExecutor(executor55);
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor60 = null;
        builder59.sethttpExecutor(executor60);
        retrofit.Profiler profiler62 = null;
        builder59.profiler = profiler62;
        retrofit.Server server64 = builder59.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor66 = serializedObjectSupporter65.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter65.deserializeObjectConverter7();
        retrofit.client.Request request68 = serializedObjectSupporter65.deserializeObjectRequest1();
        builder59.serializedObjectSupporter = serializedObjectSupporter65;
        builder59.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder71 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder73 = builder71.setServer("hi!");
        java.util.concurrent.Executor executor74 = null;
        builder73.callbackExecutor = executor74;
        retrofit.RestAdapter restAdapter76 = builder73.build();
        retrofit.RestAdapter.Log log77 = restAdapter76.log;
        java.util.concurrent.Executor executor78 = restAdapter76.gethttpExecutor();
        retrofit.client.Client.Provider provider79 = restAdapter76.getclientProvider();
        builder59.setclientProvider(provider79);
        java.util.concurrent.Executor executor81 = builder59.httpExecutor;
        retrofit.RestAdapter.Builder builder82 = builder2.setExecutors(executor55, executor81);
        retrofit.Profiler profiler83 = builder82.profiler;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(errorHandler16);
        org.junit.Assert.assertNull(server18);
        org.junit.Assert.assertNull(serializedObjectSupporter19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(executor25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(restAdapter44);
        org.junit.Assert.assertNull(log50);
        org.junit.Assert.assertNotNull(errorHandler52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(executor55);
        org.junit.Assert.assertNull(server64);
        org.junit.Assert.assertNotNull(requestInterceptor66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(request68);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(restAdapter76);
        org.junit.Assert.assertNotNull(log77);
        org.junit.Assert.assertNotNull(executor78);
        org.junit.Assert.assertNotNull(provider79);
        org.junit.Assert.assertNotNull(executor81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(profiler83);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        int int15 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        java.util.concurrent.Executor executor17 = restAdapter10.callbackExecutor;
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            restAdapter10.logException(throwable18, "Retrofit-");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4000 + "'", int15 == 4000);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        java.lang.String str14 = serializedObjectSupporter13.deserializeObjectString3();
        java.lang.String str15 = serializedObjectSupporter13.deserializeObjectString3();
        builder0.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.converter.Converter converter17 = builder0.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor19 = null;
        builder18.sethttpExecutor(executor19);
        retrofit.Profiler profiler21 = null;
        builder18.profiler = profiler21;
        retrofit.RestAdapter.Log log23 = builder18.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler25 = serializedObjectSupporter24.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder26 = builder18.setErrorHandler(errorHandler25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        retrofit.client.Client.Provider provider30 = builder27.clientProvider;
        retrofit.RequestInterceptor requestInterceptor31 = builder27.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel32 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean33 = logLevel32.log();
        retrofit.RestAdapter.Builder builder34 = builder27.setLogLevel(logLevel32);
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = builder35.getcallbackExecutor();
        retrofit.client.Client.Provider provider37 = null;
        builder35.clientProvider = provider37;
        retrofit.Server server39 = null;
        builder35.server = server39;
        retrofit.RestAdapter.Log log41 = retrofit.RestAdapter.Log.NONE;
        builder35.log = log41;
        builder27.log = log41;
        retrofit.RestAdapter.Builder builder44 = builder26.setLog(log41);
        retrofit.ErrorHandler errorHandler45 = builder26.errorHandler;
        retrofit.RestAdapter.Builder builder46 = builder0.setErrorHandler(errorHandler45);
        java.util.concurrent.Executor executor47 = builder0.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler48 = builder0.errorHandler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GET" + "'", str14, "GET");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "GET" + "'", str15, "GET");
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNotNull(errorHandler25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNull(requestInterceptor31);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertNotNull(log41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(errorHandler45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNotNull(errorHandler48);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.converter.Converter converter8 = builder5.converter;
        java.util.concurrent.Executor executor9 = builder5.getcallbackExecutor();
        java.util.concurrent.Executor executor10 = builder5.callbackExecutor;
        retrofit.ErrorHandler errorHandler11 = builder5.errorHandler;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor13 = null;
        builder12.sethttpExecutor(executor13);
        retrofit.Profiler profiler15 = null;
        builder12.profiler = profiler15;
        retrofit.Server server17 = builder12.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.client.Request request21 = serializedObjectSupporter18.deserializeObjectRequest1();
        builder12.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor24 = null;
        builder23.sethttpExecutor(executor24);
        retrofit.Profiler profiler26 = null;
        builder23.profiler = profiler26;
        retrofit.Server server28 = builder23.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter7();
        retrofit.client.Request request32 = serializedObjectSupporter29.deserializeObjectRequest1();
        builder23.serializedObjectSupporter = serializedObjectSupporter29;
        java.lang.String str34 = serializedObjectSupporter29.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder36 = builder12.setErrorHandler(errorHandler35);
        retrofit.RestAdapter.Builder builder37 = builder5.setErrorHandler(errorHandler35);
        builder0.errorHandler = errorHandler35;
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertNull(executor9);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(server17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        java.util.concurrent.Executor executor15 = builder11.gethttpExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder23 = builder18.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder24 = builder11.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        builder25.errorHandler = errorHandler33;
        retrofit.Server server35 = builder25.server;
        builder25.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("hi!");
        java.util.concurrent.Executor executor41 = null;
        builder40.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = builder40.build();
        retrofit.RestAdapter.Log log44 = restAdapter43.log;
        builder25.log = log44;
        log44.log("Retrofit-");
        builder24.log = log44;
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log44);
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.sethttpExecutor(executor51);
        retrofit.converter.Converter converter53 = builder50.converter;
        java.util.concurrent.Executor executor54 = builder50.getcallbackExecutor();
        retrofit.client.Client.Provider provider55 = builder50.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request57 = serializedObjectSupporter56.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler58 = serializedObjectSupporter56.deserializeObjectErrorHandler1();
        builder50.errorHandler = errorHandler58;
        retrofit.RestAdapter.Log log60 = builder50.log;
        java.util.concurrent.Executor executor61 = builder50.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor62 = builder50.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor64 = null;
        builder63.sethttpExecutor(executor64);
        retrofit.converter.Converter converter66 = builder63.converter;
        java.util.concurrent.Executor executor67 = builder63.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor68 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder69 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor70 = null;
        builder69.sethttpExecutor(executor70);
        retrofit.converter.Converter converter72 = builder69.converter;
        java.util.concurrent.Executor executor73 = builder69.getcallbackExecutor();
        retrofit.client.Client.Provider provider74 = builder69.getclientProvider();
        retrofit.RestAdapter.Builder builder75 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder77 = builder75.setServer("hi!");
        java.util.concurrent.Executor executor78 = null;
        builder77.callbackExecutor = executor78;
        retrofit.RestAdapter restAdapter80 = builder77.build();
        retrofit.RestAdapter.Log log81 = restAdapter80.log;
        java.util.concurrent.Executor executor82 = restAdapter80.gethttpExecutor();
        retrofit.client.Client.Provider provider83 = restAdapter80.getclientProvider();
        builder69.setclientProvider(provider83);
        retrofit.RestAdapter.Builder builder85 = builder63.setClient(provider83);
        retrofit.RestAdapter.Builder builder86 = builder50.setClient(provider83);
        builder49.clientProvider = provider83;
        retrofit.converter.Converter converter88 = builder49.converter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(converter53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNull(provider55);
        org.junit.Assert.assertNotNull(request57);
        org.junit.Assert.assertNotNull(errorHandler58);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNull(executor61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(requestInterceptor68);
        org.junit.Assert.assertNull(converter72);
        org.junit.Assert.assertNull(executor73);
        org.junit.Assert.assertNull(provider74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(restAdapter80);
        org.junit.Assert.assertNotNull(log81);
        org.junit.Assert.assertNotNull(executor82);
        org.junit.Assert.assertNotNull(provider83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNull(converter88);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        java.util.concurrent.Executor executor9 = null;
        builder8.callbackExecutor = executor9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor12 = serializedObjectSupporter11.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder13 = builder8.setRequestInterceptor(requestInterceptor12);
        builder0.requestInterceptor = requestInterceptor12;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler16 = builder15.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request18 = serializedObjectSupporter17.deserializeObjectRequest6();
        builder15.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.RestAdapter.Log log25 = builder20.log;
        retrofit.client.Client.Provider provider26 = null;
        builder20.setclientProvider(provider26);
        retrofit.RestAdapter.Builder builder28 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder30 = builder28.setServer("hi!");
        java.util.concurrent.Executor executor31 = null;
        builder30.callbackExecutor = executor31;
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder35 = builder30.setRequestInterceptor(requestInterceptor34);
        retrofit.Server server36 = builder35.server;
        builder20.server = server36;
        builder15.server = server36;
        retrofit.RestAdapter.Builder builder39 = builder0.setServer(server36);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        java.util.concurrent.Executor executor43 = null;
        builder42.callbackExecutor = executor43;
        retrofit.RestAdapter restAdapter45 = builder42.build();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        retrofit.client.Client.Provider provider49 = builder46.clientProvider;
        retrofit.RequestInterceptor requestInterceptor50 = builder46.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel51 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean52 = logLevel51.log();
        retrofit.RestAdapter.Builder builder53 = builder46.setLogLevel(logLevel51);
        builder42.logLevel = logLevel51;
        builder0.logLevel = logLevel51;
        boolean boolean56 = logLevel51.log();
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNull(log25);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(server36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(provider49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter5.deserializeObjectConverter2();
        retrofit.client.Request request7 = serializedObjectSupporter5.deserializeObjectRequest7();
        retrofit.client.Request request8 = serializedObjectSupporter5.deserializeObjectRequest2();
        retrofit.client.Request request9 = serializedObjectSupporter5.deserializeObjectRequest3();
        java.lang.String str10 = serializedObjectSupporter5.deserializeObjectString4();
        builder0.serializedObjectSupporter = serializedObjectSupporter5;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter13 = serializedObjectSupporter12.deserializeObjectConverter2();
        retrofit.client.Request request14 = serializedObjectSupporter12.deserializeObjectRequest7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.client.Request request16 = serializedObjectSupporter12.deserializeObjectRequest3();
        java.lang.String str17 = serializedObjectSupporter12.deserializeObjectString4();
        retrofit.ErrorHandler errorHandler18 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder19 = builder0.setErrorHandler(errorHandler18);
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.client.Request request27 = serializedObjectSupporter20.deserializeObjectRequest2();
        java.lang.String str28 = serializedObjectSupporter20.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.ErrorHandler errorHandler30 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString31 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "http://example.com/" + "'", str10, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "http://example.com/" + "'", str17, "http://example.com/");
        org.junit.Assert.assertNotNull(errorHandler18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler30);
        org.junit.Assert.assertNotNull(typedString31);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        retrofit.RequestInterceptor requestInterceptor62 = builder58.requestInterceptor;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("hi!");
        retrofit.client.Client.Provider provider66 = builder63.clientProvider;
        java.util.concurrent.Executor executor67 = null;
        builder63.setcallbackExecutor(executor67);
        retrofit.RestAdapter.Log log69 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder70 = builder63.setLog(log69);
        retrofit.RestAdapter.Builder builder71 = builder58.setLog(log69);
        log69.log("");
        log69.log("");
        retrofit.RestAdapter.Builder builder76 = builder35.setLog(log69);
        retrofit.RestAdapter.Log log77 = builder35.log;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(requestInterceptor62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNotNull(log69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(log77);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.converter.Converter converter16 = builder13.converter;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = builder13.getclientProvider();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder21 = builder19.setServer("hi!");
        java.util.concurrent.Executor executor22 = null;
        builder21.callbackExecutor = executor22;
        retrofit.SerializedObjectSupporter serializedObjectSupporter24 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor25 = serializedObjectSupporter24.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder26 = builder21.setRequestInterceptor(requestInterceptor25);
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request28 = serializedObjectSupporter27.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter27.deserializeObjectConverter1();
        builder26.converter = gsonConverter30;
        retrofit.RestAdapter.Builder builder32 = builder13.setConverter((retrofit.converter.Converter) gsonConverter30);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        retrofit.client.Client.Provider provider36 = builder33.clientProvider;
        retrofit.RequestInterceptor requestInterceptor37 = builder33.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("hi!");
        retrofit.client.Client.Provider provider41 = builder38.clientProvider;
        java.util.concurrent.Executor executor42 = null;
        builder38.setcallbackExecutor(executor42);
        retrofit.RestAdapter.Log log44 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder45 = builder38.setLog(log44);
        retrofit.RestAdapter.Builder builder46 = builder33.setLog(log44);
        retrofit.RestAdapter.Builder builder47 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor48 = null;
        builder47.sethttpExecutor(executor48);
        retrofit.Profiler profiler50 = null;
        builder47.profiler = profiler50;
        retrofit.Server server52 = builder47.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter53 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor54 = serializedObjectSupporter53.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter53.deserializeObjectConverter7();
        retrofit.client.Request request56 = serializedObjectSupporter53.deserializeObjectRequest1();
        builder47.serializedObjectSupporter = serializedObjectSupporter53;
        builder47.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder59 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder61 = builder59.setServer("hi!");
        java.util.concurrent.Executor executor62 = null;
        builder61.callbackExecutor = executor62;
        retrofit.RestAdapter restAdapter64 = builder61.build();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.sethttpExecutor(executor66);
        retrofit.Profiler profiler68 = null;
        builder65.profiler = profiler68;
        retrofit.RestAdapter.Log log70 = builder65.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter71 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler72 = serializedObjectSupporter71.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder73 = builder65.setErrorHandler(errorHandler72);
        retrofit.RestAdapter.Builder builder74 = builder61.setErrorHandler(errorHandler72);
        java.util.concurrent.Executor executor75 = builder74.callbackExecutor;
        builder47.setcallbackExecutor(executor75);
        builder46.callbackExecutor = executor75;
        builder32.httpExecutor = executor75;
        java.util.concurrent.Executor executor79 = builder32.httpExecutor;
        retrofit.RestAdapter.Builder builder80 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor81 = null;
        builder80.sethttpExecutor(executor81);
        retrofit.converter.Converter converter83 = builder80.converter;
        java.util.concurrent.Executor executor84 = builder80.getcallbackExecutor();
        retrofit.client.Client.Provider provider85 = builder80.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter86 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request87 = serializedObjectSupporter86.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler88 = serializedObjectSupporter86.deserializeObjectErrorHandler1();
        builder80.errorHandler = errorHandler88;
        retrofit.Server server90 = builder80.server;
        builder80.ensureSaneDefaults();
        java.util.concurrent.Executor executor92 = builder80.gethttpExecutor();
        retrofit.RestAdapter.Builder builder93 = builder0.setExecutors(executor79, executor92);
        retrofit.Profiler profiler94 = builder93.profiler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(requestInterceptor25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(provider36);
        org.junit.Assert.assertNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNull(server52);
        org.junit.Assert.assertNotNull(requestInterceptor54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(restAdapter64);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNotNull(errorHandler72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(executor75);
        org.junit.Assert.assertNotNull(executor79);
        org.junit.Assert.assertNull(converter83);
        org.junit.Assert.assertNull(executor84);
        org.junit.Assert.assertNull(provider85);
        org.junit.Assert.assertNotNull(request87);
        org.junit.Assert.assertNotNull(errorHandler88);
        org.junit.Assert.assertNull(server90);
        org.junit.Assert.assertNotNull(executor92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNull(profiler94);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        retrofit.client.Client.Provider provider11 = builder8.clientProvider;
        retrofit.RequestInterceptor requestInterceptor12 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        java.util.concurrent.Executor executor17 = null;
        builder13.setcallbackExecutor(executor17);
        retrofit.RestAdapter.Log log19 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder20 = builder13.setLog(log19);
        retrofit.RestAdapter.Builder builder21 = builder8.setLog(log19);
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.RestAdapter.LogLevel logLevel27 = builder22.logLevel;
        java.util.concurrent.Executor executor28 = null;
        builder22.sethttpExecutor(executor28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder37 = builder32.setRequestInterceptor(requestInterceptor36);
        retrofit.RestAdapter.Builder builder38 = builder22.setRequestInterceptor(requestInterceptor36);
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean40 = logLevel39.log();
        builder22.logLevel = logLevel39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.client.Request request46 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter42.deserializeObjectConverter3();
        retrofit.client.Request request48 = serializedObjectSupporter42.deserializeObjectRequest4();
        retrofit.client.Request request49 = serializedObjectSupporter42.deserializeObjectRequest2();
        builder22.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.converter.GsonConverter gsonConverter51 = serializedObjectSupporter42.deserializeObjectConverter5();
        builder8.serializedObjectSupporter = serializedObjectSupporter42;
        builder8.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.sethttpExecutor(executor55);
        retrofit.Profiler profiler57 = null;
        builder54.profiler = profiler57;
        retrofit.RestAdapter.Log log59 = builder54.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter60 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler61 = serializedObjectSupporter60.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder62 = builder54.setErrorHandler(errorHandler61);
        builder8.errorHandler = errorHandler61;
        retrofit.RestAdapter.Builder builder64 = builder0.setErrorHandler(errorHandler61);
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = null;
        builder65.sethttpExecutor(executor66);
        retrofit.Profiler profiler68 = null;
        builder65.profiler = profiler68;
        retrofit.RestAdapter.Log log70 = builder65.log;
        retrofit.client.Client.Provider provider71 = null;
        builder65.setclientProvider(provider71);
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("hi!");
        java.util.concurrent.Executor executor76 = null;
        builder75.callbackExecutor = executor76;
        retrofit.SerializedObjectSupporter serializedObjectSupporter78 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor79 = serializedObjectSupporter78.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder80 = builder75.setRequestInterceptor(requestInterceptor79);
        retrofit.Server server81 = builder80.server;
        builder65.server = server81;
        retrofit.RestAdapter.Builder builder83 = builder64.setServer(server81);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNotNull(log19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(request48);
        org.junit.Assert.assertNotNull(request49);
        org.junit.Assert.assertNotNull(gsonConverter51);
        org.junit.Assert.assertNull(log59);
        org.junit.Assert.assertNotNull(errorHandler61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNull(log70);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(requestInterceptor79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.converter.Converter converter3 = builder2.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        builder2.converter = gsonConverter7;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder9.logLevel;
        java.util.concurrent.Executor executor15 = null;
        builder9.sethttpExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder24 = builder19.setRequestInterceptor(requestInterceptor23);
        retrofit.RestAdapter.Builder builder25 = builder9.setRequestInterceptor(requestInterceptor23);
        java.util.concurrent.Executor executor26 = null;
        builder25.callbackExecutor = executor26;
        java.util.concurrent.Executor executor28 = null;
        builder25.callbackExecutor = executor28;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter30.deserializeObjectConverter2();
        retrofit.client.Request request32 = serializedObjectSupporter30.deserializeObjectRequest7();
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest2();
        retrofit.client.Request request34 = serializedObjectSupporter30.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter30.deserializeObjectConverter5();
        builder25.converter = gsonConverter36;
        retrofit.RestAdapter.Builder builder38 = builder2.setConverter((retrofit.converter.Converter) gsonConverter36);
        retrofit.RequestInterceptor requestInterceptor39 = builder2.requestInterceptor;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNull(requestInterceptor39);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter16.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter16.deserializeObjectConverter5();
        retrofit.client.Request request20 = serializedObjectSupporter16.deserializeObjectRequest4();
        retrofit.ErrorHandler errorHandler21 = serializedObjectSupporter16.deserializeObjectErrorHandler1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter16;
        java.lang.String str23 = serializedObjectSupporter16.deserializeObjectString5();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(errorHandler21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "POST" + "'", str23, "POST");
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        retrofit.Server server11 = null;
        retrofit.client.Client.Provider provider12 = null;
        java.util.concurrent.Executor executor13 = null;
        java.util.concurrent.Executor executor14 = null;
        retrofit.RequestInterceptor requestInterceptor15 = null;
        retrofit.converter.Converter converter16 = null;
        retrofit.Profiler profiler17 = null;
        retrofit.ErrorHandler errorHandler18 = null;
        retrofit.RestAdapter.Log log19 = null;
        retrofit.RestAdapter.LogLevel logLevel20 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter21 = new retrofit.RestAdapter(server11, provider12, executor13, executor14, requestInterceptor15, converter16, profiler17, errorHandler18, log19, logLevel20);
        retrofit.ErrorHandler errorHandler22 = restAdapter21.errorHandler;
        retrofit.ErrorHandler errorHandler23 = restAdapter21.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter21.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request26 = serializedObjectSupporter25.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = restHandler24.serializedObjectSupporter;
        java.lang.String str31 = serializedObjectSupporter30.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter30;
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest5();
        retrofit.client.Request request34 = serializedObjectSupporter30.deserializeObjectRequest7();
        java.lang.String str35 = serializedObjectSupporter30.deserializeObjectString3();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertTrue("'" + logLevel20 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel20.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler22);
        org.junit.Assert.assertNull(errorHandler23);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(serializedObjectSupporter30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "POST" + "'", str31, "POST");
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "GET" + "'", str35, "GET");
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.converter.Converter converter14 = builder11.converter;
        java.util.concurrent.Executor executor15 = builder11.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = builder11.callbackExecutor;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        builder17.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder29 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder31 = builder29.setServer("hi!");
        java.util.concurrent.Executor executor32 = null;
        builder31.callbackExecutor = executor32;
        retrofit.RestAdapter restAdapter34 = builder31.build();
        retrofit.RestAdapter.Builder builder35 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor36 = null;
        builder35.sethttpExecutor(executor36);
        retrofit.Profiler profiler38 = null;
        builder35.profiler = profiler38;
        retrofit.RestAdapter.Log log40 = builder35.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter41 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler42 = serializedObjectSupporter41.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder43 = builder35.setErrorHandler(errorHandler42);
        retrofit.RestAdapter.Builder builder44 = builder31.setErrorHandler(errorHandler42);
        java.util.concurrent.Executor executor45 = builder44.callbackExecutor;
        builder17.setcallbackExecutor(executor45);
        builder11.httpExecutor = executor45;
        builder0.sethttpExecutor(executor45);
        retrofit.Profiler profiler49 = builder0.profiler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(restAdapter34);
        org.junit.Assert.assertNull(log40);
        org.junit.Assert.assertNotNull(errorHandler42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(executor45);
        org.junit.Assert.assertNull(profiler49);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        java.lang.String str16 = restAdapter10.getIDLE_THREAD_NAME();
        java.lang.String str17 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request19 = serializedObjectSupporter18.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter8();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter18;
        java.lang.String str22 = serializedObjectSupporter18.deserializeObjectString1();
        java.lang.String str23 = serializedObjectSupporter18.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-Idle" + "'", str16, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Retrofit-Idle" + "'", str17, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Retrofit-" + "'", str22, "Retrofit-");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertNull(errorHandler17);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter8();
        java.lang.String str3 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "http://example.com/" + "'", str3, "http://example.com/");
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter0.deserializeObjectConverter6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(gsonConverter8);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        java.lang.String str16 = restAdapter10.getTHREAD_PREFIX();
        retrofit.RestAdapter.Log log17 = restAdapter10.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.body;
        retrofit.mime.TypedOutput typedOutput26 = request24.getBody();
        java.lang.String str27 = request24.getUrl();
        java.lang.String str28 = request24.method;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request29 = restAdapter10.logAndReplaceRequest(request24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Retrofit-" + "'", str16, "Retrofit-");
        org.junit.Assert.assertNull(log17);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertNull(typedOutput26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.LogLevel logLevel42 = builder37.logLevel;
        java.util.concurrent.Executor executor43 = null;
        builder37.sethttpExecutor(executor43);
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder47 = builder45.setServer("hi!");
        java.util.concurrent.Executor executor48 = null;
        builder47.callbackExecutor = executor48;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder52 = builder47.setRequestInterceptor(requestInterceptor51);
        retrofit.RestAdapter.Builder builder53 = builder37.setRequestInterceptor(requestInterceptor51);
        java.util.concurrent.Executor executor54 = builder53.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter55 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor56 = serializedObjectSupporter55.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter55.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter55.deserializeObjectConverter7();
        retrofit.Server server59 = serializedObjectSupporter55.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder60 = builder53.setServer(server59);
        retrofit.RestAdapter.Builder builder61 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder63 = builder61.setServer("hi!");
        java.util.concurrent.Executor executor64 = null;
        builder63.callbackExecutor = executor64;
        retrofit.RestAdapter restAdapter66 = builder63.build();
        retrofit.RestAdapter.Builder builder67 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor68 = null;
        builder67.sethttpExecutor(executor68);
        retrofit.Profiler profiler70 = null;
        builder67.profiler = profiler70;
        retrofit.RestAdapter.Log log72 = builder67.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler74 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder75 = builder67.setErrorHandler(errorHandler74);
        retrofit.RestAdapter.Builder builder76 = builder63.setErrorHandler(errorHandler74);
        java.util.concurrent.Executor executor77 = builder76.callbackExecutor;
        builder60.sethttpExecutor(executor77);
        builder36.sethttpExecutor(executor77);
        retrofit.SerializedObjectSupporter serializedObjectSupporter80 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor81 = serializedObjectSupporter80.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter82 = serializedObjectSupporter80.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter83 = serializedObjectSupporter80.deserializeObjectConverter5();
        retrofit.client.Request request84 = serializedObjectSupporter80.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter85 = serializedObjectSupporter80.deserializeObjectConverter3();
        retrofit.client.Request request86 = serializedObjectSupporter80.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter87 = serializedObjectSupporter80.deserializeObjectConverter5();
        builder36.converter = gsonConverter87;
        java.util.concurrent.Executor executor89 = builder36.httpExecutor;
        retrofit.Profiler profiler90 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder91 = builder36.setProfiler(profiler90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(executor54);
        org.junit.Assert.assertNotNull(requestInterceptor56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(server59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(restAdapter66);
        org.junit.Assert.assertNull(log72);
        org.junit.Assert.assertNotNull(errorHandler74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(executor77);
        org.junit.Assert.assertNotNull(requestInterceptor81);
        org.junit.Assert.assertNotNull(gsonConverter82);
        org.junit.Assert.assertNotNull(gsonConverter83);
        org.junit.Assert.assertNotNull(request84);
        org.junit.Assert.assertNotNull(gsonConverter85);
        org.junit.Assert.assertNotNull(request86);
        org.junit.Assert.assertNotNull(gsonConverter87);
        org.junit.Assert.assertNotNull(executor89);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.client.Client.Provider provider37 = builder36.clientProvider;
        retrofit.Profiler profiler38 = builder36.profiler;
        retrofit.ErrorHandler errorHandler39 = builder36.errorHandler;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(provider37);
        org.junit.Assert.assertNull(profiler38);
        org.junit.Assert.assertNotNull(errorHandler39);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter15 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = null;
        builder16.sethttpExecutor(executor17);
        retrofit.Profiler profiler19 = null;
        builder16.profiler = profiler19;
        retrofit.RestAdapter.LogLevel logLevel21 = builder16.logLevel;
        restAdapter10.setLogLevel(logLevel21);
        retrofit.RestAdapter.Log log23 = restAdapter10.log;
        retrofit.RestAdapter.RestHandler restHandler24 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.client.Client.Provider provider28 = builder25.getclientProvider();
        retrofit.client.Client.Provider provider29 = builder25.getclientProvider();
        retrofit.Server server30 = builder25.server;
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.Profiler profiler34 = null;
        builder31.profiler = profiler34;
        retrofit.Server server36 = builder31.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter39 = serializedObjectSupporter37.deserializeObjectConverter7();
        retrofit.client.Request request40 = serializedObjectSupporter37.deserializeObjectRequest1();
        builder31.serializedObjectSupporter = serializedObjectSupporter37;
        retrofit.client.Request request42 = serializedObjectSupporter37.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString43 = serializedObjectSupporter37.deserializeObjectTypedOutput2();
        builder25.serializedObjectSupporter = serializedObjectSupporter37;
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter37.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter37.deserializeObjectErrorHandler1();
        restHandler24.serializedObjectSupporter = serializedObjectSupporter37;
        retrofit.SerializedObjectSupporter serializedObjectSupporter48 = restHandler24.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(serializedObjectSupporter15);
        org.junit.Assert.assertTrue("'" + logLevel21 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel21.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(log23);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(server30);
        org.junit.Assert.assertNull(server36);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(gsonConverter39);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(request42);
        org.junit.Assert.assertNotNull(typedString43);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(serializedObjectSupporter48);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RequestInterceptor requestInterceptor4 = builder0.requestInterceptor;
        retrofit.Server server5 = null;
        builder0.server = server5;
        retrofit.RestAdapter.Builder builder7 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor8 = null;
        builder7.sethttpExecutor(executor8);
        retrofit.converter.Converter converter10 = builder7.converter;
        java.util.concurrent.Executor executor11 = builder7.getcallbackExecutor();
        retrofit.client.Client.Provider provider12 = builder7.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request14 = serializedObjectSupporter13.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler15 = serializedObjectSupporter13.deserializeObjectErrorHandler1();
        builder7.errorHandler = errorHandler15;
        retrofit.converter.Converter converter17 = builder7.converter;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        java.util.concurrent.Executor executor21 = null;
        builder20.callbackExecutor = executor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder25 = builder20.setRequestInterceptor(requestInterceptor24);
        retrofit.RestAdapter.Builder builder26 = builder7.setRequestInterceptor(requestInterceptor24);
        builder0.requestInterceptor = requestInterceptor24;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        java.lang.String str29 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter28.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder32 = builder0.setConverter((retrofit.converter.Converter) gsonConverter31);
        retrofit.SerializedObjectSupporter serializedObjectSupporter33 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor34 = serializedObjectSupporter33.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter33.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter33.deserializeObjectConverter4();
        retrofit.client.Request request37 = serializedObjectSupporter33.deserializeObjectRequest4();
        builder32.serializedObjectSupporter = serializedObjectSupporter33;
        retrofit.client.Request request39 = serializedObjectSupporter33.deserializeObjectRequest6();
        retrofit.client.Request request40 = serializedObjectSupporter33.deserializeObjectRequest3();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(requestInterceptor4);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertNotNull(errorHandler15);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Retrofit-Idle" + "'", str29, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(requestInterceptor34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(request39);
        org.junit.Assert.assertNotNull(request40);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Log log5 = builder0.log;
        retrofit.ErrorHandler errorHandler6 = builder0.errorHandler;
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.client.Client.Provider provider11 = builder8.getclientProvider();
        retrofit.client.Client.Provider provider12 = builder8.getclientProvider();
        retrofit.Server server13 = builder8.server;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.Profiler profiler17 = null;
        builder14.profiler = profiler17;
        retrofit.Server server19 = builder14.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.client.Request request23 = serializedObjectSupporter20.deserializeObjectRequest1();
        builder14.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.client.Request request25 = serializedObjectSupporter20.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString26 = serializedObjectSupporter20.deserializeObjectTypedOutput2();
        builder8.serializedObjectSupporter = serializedObjectSupporter20;
        java.util.concurrent.Executor executor28 = builder8.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request30 = serializedObjectSupporter29.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler31 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString32 = serializedObjectSupporter29.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        builder8.errorHandler = errorHandler33;
        retrofit.RestAdapter.Builder builder35 = builder0.setErrorHandler(errorHandler33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder48 = builder46.setServer("hi!");
        java.util.concurrent.Executor executor49 = null;
        builder48.callbackExecutor = executor49;
        retrofit.RestAdapter restAdapter51 = builder48.build();
        retrofit.RestAdapter.Log log52 = restAdapter51.log;
        java.util.concurrent.Executor executor53 = restAdapter51.gethttpExecutor();
        retrofit.client.Client.Provider provider54 = restAdapter51.getclientProvider();
        builder40.setclientProvider(provider54);
        retrofit.RestAdapter.Builder builder56 = builder36.setClient(provider54);
        builder35.clientProvider = provider54;
        retrofit.converter.Converter converter58 = builder35.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter59.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter62 = serializedObjectSupporter59.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter63 = serializedObjectSupporter59.deserializeObjectConverter8();
        retrofit.client.Request request64 = serializedObjectSupporter59.deserializeObjectRequest5();
        retrofit.Server server65 = serializedObjectSupporter59.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder66 = builder35.setServer(server65);
        retrofit.ErrorHandler errorHandler67 = builder66.errorHandler;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(log5);
        org.junit.Assert.assertNull(errorHandler6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(provider11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(server19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(request23);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(typedString26);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertNotNull(errorHandler31);
        org.junit.Assert.assertNotNull(typedString32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(restAdapter51);
        org.junit.Assert.assertNotNull(log52);
        org.junit.Assert.assertNotNull(executor53);
        org.junit.Assert.assertNotNull(provider54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(converter58);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNotNull(gsonConverter62);
        org.junit.Assert.assertNotNull(gsonConverter63);
        org.junit.Assert.assertNotNull(request64);
        org.junit.Assert.assertNotNull(server65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(errorHandler67);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.Server server26 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider27 = restAdapter10.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter10.getLogLevel();
        retrofit.Server server29 = restAdapter10.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter30 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor31 = serializedObjectSupporter30.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter30.deserializeObjectConverter5();
        retrofit.client.Request request33 = serializedObjectSupporter30.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter30.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter30.deserializeObjectConverter6();
        retrofit.client.Request request36 = serializedObjectSupporter30.deserializeObjectRequest8();
        retrofit.Server server37 = serializedObjectSupporter30.deserializeObjectServer1();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter30;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server26);
        org.junit.Assert.assertNull(provider27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server29);
        org.junit.Assert.assertNotNull(requestInterceptor31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(request36);
        org.junit.Assert.assertNotNull(server37);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        java.lang.String str7 = serializedObjectSupporter6.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter1();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.Server server11 = builder0.server;
        retrofit.client.Client client12 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder13 = builder0.setClient(client12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Client may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GET" + "'", str7, "GET");
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(server11);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor17 = builder16.getcallbackExecutor();
        retrofit.client.Client.Provider provider18 = null;
        builder16.clientProvider = provider18;
        retrofit.Server server20 = null;
        builder16.server = server20;
        retrofit.Server server22 = null;
        retrofit.client.Client.Provider provider23 = null;
        java.util.concurrent.Executor executor24 = null;
        java.util.concurrent.Executor executor25 = null;
        retrofit.RequestInterceptor requestInterceptor26 = null;
        retrofit.converter.Converter converter27 = null;
        retrofit.Profiler profiler28 = null;
        retrofit.ErrorHandler errorHandler29 = null;
        retrofit.RestAdapter.Log log30 = null;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter32 = new retrofit.RestAdapter(server22, provider23, executor24, executor25, requestInterceptor26, converter27, profiler28, errorHandler29, log30, logLevel31);
        retrofit.ErrorHandler errorHandler33 = restAdapter32.errorHandler;
        java.util.concurrent.Executor executor34 = restAdapter32.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel35 = restAdapter32.getLogLevel();
        builder16.logLevel = logLevel35;
        restAdapter10.logLevel = logLevel35;
        retrofit.Server server38 = null;
        retrofit.client.Client.Provider provider39 = null;
        java.util.concurrent.Executor executor40 = null;
        java.util.concurrent.Executor executor41 = null;
        retrofit.RequestInterceptor requestInterceptor42 = null;
        retrofit.converter.Converter converter43 = null;
        retrofit.Profiler profiler44 = null;
        retrofit.ErrorHandler errorHandler45 = null;
        retrofit.RestAdapter.Log log46 = null;
        retrofit.RestAdapter.LogLevel logLevel47 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter48 = new retrofit.RestAdapter(server38, provider39, executor40, executor41, requestInterceptor42, converter43, profiler44, errorHandler45, log46, logLevel47);
        retrofit.ErrorHandler errorHandler49 = restAdapter48.errorHandler;
        int int50 = restAdapter48.getLOG_CHUNK_SIZE();
        retrofit.Server server51 = restAdapter48.getserver();
        retrofit.Server server52 = null;
        retrofit.client.Client.Provider provider53 = null;
        java.util.concurrent.Executor executor54 = null;
        java.util.concurrent.Executor executor55 = null;
        retrofit.RequestInterceptor requestInterceptor56 = null;
        retrofit.converter.Converter converter57 = null;
        retrofit.Profiler profiler58 = null;
        retrofit.ErrorHandler errorHandler59 = null;
        retrofit.RestAdapter.Log log60 = null;
        retrofit.RestAdapter.LogLevel logLevel61 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter62 = new retrofit.RestAdapter(server52, provider53, executor54, executor55, requestInterceptor56, converter57, profiler58, errorHandler59, log60, logLevel61);
        restAdapter48.logLevel = logLevel61;
        retrofit.RestAdapter.LogLevel logLevel64 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean65 = logLevel64.log();
        restAdapter48.logLevel = logLevel64;
        restAdapter10.logLevel = logLevel64;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler33);
        org.junit.Assert.assertNull(executor34);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel47 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel47.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4000 + "'", int50 == 4000);
        org.junit.Assert.assertNull(server51);
        org.junit.Assert.assertTrue("'" + logLevel61 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel61.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel64 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel64.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter18 = serializedObjectSupporter17.deserializeObjectConverter2();
        retrofit.client.Request request19 = serializedObjectSupporter17.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        builder0.requestInterceptor = requestInterceptor21;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request24 = serializedObjectSupporter23.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter8();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter23.deserializeObjectConverter1();
        retrofit.client.Request request28 = serializedObjectSupporter23.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.Server server30 = builder0.server;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(gsonConverter18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNull(server30);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        java.lang.String str11 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter6.deserializeObjectConverter1();
        java.lang.String str13 = serializedObjectSupporter6.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter6.deserializeObjectConverter2();
        retrofit.client.Request request15 = serializedObjectSupporter6.deserializeObjectRequest6();
        java.lang.Class<?> wildcardClass16 = request15.getClass();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Retrofit-Idle" + "'", str11, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        builder0.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = builder0.serializedObjectSupporter;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(requestInterceptor12);
        org.junit.Assert.assertNull(serializedObjectSupporter13);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter9.deserializeObjectConverter2();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter15 = serializedObjectSupporter12.deserializeObjectConverter5();
        retrofit.client.Request request16 = serializedObjectSupporter12.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter12.deserializeObjectConverter3();
        retrofit.client.Request request18 = serializedObjectSupporter12.deserializeObjectRequest4();
        retrofit.client.Request request19 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.client.Request request20 = serializedObjectSupporter12.deserializeObjectRequest7();
        builder7.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request22 = serializedObjectSupporter12.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList23 = request22.getHeaders();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(gsonConverter15);
        org.junit.Assert.assertNotNull(request16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(request18);
        org.junit.Assert.assertNotNull(request19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertNotNull(headerList23);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.Profiler profiler27 = null;
        builder24.profiler = profiler27;
        retrofit.RestAdapter.LogLevel logLevel29 = builder24.logLevel;
        java.util.concurrent.Executor executor30 = null;
        builder24.sethttpExecutor(executor30);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder34 = builder32.setServer("hi!");
        java.util.concurrent.Executor executor35 = null;
        builder34.callbackExecutor = executor35;
        retrofit.SerializedObjectSupporter serializedObjectSupporter37 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor38 = serializedObjectSupporter37.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder39 = builder34.setRequestInterceptor(requestInterceptor38);
        retrofit.RestAdapter.Builder builder40 = builder24.setRequestInterceptor(requestInterceptor38);
        java.util.concurrent.Executor executor41 = builder40.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor43 = serializedObjectSupporter42.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter45 = serializedObjectSupporter42.deserializeObjectConverter7();
        retrofit.Server server46 = serializedObjectSupporter42.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder47 = builder40.setServer(server46);
        java.util.concurrent.Executor executor48 = null;
        builder47.sethttpExecutor(executor48);
        retrofit.Server server50 = builder47.server;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder53 = builder51.setServer("hi!");
        java.util.concurrent.Executor executor54 = null;
        builder53.callbackExecutor = executor54;
        retrofit.RestAdapter restAdapter56 = builder53.build();
        retrofit.RestAdapter.Builder builder57 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor58 = null;
        builder57.sethttpExecutor(executor58);
        retrofit.Profiler profiler60 = null;
        builder57.profiler = profiler60;
        retrofit.RestAdapter.Log log62 = builder57.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter63 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler64 = serializedObjectSupporter63.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder65 = builder57.setErrorHandler(errorHandler64);
        retrofit.RestAdapter.Builder builder66 = builder53.setErrorHandler(errorHandler64);
        java.util.concurrent.Executor executor67 = builder66.callbackExecutor;
        builder47.callbackExecutor = executor67;
        java.util.concurrent.Executor executor69 = builder47.gethttpExecutor();
        java.util.concurrent.Executor executor70 = builder47.callbackExecutor;
        builder0.setcallbackExecutor(executor70);
        retrofit.Server server72 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter73 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor74 = serializedObjectSupporter73.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter73.deserializeObjectConverter8();
        java.lang.String str76 = serializedObjectSupporter73.deserializeObjectString2();
        java.lang.String str77 = serializedObjectSupporter73.deserializeObjectString5();
        retrofit.ErrorHandler errorHandler78 = serializedObjectSupporter73.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler78;
        retrofit.Profiler profiler80 = builder0.profiler;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertTrue("'" + logLevel29 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel29.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(requestInterceptor38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(requestInterceptor43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter45);
        org.junit.Assert.assertNotNull(server46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(restAdapter56);
        org.junit.Assert.assertNull(log62);
        org.junit.Assert.assertNotNull(errorHandler64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(executor67);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertNotNull(executor70);
        org.junit.Assert.assertNull(server72);
        org.junit.Assert.assertNotNull(requestInterceptor74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Retrofit-Idle" + "'", str76, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "POST" + "'", str77, "POST");
        org.junit.Assert.assertNotNull(errorHandler78);
        org.junit.Assert.assertNull(profiler80);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "http://example.com/" + "'", str4, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "http://example.com/" + "'", str2, "http://example.com/");
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-" + "'", str6, "Retrofit-");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(requestInterceptor8);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel13 = restAdapter10.getLogLevel();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.Profiler profiler15 = restAdapter10.profiler;
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter17.deserializeObjectConverter4();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Profiler profiler22 = restAdapter10.profiler;
        retrofit.RestAdapter.LogLevel logLevel23 = restAdapter10.getLogLevel();
        retrofit.RestAdapter.Log log24 = restAdapter10.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.RestAdapter.LogLevel logLevel36 = restAdapter35.logLevel;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.geterrorHandler();
        java.util.concurrent.Executor executor38 = restAdapter35.getcallbackExecutor();
        retrofit.converter.Converter converter39 = restAdapter35.converter;
        retrofit.Server server40 = restAdapter35.getserver();
        retrofit.RestAdapter.LogLevel logLevel41 = restAdapter35.getLogLevel();
        restAdapter10.logLevel = logLevel41;
        java.util.concurrent.Executor executor43 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter10.logLevel;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(profiler15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNull(profiler22);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNull(executor38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(server40);
        org.junit.Assert.assertTrue("'" + logLevel41 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel41.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter25.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter25;
        java.lang.String str31 = serializedObjectSupporter25.deserializeObjectString1();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections32 = serializedObjectSupporter25.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Retrofit-" + "'", str31, "Retrofit-");
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.Server server16 = restAdapter10.getserver();
        retrofit.Server server17 = restAdapter10.getserver();
        retrofit.RestAdapter.RestHandler restHandler18 = restAdapter10.new RestHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server17);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        builder0.ensureSaneDefaults();
        java.util.concurrent.Executor executor12 = builder0.gethttpExecutor();
        retrofit.client.Client.Provider provider13 = builder0.clientProvider;
        retrofit.converter.Converter converter14 = builder0.converter;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNotNull(executor12);
        org.junit.Assert.assertNotNull(provider13);
        org.junit.Assert.assertNotNull(converter14);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor14 = restAdapter10.httpExecutor;
        java.lang.String str15 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = restAdapter10.serializedObjectSupporter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        java.lang.String str18 = serializedObjectSupporter17.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.Server server20 = serializedObjectSupporter17.deserializeObjectServer1();
        retrofit.client.Request request21 = serializedObjectSupporter17.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter17.deserializeObjectConverter2();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNull(serializedObjectSupporter16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GET" + "'", str18, "GET");
        org.junit.Assert.assertNotNull(server20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(gsonConverter22);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.SerializedObjectSupporter serializedObjectSupporter1 = null;
        builder0.serializedObjectSupporter = serializedObjectSupporter1;
        retrofit.RestAdapter.Builder builder3 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor4 = null;
        builder3.sethttpExecutor(executor4);
        retrofit.Profiler profiler6 = null;
        builder3.profiler = profiler6;
        retrofit.RestAdapter.LogLevel logLevel8 = builder3.logLevel;
        java.util.concurrent.Executor executor9 = null;
        builder3.sethttpExecutor(executor9);
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder18 = builder13.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder19 = builder3.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder20 = builder0.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder23 = builder21.setServer("hi!");
        java.util.concurrent.Executor executor24 = null;
        builder23.callbackExecutor = executor24;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor27 = serializedObjectSupporter26.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder28 = builder23.setRequestInterceptor(requestInterceptor27);
        retrofit.Server server29 = builder28.server;
        retrofit.RestAdapter.Builder builder30 = builder20.setServer(server29);
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor32 = null;
        builder31.sethttpExecutor(executor32);
        retrofit.Profiler profiler34 = null;
        builder31.profiler = profiler34;
        retrofit.RestAdapter.LogLevel logLevel36 = builder31.logLevel;
        java.util.concurrent.Executor executor37 = null;
        builder31.sethttpExecutor(executor37);
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder41 = builder39.setServer("hi!");
        java.util.concurrent.Executor executor42 = null;
        builder41.callbackExecutor = executor42;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor45 = serializedObjectSupporter44.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder46 = builder41.setRequestInterceptor(requestInterceptor45);
        retrofit.RestAdapter.Builder builder47 = builder31.setRequestInterceptor(requestInterceptor45);
        java.util.concurrent.Executor executor48 = builder47.httpExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        retrofit.client.Client.Provider provider52 = builder49.clientProvider;
        retrofit.RequestInterceptor requestInterceptor53 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        retrofit.client.Client.Provider provider57 = builder54.clientProvider;
        java.util.concurrent.Executor executor58 = null;
        builder54.setcallbackExecutor(executor58);
        retrofit.RestAdapter.Log log60 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder61 = builder54.setLog(log60);
        retrofit.RestAdapter.Builder builder62 = builder49.setLog(log60);
        builder47.log = log60;
        log60.log("");
        retrofit.RestAdapter.Builder builder66 = builder20.setLog(log60);
        retrofit.Server server67 = null;
        retrofit.client.Client.Provider provider68 = null;
        java.util.concurrent.Executor executor69 = null;
        java.util.concurrent.Executor executor70 = null;
        retrofit.RequestInterceptor requestInterceptor71 = null;
        retrofit.converter.Converter converter72 = null;
        retrofit.Profiler profiler73 = null;
        retrofit.ErrorHandler errorHandler74 = null;
        retrofit.RestAdapter.Log log75 = null;
        retrofit.RestAdapter.LogLevel logLevel76 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter77 = new retrofit.RestAdapter(server67, provider68, executor69, executor70, requestInterceptor71, converter72, profiler73, errorHandler74, log75, logLevel76);
        retrofit.ErrorHandler errorHandler78 = restAdapter77.errorHandler;
        int int79 = restAdapter77.getLOG_CHUNK_SIZE();
        retrofit.Server server80 = restAdapter77.getserver();
        retrofit.RestAdapter.LogLevel logLevel81 = restAdapter77.logLevel;
        builder66.logLevel = logLevel81;
        retrofit.client.Client.Provider provider83 = builder66.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel8 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel8.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(requestInterceptor27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(server29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + logLevel36 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel36.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(requestInterceptor45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNull(provider57);
        org.junit.Assert.assertNotNull(log60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + logLevel76 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel76.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4000 + "'", int79 == 4000);
        org.junit.Assert.assertNull(server80);
        org.junit.Assert.assertTrue("'" + logLevel81 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel81.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider83);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor5 = null;
        builder4.sethttpExecutor(executor5);
        retrofit.Profiler profiler7 = null;
        builder4.profiler = profiler7;
        retrofit.RestAdapter.Log log9 = builder4.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler11 = serializedObjectSupporter10.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder12 = builder4.setErrorHandler(errorHandler11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.client.Client.Provider provider16 = builder13.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = builder13.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel18 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean19 = logLevel18.log();
        retrofit.RestAdapter.Builder builder20 = builder13.setLogLevel(logLevel18);
        retrofit.RestAdapter.Builder builder21 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor22 = builder21.getcallbackExecutor();
        retrofit.client.Client.Provider provider23 = null;
        builder21.clientProvider = provider23;
        retrofit.Server server25 = null;
        builder21.server = server25;
        retrofit.RestAdapter.Log log27 = retrofit.RestAdapter.Log.NONE;
        builder21.log = log27;
        builder13.log = log27;
        retrofit.RestAdapter.Builder builder30 = builder12.setLog(log27);
        retrofit.RestAdapter.Builder builder31 = builder0.setLog(log27);
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter32.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter32.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter35 = serializedObjectSupporter32.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter36 = serializedObjectSupporter32.deserializeObjectConverter8();
        retrofit.client.Request request37 = serializedObjectSupporter32.deserializeObjectRequest5();
        retrofit.Server server38 = serializedObjectSupporter32.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder39 = builder0.setServer(server38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider42 = null;
        builder40.clientProvider = provider42;
        retrofit.Server server44 = null;
        builder40.server = server44;
        retrofit.RestAdapter.Log log46 = retrofit.RestAdapter.Log.NONE;
        builder40.log = log46;
        retrofit.converter.Converter converter48 = builder40.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter49 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request50 = serializedObjectSupporter49.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler51 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString52 = serializedObjectSupporter49.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler53 = serializedObjectSupporter49.deserializeObjectErrorHandler1();
        builder40.errorHandler = errorHandler53;
        builder39.errorHandler = errorHandler53;
        retrofit.RestAdapter.Log log56 = builder39.log;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(log9);
        org.junit.Assert.assertNotNull(errorHandler11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel18 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel18.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(executor22);
        org.junit.Assert.assertNotNull(log27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(gsonConverter35);
        org.junit.Assert.assertNotNull(gsonConverter36);
        org.junit.Assert.assertNotNull(request37);
        org.junit.Assert.assertNotNull(server38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(executor41);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNotNull(request50);
        org.junit.Assert.assertNotNull(errorHandler51);
        org.junit.Assert.assertNotNull(typedString52);
        org.junit.Assert.assertNotNull(errorHandler53);
        org.junit.Assert.assertNotNull(log56);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(requestInterceptor14);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Server server6 = null;
        retrofit.client.Client.Provider provider7 = null;
        java.util.concurrent.Executor executor8 = null;
        java.util.concurrent.Executor executor9 = null;
        retrofit.RequestInterceptor requestInterceptor10 = null;
        retrofit.converter.Converter converter11 = null;
        retrofit.Profiler profiler12 = null;
        retrofit.ErrorHandler errorHandler13 = null;
        retrofit.RestAdapter.Log log14 = null;
        retrofit.RestAdapter.LogLevel logLevel15 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter16 = new retrofit.RestAdapter(server6, provider7, executor8, executor9, requestInterceptor10, converter11, profiler12, errorHandler13, log14, logLevel15);
        retrofit.ErrorHandler errorHandler17 = restAdapter16.errorHandler;
        java.util.concurrent.Executor executor18 = restAdapter16.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel19 = restAdapter16.getLogLevel();
        builder0.logLevel = logLevel19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter21.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter21.deserializeObjectConverter5();
        retrofit.client.Request request25 = serializedObjectSupporter21.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter26 = serializedObjectSupporter21.deserializeObjectConverter3();
        retrofit.client.Request request27 = serializedObjectSupporter21.deserializeObjectRequest4();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder29 = builder0.setRequestInterceptor(requestInterceptor28);
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.LogLevel logLevel35 = builder30.logLevel;
        java.util.concurrent.Executor executor36 = null;
        builder30.sethttpExecutor(executor36);
        retrofit.client.Client.Provider provider38 = builder30.clientProvider;
        java.util.concurrent.Executor executor39 = builder30.callbackExecutor;
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        java.util.concurrent.Executor executor43 = null;
        builder42.callbackExecutor = executor43;
        retrofit.RestAdapter restAdapter45 = builder42.build();
        retrofit.RestAdapter.Log log46 = restAdapter45.log;
        java.util.concurrent.Executor executor47 = restAdapter45.gethttpExecutor();
        retrofit.client.Client.Provider provider48 = restAdapter45.getclientProvider();
        builder30.setclientProvider(provider48);
        retrofit.Server server50 = null;
        builder30.server = server50;
        retrofit.RestAdapter.Builder builder53 = builder30.setServer("http://example.com/");
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.sethttpExecutor(executor55);
        retrofit.Profiler profiler57 = builder54.profiler;
        retrofit.client.Client.Provider provider58 = builder54.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter60 = serializedObjectSupporter59.deserializeObjectConverter2();
        retrofit.client.Request request61 = serializedObjectSupporter59.deserializeObjectRequest7();
        retrofit.client.Request request62 = serializedObjectSupporter59.deserializeObjectRequest2();
        retrofit.client.Request request63 = serializedObjectSupporter59.deserializeObjectRequest3();
        java.lang.String str64 = serializedObjectSupporter59.deserializeObjectString4();
        builder54.serializedObjectSupporter = serializedObjectSupporter59;
        retrofit.Server server66 = serializedObjectSupporter59.deserializeObjectServer1();
        builder53.server = server66;
        builder0.server = server66;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel15 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel15.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertTrue("'" + logLevel19 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel19.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(request25);
        org.junit.Assert.assertNotNull(gsonConverter26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + logLevel35 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel35.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider38);
        org.junit.Assert.assertNull(executor39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(restAdapter45);
        org.junit.Assert.assertNotNull(log46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(provider48);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNull(profiler57);
        org.junit.Assert.assertNull(provider58);
        org.junit.Assert.assertNotNull(gsonConverter60);
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(request62);
        org.junit.Assert.assertNotNull(request63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "http://example.com/" + "'", str64, "http://example.com/");
        org.junit.Assert.assertNotNull(server66);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.ErrorHandler errorHandler11 = builder10.errorHandler;
        retrofit.client.Client.Provider provider12 = builder10.getclientProvider();
        retrofit.Server server13 = null;
        retrofit.client.Client.Provider provider14 = null;
        java.util.concurrent.Executor executor15 = null;
        java.util.concurrent.Executor executor16 = null;
        retrofit.RequestInterceptor requestInterceptor17 = null;
        retrofit.converter.Converter converter18 = null;
        retrofit.Profiler profiler19 = null;
        retrofit.ErrorHandler errorHandler20 = null;
        retrofit.RestAdapter.Log log21 = null;
        retrofit.RestAdapter.LogLevel logLevel22 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter23 = new retrofit.RestAdapter(server13, provider14, executor15, executor16, requestInterceptor17, converter18, profiler19, errorHandler20, log21, logLevel22);
        retrofit.ErrorHandler errorHandler24 = restAdapter23.errorHandler;
        int int25 = restAdapter23.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = null;
        restAdapter23.serializedObjectSupporter = serializedObjectSupporter26;
        retrofit.client.Client.Provider provider28 = restAdapter23.getclientProvider();
        retrofit.ErrorHandler errorHandler29 = restAdapter23.geterrorHandler();
        retrofit.RestAdapter.Log log30 = restAdapter23.log;
        java.util.concurrent.Executor executor31 = restAdapter23.gethttpExecutor();
        retrofit.client.Client.Provider provider32 = restAdapter23.getclientProvider();
        retrofit.RestAdapter.LogLevel logLevel33 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter23.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder35 = builder10.setLogLevel(logLevel33);
        retrofit.RestAdapter.Builder builder36 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor37 = null;
        builder36.sethttpExecutor(executor37);
        retrofit.converter.Converter converter39 = builder36.converter;
        java.util.concurrent.Executor executor40 = builder36.getcallbackExecutor();
        retrofit.client.Client.Provider provider41 = builder36.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter42.deserializeObjectErrorHandler1();
        builder36.errorHandler = errorHandler44;
        retrofit.RestAdapter.Log log46 = builder36.log;
        java.util.concurrent.Executor executor47 = builder36.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor48 = builder36.requestInterceptor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        java.util.concurrent.Executor executor52 = null;
        builder51.callbackExecutor = executor52;
        retrofit.RestAdapter restAdapter54 = builder51.build();
        retrofit.RestAdapter.Builder builder55 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor56 = null;
        builder55.sethttpExecutor(executor56);
        retrofit.Profiler profiler58 = null;
        builder55.profiler = profiler58;
        retrofit.RestAdapter.Log log60 = builder55.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter61 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler62 = serializedObjectSupporter61.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder63 = builder55.setErrorHandler(errorHandler62);
        retrofit.RestAdapter.Builder builder64 = builder51.setErrorHandler(errorHandler62);
        java.util.concurrent.Executor executor65 = builder64.callbackExecutor;
        builder36.httpExecutor = executor65;
        builder35.sethttpExecutor(executor65);
        retrofit.SerializedObjectSupporter serializedObjectSupporter68 = new retrofit.SerializedObjectSupporter();
        java.lang.String str69 = serializedObjectSupporter68.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter70 = serializedObjectSupporter68.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter68.deserializeObjectConverter7();
        java.lang.String str72 = serializedObjectSupporter68.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter73 = serializedObjectSupporter68.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder74 = builder35.setConverter((retrofit.converter.Converter) gsonConverter73);
        retrofit.RequestInterceptor requestInterceptor75 = builder35.requestInterceptor;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(provider12);
        org.junit.Assert.assertTrue("'" + logLevel22 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel22.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4000 + "'", int25 == 4000);
        org.junit.Assert.assertNull(provider28);
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(log30);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertTrue("'" + logLevel33 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel33.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNull(executor40);
        org.junit.Assert.assertNull(provider41);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNull(log46);
        org.junit.Assert.assertNull(executor47);
        org.junit.Assert.assertNull(requestInterceptor48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNull(log60);
        org.junit.Assert.assertNotNull(errorHandler62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(executor65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Retrofit-Idle" + "'", str69, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GET" + "'", str72, "GET");
        org.junit.Assert.assertNotNull(gsonConverter73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNull(requestInterceptor75);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        java.util.concurrent.Executor executor11 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter8();
        java.lang.String str15 = serializedObjectSupporter12.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter12.deserializeObjectConverter4();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.ErrorHandler errorHandler18 = builder0.errorHandler;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Retrofit-Idle" + "'", str15, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(errorHandler18);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.SerializedObjectSupporter serializedObjectSupporter26 = restAdapter10.serializedObjectSupporter;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean28 = logLevel27.log();
        restAdapter10.setLogLevel(logLevel27);
        retrofit.client.Client.Provider provider30 = restAdapter10.getclientProvider();
        int int31 = restAdapter10.getLOG_CHUNK_SIZE();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter26);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4000 + "'", int31 == 4000);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.Server server14 = null;
        retrofit.client.Client.Provider provider15 = null;
        java.util.concurrent.Executor executor16 = null;
        java.util.concurrent.Executor executor17 = null;
        retrofit.RequestInterceptor requestInterceptor18 = null;
        retrofit.converter.Converter converter19 = null;
        retrofit.Profiler profiler20 = null;
        retrofit.ErrorHandler errorHandler21 = null;
        retrofit.RestAdapter.Log log22 = null;
        retrofit.RestAdapter.LogLevel logLevel23 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter24 = new retrofit.RestAdapter(server14, provider15, executor16, executor17, requestInterceptor18, converter19, profiler20, errorHandler21, log22, logLevel23);
        restAdapter10.logLevel = logLevel23;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.FULL;
        restAdapter10.setLogLevel(logLevel26);
        retrofit.Server server28 = restAdapter10.server;
        java.util.concurrent.Executor executor29 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertTrue("'" + logLevel23 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel23.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.FULL + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.FULL));
        org.junit.Assert.assertNull(server28);
        org.junit.Assert.assertNull(executor29);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        java.util.concurrent.Executor executor30 = restAdapter28.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel31 = restAdapter28.getLogLevel();
        retrofit.client.Client.Provider provider32 = restAdapter28.clientProvider;
        retrofit.Profiler profiler33 = restAdapter28.profiler;
        retrofit.converter.Converter converter34 = restAdapter28.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter35 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor36 = serializedObjectSupporter35.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter37 = serializedObjectSupporter35.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter38 = serializedObjectSupporter35.deserializeObjectConverter4();
        restAdapter28.serializedObjectSupporter = serializedObjectSupporter35;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        restAdapter28.setLogLevel(logLevel40);
        retrofit.RestAdapter.LogLevel logLevel42 = restAdapter28.logLevel;
        java.lang.String str43 = restAdapter28.getIDLE_THREAD_NAME();
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter28.getLogLevel();
        restAdapter10.setLogLevel(logLevel44);
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.RestAdapter.LogLevel logLevel57 = restAdapter56.logLevel;
        boolean boolean58 = logLevel57.log();
        boolean boolean59 = logLevel57.log();
        boolean boolean60 = logLevel57.log();
        restAdapter10.setLogLevel(logLevel57);
        retrofit.RestAdapter.Log log62 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(profiler33);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(requestInterceptor36);
        org.junit.Assert.assertNotNull(gsonConverter37);
        org.junit.Assert.assertNotNull(gsonConverter38);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Retrofit-Idle" + "'", str43, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel57 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel57.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(log62);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.client.Request request10 = serializedObjectSupporter6.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter6.deserializeObjectConverter3();
        retrofit.client.Request request12 = serializedObjectSupporter6.deserializeObjectRequest4();
        retrofit.client.Request request13 = serializedObjectSupporter6.deserializeObjectRequest2();
        retrofit.client.Request request14 = serializedObjectSupporter6.deserializeObjectRequest7();
        java.lang.String str15 = serializedObjectSupporter6.deserializeObjectString5();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.Profiler profiler17 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder18 = builder0.setProfiler(profiler17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(request12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(request14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "POST" + "'", str15, "POST");
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter1();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "http://example.com/" + "'", str1, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        java.util.concurrent.Executor executor6 = builder0.gethttpExecutor();
        retrofit.Profiler profiler7 = builder0.profiler;
        retrofit.RequestInterceptor requestInterceptor8 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder9 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor10 = null;
        builder9.sethttpExecutor(executor10);
        retrofit.Profiler profiler12 = null;
        builder9.profiler = profiler12;
        retrofit.RestAdapter.LogLevel logLevel14 = builder9.logLevel;
        java.util.concurrent.Executor executor15 = null;
        builder9.sethttpExecutor(executor15);
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder19 = builder17.setServer("hi!");
        java.util.concurrent.Executor executor20 = null;
        builder19.callbackExecutor = executor20;
        retrofit.SerializedObjectSupporter serializedObjectSupporter22 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor23 = serializedObjectSupporter22.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder24 = builder19.setRequestInterceptor(requestInterceptor23);
        retrofit.RestAdapter.Builder builder25 = builder9.setRequestInterceptor(requestInterceptor23);
        java.util.concurrent.Executor executor26 = builder25.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter27 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter27.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter27.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter27.deserializeObjectConverter7();
        retrofit.Server server31 = serializedObjectSupporter27.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder32 = builder25.setServer(server31);
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder35 = builder33.setServer("hi!");
        java.util.concurrent.Executor executor36 = null;
        builder35.callbackExecutor = executor36;
        retrofit.RestAdapter restAdapter38 = builder35.build();
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.RestAdapter.Log log44 = builder39.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler46 = serializedObjectSupporter45.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder47 = builder39.setErrorHandler(errorHandler46);
        retrofit.RestAdapter.Builder builder48 = builder35.setErrorHandler(errorHandler46);
        java.util.concurrent.Executor executor49 = builder48.callbackExecutor;
        builder32.sethttpExecutor(executor49);
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request52 = serializedObjectSupporter51.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter8();
        builder32.serializedObjectSupporter = serializedObjectSupporter51;
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter51.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder56 = builder0.setConverter((retrofit.converter.Converter) gsonConverter55);
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(profiler7);
        org.junit.Assert.assertNull(requestInterceptor8);
        org.junit.Assert.assertTrue("'" + logLevel14 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel14.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(requestInterceptor23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(server31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(restAdapter38);
        org.junit.Assert.assertNull(log44);
        org.junit.Assert.assertNotNull(errorHandler46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(executor49);
        org.junit.Assert.assertNotNull(request52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        retrofit.RestAdapter.Log log4 = null;
        builder0.log = log4;
        java.util.concurrent.Executor executor6 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor7 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter8 = new retrofit.SerializedObjectSupporter();
        java.lang.String str9 = serializedObjectSupporter8.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter8.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter8.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder12 = builder0.setConverter((retrofit.converter.Converter) gsonConverter11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = builder13.getcallbackExecutor();
        retrofit.client.Client.Provider provider15 = null;
        builder13.clientProvider = provider15;
        java.util.concurrent.Executor executor17 = builder13.getcallbackExecutor();
        retrofit.Server server18 = null;
        retrofit.client.Client.Provider provider19 = null;
        java.util.concurrent.Executor executor20 = null;
        java.util.concurrent.Executor executor21 = null;
        retrofit.RequestInterceptor requestInterceptor22 = null;
        retrofit.converter.Converter converter23 = null;
        retrofit.Profiler profiler24 = null;
        retrofit.ErrorHandler errorHandler25 = null;
        retrofit.RestAdapter.Log log26 = null;
        retrofit.RestAdapter.LogLevel logLevel27 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter28 = new retrofit.RestAdapter(server18, provider19, executor20, executor21, requestInterceptor22, converter23, profiler24, errorHandler25, log26, logLevel27);
        retrofit.ErrorHandler errorHandler29 = restAdapter28.errorHandler;
        int int30 = restAdapter28.getLOG_CHUNK_SIZE();
        retrofit.Server server31 = restAdapter28.getserver();
        retrofit.client.Client.Provider provider32 = restAdapter28.clientProvider;
        retrofit.client.Client.Provider provider33 = restAdapter28.getclientProvider();
        java.lang.String str34 = restAdapter28.getIDLE_THREAD_NAME();
        retrofit.Server server35 = null;
        retrofit.client.Client.Provider provider36 = null;
        java.util.concurrent.Executor executor37 = null;
        java.util.concurrent.Executor executor38 = null;
        retrofit.RequestInterceptor requestInterceptor39 = null;
        retrofit.converter.Converter converter40 = null;
        retrofit.Profiler profiler41 = null;
        retrofit.ErrorHandler errorHandler42 = null;
        retrofit.RestAdapter.Log log43 = null;
        retrofit.RestAdapter.LogLevel logLevel44 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter45 = new retrofit.RestAdapter(server35, provider36, executor37, executor38, requestInterceptor39, converter40, profiler41, errorHandler42, log43, logLevel44);
        retrofit.RestAdapter.LogLevel logLevel46 = restAdapter45.logLevel;
        retrofit.ErrorHandler errorHandler47 = restAdapter45.geterrorHandler();
        java.util.concurrent.Executor executor48 = restAdapter45.getcallbackExecutor();
        retrofit.converter.Converter converter49 = restAdapter45.converter;
        retrofit.Server server50 = restAdapter45.getserver();
        retrofit.RestAdapter.LogLevel logLevel51 = restAdapter45.getLogLevel();
        restAdapter28.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder53 = builder13.setLogLevel(logLevel51);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor55 = null;
        builder54.sethttpExecutor(executor55);
        retrofit.Profiler profiler57 = null;
        builder54.profiler = profiler57;
        retrofit.RestAdapter.LogLevel logLevel59 = builder54.logLevel;
        java.util.concurrent.Executor executor60 = null;
        builder54.sethttpExecutor(executor60);
        retrofit.RestAdapter.Builder builder62 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder64 = builder62.setServer("hi!");
        java.util.concurrent.Executor executor65 = null;
        builder64.callbackExecutor = executor65;
        retrofit.SerializedObjectSupporter serializedObjectSupporter67 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor68 = serializedObjectSupporter67.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder69 = builder64.setRequestInterceptor(requestInterceptor68);
        retrofit.RestAdapter.Builder builder70 = builder54.setRequestInterceptor(requestInterceptor68);
        java.util.concurrent.Executor executor71 = builder70.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter72 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor73 = serializedObjectSupporter72.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter72.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter72.deserializeObjectConverter7();
        retrofit.Server server76 = serializedObjectSupporter72.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder77 = builder70.setServer(server76);
        retrofit.RestAdapter.Builder builder78 = builder13.setServer(server76);
        retrofit.RestAdapter.Builder builder79 = builder12.setServer(server76);
        retrofit.converter.Converter converter80 = builder79.converter;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(executor6);
        org.junit.Assert.assertNull(executor7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Retrofit-Idle" + "'", str9, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(executor14);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertTrue("'" + logLevel27 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel27.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4000 + "'", int30 == 4000);
        org.junit.Assert.assertNull(server31);
        org.junit.Assert.assertNull(provider32);
        org.junit.Assert.assertNull(provider33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Retrofit-Idle" + "'", str34, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNull(converter49);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + logLevel59 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel59.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(requestInterceptor68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(executor71);
        org.junit.Assert.assertNotNull(requestInterceptor73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(server76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(converter80);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        java.util.concurrent.Executor executor17 = builder16.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter18.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.Server server22 = serializedObjectSupporter18.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder23 = builder16.setServer(server22);
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder26 = builder24.setServer("hi!");
        java.util.concurrent.Executor executor27 = null;
        builder26.callbackExecutor = executor27;
        retrofit.RestAdapter restAdapter29 = builder26.build();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor31 = null;
        builder30.sethttpExecutor(executor31);
        retrofit.Profiler profiler33 = null;
        builder30.profiler = profiler33;
        retrofit.RestAdapter.Log log35 = builder30.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter36 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler37 = serializedObjectSupporter36.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder38 = builder30.setErrorHandler(errorHandler37);
        retrofit.RestAdapter.Builder builder39 = builder26.setErrorHandler(errorHandler37);
        java.util.concurrent.Executor executor40 = builder39.callbackExecutor;
        builder23.sethttpExecutor(executor40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter42 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request43 = serializedObjectSupporter42.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter42.deserializeObjectConverter8();
        builder23.serializedObjectSupporter = serializedObjectSupporter42;
        retrofit.converter.GsonConverter gsonConverter46 = serializedObjectSupporter42.deserializeObjectConverter7();
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(executor17);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(server22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(restAdapter29);
        org.junit.Assert.assertNull(log35);
        org.junit.Assert.assertNotNull(errorHandler37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(executor40);
        org.junit.Assert.assertNotNull(request43);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(gsonConverter46);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Log log6 = restAdapter5.log;
        java.lang.String str7 = restAdapter5.getIDLE_THREAD_NAME();
        retrofit.ErrorHandler errorHandler8 = restAdapter5.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor9 = restAdapter5.getrequestInterceptor();
        retrofit.client.Client.Provider provider10 = restAdapter5.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNotNull(log6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNotNull(requestInterceptor9);
        org.junit.Assert.assertNotNull(provider10);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor13 = restAdapter10.getrequestInterceptor();
        java.lang.String str14 = restAdapter10.getTHREAD_PREFIX();
        retrofit.Server server15 = null;
        retrofit.client.Client.Provider provider16 = null;
        java.util.concurrent.Executor executor17 = null;
        java.util.concurrent.Executor executor18 = null;
        retrofit.RequestInterceptor requestInterceptor19 = null;
        retrofit.converter.Converter converter20 = null;
        retrofit.Profiler profiler21 = null;
        retrofit.ErrorHandler errorHandler22 = null;
        retrofit.RestAdapter.Log log23 = null;
        retrofit.RestAdapter.LogLevel logLevel24 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter25 = new retrofit.RestAdapter(server15, provider16, executor17, executor18, requestInterceptor19, converter20, profiler21, errorHandler22, log23, logLevel24);
        retrofit.ErrorHandler errorHandler26 = restAdapter25.errorHandler;
        java.util.concurrent.Executor executor27 = restAdapter25.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel28 = restAdapter25.getLogLevel();
        retrofit.client.Client.Provider provider29 = restAdapter25.clientProvider;
        retrofit.RestAdapter.LogLevel logLevel30 = restAdapter25.logLevel;
        retrofit.converter.Converter converter31 = restAdapter25.converter;
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = builder32.getcallbackExecutor();
        retrofit.client.Client.Provider provider34 = null;
        builder32.clientProvider = provider34;
        java.util.concurrent.Executor executor36 = builder32.getcallbackExecutor();
        retrofit.Server server37 = null;
        retrofit.client.Client.Provider provider38 = null;
        java.util.concurrent.Executor executor39 = null;
        java.util.concurrent.Executor executor40 = null;
        retrofit.RequestInterceptor requestInterceptor41 = null;
        retrofit.converter.Converter converter42 = null;
        retrofit.Profiler profiler43 = null;
        retrofit.ErrorHandler errorHandler44 = null;
        retrofit.RestAdapter.Log log45 = null;
        retrofit.RestAdapter.LogLevel logLevel46 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter47 = new retrofit.RestAdapter(server37, provider38, executor39, executor40, requestInterceptor41, converter42, profiler43, errorHandler44, log45, logLevel46);
        retrofit.ErrorHandler errorHandler48 = restAdapter47.errorHandler;
        int int49 = restAdapter47.getLOG_CHUNK_SIZE();
        retrofit.Server server50 = restAdapter47.getserver();
        retrofit.client.Client.Provider provider51 = restAdapter47.clientProvider;
        retrofit.client.Client.Provider provider52 = restAdapter47.getclientProvider();
        java.lang.String str53 = restAdapter47.getIDLE_THREAD_NAME();
        retrofit.Server server54 = null;
        retrofit.client.Client.Provider provider55 = null;
        java.util.concurrent.Executor executor56 = null;
        java.util.concurrent.Executor executor57 = null;
        retrofit.RequestInterceptor requestInterceptor58 = null;
        retrofit.converter.Converter converter59 = null;
        retrofit.Profiler profiler60 = null;
        retrofit.ErrorHandler errorHandler61 = null;
        retrofit.RestAdapter.Log log62 = null;
        retrofit.RestAdapter.LogLevel logLevel63 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter64 = new retrofit.RestAdapter(server54, provider55, executor56, executor57, requestInterceptor58, converter59, profiler60, errorHandler61, log62, logLevel63);
        retrofit.RestAdapter.LogLevel logLevel65 = restAdapter64.logLevel;
        retrofit.ErrorHandler errorHandler66 = restAdapter64.geterrorHandler();
        java.util.concurrent.Executor executor67 = restAdapter64.getcallbackExecutor();
        retrofit.converter.Converter converter68 = restAdapter64.converter;
        retrofit.Server server69 = restAdapter64.getserver();
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter64.getLogLevel();
        restAdapter47.setLogLevel(logLevel70);
        retrofit.RestAdapter.Builder builder72 = builder32.setLogLevel(logLevel70);
        restAdapter25.setLogLevel(logLevel70);
        restAdapter10.setLogLevel(logLevel70);
        retrofit.RestAdapter.Log log75 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-" + "'", str14, "Retrofit-");
        org.junit.Assert.assertTrue("'" + logLevel24 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel24.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler26);
        org.junit.Assert.assertNull(executor27);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertTrue("'" + logLevel30 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel30.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(executor33);
        org.junit.Assert.assertNull(executor36);
        org.junit.Assert.assertTrue("'" + logLevel46 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel46.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4000 + "'", int49 == 4000);
        org.junit.Assert.assertNull(server50);
        org.junit.Assert.assertNull(provider51);
        org.junit.Assert.assertNull(provider52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Retrofit-Idle" + "'", str53, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel65 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel65.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler66);
        org.junit.Assert.assertNull(executor67);
        org.junit.Assert.assertNull(converter68);
        org.junit.Assert.assertNull(server69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNull(log75);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        java.util.concurrent.Executor executor16 = restAdapter10.callbackExecutor;
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.NONE;
        restAdapter10.logLevel = logLevel17;
        retrofit.converter.Converter converter19 = restAdapter10.converter;
        java.lang.String str20 = restAdapter10.getIDLE_THREAD_NAME();
        java.util.concurrent.Executor executor21 = restAdapter10.getcallbackExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Retrofit-Idle" + "'", str20, "Retrofit-Idle");
        org.junit.Assert.assertNull(executor21);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        java.util.concurrent.Executor executor16 = restAdapter10.gethttpExecutor();
        retrofit.Server server17 = null;
        retrofit.client.Client.Provider provider18 = null;
        java.util.concurrent.Executor executor19 = null;
        java.util.concurrent.Executor executor20 = null;
        retrofit.RequestInterceptor requestInterceptor21 = null;
        retrofit.converter.Converter converter22 = null;
        retrofit.Profiler profiler23 = null;
        retrofit.ErrorHandler errorHandler24 = null;
        retrofit.RestAdapter.Log log25 = null;
        retrofit.RestAdapter.LogLevel logLevel26 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter27 = new retrofit.RestAdapter(server17, provider18, executor19, executor20, requestInterceptor21, converter22, profiler23, errorHandler24, log25, logLevel26);
        restAdapter10.setLogLevel(logLevel26);
        retrofit.Server server29 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertTrue("'" + logLevel26 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel26.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server29);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor15 = restAdapter10.getcallbackExecutor();
        retrofit.Server server16 = null;
        retrofit.client.Client.Provider provider17 = null;
        java.util.concurrent.Executor executor18 = null;
        java.util.concurrent.Executor executor19 = null;
        retrofit.RequestInterceptor requestInterceptor20 = null;
        retrofit.converter.Converter converter21 = null;
        retrofit.Profiler profiler22 = null;
        retrofit.ErrorHandler errorHandler23 = null;
        retrofit.RestAdapter.Log log24 = null;
        retrofit.RestAdapter.LogLevel logLevel25 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter26 = new retrofit.RestAdapter(server16, provider17, executor18, executor19, requestInterceptor20, converter21, profiler22, errorHandler23, log24, logLevel25);
        retrofit.ErrorHandler errorHandler27 = restAdapter26.errorHandler;
        java.util.concurrent.Executor executor28 = restAdapter26.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler29 = restAdapter26.new RestHandler();
        java.util.concurrent.Executor executor30 = restAdapter26.getcallbackExecutor();
        int int31 = restAdapter26.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.LogLevel logLevel32 = restAdapter26.logLevel;
        restAdapter10.logLevel = logLevel32;
        retrofit.SerializedObjectSupporter serializedObjectSupporter34 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertTrue("'" + logLevel25 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel25.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(executor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4000 + "'", int31 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel32 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel32.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(serializedObjectSupporter34);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.RestAdapter.Builder builder26 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder28 = builder26.setServer("hi!");
        retrofit.client.Client.Provider provider29 = builder26.clientProvider;
        retrofit.RequestInterceptor requestInterceptor30 = builder26.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel31 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean32 = logLevel31.log();
        retrofit.RestAdapter.Builder builder33 = builder26.setLogLevel(logLevel31);
        retrofit.RestAdapter.Builder builder34 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor35 = builder34.getcallbackExecutor();
        retrofit.client.Client.Provider provider36 = null;
        builder34.clientProvider = provider36;
        retrofit.Server server38 = null;
        builder34.server = server38;
        retrofit.RestAdapter.Log log40 = retrofit.RestAdapter.Log.NONE;
        builder34.log = log40;
        builder26.log = log40;
        builder20.log = log40;
        retrofit.RestAdapter.Builder builder44 = builder0.setLog(log40);
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request46 = serializedObjectSupporter45.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter47 = serializedObjectSupporter45.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter48 = serializedObjectSupporter45.deserializeObjectConverter1();
        retrofit.client.Request request49 = serializedObjectSupporter45.deserializeObjectRequest7();
        builder44.serializedObjectSupporter = serializedObjectSupporter45;
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNull(requestInterceptor30);
        org.junit.Assert.assertTrue("'" + logLevel31 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel31.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(executor35);
        org.junit.Assert.assertNotNull(log40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(gsonConverter47);
        org.junit.Assert.assertNotNull(gsonConverter48);
        org.junit.Assert.assertNotNull(request49);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler1 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.Server server2 = serializedObjectSupporter0.deserializeObjectServer1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(errorHandler1);
        org.junit.Assert.assertNotNull(server2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        retrofit.RestAdapter.Log log13 = restAdapter10.log;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(log13);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString4 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.mime.TypedString typedString5 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter6 = serializedObjectSupporter0.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(typedString4);
        org.junit.Assert.assertNotNull(typedString5);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.client.Client.Provider provider14 = restAdapter10.clientProvider;
        retrofit.converter.Converter converter15 = restAdapter10.converter;
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString3();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter3();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest7();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GET" + "'", str1, "GET");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GET" + "'", str2, "GET");
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        java.util.concurrent.Executor executor15 = restAdapter10.callbackExecutor;
        retrofit.client.Client.Provider provider16 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNull(provider16);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = null;
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter13;
        retrofit.client.Client.Provider provider15 = restAdapter10.getclientProvider();
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.requestInterceptor;
        retrofit.client.Client.Provider provider18 = restAdapter10.clientProvider;
        retrofit.RestAdapter.Log log19 = restAdapter10.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter2();
        java.lang.String str26 = serializedObjectSupporter20.deserializeObjectString3();
        restAdapter10.serializedObjectSupporter = serializedObjectSupporter20;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collections collections28 = serializedObjectSupporter20.deserializeObjectList1();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Collections$UnmodifiableRandomAccessList cannot be cast to java.util.Collections");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(errorHandler16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(log19);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GET" + "'", str26, "GET");
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        java.util.List<retrofit.client.Header> headerList4 = request3.headers;
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", headerList4, typedOutput5);
        java.lang.Class<?> wildcardClass7 = headerList4.getClass();
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(headerList4);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        retrofit.converter.GsonConverter gsonConverter20 = serializedObjectSupporter19.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter6();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertNotNull(gsonConverter20);
        org.junit.Assert.assertNotNull(gsonConverter21);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter28 = serializedObjectSupporter25.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter25.deserializeObjectConverter8();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter25;
        retrofit.client.Request request31 = serializedObjectSupporter25.deserializeObjectRequest8();
        retrofit.Server server32 = serializedObjectSupporter25.deserializeObjectServer1();
        retrofit.RequestInterceptor requestInterceptor33 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request34 = serializedObjectSupporter25.deserializeObjectRequest1();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter25.deserializeObjectErrorHandler1();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(gsonConverter28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertNotNull(server32);
        org.junit.Assert.assertNotNull(requestInterceptor33);
        org.junit.Assert.assertNotNull(request34);
        org.junit.Assert.assertNotNull(errorHandler35);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString1();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        java.util.concurrent.Executor executor16 = builder0.httpExecutor;
        retrofit.RestAdapter.Log log17 = null;
        builder0.log = log17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor20 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter19.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter19.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter19.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString24 = serializedObjectSupporter19.deserializeObjectTypedOutput2();
        java.lang.String str25 = serializedObjectSupporter19.deserializeObjectString2();
        builder0.serializedObjectSupporter = serializedObjectSupporter19;
        retrofit.client.Request request27 = serializedObjectSupporter19.deserializeObjectRequest5();
        retrofit.RequestInterceptor requestInterceptor28 = serializedObjectSupporter19.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter19.deserializeObjectConverter3();
        retrofit.client.Request request30 = serializedObjectSupporter19.deserializeObjectRequest7();
        java.lang.String str31 = request30.url;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNotNull(requestInterceptor20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(typedString24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Retrofit-Idle" + "'", str25, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(requestInterceptor28);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "http://example.com/" + "'", str31, "http://example.com/");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.converter.Converter converter10 = builder0.converter;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder13 = builder11.setServer("hi!");
        java.util.concurrent.Executor executor14 = null;
        builder13.callbackExecutor = executor14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter16 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor17 = serializedObjectSupporter16.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder18 = builder13.setRequestInterceptor(requestInterceptor17);
        retrofit.RestAdapter.Builder builder19 = builder0.setRequestInterceptor(requestInterceptor17);
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString4();
        java.lang.String str22 = serializedObjectSupporter20.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter24 = serializedObjectSupporter20.deserializeObjectConverter1();
        retrofit.Server server25 = serializedObjectSupporter20.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder26 = builder0.setServer(server25);
        retrofit.RestAdapter.Builder builder27 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder29 = builder27.setServer("hi!");
        java.util.concurrent.Executor executor30 = null;
        builder29.callbackExecutor = executor30;
        retrofit.RestAdapter restAdapter32 = builder29.build();
        retrofit.RestAdapter.Builder builder33 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor34 = null;
        builder33.sethttpExecutor(executor34);
        retrofit.Profiler profiler36 = null;
        builder33.profiler = profiler36;
        retrofit.RestAdapter.Log log38 = builder33.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler40 = serializedObjectSupporter39.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder41 = builder33.setErrorHandler(errorHandler40);
        retrofit.RestAdapter.Builder builder42 = builder29.setErrorHandler(errorHandler40);
        java.util.concurrent.Executor executor43 = builder42.callbackExecutor;
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.sethttpExecutor(executor45);
        retrofit.Profiler profiler47 = null;
        builder44.profiler = profiler47;
        retrofit.Server server49 = builder44.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter50 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor51 = serializedObjectSupporter50.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter52 = serializedObjectSupporter50.deserializeObjectConverter7();
        retrofit.client.Request request53 = serializedObjectSupporter50.deserializeObjectRequest1();
        builder44.serializedObjectSupporter = serializedObjectSupporter50;
        java.lang.String str55 = serializedObjectSupporter50.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler56 = serializedObjectSupporter50.deserializeObjectErrorHandler1();
        builder42.errorHandler = errorHandler56;
        retrofit.RestAdapter.Builder builder58 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder60 = builder58.setServer("hi!");
        retrofit.client.Client.Provider provider61 = builder58.clientProvider;
        retrofit.RestAdapter.Log log62 = null;
        builder58.log = log62;
        java.util.concurrent.Executor executor64 = builder58.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder65 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor66 = builder65.getcallbackExecutor();
        retrofit.client.Client.Provider provider67 = null;
        builder65.clientProvider = provider67;
        retrofit.SerializedObjectSupporter serializedObjectSupporter69 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor70 = serializedObjectSupporter69.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter71 = serializedObjectSupporter69.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter72 = serializedObjectSupporter69.deserializeObjectConverter5();
        retrofit.client.Request request73 = serializedObjectSupporter69.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter74 = serializedObjectSupporter69.deserializeObjectConverter3();
        retrofit.converter.GsonConverter gsonConverter75 = serializedObjectSupporter69.deserializeObjectConverter6();
        retrofit.RestAdapter.Builder builder76 = builder65.setConverter((retrofit.converter.Converter) gsonConverter75);
        builder58.converter = gsonConverter75;
        retrofit.ErrorHandler errorHandler78 = builder58.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler80 = serializedObjectSupporter79.deserializeObjectErrorHandler1();
        retrofit.Server server81 = serializedObjectSupporter79.deserializeObjectServer1();
        builder58.server = server81;
        retrofit.RestAdapter.Builder builder83 = builder42.setServer(server81);
        java.util.concurrent.Executor executor84 = builder83.getcallbackExecutor();
        builder0.sethttpExecutor(executor84);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(converter10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(requestInterceptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "http://example.com/" + "'", str21, "http://example.com/");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "POST" + "'", str22, "POST");
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(gsonConverter24);
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(restAdapter32);
        org.junit.Assert.assertNull(log38);
        org.junit.Assert.assertNotNull(errorHandler40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(executor43);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNotNull(requestInterceptor51);
        org.junit.Assert.assertNotNull(gsonConverter52);
        org.junit.Assert.assertNotNull(request53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Retrofit-Idle" + "'", str55, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(provider61);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNull(executor66);
        org.junit.Assert.assertNotNull(requestInterceptor70);
        org.junit.Assert.assertNotNull(gsonConverter71);
        org.junit.Assert.assertNotNull(gsonConverter72);
        org.junit.Assert.assertNotNull(request73);
        org.junit.Assert.assertNotNull(gsonConverter74);
        org.junit.Assert.assertNotNull(gsonConverter75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNull(errorHandler78);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNotNull(server81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(executor84);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        java.lang.String str6 = serializedObjectSupporter5.deserializeObjectString2();
        java.lang.String str7 = serializedObjectSupporter5.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder9 = builder0.setRequestInterceptor(requestInterceptor8);
        retrofit.RestAdapter.Builder builder10 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder12 = builder10.setServer("hi!");
        retrofit.client.Client.Provider provider13 = builder10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor14 = builder10.requestInterceptor;
        retrofit.Server server15 = null;
        builder10.server = server15;
        retrofit.Profiler profiler17 = builder10.profiler;
        retrofit.RestAdapter.Builder builder18 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder20 = builder18.setServer("hi!");
        retrofit.client.Client.Provider provider21 = builder18.clientProvider;
        retrofit.RequestInterceptor requestInterceptor22 = builder18.requestInterceptor;
        retrofit.RestAdapter.Builder builder23 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder25 = builder23.setServer("hi!");
        retrofit.client.Client.Provider provider26 = builder23.clientProvider;
        java.util.concurrent.Executor executor27 = null;
        builder23.setcallbackExecutor(executor27);
        retrofit.RestAdapter.Log log29 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder30 = builder23.setLog(log29);
        retrofit.RestAdapter.Builder builder31 = builder18.setLog(log29);
        retrofit.RestAdapter.Builder builder32 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor33 = null;
        builder32.sethttpExecutor(executor33);
        retrofit.Profiler profiler35 = null;
        builder32.profiler = profiler35;
        retrofit.RestAdapter.LogLevel logLevel37 = builder32.logLevel;
        java.util.concurrent.Executor executor38 = null;
        builder32.sethttpExecutor(executor38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder42 = builder40.setServer("hi!");
        java.util.concurrent.Executor executor43 = null;
        builder42.callbackExecutor = executor43;
        retrofit.SerializedObjectSupporter serializedObjectSupporter45 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor46 = serializedObjectSupporter45.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder47 = builder42.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.Builder builder48 = builder32.setRequestInterceptor(requestInterceptor46);
        retrofit.RestAdapter.LogLevel logLevel49 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean50 = logLevel49.log();
        builder32.logLevel = logLevel49;
        retrofit.SerializedObjectSupporter serializedObjectSupporter52 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor53 = serializedObjectSupporter52.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter54 = serializedObjectSupporter52.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter52.deserializeObjectConverter5();
        retrofit.client.Request request56 = serializedObjectSupporter52.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter52.deserializeObjectConverter3();
        retrofit.client.Request request58 = serializedObjectSupporter52.deserializeObjectRequest4();
        retrofit.client.Request request59 = serializedObjectSupporter52.deserializeObjectRequest2();
        builder32.serializedObjectSupporter = serializedObjectSupporter52;
        retrofit.converter.GsonConverter gsonConverter61 = serializedObjectSupporter52.deserializeObjectConverter5();
        builder18.serializedObjectSupporter = serializedObjectSupporter52;
        builder18.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder64 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor65 = null;
        builder64.sethttpExecutor(executor65);
        retrofit.Profiler profiler67 = null;
        builder64.profiler = profiler67;
        retrofit.RestAdapter.Log log69 = builder64.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter70 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler71 = serializedObjectSupporter70.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder72 = builder64.setErrorHandler(errorHandler71);
        builder18.errorHandler = errorHandler71;
        retrofit.RestAdapter.Builder builder74 = builder10.setErrorHandler(errorHandler71);
        retrofit.RestAdapter.Builder builder75 = builder9.setErrorHandler(errorHandler71);
        java.util.concurrent.Executor executor76 = builder9.httpExecutor;
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Retrofit-Idle" + "'", str6, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-" + "'", str7, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(provider13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(provider21);
        org.junit.Assert.assertNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(provider26);
        org.junit.Assert.assertNotNull(log29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + logLevel37 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel37.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(requestInterceptor46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + logLevel49 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel49.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(requestInterceptor53);
        org.junit.Assert.assertNotNull(gsonConverter54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertNotNull(request56);
        org.junit.Assert.assertNotNull(gsonConverter57);
        org.junit.Assert.assertNotNull(request58);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(gsonConverter61);
        org.junit.Assert.assertNull(log69);
        org.junit.Assert.assertNotNull(errorHandler71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNull(executor76);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        java.lang.String str13 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.ErrorHandler errorHandler15 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        java.util.concurrent.Executor executor18 = restAdapter10.callbackExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Retrofit-Idle" + "'", str13, "Retrofit-Idle");
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(errorHandler15);
        org.junit.Assert.assertNull(executor16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.Server server10 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter11 = builder0.serializedObjectSupporter;
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.Profiler profiler13 = null;
        builder0.profiler = profiler13;
        retrofit.RestAdapter.Builder builder15 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor16 = null;
        builder15.sethttpExecutor(executor16);
        retrofit.client.Client.Provider provider18 = builder15.getclientProvider();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.Server server24 = builder19.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor26 = serializedObjectSupporter25.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter27 = serializedObjectSupporter25.deserializeObjectConverter7();
        retrofit.client.Request request28 = serializedObjectSupporter25.deserializeObjectRequest1();
        builder19.serializedObjectSupporter = serializedObjectSupporter25;
        builder19.ensureSaneDefaults();
        retrofit.RestAdapter.Builder builder31 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder33 = builder31.setServer("hi!");
        java.util.concurrent.Executor executor34 = null;
        builder33.callbackExecutor = executor34;
        retrofit.RestAdapter restAdapter36 = builder33.build();
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor38 = null;
        builder37.sethttpExecutor(executor38);
        retrofit.Profiler profiler40 = null;
        builder37.profiler = profiler40;
        retrofit.RestAdapter.Log log42 = builder37.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler44 = serializedObjectSupporter43.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder45 = builder37.setErrorHandler(errorHandler44);
        retrofit.RestAdapter.Builder builder46 = builder33.setErrorHandler(errorHandler44);
        java.util.concurrent.Executor executor47 = builder46.callbackExecutor;
        builder19.setcallbackExecutor(executor47);
        builder15.setcallbackExecutor(executor47);
        builder0.sethttpExecutor(executor47);
        retrofit.SerializedObjectSupporter serializedObjectSupporter51 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor52 = serializedObjectSupporter51.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter53 = serializedObjectSupporter51.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter54 = serializedObjectSupporter51.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter55 = serializedObjectSupporter51.deserializeObjectConverter8();
        java.lang.String str56 = serializedObjectSupporter51.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter57 = serializedObjectSupporter51.deserializeObjectConverter8();
        builder0.converter = gsonConverter57;
        retrofit.Profiler profiler59 = null;
        builder0.profiler = profiler59;
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(server10);
        org.junit.Assert.assertNull(serializedObjectSupporter11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(provider18);
        org.junit.Assert.assertNull(server24);
        org.junit.Assert.assertNotNull(requestInterceptor26);
        org.junit.Assert.assertNotNull(gsonConverter27);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(restAdapter36);
        org.junit.Assert.assertNull(log42);
        org.junit.Assert.assertNotNull(errorHandler44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(executor47);
        org.junit.Assert.assertNotNull(requestInterceptor52);
        org.junit.Assert.assertNotNull(gsonConverter53);
        org.junit.Assert.assertNotNull(gsonConverter54);
        org.junit.Assert.assertNotNull(gsonConverter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "http://example.com/" + "'", str56, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter57);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.client.Client.Provider provider16 = restAdapter10.clientProvider;
        retrofit.RequestInterceptor requestInterceptor17 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter18 = restAdapter10.converter;
        retrofit.Server server19 = null;
        retrofit.client.Client.Provider provider20 = null;
        java.util.concurrent.Executor executor21 = null;
        java.util.concurrent.Executor executor22 = null;
        retrofit.RequestInterceptor requestInterceptor23 = null;
        retrofit.converter.Converter converter24 = null;
        retrofit.Profiler profiler25 = null;
        retrofit.ErrorHandler errorHandler26 = null;
        retrofit.RestAdapter.Log log27 = null;
        retrofit.RestAdapter.LogLevel logLevel28 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter29 = new retrofit.RestAdapter(server19, provider20, executor21, executor22, requestInterceptor23, converter24, profiler25, errorHandler26, log27, logLevel28);
        retrofit.ErrorHandler errorHandler30 = restAdapter29.errorHandler;
        int int31 = restAdapter29.getLOG_CHUNK_SIZE();
        retrofit.Server server32 = restAdapter29.getserver();
        retrofit.Server server33 = null;
        retrofit.client.Client.Provider provider34 = null;
        java.util.concurrent.Executor executor35 = null;
        java.util.concurrent.Executor executor36 = null;
        retrofit.RequestInterceptor requestInterceptor37 = null;
        retrofit.converter.Converter converter38 = null;
        retrofit.Profiler profiler39 = null;
        retrofit.ErrorHandler errorHandler40 = null;
        retrofit.RestAdapter.Log log41 = null;
        retrofit.RestAdapter.LogLevel logLevel42 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter43 = new retrofit.RestAdapter(server33, provider34, executor35, executor36, requestInterceptor37, converter38, profiler39, errorHandler40, log41, logLevel42);
        restAdapter29.logLevel = logLevel42;
        int int45 = restAdapter29.getLOG_CHUNK_SIZE();
        retrofit.Server server46 = null;
        retrofit.client.Client.Provider provider47 = null;
        java.util.concurrent.Executor executor48 = null;
        java.util.concurrent.Executor executor49 = null;
        retrofit.RequestInterceptor requestInterceptor50 = null;
        retrofit.converter.Converter converter51 = null;
        retrofit.Profiler profiler52 = null;
        retrofit.ErrorHandler errorHandler53 = null;
        retrofit.RestAdapter.Log log54 = null;
        retrofit.RestAdapter.LogLevel logLevel55 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter56 = new retrofit.RestAdapter(server46, provider47, executor48, executor49, requestInterceptor50, converter51, profiler52, errorHandler53, log54, logLevel55);
        retrofit.ErrorHandler errorHandler57 = restAdapter56.errorHandler;
        java.util.concurrent.Executor executor58 = restAdapter56.httpExecutor;
        java.lang.String str59 = restAdapter56.getIDLE_THREAD_NAME();
        retrofit.Server server60 = null;
        retrofit.client.Client.Provider provider61 = null;
        java.util.concurrent.Executor executor62 = null;
        java.util.concurrent.Executor executor63 = null;
        retrofit.RequestInterceptor requestInterceptor64 = null;
        retrofit.converter.Converter converter65 = null;
        retrofit.Profiler profiler66 = null;
        retrofit.ErrorHandler errorHandler67 = null;
        retrofit.RestAdapter.Log log68 = null;
        retrofit.RestAdapter.LogLevel logLevel69 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter70 = new retrofit.RestAdapter(server60, provider61, executor62, executor63, requestInterceptor64, converter65, profiler66, errorHandler67, log68, logLevel69);
        retrofit.ErrorHandler errorHandler71 = restAdapter70.errorHandler;
        int int72 = restAdapter70.getLOG_CHUNK_SIZE();
        retrofit.RestAdapter.Log log73 = restAdapter70.log;
        retrofit.RestAdapter.LogLevel logLevel74 = restAdapter70.getLogLevel();
        restAdapter56.logLevel = logLevel74;
        restAdapter29.setLogLevel(logLevel74);
        restAdapter10.setLogLevel(logLevel74);
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(provider16);
        org.junit.Assert.assertNull(requestInterceptor17);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertTrue("'" + logLevel28 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel28.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4000 + "'", int31 == 4000);
        org.junit.Assert.assertNull(server32);
        org.junit.Assert.assertTrue("'" + logLevel42 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel42.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4000 + "'", int45 == 4000);
        org.junit.Assert.assertTrue("'" + logLevel55 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel55.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler57);
        org.junit.Assert.assertNull(executor58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Retrofit-Idle" + "'", str59, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel69 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel69.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4000 + "'", int72 == 4000);
        org.junit.Assert.assertNull(log73);
        org.junit.Assert.assertTrue("'" + logLevel74 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel74.equals(retrofit.RestAdapter.LogLevel.HEADERS));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter7();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.converter.Converter converter14 = restAdapter10.converter;
        retrofit.Server server15 = restAdapter10.getserver();
        retrofit.RestAdapter.LogLevel logLevel16 = restAdapter10.getLogLevel();
        retrofit.ErrorHandler errorHandler17 = restAdapter10.geterrorHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = restAdapter10.serializedObjectSupporter;
        java.util.concurrent.Executor executor19 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNull(server15);
        org.junit.Assert.assertTrue("'" + logLevel16 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel16.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler17);
        org.junit.Assert.assertNull(serializedObjectSupporter18);
        org.junit.Assert.assertNull(executor19);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        retrofit.client.Client.Provider provider3 = builder0.clientProvider;
        java.util.concurrent.Executor executor4 = null;
        builder0.setcallbackExecutor(executor4);
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = builder11.getcallbackExecutor();
        retrofit.client.Client.Provider provider13 = null;
        builder11.clientProvider = provider13;
        java.util.concurrent.Executor executor15 = builder11.gethttpExecutor();
        retrofit.RestAdapter.Builder builder16 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder18 = builder16.setServer("hi!");
        java.util.concurrent.Executor executor19 = null;
        builder18.callbackExecutor = executor19;
        retrofit.SerializedObjectSupporter serializedObjectSupporter21 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor22 = serializedObjectSupporter21.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder23 = builder18.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder24 = builder11.setRequestInterceptor(requestInterceptor22);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider30 = builder25.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter31 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request32 = serializedObjectSupporter31.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler33 = serializedObjectSupporter31.deserializeObjectErrorHandler1();
        builder25.errorHandler = errorHandler33;
        retrofit.Server server35 = builder25.server;
        builder25.ensureSaneDefaults();
        retrofit.RequestInterceptor requestInterceptor37 = builder25.requestInterceptor;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder40 = builder38.setServer("hi!");
        java.util.concurrent.Executor executor41 = null;
        builder40.callbackExecutor = executor41;
        retrofit.RestAdapter restAdapter43 = builder40.build();
        retrofit.RestAdapter.Log log44 = restAdapter43.log;
        builder25.log = log44;
        log44.log("Retrofit-");
        builder24.log = log44;
        retrofit.RestAdapter.Builder builder49 = builder0.setLog(log44);
        retrofit.RequestInterceptor requestInterceptor50 = builder49.requestInterceptor;
        retrofit.RestAdapter.Builder builder51 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor52 = builder51.getcallbackExecutor();
        retrofit.client.Client.Provider provider53 = null;
        builder51.clientProvider = provider53;
        retrofit.Server server55 = null;
        builder51.server = server55;
        retrofit.Server server57 = null;
        retrofit.client.Client.Provider provider58 = null;
        java.util.concurrent.Executor executor59 = null;
        java.util.concurrent.Executor executor60 = null;
        retrofit.RequestInterceptor requestInterceptor61 = null;
        retrofit.converter.Converter converter62 = null;
        retrofit.Profiler profiler63 = null;
        retrofit.ErrorHandler errorHandler64 = null;
        retrofit.RestAdapter.Log log65 = null;
        retrofit.RestAdapter.LogLevel logLevel66 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter67 = new retrofit.RestAdapter(server57, provider58, executor59, executor60, requestInterceptor61, converter62, profiler63, errorHandler64, log65, logLevel66);
        retrofit.ErrorHandler errorHandler68 = restAdapter67.errorHandler;
        java.util.concurrent.Executor executor69 = restAdapter67.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel70 = restAdapter67.getLogLevel();
        builder51.logLevel = logLevel70;
        java.util.concurrent.Executor executor72 = null;
        builder51.callbackExecutor = executor72;
        retrofit.SerializedObjectSupporter serializedObjectSupporter74 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor75 = serializedObjectSupporter74.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter76 = serializedObjectSupporter74.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter77 = serializedObjectSupporter74.deserializeObjectConverter7();
        retrofit.Server server78 = serializedObjectSupporter74.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter79 = serializedObjectSupporter74.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler80 = serializedObjectSupporter74.deserializeObjectErrorHandler1();
        builder51.errorHandler = errorHandler80;
        builder49.errorHandler = errorHandler80;
        retrofit.client.Client.Provider provider83 = builder49.clientProvider;
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(requestInterceptor22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertNull(provider30);
        org.junit.Assert.assertNotNull(request32);
        org.junit.Assert.assertNotNull(errorHandler33);
        org.junit.Assert.assertNull(server35);
        org.junit.Assert.assertNotNull(requestInterceptor37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(restAdapter43);
        org.junit.Assert.assertNotNull(log44);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(requestInterceptor50);
        org.junit.Assert.assertNull(executor52);
        org.junit.Assert.assertTrue("'" + logLevel66 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel66.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler68);
        org.junit.Assert.assertNull(executor69);
        org.junit.Assert.assertTrue("'" + logLevel70 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel70.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(requestInterceptor75);
        org.junit.Assert.assertNotNull(gsonConverter76);
        org.junit.Assert.assertNotNull(gsonConverter77);
        org.junit.Assert.assertNotNull(server78);
        org.junit.Assert.assertNotNull(gsonConverter79);
        org.junit.Assert.assertNotNull(errorHandler80);
        org.junit.Assert.assertNull(provider83);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder8 = builder6.setServer("hi!");
        retrofit.client.Client.Provider provider9 = builder6.clientProvider;
        retrofit.RequestInterceptor requestInterceptor10 = builder6.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel11 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean12 = logLevel11.log();
        retrofit.RestAdapter.Builder builder13 = builder6.setLogLevel(logLevel11);
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider16 = null;
        builder14.clientProvider = provider16;
        retrofit.Server server18 = null;
        builder14.server = server18;
        retrofit.RestAdapter.Log log20 = retrofit.RestAdapter.Log.NONE;
        builder14.log = log20;
        builder6.log = log20;
        builder0.log = log20;
        java.util.concurrent.Executor executor24 = builder0.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = null;
        builder25.sethttpExecutor(executor26);
        retrofit.converter.Converter converter28 = builder25.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter29 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor30 = serializedObjectSupporter29.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter31 = serializedObjectSupporter29.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter32 = serializedObjectSupporter29.deserializeObjectConverter7();
        retrofit.Server server33 = serializedObjectSupporter29.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter34 = serializedObjectSupporter29.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler35 = serializedObjectSupporter29.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder36 = builder25.setErrorHandler(errorHandler35);
        retrofit.converter.Converter converter37 = builder25.converter;
        retrofit.RestAdapter.Builder builder38 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor39 = null;
        builder38.sethttpExecutor(executor39);
        retrofit.Profiler profiler41 = builder38.profiler;
        retrofit.client.Client.Provider provider42 = builder38.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter43 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter44 = serializedObjectSupporter43.deserializeObjectConverter2();
        retrofit.client.Request request45 = serializedObjectSupporter43.deserializeObjectRequest7();
        retrofit.client.Request request46 = serializedObjectSupporter43.deserializeObjectRequest2();
        retrofit.client.Request request47 = serializedObjectSupporter43.deserializeObjectRequest3();
        java.lang.String str48 = serializedObjectSupporter43.deserializeObjectString4();
        builder38.serializedObjectSupporter = serializedObjectSupporter43;
        retrofit.Server server50 = serializedObjectSupporter43.deserializeObjectServer1();
        builder25.server = server50;
        retrofit.RestAdapter.Builder builder52 = builder0.setServer(server50);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNull(provider9);
        org.junit.Assert.assertNull(requestInterceptor10);
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(executor15);
        org.junit.Assert.assertNotNull(log20);
        org.junit.Assert.assertNull(executor24);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(requestInterceptor30);
        org.junit.Assert.assertNotNull(gsonConverter31);
        org.junit.Assert.assertNotNull(gsonConverter32);
        org.junit.Assert.assertNotNull(server33);
        org.junit.Assert.assertNotNull(gsonConverter34);
        org.junit.Assert.assertNotNull(errorHandler35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(profiler41);
        org.junit.Assert.assertNull(provider42);
        org.junit.Assert.assertNotNull(gsonConverter44);
        org.junit.Assert.assertNotNull(request45);
        org.junit.Assert.assertNotNull(request46);
        org.junit.Assert.assertNotNull(request47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
        org.junit.Assert.assertNotNull(server50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.RestAdapter restAdapter5 = builder2.build();
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.RestAdapter.Log log11 = builder6.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler13 = serializedObjectSupporter12.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder14 = builder6.setErrorHandler(errorHandler13);
        retrofit.RestAdapter.Builder builder15 = builder2.setErrorHandler(errorHandler13);
        retrofit.converter.Converter converter16 = null;
        builder15.converter = converter16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter18.deserializeObjectConverter2();
        retrofit.client.Request request20 = serializedObjectSupporter18.deserializeObjectRequest7();
        retrofit.converter.GsonConverter gsonConverter21 = serializedObjectSupporter18.deserializeObjectConverter7();
        retrofit.mime.TypedString typedString22 = serializedObjectSupporter18.deserializeObjectTypedOutput2();
        builder15.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.client.Request request24 = serializedObjectSupporter18.deserializeObjectRequest6();
        retrofit.client.Request request25 = serializedObjectSupporter18.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(restAdapter5);
        org.junit.Assert.assertNull(log11);
        org.junit.Assert.assertNotNull(errorHandler13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(gsonConverter21);
        org.junit.Assert.assertNotNull(typedString22);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(request25);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request7 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(request7);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str6 = request5.getMethod();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "POST" + "'", str6, "POST");
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString6 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter2();
        java.lang.String str8 = serializedObjectSupporter0.deserializeObjectString4();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(typedString6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "http://example.com/" + "'", str8, "http://example.com/");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter1();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request9 = serializedObjectSupporter0.deserializeObjectRequest2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(request9);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.client.Client.Provider provider4 = builder0.getclientProvider();
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder6 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor7 = null;
        builder6.sethttpExecutor(executor7);
        retrofit.Profiler profiler9 = null;
        builder6.profiler = profiler9;
        retrofit.Server server11 = builder6.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter12 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter12.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter14 = serializedObjectSupporter12.deserializeObjectConverter7();
        retrofit.client.Request request15 = serializedObjectSupporter12.deserializeObjectRequest1();
        builder6.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request17 = serializedObjectSupporter12.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString18 = serializedObjectSupporter12.deserializeObjectTypedOutput2();
        builder0.serializedObjectSupporter = serializedObjectSupporter12;
        retrofit.client.Request request20 = serializedObjectSupporter12.deserializeObjectRequest4();
        retrofit.client.Request request21 = serializedObjectSupporter12.deserializeObjectRequest7();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter22 = serializedObjectSupporter12.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(gsonConverter14);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(request17);
        org.junit.Assert.assertNotNull(typedString18);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertNotNull(gsonConverter4);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter7();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.mime.TypedString typedString6 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GET" + "'", str4, "GET");
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(typedString6);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler13 = restAdapter10.geterrorHandler();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter15 = restAdapter10.getconverter();
        int int16 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = restAdapter10.serializedObjectSupporter;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(errorHandler13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(converter15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4000 + "'", int16 == 4000);
        org.junit.Assert.assertNull(serializedObjectSupporter17);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        retrofit.client.Client.Provider provider5 = null;
        java.util.concurrent.Executor executor6 = null;
        java.util.concurrent.Executor executor7 = null;
        retrofit.RequestInterceptor requestInterceptor8 = null;
        retrofit.converter.Converter converter9 = null;
        retrofit.Profiler profiler10 = null;
        retrofit.ErrorHandler errorHandler11 = null;
        retrofit.RestAdapter.Log log12 = null;
        retrofit.RestAdapter.LogLevel logLevel13 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter14 = new retrofit.RestAdapter(server4, provider5, executor6, executor7, requestInterceptor8, converter9, profiler10, errorHandler11, log12, logLevel13);
        builder0.logLevel = logLevel13;
        boolean boolean16 = logLevel13.log();
        boolean boolean17 = logLevel13.log();
        org.junit.Assert.assertNull(executor1);
        org.junit.Assert.assertTrue("'" + logLevel13 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel13.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.RestAdapter.LogLevel logLevel11 = restAdapter10.logLevel;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.geterrorHandler();
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = restAdapter10.serializedObjectSupporter;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        retrofit.RequestInterceptor requestInterceptor16 = restAdapter10.requestInterceptor;
        retrofit.RestAdapter.LogLevel logLevel17 = restAdapter10.logLevel;
        java.util.concurrent.Executor executor18 = restAdapter10.gethttpExecutor();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel11 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel11.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(serializedObjectSupporter14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(requestInterceptor16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(executor18);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.mime.TypedString typedString6 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        java.lang.String str7 = serializedObjectSupporter0.deserializeObjectString2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(typedString6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Retrofit-Idle" + "'", str7, "Retrofit-Idle");
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder7 = builder5.setServer("hi!");
        java.util.concurrent.Executor executor8 = null;
        builder7.callbackExecutor = executor8;
        retrofit.SerializedObjectSupporter serializedObjectSupporter10 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor11 = serializedObjectSupporter10.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder12 = builder7.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder13 = builder0.setRequestInterceptor(requestInterceptor11);
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        retrofit.RequestInterceptor requestInterceptor16 = builder15.requestInterceptor;
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(requestInterceptor11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor16);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.ErrorHandler errorHandler1 = builder0.errorHandler;
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request3 = serializedObjectSupporter2.deserializeObjectRequest6();
        builder0.serializedObjectSupporter = serializedObjectSupporter2;
        retrofit.RestAdapter.Builder builder5 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor6 = null;
        builder5.sethttpExecutor(executor6);
        retrofit.Profiler profiler8 = null;
        builder5.profiler = profiler8;
        retrofit.RestAdapter.Log log10 = builder5.log;
        retrofit.client.Client.Provider provider11 = null;
        builder5.setclientProvider(provider11);
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder15.callbackExecutor = executor16;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor19 = serializedObjectSupporter18.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder20 = builder15.setRequestInterceptor(requestInterceptor19);
        retrofit.Server server21 = builder20.server;
        builder5.server = server21;
        builder0.server = server21;
        retrofit.RestAdapter.Builder builder24 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor25 = null;
        builder24.sethttpExecutor(executor25);
        retrofit.converter.Converter converter27 = builder24.converter;
        java.util.concurrent.Executor executor28 = builder24.getcallbackExecutor();
        retrofit.client.Client.Provider provider29 = builder24.getclientProvider();
        retrofit.RestAdapter.Builder builder30 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder32 = builder30.setServer("hi!");
        java.util.concurrent.Executor executor33 = null;
        builder32.callbackExecutor = executor33;
        retrofit.RestAdapter restAdapter35 = builder32.build();
        retrofit.RestAdapter.Log log36 = restAdapter35.log;
        java.util.concurrent.Executor executor37 = restAdapter35.gethttpExecutor();
        retrofit.client.Client.Provider provider38 = restAdapter35.getclientProvider();
        builder24.setclientProvider(provider38);
        retrofit.RestAdapter.Builder builder40 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor41 = null;
        builder40.sethttpExecutor(executor41);
        retrofit.converter.Converter converter43 = builder40.converter;
        java.util.concurrent.Executor executor44 = builder40.getcallbackExecutor();
        retrofit.client.Client.Provider provider45 = builder40.getclientProvider();
        retrofit.RestAdapter.Builder builder46 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor47 = null;
        builder46.sethttpExecutor(executor47);
        retrofit.Profiler profiler49 = null;
        builder46.profiler = profiler49;
        retrofit.RestAdapter.LogLevel logLevel51 = builder46.logLevel;
        java.util.concurrent.Executor executor52 = null;
        builder46.sethttpExecutor(executor52);
        retrofit.RestAdapter.Builder builder54 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder56 = builder54.setServer("hi!");
        java.util.concurrent.Executor executor57 = null;
        builder56.callbackExecutor = executor57;
        retrofit.SerializedObjectSupporter serializedObjectSupporter59 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor60 = serializedObjectSupporter59.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder61 = builder56.setRequestInterceptor(requestInterceptor60);
        retrofit.RestAdapter.Builder builder62 = builder46.setRequestInterceptor(requestInterceptor60);
        java.util.concurrent.Executor executor63 = builder62.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter64 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor65 = serializedObjectSupporter64.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter66 = serializedObjectSupporter64.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter67 = serializedObjectSupporter64.deserializeObjectConverter7();
        retrofit.Server server68 = serializedObjectSupporter64.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder69 = builder62.setServer(server68);
        java.util.concurrent.Executor executor70 = null;
        builder69.sethttpExecutor(executor70);
        retrofit.Server server72 = builder69.server;
        retrofit.RestAdapter.Builder builder73 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder75 = builder73.setServer("hi!");
        java.util.concurrent.Executor executor76 = null;
        builder75.callbackExecutor = executor76;
        retrofit.RestAdapter restAdapter78 = builder75.build();
        retrofit.RestAdapter.Builder builder79 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor80 = null;
        builder79.sethttpExecutor(executor80);
        retrofit.Profiler profiler82 = null;
        builder79.profiler = profiler82;
        retrofit.RestAdapter.Log log84 = builder79.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter85 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler86 = serializedObjectSupporter85.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder87 = builder79.setErrorHandler(errorHandler86);
        retrofit.RestAdapter.Builder builder88 = builder75.setErrorHandler(errorHandler86);
        java.util.concurrent.Executor executor89 = builder88.callbackExecutor;
        builder69.callbackExecutor = executor89;
        builder40.sethttpExecutor(executor89);
        builder24.httpExecutor = executor89;
        builder0.httpExecutor = executor89;
        java.lang.Class<?> wildcardClass94 = builder0.getClass();
        org.junit.Assert.assertNull(errorHandler1);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(requestInterceptor19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(server21);
        org.junit.Assert.assertNull(converter27);
        org.junit.Assert.assertNull(executor28);
        org.junit.Assert.assertNull(provider29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(restAdapter35);
        org.junit.Assert.assertNotNull(log36);
        org.junit.Assert.assertNotNull(executor37);
        org.junit.Assert.assertNotNull(provider38);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(executor44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertTrue("'" + logLevel51 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel51.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(requestInterceptor60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(executor63);
        org.junit.Assert.assertNotNull(requestInterceptor65);
        org.junit.Assert.assertNotNull(gsonConverter66);
        org.junit.Assert.assertNotNull(gsonConverter67);
        org.junit.Assert.assertNotNull(server68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(server72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(restAdapter78);
        org.junit.Assert.assertNull(log84);
        org.junit.Assert.assertNotNull(errorHandler86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.RestAdapter.Log log16 = restAdapter10.log;
        retrofit.client.Client.Provider provider17 = restAdapter10.getclientProvider();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(log16);
        org.junit.Assert.assertNull(provider17);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor12 = restAdapter10.httpExecutor;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = builder14.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request21 = serializedObjectSupporter20.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler22 = serializedObjectSupporter20.deserializeObjectErrorHandler1();
        builder14.errorHandler = errorHandler22;
        retrofit.RestAdapter.Log log24 = builder14.log;
        retrofit.Server server25 = null;
        retrofit.client.Client.Provider provider26 = null;
        java.util.concurrent.Executor executor27 = null;
        java.util.concurrent.Executor executor28 = null;
        retrofit.RequestInterceptor requestInterceptor29 = null;
        retrofit.converter.Converter converter30 = null;
        retrofit.Profiler profiler31 = null;
        retrofit.ErrorHandler errorHandler32 = null;
        retrofit.RestAdapter.Log log33 = null;
        retrofit.RestAdapter.LogLevel logLevel34 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter35 = new retrofit.RestAdapter(server25, provider26, executor27, executor28, requestInterceptor29, converter30, profiler31, errorHandler32, log33, logLevel34);
        retrofit.ErrorHandler errorHandler36 = restAdapter35.errorHandler;
        retrofit.ErrorHandler errorHandler37 = restAdapter35.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler38 = restAdapter35.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter39 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request40 = serializedObjectSupporter39.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter41 = serializedObjectSupporter39.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter42 = serializedObjectSupporter39.deserializeObjectConverter1();
        restHandler38.serializedObjectSupporter = serializedObjectSupporter39;
        retrofit.SerializedObjectSupporter serializedObjectSupporter44 = restHandler38.serializedObjectSupporter;
        java.lang.String str45 = serializedObjectSupporter44.deserializeObjectString5();
        builder14.serializedObjectSupporter = serializedObjectSupporter44;
        restHandler13.serializedObjectSupporter = serializedObjectSupporter44;
        java.lang.String str48 = serializedObjectSupporter44.deserializeObjectString4();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(errorHandler22);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertTrue("'" + logLevel34 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel34.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler36);
        org.junit.Assert.assertNull(errorHandler37);
        org.junit.Assert.assertNotNull(request40);
        org.junit.Assert.assertNotNull(gsonConverter41);
        org.junit.Assert.assertNotNull(gsonConverter42);
        org.junit.Assert.assertNotNull(serializedObjectSupporter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "POST" + "'", str45, "POST");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "http://example.com/" + "'", str48, "http://example.com/");
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        retrofit.RequestInterceptor requestInterceptor18 = restAdapter10.requestInterceptor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(requestInterceptor18);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = builder0.profiler;
        retrofit.client.Client.Provider provider4 = builder0.clientProvider;
        java.util.concurrent.Executor executor5 = null;
        builder0.httpExecutor = executor5;
        retrofit.Server server7 = builder0.server;
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor9 = null;
        builder8.sethttpExecutor(executor9);
        retrofit.converter.Converter converter11 = builder8.converter;
        java.util.concurrent.Executor executor12 = builder8.getcallbackExecutor();
        retrofit.RequestInterceptor requestInterceptor13 = builder8.requestInterceptor;
        retrofit.RestAdapter.Builder builder14 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor15 = null;
        builder14.sethttpExecutor(executor15);
        retrofit.converter.Converter converter17 = builder14.converter;
        java.util.concurrent.Executor executor18 = builder14.getcallbackExecutor();
        retrofit.client.Client.Provider provider19 = builder14.getclientProvider();
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder22 = builder20.setServer("hi!");
        java.util.concurrent.Executor executor23 = null;
        builder22.callbackExecutor = executor23;
        retrofit.RestAdapter restAdapter25 = builder22.build();
        retrofit.RestAdapter.Log log26 = restAdapter25.log;
        java.util.concurrent.Executor executor27 = restAdapter25.gethttpExecutor();
        retrofit.client.Client.Provider provider28 = restAdapter25.getclientProvider();
        builder14.setclientProvider(provider28);
        retrofit.RestAdapter.Builder builder30 = builder8.setClient(provider28);
        builder0.setclientProvider(provider28);
        org.junit.Assert.assertNull(profiler3);
        org.junit.Assert.assertNull(provider4);
        org.junit.Assert.assertNull(server7);
        org.junit.Assert.assertNull(converter11);
        org.junit.Assert.assertNull(executor12);
        org.junit.Assert.assertNull(requestInterceptor13);
        org.junit.Assert.assertNull(converter17);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(provider19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(restAdapter25);
        org.junit.Assert.assertNotNull(log26);
        org.junit.Assert.assertNotNull(executor27);
        org.junit.Assert.assertNotNull(provider28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        java.util.concurrent.Executor executor13 = restAdapter10.getcallbackExecutor();
        retrofit.ErrorHandler errorHandler14 = restAdapter10.errorHandler;
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.requestInterceptor;
        java.util.concurrent.Executor executor16 = restAdapter10.httpExecutor;
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNull(executor13);
        org.junit.Assert.assertNull(errorHandler14);
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(executor16);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        retrofit.RequestInterceptor requestInterceptor14 = restAdapter10.getrequestInterceptor();
        retrofit.RestAdapter.Log log15 = restAdapter10.log;
        retrofit.ErrorHandler errorHandler16 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertNull(requestInterceptor14);
        org.junit.Assert.assertNull(log15);
        org.junit.Assert.assertNull(errorHandler16);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.RestAdapter.LogLevel logLevel12 = restAdapter10.logLevel;
        retrofit.Server server13 = restAdapter10.getserver();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + logLevel12 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel12.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(server13);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.mime.TypedString typedString2 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(typedString2);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider5 = builder0.getclientProvider();
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request7 = serializedObjectSupporter6.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler8 = serializedObjectSupporter6.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler8;
        retrofit.RestAdapter.Log log10 = builder0.log;
        java.util.concurrent.Executor executor11 = builder0.httpExecutor;
        retrofit.RequestInterceptor requestInterceptor12 = builder0.requestInterceptor;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder15 = builder13.setServer("hi!");
        java.util.concurrent.Executor executor16 = null;
        builder15.callbackExecutor = executor16;
        retrofit.RestAdapter restAdapter18 = builder15.build();
        retrofit.RestAdapter.Builder builder19 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor20 = null;
        builder19.sethttpExecutor(executor20);
        retrofit.Profiler profiler22 = null;
        builder19.profiler = profiler22;
        retrofit.RestAdapter.Log log24 = builder19.log;
        retrofit.SerializedObjectSupporter serializedObjectSupporter25 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler26 = serializedObjectSupporter25.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder27 = builder19.setErrorHandler(errorHandler26);
        retrofit.RestAdapter.Builder builder28 = builder15.setErrorHandler(errorHandler26);
        java.util.concurrent.Executor executor29 = builder28.callbackExecutor;
        builder0.httpExecutor = executor29;
        retrofit.RestAdapter.Builder builder32 = builder0.setServer("http://example.com/");
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(provider5);
        org.junit.Assert.assertNotNull(request7);
        org.junit.Assert.assertNotNull(errorHandler8);
        org.junit.Assert.assertNull(log10);
        org.junit.Assert.assertNull(executor11);
        org.junit.Assert.assertNull(requestInterceptor12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(restAdapter18);
        org.junit.Assert.assertNull(log24);
        org.junit.Assert.assertNotNull(errorHandler26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(executor29);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        java.lang.String str6 = serializedObjectSupporter0.deserializeObjectString3();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.client.Request request8 = serializedObjectSupporter0.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter10 = serializedObjectSupporter0.deserializeObjectConverter2();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GET" + "'", str6, "GET");
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(request8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(gsonConverter10);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.RestAdapter.Builder builder7 = builder0.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider8 = builder7.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request10 = serializedObjectSupporter9.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter11 = serializedObjectSupporter9.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter9.deserializeObjectConverter1();
        retrofit.RequestInterceptor requestInterceptor13 = serializedObjectSupporter9.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder14 = builder7.setRequestInterceptor(requestInterceptor13);
        retrofit.client.Client.Provider provider15 = builder7.getclientProvider();
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(provider8);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertNotNull(gsonConverter11);
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(requestInterceptor13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider15);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        java.lang.String str5 = request4.url;
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "http://example.com/" + "'", str5, "http://example.com/");
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        java.lang.String str1 = serializedObjectSupporter0.deserializeObjectString2();
        java.lang.String str2 = serializedObjectSupporter0.deserializeObjectString1();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter4();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter6();
        retrofit.mime.TypedString typedString7 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Retrofit-Idle" + "'", str1, "Retrofit-Idle");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Retrofit-" + "'", str2, "Retrofit-");
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(typedString7);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        int int12 = restAdapter10.getLOG_CHUNK_SIZE();
        retrofit.Server server13 = restAdapter10.getserver();
        java.lang.String str14 = restAdapter10.getIDLE_THREAD_NAME();
        retrofit.RequestInterceptor requestInterceptor15 = restAdapter10.getrequestInterceptor();
        retrofit.converter.Converter converter16 = restAdapter10.converter;
        retrofit.Profiler profiler17 = restAdapter10.getprofiler();
        retrofit.ErrorHandler errorHandler18 = restAdapter10.geterrorHandler();
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4000 + "'", int12 == 4000);
        org.junit.Assert.assertNull(server13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Retrofit-Idle" + "'", str14, "Retrofit-Idle");
        org.junit.Assert.assertNull(requestInterceptor15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(profiler17);
        org.junit.Assert.assertNull(errorHandler18);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = builder0.getcallbackExecutor();
        retrofit.client.Client.Provider provider2 = null;
        builder0.clientProvider = provider2;
        retrofit.Server server4 = null;
        builder0.server = server4;
        retrofit.Profiler profiler6 = null;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter.Builder builder7 = builder0.setProfiler(profiler6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Profiler may not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(executor1);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        retrofit.SerializedObjectSupporter serializedObjectSupporter4 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor5 = serializedObjectSupporter4.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter4.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter7 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.Server server8 = serializedObjectSupporter4.deserializeObjectServer1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter4.deserializeObjectConverter7();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter4.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder11 = builder0.setErrorHandler(errorHandler10);
        retrofit.converter.Converter converter12 = builder0.converter;
        retrofit.RestAdapter.Builder builder13 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor14 = null;
        builder13.sethttpExecutor(executor14);
        retrofit.Profiler profiler16 = builder13.profiler;
        retrofit.client.Client.Provider provider17 = builder13.clientProvider;
        retrofit.SerializedObjectSupporter serializedObjectSupporter18 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter18.deserializeObjectConverter2();
        retrofit.client.Request request20 = serializedObjectSupporter18.deserializeObjectRequest7();
        retrofit.client.Request request21 = serializedObjectSupporter18.deserializeObjectRequest2();
        retrofit.client.Request request22 = serializedObjectSupporter18.deserializeObjectRequest3();
        java.lang.String str23 = serializedObjectSupporter18.deserializeObjectString4();
        builder13.serializedObjectSupporter = serializedObjectSupporter18;
        retrofit.Server server25 = serializedObjectSupporter18.deserializeObjectServer1();
        builder0.server = server25;
        retrofit.RestAdapter restAdapter27 = builder0.build();
        java.lang.String str28 = restAdapter27.getIDLE_THREAD_NAME();
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestInterceptor5);
        org.junit.Assert.assertNotNull(gsonConverter6);
        org.junit.Assert.assertNotNull(gsonConverter7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(profiler16);
        org.junit.Assert.assertNull(provider17);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNotNull(request21);
        org.junit.Assert.assertNotNull(request22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "http://example.com/" + "'", str23, "http://example.com/");
        org.junit.Assert.assertNotNull(server25);
        org.junit.Assert.assertNotNull(restAdapter27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Retrofit-Idle" + "'", str28, "Retrofit-Idle");
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.RestAdapter.LogLevel logLevel5 = builder0.logLevel;
        java.util.concurrent.Executor executor6 = null;
        builder0.sethttpExecutor(executor6);
        retrofit.RestAdapter.Builder builder8 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder10 = builder8.setServer("hi!");
        java.util.concurrent.Executor executor11 = null;
        builder10.callbackExecutor = executor11;
        retrofit.SerializedObjectSupporter serializedObjectSupporter13 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor14 = serializedObjectSupporter13.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder15 = builder10.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.Builder builder16 = builder0.setRequestInterceptor(requestInterceptor14);
        retrofit.RestAdapter.LogLevel logLevel17 = retrofit.RestAdapter.LogLevel.HEADERS;
        boolean boolean18 = logLevel17.log();
        builder0.logLevel = logLevel17;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor21 = serializedObjectSupporter20.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request24 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter20.deserializeObjectConverter3();
        retrofit.client.Request request26 = serializedObjectSupporter20.deserializeObjectRequest4();
        retrofit.client.Request request27 = serializedObjectSupporter20.deserializeObjectRequest2();
        builder0.serializedObjectSupporter = serializedObjectSupporter20;
        retrofit.converter.GsonConverter gsonConverter29 = serializedObjectSupporter20.deserializeObjectConverter5();
        retrofit.client.Request request30 = serializedObjectSupporter20.deserializeObjectRequest1();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.RestAdapter restAdapter31 = serializedObjectSupporter20.deserializeObjectLogLevel3();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: retrofit.RestAdapter$LogLevel cannot be cast to retrofit.RestAdapter");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel5 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel5.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(requestInterceptor14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + logLevel17 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel17.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(requestInterceptor21);
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(request24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request27);
        org.junit.Assert.assertNotNull(gsonConverter29);
        org.junit.Assert.assertNotNull(request30);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor1 = serializedObjectSupporter0.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter2 = serializedObjectSupporter0.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter3 = serializedObjectSupporter0.deserializeObjectConverter4();
        java.lang.String str4 = serializedObjectSupporter0.deserializeObjectString5();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter8();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest6();
        org.junit.Assert.assertNotNull(requestInterceptor1);
        org.junit.Assert.assertNotNull(gsonConverter2);
        org.junit.Assert.assertNotNull(gsonConverter3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "POST" + "'", str4, "POST");
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter5 = serializedObjectSupporter0.deserializeObjectConverter7();
        retrofit.Server server6 = serializedObjectSupporter0.deserializeObjectServer1();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(gsonConverter5);
        org.junit.Assert.assertNotNull(server6);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.client.Client.Provider provider3 = builder0.getclientProvider();
        retrofit.RestAdapter.Builder builder4 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder6 = builder4.setServer("hi!");
        retrofit.client.Client.Provider provider7 = builder4.clientProvider;
        retrofit.RestAdapter.Log log8 = null;
        builder4.log = log8;
        java.util.concurrent.Executor executor10 = builder4.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.client.Client.Provider provider14 = builder11.getclientProvider();
        retrofit.client.Client.Provider provider15 = builder11.getclientProvider();
        retrofit.Server server16 = builder11.server;
        retrofit.RestAdapter.Builder builder17 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor18 = null;
        builder17.sethttpExecutor(executor18);
        retrofit.Profiler profiler20 = null;
        builder17.profiler = profiler20;
        retrofit.Server server22 = builder17.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter23 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor24 = serializedObjectSupporter23.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter25 = serializedObjectSupporter23.deserializeObjectConverter7();
        retrofit.client.Request request26 = serializedObjectSupporter23.deserializeObjectRequest1();
        builder17.serializedObjectSupporter = serializedObjectSupporter23;
        retrofit.client.Request request28 = serializedObjectSupporter23.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString29 = serializedObjectSupporter23.deserializeObjectTypedOutput2();
        builder11.serializedObjectSupporter = serializedObjectSupporter23;
        java.util.concurrent.Executor executor31 = builder11.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter32 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request33 = serializedObjectSupporter32.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString35 = serializedObjectSupporter32.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler36 = serializedObjectSupporter32.deserializeObjectErrorHandler1();
        builder11.errorHandler = errorHandler36;
        builder4.errorHandler = errorHandler36;
        retrofit.RestAdapter.Builder builder39 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor40 = null;
        builder39.sethttpExecutor(executor40);
        retrofit.Profiler profiler42 = null;
        builder39.profiler = profiler42;
        retrofit.RestAdapter.LogLevel logLevel44 = builder39.logLevel;
        java.util.concurrent.Executor executor45 = null;
        builder39.sethttpExecutor(executor45);
        retrofit.client.Client.Provider provider47 = builder39.clientProvider;
        java.util.concurrent.Executor executor48 = builder39.callbackExecutor;
        retrofit.RestAdapter.Builder builder49 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder51 = builder49.setServer("hi!");
        java.util.concurrent.Executor executor52 = null;
        builder51.callbackExecutor = executor52;
        retrofit.RestAdapter restAdapter54 = builder51.build();
        retrofit.RestAdapter.Log log55 = restAdapter54.log;
        java.util.concurrent.Executor executor56 = restAdapter54.gethttpExecutor();
        retrofit.client.Client.Provider provider57 = restAdapter54.getclientProvider();
        builder39.setclientProvider(provider57);
        builder4.clientProvider = provider57;
        builder0.clientProvider = provider57;
        org.junit.Assert.assertNull(provider3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(provider7);
        org.junit.Assert.assertNull(executor10);
        org.junit.Assert.assertNull(provider14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNull(server22);
        org.junit.Assert.assertNotNull(requestInterceptor24);
        org.junit.Assert.assertNotNull(gsonConverter25);
        org.junit.Assert.assertNotNull(request26);
        org.junit.Assert.assertNotNull(request28);
        org.junit.Assert.assertNotNull(typedString29);
        org.junit.Assert.assertNull(executor31);
        org.junit.Assert.assertNotNull(request33);
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(typedString35);
        org.junit.Assert.assertNotNull(errorHandler36);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(executor48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(restAdapter54);
        org.junit.Assert.assertNotNull(log55);
        org.junit.Assert.assertNotNull(executor56);
        org.junit.Assert.assertNotNull(provider57);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request1 = serializedObjectSupporter0.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler2 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString3 = serializedObjectSupporter0.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler4 = serializedObjectSupporter0.deserializeObjectErrorHandler1();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest8();
        retrofit.client.Request request6 = serializedObjectSupporter0.deserializeObjectRequest7();
        org.junit.Assert.assertNotNull(request1);
        org.junit.Assert.assertNotNull(errorHandler2);
        org.junit.Assert.assertNotNull(typedString3);
        org.junit.Assert.assertNotNull(errorHandler4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(request6);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.converter.Converter converter3 = builder0.converter;
        java.util.concurrent.Executor executor4 = builder0.getcallbackExecutor();
        java.util.concurrent.Executor executor5 = builder0.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter6.deserializeObjectConverter5();
        retrofit.RestAdapter.Builder builder10 = builder0.setConverter((retrofit.converter.Converter) gsonConverter9);
        retrofit.Server server11 = builder0.server;
        retrofit.RestAdapter.Builder builder12 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder14 = builder12.setServer("hi!");
        retrofit.client.Client.Provider provider15 = builder12.clientProvider;
        retrofit.RestAdapter.Log log16 = null;
        builder12.log = log16;
        java.util.concurrent.Executor executor18 = builder12.getcallbackExecutor();
        java.util.concurrent.Executor executor19 = builder12.callbackExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter20 = new retrofit.SerializedObjectSupporter();
        java.lang.String str21 = serializedObjectSupporter20.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter22 = serializedObjectSupporter20.deserializeObjectConverter2();
        retrofit.converter.GsonConverter gsonConverter23 = serializedObjectSupporter20.deserializeObjectConverter7();
        retrofit.RestAdapter.Builder builder24 = builder12.setConverter((retrofit.converter.Converter) gsonConverter23);
        retrofit.RestAdapter.Builder builder25 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor26 = builder25.getcallbackExecutor();
        retrofit.client.Client.Provider provider27 = null;
        builder25.clientProvider = provider27;
        java.util.concurrent.Executor executor29 = builder25.getcallbackExecutor();
        retrofit.Server server30 = null;
        retrofit.client.Client.Provider provider31 = null;
        java.util.concurrent.Executor executor32 = null;
        java.util.concurrent.Executor executor33 = null;
        retrofit.RequestInterceptor requestInterceptor34 = null;
        retrofit.converter.Converter converter35 = null;
        retrofit.Profiler profiler36 = null;
        retrofit.ErrorHandler errorHandler37 = null;
        retrofit.RestAdapter.Log log38 = null;
        retrofit.RestAdapter.LogLevel logLevel39 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter40 = new retrofit.RestAdapter(server30, provider31, executor32, executor33, requestInterceptor34, converter35, profiler36, errorHandler37, log38, logLevel39);
        retrofit.ErrorHandler errorHandler41 = restAdapter40.errorHandler;
        int int42 = restAdapter40.getLOG_CHUNK_SIZE();
        retrofit.Server server43 = restAdapter40.getserver();
        retrofit.client.Client.Provider provider44 = restAdapter40.clientProvider;
        retrofit.client.Client.Provider provider45 = restAdapter40.getclientProvider();
        java.lang.String str46 = restAdapter40.getIDLE_THREAD_NAME();
        retrofit.Server server47 = null;
        retrofit.client.Client.Provider provider48 = null;
        java.util.concurrent.Executor executor49 = null;
        java.util.concurrent.Executor executor50 = null;
        retrofit.RequestInterceptor requestInterceptor51 = null;
        retrofit.converter.Converter converter52 = null;
        retrofit.Profiler profiler53 = null;
        retrofit.ErrorHandler errorHandler54 = null;
        retrofit.RestAdapter.Log log55 = null;
        retrofit.RestAdapter.LogLevel logLevel56 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter57 = new retrofit.RestAdapter(server47, provider48, executor49, executor50, requestInterceptor51, converter52, profiler53, errorHandler54, log55, logLevel56);
        retrofit.RestAdapter.LogLevel logLevel58 = restAdapter57.logLevel;
        retrofit.ErrorHandler errorHandler59 = restAdapter57.geterrorHandler();
        java.util.concurrent.Executor executor60 = restAdapter57.getcallbackExecutor();
        retrofit.converter.Converter converter61 = restAdapter57.converter;
        retrofit.Server server62 = restAdapter57.getserver();
        retrofit.RestAdapter.LogLevel logLevel63 = restAdapter57.getLogLevel();
        restAdapter40.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder65 = builder25.setLogLevel(logLevel63);
        retrofit.RestAdapter.Builder builder66 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor67 = null;
        builder66.sethttpExecutor(executor67);
        retrofit.Profiler profiler69 = null;
        builder66.profiler = profiler69;
        retrofit.RestAdapter.LogLevel logLevel71 = builder66.logLevel;
        java.util.concurrent.Executor executor72 = null;
        builder66.sethttpExecutor(executor72);
        retrofit.RestAdapter.Builder builder74 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder76 = builder74.setServer("hi!");
        java.util.concurrent.Executor executor77 = null;
        builder76.callbackExecutor = executor77;
        retrofit.SerializedObjectSupporter serializedObjectSupporter79 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor80 = serializedObjectSupporter79.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder81 = builder76.setRequestInterceptor(requestInterceptor80);
        retrofit.RestAdapter.Builder builder82 = builder66.setRequestInterceptor(requestInterceptor80);
        java.util.concurrent.Executor executor83 = builder82.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter84 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor85 = serializedObjectSupporter84.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter86 = serializedObjectSupporter84.deserializeObjectConverter5();
        retrofit.converter.GsonConverter gsonConverter87 = serializedObjectSupporter84.deserializeObjectConverter7();
        retrofit.Server server88 = serializedObjectSupporter84.deserializeObjectServer1();
        retrofit.RestAdapter.Builder builder89 = builder82.setServer(server88);
        retrofit.RestAdapter.Builder builder90 = builder25.setServer(server88);
        retrofit.RestAdapter.Builder builder91 = builder24.setServer(server88);
        retrofit.RestAdapter.Builder builder92 = builder0.setServer(server88);
        retrofit.SerializedObjectSupporter serializedObjectSupporter93 = new retrofit.SerializedObjectSupporter();
        java.lang.String str94 = serializedObjectSupporter93.deserializeObjectString2();
        retrofit.converter.GsonConverter gsonConverter95 = serializedObjectSupporter93.deserializeObjectConverter2();
        retrofit.ErrorHandler errorHandler96 = serializedObjectSupporter93.deserializeObjectErrorHandler1();
        builder0.errorHandler = errorHandler96;
        retrofit.RestAdapter.Builder builder99 = builder0.setServer("POST");
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(executor4);
        org.junit.Assert.assertNull(executor5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(server11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNull(provider15);
        org.junit.Assert.assertNull(executor18);
        org.junit.Assert.assertNull(executor19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Retrofit-Idle" + "'", str21, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter22);
        org.junit.Assert.assertNotNull(gsonConverter23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(executor26);
        org.junit.Assert.assertNull(executor29);
        org.junit.Assert.assertTrue("'" + logLevel39 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel39.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4000 + "'", int42 == 4000);
        org.junit.Assert.assertNull(server43);
        org.junit.Assert.assertNull(provider44);
        org.junit.Assert.assertNull(provider45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Retrofit-Idle" + "'", str46, "Retrofit-Idle");
        org.junit.Assert.assertTrue("'" + logLevel56 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel56.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel58 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel58.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler59);
        org.junit.Assert.assertNull(executor60);
        org.junit.Assert.assertNull(converter61);
        org.junit.Assert.assertNull(server62);
        org.junit.Assert.assertTrue("'" + logLevel63 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel63.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + logLevel71 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel71.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(requestInterceptor80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(executor83);
        org.junit.Assert.assertNotNull(requestInterceptor85);
        org.junit.Assert.assertNotNull(gsonConverter86);
        org.junit.Assert.assertNotNull(gsonConverter87);
        org.junit.Assert.assertNotNull(server88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Retrofit-Idle" + "'", str94, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(gsonConverter95);
        org.junit.Assert.assertNotNull(errorHandler96);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        retrofit.SerializedObjectSupporter serializedObjectSupporter0 = new retrofit.SerializedObjectSupporter();
        retrofit.converter.GsonConverter gsonConverter1 = serializedObjectSupporter0.deserializeObjectConverter2();
        retrofit.client.Request request2 = serializedObjectSupporter0.deserializeObjectRequest7();
        retrofit.client.Request request3 = serializedObjectSupporter0.deserializeObjectRequest2();
        retrofit.client.Request request4 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.client.Request request5 = serializedObjectSupporter0.deserializeObjectRequest3();
        retrofit.converter.GsonConverter gsonConverter6 = serializedObjectSupporter0.deserializeObjectConverter5();
        org.junit.Assert.assertNotNull(gsonConverter1);
        org.junit.Assert.assertNotNull(request2);
        org.junit.Assert.assertNotNull(request3);
        org.junit.Assert.assertNotNull(request4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(gsonConverter6);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor1 = null;
        builder0.sethttpExecutor(executor1);
        retrofit.Profiler profiler3 = null;
        builder0.profiler = profiler3;
        retrofit.Server server5 = builder0.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter6 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor7 = serializedObjectSupporter6.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter8 = serializedObjectSupporter6.deserializeObjectConverter7();
        retrofit.client.Request request9 = serializedObjectSupporter6.deserializeObjectRequest1();
        builder0.serializedObjectSupporter = serializedObjectSupporter6;
        retrofit.RestAdapter.Builder builder11 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor12 = null;
        builder11.sethttpExecutor(executor12);
        retrofit.Profiler profiler14 = null;
        builder11.profiler = profiler14;
        retrofit.Server server16 = builder11.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter17 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor18 = serializedObjectSupporter17.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter19 = serializedObjectSupporter17.deserializeObjectConverter7();
        retrofit.client.Request request20 = serializedObjectSupporter17.deserializeObjectRequest1();
        builder11.serializedObjectSupporter = serializedObjectSupporter17;
        retrofit.RestAdapter.Builder builder22 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor23 = null;
        builder22.sethttpExecutor(executor23);
        retrofit.Profiler profiler25 = null;
        builder22.profiler = profiler25;
        retrofit.Server server27 = builder22.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter28 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor29 = serializedObjectSupporter28.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter30 = serializedObjectSupporter28.deserializeObjectConverter7();
        retrofit.client.Request request31 = serializedObjectSupporter28.deserializeObjectRequest1();
        builder22.serializedObjectSupporter = serializedObjectSupporter28;
        java.lang.String str33 = serializedObjectSupporter28.deserializeObjectString2();
        retrofit.ErrorHandler errorHandler34 = serializedObjectSupporter28.deserializeObjectErrorHandler1();
        retrofit.RestAdapter.Builder builder35 = builder11.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder36 = builder0.setErrorHandler(errorHandler34);
        retrofit.RestAdapter.Builder builder37 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder39 = builder37.setServer("hi!");
        retrofit.client.Client.Provider provider40 = builder37.clientProvider;
        retrofit.RestAdapter.Log log41 = null;
        builder37.log = log41;
        java.util.concurrent.Executor executor43 = builder37.getcallbackExecutor();
        retrofit.RestAdapter.Builder builder44 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor45 = null;
        builder44.sethttpExecutor(executor45);
        retrofit.client.Client.Provider provider47 = builder44.getclientProvider();
        retrofit.client.Client.Provider provider48 = builder44.getclientProvider();
        retrofit.Server server49 = builder44.server;
        retrofit.RestAdapter.Builder builder50 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor51 = null;
        builder50.sethttpExecutor(executor51);
        retrofit.Profiler profiler53 = null;
        builder50.profiler = profiler53;
        retrofit.Server server55 = builder50.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter56 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor57 = serializedObjectSupporter56.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter58 = serializedObjectSupporter56.deserializeObjectConverter7();
        retrofit.client.Request request59 = serializedObjectSupporter56.deserializeObjectRequest1();
        builder50.serializedObjectSupporter = serializedObjectSupporter56;
        retrofit.client.Request request61 = serializedObjectSupporter56.deserializeObjectRequest2();
        retrofit.mime.TypedString typedString62 = serializedObjectSupporter56.deserializeObjectTypedOutput2();
        builder44.serializedObjectSupporter = serializedObjectSupporter56;
        java.util.concurrent.Executor executor64 = builder44.httpExecutor;
        retrofit.SerializedObjectSupporter serializedObjectSupporter65 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request66 = serializedObjectSupporter65.deserializeObjectRequest6();
        retrofit.ErrorHandler errorHandler67 = serializedObjectSupporter65.deserializeObjectErrorHandler1();
        retrofit.mime.TypedString typedString68 = serializedObjectSupporter65.deserializeObjectTypedOutput2();
        retrofit.ErrorHandler errorHandler69 = serializedObjectSupporter65.deserializeObjectErrorHandler1();
        builder44.errorHandler = errorHandler69;
        builder37.errorHandler = errorHandler69;
        retrofit.RestAdapter.Builder builder72 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor73 = null;
        builder72.sethttpExecutor(executor73);
        retrofit.Profiler profiler75 = null;
        builder72.profiler = profiler75;
        retrofit.RestAdapter.LogLevel logLevel77 = builder72.logLevel;
        java.util.concurrent.Executor executor78 = null;
        builder72.sethttpExecutor(executor78);
        retrofit.client.Client.Provider provider80 = builder72.clientProvider;
        java.util.concurrent.Executor executor81 = builder72.callbackExecutor;
        retrofit.RestAdapter.Builder builder82 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder84 = builder82.setServer("hi!");
        java.util.concurrent.Executor executor85 = null;
        builder84.callbackExecutor = executor85;
        retrofit.RestAdapter restAdapter87 = builder84.build();
        retrofit.RestAdapter.Log log88 = restAdapter87.log;
        java.util.concurrent.Executor executor89 = restAdapter87.gethttpExecutor();
        retrofit.client.Client.Provider provider90 = restAdapter87.getclientProvider();
        builder72.setclientProvider(provider90);
        builder37.clientProvider = provider90;
        retrofit.RestAdapter.Builder builder93 = builder36.setClient(provider90);
        retrofit.RestAdapter.LogLevel logLevel94 = builder36.logLevel;
        org.junit.Assert.assertNull(server5);
        org.junit.Assert.assertNotNull(requestInterceptor7);
        org.junit.Assert.assertNotNull(gsonConverter8);
        org.junit.Assert.assertNotNull(request9);
        org.junit.Assert.assertNull(server16);
        org.junit.Assert.assertNotNull(requestInterceptor18);
        org.junit.Assert.assertNotNull(gsonConverter19);
        org.junit.Assert.assertNotNull(request20);
        org.junit.Assert.assertNull(server27);
        org.junit.Assert.assertNotNull(requestInterceptor29);
        org.junit.Assert.assertNotNull(gsonConverter30);
        org.junit.Assert.assertNotNull(request31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Retrofit-Idle" + "'", str33, "Retrofit-Idle");
        org.junit.Assert.assertNotNull(errorHandler34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(provider40);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertNull(provider47);
        org.junit.Assert.assertNull(provider48);
        org.junit.Assert.assertNull(server49);
        org.junit.Assert.assertNull(server55);
        org.junit.Assert.assertNotNull(requestInterceptor57);
        org.junit.Assert.assertNotNull(gsonConverter58);
        org.junit.Assert.assertNotNull(request59);
        org.junit.Assert.assertNotNull(request61);
        org.junit.Assert.assertNotNull(typedString62);
        org.junit.Assert.assertNull(executor64);
        org.junit.Assert.assertNotNull(request66);
        org.junit.Assert.assertNotNull(errorHandler67);
        org.junit.Assert.assertNotNull(typedString68);
        org.junit.Assert.assertNotNull(errorHandler69);
        org.junit.Assert.assertTrue("'" + logLevel77 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel77.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNull(provider80);
        org.junit.Assert.assertNull(executor81);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(restAdapter87);
        org.junit.Assert.assertNotNull(log88);
        org.junit.Assert.assertNotNull(executor89);
        org.junit.Assert.assertNotNull(provider90);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + logLevel94 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel94.equals(retrofit.RestAdapter.LogLevel.NONE));
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        retrofit.Server server0 = null;
        retrofit.client.Client.Provider provider1 = null;
        java.util.concurrent.Executor executor2 = null;
        java.util.concurrent.Executor executor3 = null;
        retrofit.RequestInterceptor requestInterceptor4 = null;
        retrofit.converter.Converter converter5 = null;
        retrofit.Profiler profiler6 = null;
        retrofit.ErrorHandler errorHandler7 = null;
        retrofit.RestAdapter.Log log8 = null;
        retrofit.RestAdapter.LogLevel logLevel9 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter10 = new retrofit.RestAdapter(server0, provider1, executor2, executor3, requestInterceptor4, converter5, profiler6, errorHandler7, log8, logLevel9);
        retrofit.ErrorHandler errorHandler11 = restAdapter10.errorHandler;
        retrofit.ErrorHandler errorHandler12 = restAdapter10.errorHandler;
        retrofit.RestAdapter.RestHandler restHandler13 = restAdapter10.new RestHandler();
        retrofit.SerializedObjectSupporter serializedObjectSupporter14 = new retrofit.SerializedObjectSupporter();
        retrofit.client.Request request15 = serializedObjectSupporter14.deserializeObjectRequest6();
        retrofit.converter.GsonConverter gsonConverter16 = serializedObjectSupporter14.deserializeObjectConverter8();
        retrofit.converter.GsonConverter gsonConverter17 = serializedObjectSupporter14.deserializeObjectConverter1();
        restHandler13.serializedObjectSupporter = serializedObjectSupporter14;
        retrofit.SerializedObjectSupporter serializedObjectSupporter19 = restHandler13.serializedObjectSupporter;
        retrofit.RestAdapter.Builder builder20 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor21 = null;
        builder20.sethttpExecutor(executor21);
        retrofit.Profiler profiler23 = null;
        builder20.profiler = profiler23;
        retrofit.Server server25 = builder20.server;
        retrofit.RestAdapter.Builder builder27 = builder20.setServer("Retrofit-Idle");
        retrofit.client.Client.Provider provider28 = null;
        builder27.clientProvider = provider28;
        java.lang.reflect.Method method30 = null;
        retrofit.Server server31 = null;
        retrofit.client.Client.Provider provider32 = null;
        java.util.concurrent.Executor executor33 = null;
        java.util.concurrent.Executor executor34 = null;
        retrofit.RequestInterceptor requestInterceptor35 = null;
        retrofit.converter.Converter converter36 = null;
        retrofit.Profiler profiler37 = null;
        retrofit.ErrorHandler errorHandler38 = null;
        retrofit.RestAdapter.Log log39 = null;
        retrofit.RestAdapter.LogLevel logLevel40 = retrofit.RestAdapter.LogLevel.HEADERS;
        retrofit.RestAdapter restAdapter41 = new retrofit.RestAdapter(server31, provider32, executor33, executor34, requestInterceptor35, converter36, profiler37, errorHandler38, log39, logLevel40);
        retrofit.ErrorHandler errorHandler42 = restAdapter41.errorHandler;
        java.util.concurrent.Executor executor43 = restAdapter41.httpExecutor;
        retrofit.RestAdapter.LogLevel logLevel44 = restAdapter41.getLogLevel();
        retrofit.RestAdapter.Builder builder45 = new retrofit.RestAdapter.Builder();
        java.util.concurrent.Executor executor46 = null;
        builder45.sethttpExecutor(executor46);
        retrofit.Profiler profiler48 = null;
        builder45.profiler = profiler48;
        retrofit.RestAdapter.LogLevel logLevel50 = builder45.logLevel;
        java.util.concurrent.Executor executor51 = null;
        builder45.sethttpExecutor(executor51);
        retrofit.RestAdapter.Builder builder53 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder55 = builder53.setServer("hi!");
        java.util.concurrent.Executor executor56 = null;
        builder55.callbackExecutor = executor56;
        retrofit.SerializedObjectSupporter serializedObjectSupporter58 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor59 = serializedObjectSupporter58.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder60 = builder55.setRequestInterceptor(requestInterceptor59);
        retrofit.RestAdapter.Builder builder61 = builder45.setRequestInterceptor(requestInterceptor59);
        java.util.concurrent.Executor executor62 = builder61.httpExecutor;
        retrofit.RestAdapter.Builder builder63 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder65 = builder63.setServer("hi!");
        retrofit.client.Client.Provider provider66 = builder63.clientProvider;
        retrofit.RequestInterceptor requestInterceptor67 = builder63.requestInterceptor;
        retrofit.RestAdapter.Builder builder68 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder70 = builder68.setServer("hi!");
        retrofit.client.Client.Provider provider71 = builder68.clientProvider;
        java.util.concurrent.Executor executor72 = null;
        builder68.setcallbackExecutor(executor72);
        retrofit.RestAdapter.Log log74 = retrofit.RestAdapter.Log.NONE;
        retrofit.RestAdapter.Builder builder75 = builder68.setLog(log74);
        retrofit.RestAdapter.Builder builder76 = builder63.setLog(log74);
        builder61.log = log74;
        java.lang.Object[] objArray78 = new java.lang.Object[] { restAdapter41, log74 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj79 = restHandler13.invoke((java.lang.Object) builder27, method30, objArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + logLevel9 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel9.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler11);
        org.junit.Assert.assertNull(errorHandler12);
        org.junit.Assert.assertNotNull(request15);
        org.junit.Assert.assertNotNull(gsonConverter16);
        org.junit.Assert.assertNotNull(gsonConverter17);
        org.junit.Assert.assertNotNull(serializedObjectSupporter19);
        org.junit.Assert.assertNull(server25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + logLevel40 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel40.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertNull(errorHandler42);
        org.junit.Assert.assertNull(executor43);
        org.junit.Assert.assertTrue("'" + logLevel44 + "' != '" + retrofit.RestAdapter.LogLevel.HEADERS + "'", logLevel44.equals(retrofit.RestAdapter.LogLevel.HEADERS));
        org.junit.Assert.assertTrue("'" + logLevel50 + "' != '" + retrofit.RestAdapter.LogLevel.NONE + "'", logLevel50.equals(retrofit.RestAdapter.LogLevel.NONE));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(requestInterceptor59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNull(executor62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(provider66);
        org.junit.Assert.assertNull(requestInterceptor67);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNull(provider71);
        org.junit.Assert.assertNotNull(log74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(objArray78);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        retrofit.SerializedObjectSupporter serializedObjectSupporter2 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor3 = serializedObjectSupporter2.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter4 = serializedObjectSupporter2.deserializeObjectConverter7();
        retrofit.client.Request request5 = serializedObjectSupporter2.deserializeObjectRequest2();
        java.util.List<retrofit.client.Header> headerList6 = request5.getHeaders();
        retrofit.SerializedObjectSupporter serializedObjectSupporter7 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor8 = serializedObjectSupporter7.deserializeObjectRequestInterceptor1();
        retrofit.converter.GsonConverter gsonConverter9 = serializedObjectSupporter7.deserializeObjectConverter5();
        retrofit.client.Request request10 = serializedObjectSupporter7.deserializeObjectRequest8();
        java.lang.String str11 = serializedObjectSupporter7.deserializeObjectString4();
        retrofit.converter.GsonConverter gsonConverter12 = serializedObjectSupporter7.deserializeObjectConverter4();
        retrofit.client.Request request13 = serializedObjectSupporter7.deserializeObjectRequest3();
        retrofit.mime.TypedOutput typedOutput14 = request13.getBody();
        retrofit.client.Request request15 = new retrofit.client.Request("POST", "POST", headerList6, typedOutput14);
        org.junit.Assert.assertNotNull(requestInterceptor3);
        org.junit.Assert.assertNotNull(gsonConverter4);
        org.junit.Assert.assertNotNull(request5);
        org.junit.Assert.assertNotNull(headerList6);
        org.junit.Assert.assertNotNull(requestInterceptor8);
        org.junit.Assert.assertNotNull(gsonConverter9);
        org.junit.Assert.assertNotNull(request10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "http://example.com/" + "'", str11, "http://example.com/");
        org.junit.Assert.assertNotNull(gsonConverter12);
        org.junit.Assert.assertNotNull(request13);
        org.junit.Assert.assertNotNull(typedOutput14);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        retrofit.RestAdapter.Builder builder0 = new retrofit.RestAdapter.Builder();
        retrofit.RestAdapter.Builder builder2 = builder0.setServer("hi!");
        java.util.concurrent.Executor executor3 = null;
        builder2.callbackExecutor = executor3;
        retrofit.SerializedObjectSupporter serializedObjectSupporter5 = new retrofit.SerializedObjectSupporter();
        retrofit.RequestInterceptor requestInterceptor6 = serializedObjectSupporter5.deserializeObjectRequestInterceptor1();
        retrofit.RestAdapter.Builder builder7 = builder2.setRequestInterceptor(requestInterceptor6);
        retrofit.Server server8 = builder7.server;
        retrofit.SerializedObjectSupporter serializedObjectSupporter9 = new retrofit.SerializedObjectSupporter();
        retrofit.ErrorHandler errorHandler10 = serializedObjectSupporter9.deserializeObjectErrorHandler1();
        builder7.serializedObjectSupporter = serializedObjectSupporter9;
        retrofit.client.Request request12 = serializedObjectSupporter9.deserializeObjectRequest5();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(requestInterceptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(server8);
        org.junit.Assert.assertNotNull(errorHandler10);
        org.junit.Assert.assertNotNull(request12);
    }
}

